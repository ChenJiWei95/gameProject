// Copyright (c) 2013-2016 CoolGames

/******************************************************************************
 * Spine Runtimes Software License
 * Version 2.3
 * 
 * Copyright (c) 2013-2015, Esoteric Software
 * All rights reserved.
 * 
 * You are granted a perpetual, non-exclusive, non-sublicensable and
 * non-transferable license to use, install, execute and perform the Spine
 * Runtimes Software (the "Software") and derivative works solely for personal
 * or internal use. Without the written permission of Esoteric Software (see
 * Section 2 of the Spine Software License Agreement), you may not (a) modify,
 * translate, adapt or otherwise create derivative works, improvements of the
 * Software or develop new applications using the Software or (b) remove,
 * delete, alter or obscure any trademarks or any copyright, trademark, patent
 * or other intellectual property or proprietary rights notices on or in the
 * Software, including any copy thereof. Redistributions in binary or source
 * form must include this license and terms.
 * 
 * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

var spine = {
	radDeg: 180 / Math.PI,
	degRad: Math.PI / 180,
	temp: [],
    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,
    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array
};

spine.BoneData = function (name, parent) {
	this.name = name;
	this.parent = parent;
};
spine.BoneData.prototype = {
	length: 0,
	x: 0, y: 0,
	rotation: 0,
	scaleX: 1, scaleY: 1,
	inheritScale: true,
	inheritRotation: true,
	flipX: false, flipY: false
};

spine.BlendMode = {
	normal: 0,
	additive: 1,
	multiply: 2,
	screen: 3
};

spine.SlotData = function (name, boneData) {
	this.name = name;
	this.boneData = boneData;
};
spine.SlotData.prototype = {
	r: 1, g: 1, b: 1, a: 1,
	attachmentName: null,
	blendMode: spine.BlendMode.normal
};

spine.IkConstraintData = function (name) {
	this.name = name;
	this.bones = [];
};
spine.IkConstraintData.prototype = {
	target: null,
	bendDirection: 1,
	mix: 1
};

spine.Bone = function (boneData, skeleton, parent) {
	this.data = boneData;
	this.skeleton = skeleton;
	this.parent = parent;
	this.setToSetupPose();
};
spine.Bone.yDown = false;
spine.Bone.prototype = {
	x: 0, y: 0,
	rotation: 0, rotationIK: 0,
	scaleX: 1, scaleY: 1,
	flipX: false, flipY: false,
	m00: 0, m01: 0, worldX: 0, // a b x
	m10: 0, m11: 0, worldY: 0, // c d y
	worldRotation: 0,
	worldScaleX: 1, worldScaleY: 1,
	worldFlipX: false, worldFlipY: false,
	updateWorldTransform: function () {
		var parent = this.parent;
		if (parent) {
			this.worldX = this.x * parent.m00 + this.y * parent.m01 + parent.worldX;
			this.worldY = this.x * parent.m10 + this.y * parent.m11 + parent.worldY;
			if (this.data.inheritScale) {
				this.worldScaleX = parent.worldScaleX * this.scaleX;
				this.worldScaleY = parent.worldScaleY * this.scaleY;
			} else {
				this.worldScaleX = this.scaleX;
				this.worldScaleY = this.scaleY;
			}
			this.worldRotation = this.data.inheritRotation ? (parent.worldRotation + this.rotationIK) : this.rotationIK;
			this.worldFlipX = parent.worldFlipX != this.flipX;
			this.worldFlipY = parent.worldFlipY != this.flipY;
		} else {
			var skeletonFlipX = this.skeleton.flipX, skeletonFlipY = this.skeleton.flipY;
			this.worldX = skeletonFlipX ? -this.x : this.x;
			this.worldY = (skeletonFlipY != spine.Bone.yDown) ? -this.y : this.y;
			this.worldScaleX = this.scaleX;
			this.worldScaleY = this.scaleY;
			this.worldRotation = this.rotationIK;
			this.worldFlipX = skeletonFlipX != this.flipX;
			this.worldFlipY = skeletonFlipY != this.flipY;
		}
		var radians = this.worldRotation * spine.degRad;
		var cos = Math.cos(radians);
		var sin = Math.sin(radians);
		if (this.worldFlipX) {
			this.m00 = -cos * this.worldScaleX;
			this.m01 = sin * this.worldScaleY;
		} else {
			this.m00 = cos * this.worldScaleX;
			this.m01 = -sin * this.worldScaleY;
		}
		if (this.worldFlipY != spine.Bone.yDown) {
			this.m10 = -sin * this.worldScaleX;
			this.m11 = -cos * this.worldScaleY;
		} else {
			this.m10 = sin * this.worldScaleX;
			this.m11 = cos * this.worldScaleY;
		}
	},
	setToSetupPose: function () {
		var data = this.data;
		this.x = data.x;
		this.y = data.y;
		this.rotation = data.rotation;
		this.rotationIK = this.rotation;
		this.scaleX = data.scaleX;
		this.scaleY = data.scaleY;
		this.flipX = data.flipX;
		this.flipY = data.flipY;
	},
	worldToLocal: function (world) {
		var dx = world[0] - this.worldX, dy = world[1] - this.worldY;
		var m00 = this.m00, m10 = this.m10, m01 = this.m01, m11 = this.m11;
		if (this.worldFlipX != (this.worldFlipY != spine.Bone.yDown)) {
			m00 = -m00;
			m11 = -m11;
		}
		var invDet = 1 / (m00 * m11 - m01 * m10);
		world[0] = dx * m00 * invDet - dy * m01 * invDet;
		world[1] = dy * m11 * invDet - dx * m10 * invDet;
	},
	localToWorld: function (local) {
		var localX = local[0], localY = local[1];
		local[0] = localX * this.m00 + localY * this.m01 + this.worldX;
		local[1] = localX * this.m10 + localY * this.m11 + this.worldY;
	}
};

spine.Slot = function (slotData, bone) {
	this.data = slotData;
	this.bone = bone;
	this.setToSetupPose();
};
spine.Slot.prototype = {
	r: 1, g: 1, b: 1, a: 1,
	_attachmentTime: 0,
	attachment: null,
	attachmentVertices: [],
	setAttachment: function (attachment) {
		if (this.attachment == attachment) return;
		this.attachment = attachment;
		this._attachmentTime = this.bone.skeleton.time;
		this.attachmentVertices.length = 0;
	},
	setAttachmentTime: function (time) {
		this._attachmentTime = this.bone.skeleton.time - time;
	},
	getAttachmentTime: function () {
		return this.bone.skeleton.time - this._attachmentTime;
	},
	setToSetupPose: function () {
		var data = this.data;
		this.r = data.r;
		this.g = data.g;
		this.b = data.b;
		this.a = data.a;

		if (!data.attachmentName)
			this.setAttachment(null);
		else {
			var slotDatas = this.bone.skeleton.data.slots;
			for (var i = 0, n = slotDatas.length; i < n; i++) {
				if (slotDatas[i] == data) {
					this.attachment = null;
					this.setAttachment(this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));
					break;
				}
			}
		}
	}
};

spine.IkConstraint = function (data, skeleton) {
	this.data = data;
	this.mix = data.mix;
	this.bendDirection = data.bendDirection;

	this.bones = [];
	for (var i = 0, n = data.bones.length; i < n; i++)
		this.bones.push(skeleton.findBone(data.bones[i].name));
	this.target = skeleton.findBone(data.target.name);
};
spine.IkConstraint.prototype = {
	apply: function () {
		var target = this.target;
		var bones = this.bones;
		switch (bones.length) {
		case 1:
			spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);
			break;
		case 2:
			spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);
			break;
		}
	}
};
/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world
 * coordinate system. */
spine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha) {
	var parentRotation = (!bone.data.inheritRotation || !bone.parent) ? 0 : bone.parent.worldRotation;
	var rotation = bone.rotation;
	var rotationIK = Math.atan2(targetY - bone.worldY, targetX - bone.worldX) * spine.radDeg;
	if (bone.worldFlipX != (bone.worldFlipY != spine.Bone.yDown)) rotationIK = -rotationIK;
	rotationIK -= parentRotation;
	bone.rotationIK = rotation + (rotationIK - rotation) * alpha;
};
/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The
 * target is specified in the world coordinate system.
 * @param child Any descendant bone of the parent. */
spine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDirection, alpha) {
	var childRotation = child.rotation, parentRotation = parent.rotation;
	if (!alpha) {
		child.rotationIK = childRotation;
		parent.rotationIK = parentRotation;
		return;
	}
	var positionX, positionY, tempPosition = spine.temp;
	var parentParent = parent.parent;
	if (parentParent) {
		tempPosition[0] = targetX;
		tempPosition[1] = targetY;
		parentParent.worldToLocal(tempPosition);
		targetX = (tempPosition[0] - parent.x) * parentParent.worldScaleX;
		targetY = (tempPosition[1] - parent.y) * parentParent.worldScaleY;
	} else {
		targetX -= parent.x;
		targetY -= parent.y;
	}
	if (child.parent == parent) {
		positionX = child.x;
		positionY = child.y;
	} else {
		tempPosition[0] = child.x;
		tempPosition[1] = child.y;
		child.parent.localToWorld(tempPosition);
		parent.worldToLocal(tempPosition);
		positionX = tempPosition[0];
		positionY = tempPosition[1];
	}
	var childX = positionX * parent.worldScaleX, childY = positionY * parent.worldScaleY;
	var offset = Math.atan2(childY, childX);
	var len1 = Math.sqrt(childX * childX + childY * childY), len2 = child.data.length * child.worldScaleX;
	// Based on code by Ryan Juckett with permission: Copyright (c) 2008-2009 Ryan Juckett, http://www.ryanjuckett.com/
	var cosDenom = 2 * len1 * len2;
	if (cosDenom < 0.0001) {
		child.rotationIK = childRotation + (Math.atan2(targetY, targetX) * spine.radDeg - parentRotation - childRotation) * alpha;
		return;
	}
	var cos = (targetX * targetX + targetY * targetY - len1 * len1 - len2 * len2) / cosDenom;
	if (cos < -1)
		cos = -1;
	else if (cos > 1)
		cos = 1;
	var childAngle = Math.acos(cos) * bendDirection;
	var adjacent = len1 + len2 * cos, opposite = len2 * Math.sin(childAngle);
	var parentAngle = Math.atan2(targetY * adjacent - targetX * opposite, targetX * adjacent + targetY * opposite);
	var rotation = (parentAngle - offset) * spine.radDeg - parentRotation;
	if (rotation > 180)
		rotation -= 360;
	else if (rotation < -180) //
		rotation += 360;
	parent.rotationIK = parentRotation + rotation * alpha;
	rotation = (childAngle + offset) * spine.radDeg - childRotation;
	if (rotation > 180)
		rotation -= 360;
	else if (rotation < -180) //
		rotation += 360;
	child.rotationIK = childRotation + (rotation + parent.worldRotation - child.parent.worldRotation) * alpha;
};

spine.Skin = function (name) {
	this.name = name;
	this.attachments = {};
};
spine.Skin.prototype = {
	addAttachment: function (slotIndex, name, attachment) {
		this.attachments[slotIndex + ":" + name] = attachment;
	},
	getAttachment: function (slotIndex, name) {
		return this.attachments[slotIndex + ":" + name];
	},
	_attachAll: function (skeleton, oldSkin) {
		for (var key in oldSkin.attachments) {
			var colon = key.indexOf(":");
			var slotIndex = parseInt(key.substring(0, colon));
			var name = key.substring(colon + 1);
			var slot = skeleton.slots[slotIndex];
			if (slot.attachment && slot.attachment.name == name) {
				var attachment = this.getAttachment(slotIndex, name);
				if (attachment) slot.setAttachment(attachment);
			}
		}
	}
};

spine.Animation = function (name, timelines, duration) {
	this.name = name;
	this.timelines = timelines;
	this.duration = duration;
};
spine.Animation.prototype = {
	apply: function (skeleton, lastTime, time, loop, events) {
		if (loop && this.duration != 0) {
			time %= this.duration;
			lastTime %= this.duration;
		}
		var timelines = this.timelines;
		for (var i = 0, n = timelines.length; i < n; i++)
			timelines[i].apply(skeleton, lastTime, time, events, 1);
	},
	mix: function (skeleton, lastTime, time, loop, events, alpha) {
		if (loop && this.duration != 0) {
			time %= this.duration;
			lastTime %= this.duration;
		}
		var timelines = this.timelines;
		for (var i = 0, n = timelines.length; i < n; i++)
			timelines[i].apply(skeleton, lastTime, time, events, alpha);
	}
};
spine.Animation.binarySearch = function (values, target, step) {
	var low = 0;
	var high = Math.floor(values.length / step) - 2;
	if (!high) return step;
	var current = high >>> 1;
	while (true) {
		if (values[(current + 1) * step] <= target)
			low = current + 1;
		else
			high = current;
		if (low == high) return (low + 1) * step;
		current = (low + high) >>> 1;
	}
};
spine.Animation.binarySearch1 = function (values, target) {
	var low = 0;
	var high = values.length - 2;
	if (!high) return 1;
	var current = high >>> 1;
	while (true) {
		if (values[current + 1] <= target)
			low = current + 1;
		else
			high = current;
		if (low == high) return low + 1;
		current = (low + high) >>> 1;
	}
};
spine.Animation.linearSearch = function (values, target, step) {
	for (var i = 0, last = values.length - step; i <= last; i += step)
		if (values[i] > target) return i;
	return -1;
};

spine.Curves = function (frameCount) {
	this.curves = []; // type, x, y, ...
	//this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;
};
spine.Curves.prototype = {
	setLinear: function (frameIndex) {
		this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;
	},
	setStepped: function (frameIndex) {
		this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;
	},
	/** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.
	 * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of
	 * the difference between the keyframe's values. */
	setCurve: function (frameIndex, cx1, cy1, cx2, cy2) {
		var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;
		var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;
		var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;
		var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;
		var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;
		var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;

		var i = frameIndex * 19/*BEZIER_SIZE*/;
		var curves = this.curves;
		curves[i++] = 2/*BEZIER*/;
		
		var x = dfx, y = dfy;
		for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2) {
			curves[i] = x;
			curves[i + 1] = y;
			dfx += ddfx;
			dfy += ddfy;
			ddfx += dddfx;
			ddfy += dddfy;
			x += dfx;
			y += dfy;
		}
	},
	getCurvePercent: function (frameIndex, percent) {
		percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);
		var curves = this.curves;
		var i = frameIndex * 19/*BEZIER_SIZE*/;
		var type = curves[i];
		if (type === 0/*LINEAR*/) return percent;
		if (type == 1/*STEPPED*/) return 0;
		i++;
		var x = 0;
		for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2) {
			x = curves[i];
			if (x >= percent) {
				var prevX, prevY;
				if (i == start) {
					prevX = 0;
					prevY = 0;
				} else {
					prevX = curves[i - 2];
					prevY = curves[i - 1];
				}
				return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);
			}
		}
		var y = curves[i - 1];
		return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.
	}
};

spine.RotateTimeline = function (frameCount) {
	this.curves = new spine.Curves(frameCount);
	this.frames = []; // time, angle, ...
	this.frames.length = frameCount * 2;
};
spine.RotateTimeline.prototype = {
	boneIndex: 0,
	getFrameCount: function () {
		return this.frames.length / 2;
	},
	setFrame: function (frameIndex, time, angle) {
		frameIndex *= 2;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = angle;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var frames = this.frames;
		if (time < frames[0]) return; // Time is before first frame.

		var bone = skeleton.bones[this.boneIndex];

		if (time >= frames[frames.length - 2]) { // Time is after last frame.
			var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;
			while (amount > 180)
				amount -= 360;
			while (amount < -180)
				amount += 360;
			bone.rotation += amount * alpha;
			return;
		}

		// Interpolate between the previous frame and the current frame.
		var frameIndex = spine.Animation.binarySearch(frames, time, 2);
		var prevFrameValue = frames[frameIndex - 1];
		var frameTime = frames[frameIndex];
		var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);
		percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);

		var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;
		while (amount > 180)
			amount -= 360;
		while (amount < -180)
			amount += 360;
		amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;
		while (amount > 180)
			amount -= 360;
		while (amount < -180)
			amount += 360;
		bone.rotation += amount * alpha;
	}
};

spine.TranslateTimeline = function (frameCount) {
	this.curves = new spine.Curves(frameCount);
	this.frames = []; // time, x, y, ...
	this.frames.length = frameCount * 3;
};
spine.TranslateTimeline.prototype = {
	boneIndex: 0,
	getFrameCount: function () {
		return this.frames.length / 3;
	},
	setFrame: function (frameIndex, time, x, y) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = x;
		this.frames[frameIndex + 2] = y;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var frames = this.frames;
		if (time < frames[0]) return; // Time is before first frame.

		var bone = skeleton.bones[this.boneIndex];

		if (time >= frames[frames.length - 3]) { // Time is after last frame.
			bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;
			bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;
			return;
		}

		// Interpolate between the previous frame and the current frame.
		var frameIndex = spine.Animation.binarySearch(frames, time, 3);
		var prevFrameX = frames[frameIndex - 2];
		var prevFrameY = frames[frameIndex - 1];
		var frameTime = frames[frameIndex];
		var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);
		percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);

		bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;
		bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;
	}
};

spine.ScaleTimeline = function (frameCount) {
	this.curves = new spine.Curves(frameCount);
	this.frames = []; // time, x, y, ...
	this.frames.length = frameCount * 3;
};
spine.ScaleTimeline.prototype = {
	boneIndex: 0,
	getFrameCount: function () {
		return this.frames.length / 3;
	},
	setFrame: function (frameIndex, time, x, y) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = x;
		this.frames[frameIndex + 2] = y;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var frames = this.frames;
		if (time < frames[0]) return; // Time is before first frame.

		var bone = skeleton.bones[this.boneIndex];

		if (time >= frames[frames.length - 3]) { // Time is after last frame.
			bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;
			bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;
			return;
		}

		// Interpolate between the previous frame and the current frame.
		var frameIndex = spine.Animation.binarySearch(frames, time, 3);
		var prevFrameX = frames[frameIndex - 2];
		var prevFrameY = frames[frameIndex - 1];
		var frameTime = frames[frameIndex];
		var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);
		percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);

		bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;
		bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;
	}
};

spine.ColorTimeline = function (frameCount) {
	this.curves = new spine.Curves(frameCount);
	this.frames = []; // time, r, g, b, a, ...
	this.frames.length = frameCount * 5;
};
spine.ColorTimeline.prototype = {
	slotIndex: 0,
	getFrameCount: function () {
		return this.frames.length / 5;
	},
	setFrame: function (frameIndex, time, r, g, b, a) {
		frameIndex *= 5;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = r;
		this.frames[frameIndex + 2] = g;
		this.frames[frameIndex + 3] = b;
		this.frames[frameIndex + 4] = a;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var frames = this.frames;
		if (time < frames[0]) return; // Time is before first frame.

		var r, g, b, a;
		if (time >= frames[frames.length - 5]) {
			// Time is after last frame.
			var i = frames.length - 1;
			r = frames[i - 3];
			g = frames[i - 2];
			b = frames[i - 1];
			a = frames[i];
		} else {
			// Interpolate between the previous frame and the current frame.
			var frameIndex = spine.Animation.binarySearch(frames, time, 5);
			var prevFrameR = frames[frameIndex - 4];
			var prevFrameG = frames[frameIndex - 3];
			var prevFrameB = frames[frameIndex - 2];
			var prevFrameA = frames[frameIndex - 1];
			var frameTime = frames[frameIndex];
			var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);
			percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);

			r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;
			g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;
			b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;
			a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;
		}
		var slot = skeleton.slots[this.slotIndex];
		if (alpha < 1) {
			slot.r += (r - slot.r) * alpha;
			slot.g += (g - slot.g) * alpha;
			slot.b += (b - slot.b) * alpha;
			slot.a += (a - slot.a) * alpha;
		} else {
			slot.r = r;
			slot.g = g;
			slot.b = b;
			slot.a = a;
		}
	}
};

spine.AttachmentTimeline = function (frameCount) {
	this.curves = new spine.Curves(frameCount);
	this.frames = []; // time, ...
	this.frames.length = frameCount;
	this.attachmentNames = [];
	this.attachmentNames.length = frameCount;
};
spine.AttachmentTimeline.prototype = {
	slotIndex: 0,
	getFrameCount: function () {
		return this.frames.length;
	},
	setFrame: function (frameIndex, time, attachmentName) {
		this.frames[frameIndex] = time;
		this.attachmentNames[frameIndex] = attachmentName;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var frames = this.frames;
		if (time < frames[0]) {
			if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);
			return;
		} else if (lastTime > time) //
			lastTime = -1;

		var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;
		if (frames[frameIndex] < lastTime) return;

		var attachmentName = this.attachmentNames[frameIndex];
		skeleton.slots[this.slotIndex].setAttachment(
			!attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));
	}
};

spine.EventTimeline = function (frameCount) {
	this.frames = []; // time, ...
	this.frames.length = frameCount;
	this.events = [];
	this.events.length = frameCount;
};
spine.EventTimeline.prototype = {
	getFrameCount: function () {
		return this.frames.length;
	},
	setFrame: function (frameIndex, time, event) {
		this.frames[frameIndex] = time;
		this.events[frameIndex] = event;
	},
	/** Fires events for frames > lastTime and <= time. */
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		if (!firedEvents) return;

		var frames = this.frames;
		var frameCount = frames.length;

		if (lastTime > time) { // Fire events after last time for looped animations.
			this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);
			lastTime = -1;
		} else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.
			return;
		if (time < frames[0]) return; // Time is before first frame.

		var frameIndex;
		if (lastTime < frames[0])
			frameIndex = 0;
		else {
			frameIndex = spine.Animation.binarySearch1(frames, lastTime);
			var frame = frames[frameIndex];
			while (frameIndex > 0) { // Fire multiple events with the same frame.
				if (frames[frameIndex - 1] != frame) break;
				frameIndex--;
			}
		}
		var events = this.events;
		for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)
			firedEvents.push(events[frameIndex]);
	}
};

spine.DrawOrderTimeline = function (frameCount) {
	this.frames = []; // time, ...
	this.frames.length = frameCount;
	this.drawOrders = [];
	this.drawOrders.length = frameCount;
};
spine.DrawOrderTimeline.prototype = {
	getFrameCount: function () {
		return this.frames.length;
	},
	setFrame: function (frameIndex, time, drawOrder) {
		this.frames[frameIndex] = time;
		this.drawOrders[frameIndex] = drawOrder;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var frames = this.frames;
		if (time < frames[0]) return; // Time is before first frame.

		var frameIndex;
		if (time >= frames[frames.length - 1]) // Time is after last frame.
			frameIndex = frames.length - 1;
		else
			frameIndex = spine.Animation.binarySearch1(frames, time) - 1;

		var drawOrder = skeleton.drawOrder;
		var slots = skeleton.slots;
		var drawOrderToSetupIndex = this.drawOrders[frameIndex];
		if (!drawOrderToSetupIndex) {
			for (var i = 0, n = slots.length; i < n; i++)
				drawOrder[i] = slots[i];
		} else {
			for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)
				drawOrder[i] = skeleton.slots[drawOrderToSetupIndex[i]];
		}

	}
};

spine.FfdTimeline = function (frameCount) {
	this.curves = new spine.Curves(frameCount);
	this.frames = [];
	this.frames.length = frameCount;
	this.frameVertices = [];
	this.frameVertices.length = frameCount;
};
spine.FfdTimeline.prototype = {
	slotIndex: 0,
	attachment: 0,
	getFrameCount: function () {
		return this.frames.length;
	},
	setFrame: function (frameIndex, time, vertices) {
		this.frames[frameIndex] = time;
		this.frameVertices[frameIndex] = vertices;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var slot = skeleton.slots[this.slotIndex];
		if (slot.attachment != this.attachment) return;

		var frames = this.frames;
		if (time < frames[0]) return; // Time is before first frame.

		var frameVertices = this.frameVertices;
		var vertexCount = frameVertices[0].length;

		var vertices = slot.attachmentVertices;
		if (vertices.length != vertexCount) alpha = 1;
		vertices.length = vertexCount;

		if (time >= frames[frames.length - 1]) { // Time is after last frame.
			var lastVertices = frameVertices[frames.length - 1];
			if (alpha < 1) {
				for (var i = 0; i < vertexCount; i++)
					vertices[i] += (lastVertices[i] - vertices[i]) * alpha;
			} else {
				for (var i = 0; i < vertexCount; i++)
					vertices[i] = lastVertices[i];
			}
			return;
		}

		// Interpolate between the previous frame and the current frame.
		var frameIndex = spine.Animation.binarySearch1(frames, time);
		var frameTime = frames[frameIndex];
		var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);
		percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));

		var prevVertices = frameVertices[frameIndex - 1];
		var nextVertices = frameVertices[frameIndex];

		if (alpha < 1) {
			for (var i = 0; i < vertexCount; i++) {
				var prev = prevVertices[i];
				vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;
			}
		} else {
			for (var i = 0; i < vertexCount; i++) {
				var prev = prevVertices[i];
				vertices[i] = prev + (nextVertices[i] - prev) * percent;
			}
		}
	}
};

spine.IkConstraintTimeline = function (frameCount) {
	this.curves = new spine.Curves(frameCount);
	this.frames = []; // time, mix, bendDirection, ...
	this.frames.length = frameCount * 3;
};
spine.IkConstraintTimeline.prototype = {
	ikConstraintIndex: 0,
	getFrameCount: function () {
		return this.frames.length / 3;
	},
	setFrame: function (frameIndex, time, mix, bendDirection) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = mix;
		this.frames[frameIndex + 2] = bendDirection;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var frames = this.frames;
		if (time < frames[0]) return; // Time is before first frame.

		var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];

		if (time >= frames[frames.length - 3]) { // Time is after last frame.
			ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;
			ikConstraint.bendDirection = frames[frames.length - 1];
			return;
		}

		// Interpolate between the previous frame and the current frame.
		var frameIndex = spine.Animation.binarySearch(frames, time, 3);
		var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];
		var frameTime = frames[frameIndex];
		var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);
		percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);

		var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;
		ikConstraint.mix += (mix - ikConstraint.mix) * alpha;
		ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];
	}
};

spine.FlipXTimeline = function (frameCount) {
	this.curves = new spine.Curves(frameCount);
	this.frames = []; // time, flip, ...
	this.frames.length = frameCount * 2;
};
spine.FlipXTimeline.prototype = {
	boneIndex: 0,
	getFrameCount: function () {
		return this.frames.length / 2;
	},
	setFrame: function (frameIndex, time, flip) {
		frameIndex *= 2;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = flip ? 1 : 0;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var frames = this.frames;
		if (time < frames[0]) {
			if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);
			return;
		} else if (lastTime > time) //
			lastTime = -1;
		var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;
		if (frames[frameIndex] < lastTime) return;
		skeleton.bones[this.boneIndex].flipX = frames[frameIndex + 1] != 0;
	}
};

spine.FlipYTimeline = function (frameCount) {
	this.curves = new spine.Curves(frameCount);
	this.frames = []; // time, flip, ...
	this.frames.length = frameCount * 2;
};
spine.FlipYTimeline.prototype = {
	boneIndex: 0,
	getFrameCount: function () {
		return this.frames.length / 2;
	},
	setFrame: function (frameIndex, time, flip) {
		frameIndex *= 2;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = flip ? 1 : 0;
	},
	apply: function (skeleton, lastTime, time, firedEvents, alpha) {
		var frames = this.frames;
		if (time < frames[0]) {
			if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);
			return;
		} else if (lastTime > time) //
			lastTime = -1;
		var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;
		if (frames[frameIndex] < lastTime) return;
		skeleton.bones[this.boneIndex].flipY = frames[frameIndex + 1] != 0;
	}
};

spine.SkeletonData = function () {
	this.bones = [];
	this.slots = [];
	this.skins = [];
	this.events = [];
	this.animations = [];
	this.ikConstraints = [];
};
spine.SkeletonData.prototype = {
	name: null,
	defaultSkin: null,
	width: 0, height: 0,
	version: null, hash: null,
	/** @return May be null. */
	findBone: function (boneName) {
		var bones = this.bones;
		for (var i = 0, n = bones.length; i < n; i++)
			if (bones[i].name == boneName) return bones[i];
		return null;
	},
	/** @return -1 if the bone was not found. */
	findBoneIndex: function (boneName) {
		var bones = this.bones;
		for (var i = 0, n = bones.length; i < n; i++)
			if (bones[i].name == boneName) return i;
		return -1;
	},
	/** @return May be null. */
	findSlot: function (slotName) {
		var slots = this.slots;
		for (var i = 0, n = slots.length; i < n; i++) {
			if (slots[i].name == slotName) return slot[i];
		}
		return null;
	},
	/** @return -1 if the bone was not found. */
	findSlotIndex: function (slotName) {
		var slots = this.slots;
		for (var i = 0, n = slots.length; i < n; i++)
			if (slots[i].name == slotName) return i;
		return -1;
	},
	/** @return May be null. */
	findSkin: function (skinName) {
		var skins = this.skins;
		for (var i = 0, n = skins.length; i < n; i++)
			if (skins[i].name == skinName) return skins[i];
		return null;
	},
	/** @return May be null. */
	findEvent: function (eventName) {
		var events = this.events;
		for (var i = 0, n = events.length; i < n; i++)
			if (events[i].name == eventName) return events[i];
		return null;
	},
	/** @return May be null. */
	findAnimation: function (animationName) {
		var animations = this.animations;
		for (var i = 0, n = animations.length; i < n; i++)
			if (animations[i].name == animationName) return animations[i];
		return null;
	},
	/** @return May be null. */
	findIkConstraint: function (ikConstraintName) {
		var ikConstraints = this.ikConstraints;
		for (var i = 0, n = ikConstraints.length; i < n; i++)
			if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];
		return null;
	}
};

spine.Skeleton = function (skeletonData) {
	this.data = skeletonData;

	this.bones = [];
	for (var i = 0, n = skeletonData.bones.length; i < n; i++) {
		var boneData = skeletonData.bones[i];
		var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];
		this.bones.push(new spine.Bone(boneData, this, parent));
	}

	this.slots = [];
	this.drawOrder = [];
	for (var i = 0, n = skeletonData.slots.length; i < n; i++) {
		var slotData = skeletonData.slots[i];
		var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];
		var slot = new spine.Slot(slotData, bone);
		this.slots.push(slot);
		this.drawOrder.push(slot);
	}
	
	this.ikConstraints = [];
	for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)
		this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));

	this.boneCache = [];
	this.updateCache();
};
spine.Skeleton.prototype = {
	x: 0, y: 0,
	skin: null,
	r: 1, g: 1, b: 1, a: 1,
	time: 0,
	flipX: false, flipY: false,
	/** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */
	updateCache: function () {
		var ikConstraints = this.ikConstraints;
		var ikConstraintsCount = ikConstraints.length;

		var arrayCount = ikConstraintsCount + 1;
		var boneCache = this.boneCache;
		if (boneCache.length > arrayCount) boneCache.length = arrayCount;
		for (var i = 0, n = boneCache.length; i < n; i++)
			boneCache[i].length = 0;
		while (boneCache.length < arrayCount)
			boneCache[boneCache.length] = [];

		var nonIkBones = boneCache[0];
		var bones = this.bones;

		outer:
		for (var i = 0, n = bones.length; i < n; i++) {
			var bone = bones[i];
			var current = bone;
			do {
				for (var ii = 0; ii < ikConstraintsCount; ii++) {
					var ikConstraint = ikConstraints[ii];
					var parent = ikConstraint.bones[0];
					var child= ikConstraint.bones[ikConstraint.bones.length - 1];
					while (true) {
						if (current == child) {
							boneCache[ii].push(bone);
							boneCache[ii + 1].push(bone);
							continue outer;
						}
						if (child == parent) break;
						child = child.parent;
					}
				}
				current = current.parent;
			} while (current);
			nonIkBones[nonIkBones.length] = bone;
		}
	},
	/** Updates the world transform for each bone. */
	updateWorldTransform: function () {
		var bones = this.bones;
		for (var i = 0, n = bones.length; i < n; i++) {
			var bone = bones[i];
			bone.rotationIK = bone.rotation;
		}
		var i = 0, last = this.boneCache.length - 1;
		while (true) {
			var cacheBones = this.boneCache[i];
			for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)
				cacheBones[ii].updateWorldTransform();
			if (i == last) break;
			this.ikConstraints[i].apply();
			i++;
		}
	},
	/** Sets the bones and slots to their setup pose values. */
	setToSetupPose: function () {
		this.setBonesToSetupPose();
		this.setSlotsToSetupPose();
	},
	setBonesToSetupPose: function () {
		var bones = this.bones;
		for (var i = 0, n = bones.length; i < n; i++)
			bones[i].setToSetupPose();

		var ikConstraints = this.ikConstraints;
		for (var i = 0, n = ikConstraints.length; i < n; i++) {
			var ikConstraint = ikConstraints[i];
			ikConstraint.bendDirection = ikConstraint.data.bendDirection;
			ikConstraint.mix = ikConstraint.data.mix;
		}
	},
	setSlotsToSetupPose: function () {
		var slots = this.slots;
		var drawOrder = this.drawOrder;
		for (var i = 0, n = slots.length; i < n; i++) {
			drawOrder[i] = slots[i];
			slots[i].setToSetupPose(i);
		}
	},
	/** @return May return null. */
	getRootBone: function () {
		return this.bones.length ? this.bones[0] : null;
	},
	/** @return May be null. */
	findBone: function (boneName) {
		var bones = this.bones;
		for (var i = 0, n = bones.length; i < n; i++)
			if (bones[i].data.name == boneName) return bones[i];
		return null;
	},
	/** @return -1 if the bone was not found. */
	findBoneIndex: function (boneName) {
		var bones = this.bones;
		for (var i = 0, n = bones.length; i < n; i++)
			if (bones[i].data.name == boneName) return i;
		return -1;
	},
	/** @return May be null. */
	findSlot: function (slotName) {
		var slots = this.slots;
		for (var i = 0, n = slots.length; i < n; i++)
			if (slots[i].data.name == slotName) return slots[i];
		return null;
	},
	/** @return -1 if the bone was not found. */
	findSlotIndex: function (slotName) {
		var slots = this.slots;
		for (var i = 0, n = slots.length; i < n; i++)
			if (slots[i].data.name == slotName) return i;
		return -1;
	},
	setSkinByName: function (skinName) {
		var skin = this.data.findSkin(skinName);
		if (!skin) throw "Skin not found: " + skinName;
		this.setSkin(skin);
	},
	/** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}. 
	 * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was 
	 * no old skin, each slot's setup mode attachment is attached from the new skin.
	 * @param newSkin May be null. */
	setSkin: function (newSkin) {
		if (newSkin) {
			if (this.skin)
				newSkin._attachAll(this, this.skin);
			else {
				var slots = this.slots;
				for (var i = 0, n = slots.length; i < n; i++) {
					var slot = slots[i];
					var name = slot.data.attachmentName;
					if (name) {
						var attachment = newSkin.getAttachment(i, name);
						if (attachment) slot.setAttachment(attachment);
					}
				}
			}
		}
		this.skin = newSkin;
	},
	/** @return May be null. */
	getAttachmentBySlotName: function (slotName, attachmentName) {
		return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);
	},
	/** @return May be null. */
	getAttachmentBySlotIndex: function (slotIndex, attachmentName) {
		if (this.skin) {
			var attachment = this.skin.getAttachment(slotIndex, attachmentName);
			if (attachment) return attachment;
		}
		if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);
		return null;
	},
	/** @param attachmentName May be null. */
	setAttachment: function (slotName, attachmentName) {
		var slots = this.slots;
		for (var i = 0, n = slots.length; i < n; i++) {
			var slot = slots[i];
			if (slot.data.name == slotName) {
				var attachment = null;
				if (attachmentName) {
					attachment = this.getAttachmentBySlotIndex(i, attachmentName);
					if (!attachment) throw "Attachment not found: " + attachmentName + ", for slot: " + slotName;
				}
				slot.setAttachment(attachment);
				return;
			}
		}
		throw "Slot not found: " + slotName;
	},
	/** @return May be null. */
	findIkConstraint: function (ikConstraintName) {
		var ikConstraints = this.ikConstraints;
		for (var i = 0, n = ikConstraints.length; i < n; i++)
			if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];
		return null;
	},
	update: function (delta) {
		this.time += delta;
	}
};

spine.EventData = function (name) {
	this.name = name;
};
spine.EventData.prototype = {
	intValue: 0,
	floatValue: 0,
	stringValue: null
};

spine.Event = function (data) {
	this.data = data;
};
spine.Event.prototype = {
	intValue: 0,
	floatValue: 0,
	stringValue: null
};

spine.AttachmentType = {
	region: 0,
	boundingbox: 1,
	mesh: 2,
	skinnedmesh: 3
};

spine.RegionAttachment = function (name) {
	this.name = name;
	this.offset = [];
	this.offset.length = 8;
	this.uvs = [];
	this.uvs.length = 8;
};
spine.RegionAttachment.prototype = {
	type: spine.AttachmentType.region,
	x: 0, y: 0,
	rotation: 0,
	scaleX: 1, scaleY: 1,
	width: 0, height: 0,
	r: 1, g: 1, b: 1, a: 1,
	path: null,
	rendererObject: null,
	regionOffsetX: 0, regionOffsetY: 0,
	regionWidth: 0, regionHeight: 0,
	regionOriginalWidth: 0, regionOriginalHeight: 0,
	setUVs: function (u, v, u2, v2, rotate) {
		var uvs = this.uvs;
		if (rotate) {
			uvs[2/*X2*/] = u;
			uvs[3/*Y2*/] = v2;
			uvs[4/*X3*/] = u;
			uvs[5/*Y3*/] = v;
			uvs[6/*X4*/] = u2;
			uvs[7/*Y4*/] = v;
			uvs[0/*X1*/] = u2;
			uvs[1/*Y1*/] = v2;
		} else {
			uvs[0/*X1*/] = u;
			uvs[1/*Y1*/] = v2;
			uvs[2/*X2*/] = u;
			uvs[3/*Y2*/] = v;
			uvs[4/*X3*/] = u2;
			uvs[5/*Y3*/] = v;
			uvs[6/*X4*/] = u2;
			uvs[7/*Y4*/] = v2;
		}
	},
	updateOffset: function () {
		var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;
		var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;
		var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;
		var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;
		var localX2 = localX + this.regionWidth * regionScaleX;
		var localY2 = localY + this.regionHeight * regionScaleY;
		var radians = this.rotation * spine.degRad;
		var cos = Math.cos(radians);
		var sin = Math.sin(radians);
		var localXCos = localX * cos + this.x;
		var localXSin = localX * sin;
		var localYCos = localY * cos + this.y;
		var localYSin = localY * sin;
		var localX2Cos = localX2 * cos + this.x;
		var localX2Sin = localX2 * sin;
		var localY2Cos = localY2 * cos + this.y;
		var localY2Sin = localY2 * sin;
		var offset = this.offset;
		offset[0/*X1*/] = localXCos - localYSin;
		offset[1/*Y1*/] = localYCos + localXSin;
		offset[2/*X2*/] = localXCos - localY2Sin;
		offset[3/*Y2*/] = localY2Cos + localXSin;
		offset[4/*X3*/] = localX2Cos - localY2Sin;
		offset[5/*Y3*/] = localY2Cos + localX2Sin;
		offset[6/*X4*/] = localX2Cos - localYSin;
		offset[7/*Y4*/] = localYCos + localX2Sin;
	},
	computeVertices: function (x, y, bone, vertices) {
		x += bone.worldX;
		y += bone.worldY;
		var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;
		var offset = this.offset;
		vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;
		vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;
		vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;
		vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;
		vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;
		vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;
		vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;
		vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;
	}
};

spine.MeshAttachment = function (name) {
	this.name = name;
};
spine.MeshAttachment.prototype = {
	type: spine.AttachmentType.mesh,
	vertices: null,
	uvs: null,
	regionUVs: null,
	triangles: null,
	hullLength: 0,
	r: 1, g: 1, b: 1, a: 1,
	path: null,
	rendererObject: null,
	regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,
	regionOffsetX: 0, regionOffsetY: 0,
	regionWidth: 0, regionHeight: 0,
	regionOriginalWidth: 0, regionOriginalHeight: 0,
	edges: null,
	width: 0, height: 0,
	updateUVs: function () {
		var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;
		var n = this.regionUVs.length;
		if (!this.uvs || this.uvs.length != n) {
            this.uvs = new spine.Float32Array(n);
		}
		if (this.regionRotate) {
			for (var i = 0; i < n; i += 2) {
                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;
                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;
			}
		} else {
			for (var i = 0; i < n; i += 2) {
                this.uvs[i] = this.regionU + this.regionUVs[i] * width;
                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;
			}
		}
	},
	computeWorldVertices: function (x, y, slot, worldVertices) {
		var bone = slot.bone;
		x += bone.worldX;
		y += bone.worldY;
		var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;
		var vertices = this.vertices;
		var verticesCount = vertices.length;
		if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;
		for (var i = 0; i < verticesCount; i += 2) {
			var vx = vertices[i];
			var vy = vertices[i + 1];
			worldVertices[i] = vx * m00 + vy * m01 + x;
			worldVertices[i + 1] = vx * m10 + vy * m11 + y;
		}
	}
};

spine.SkinnedMeshAttachment = function (name) {
	this.name = name;
};
spine.SkinnedMeshAttachment.prototype = {
	type: spine.AttachmentType.skinnedmesh,
	bones: null,
	weights: null,
	uvs: null,
	regionUVs: null,
	triangles: null,
	hullLength: 0,
	r: 1, g: 1, b: 1, a: 1,
	path: null,
	rendererObject: null,
	regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,
	regionOffsetX: 0, regionOffsetY: 0,
	regionWidth: 0, regionHeight: 0,
	regionOriginalWidth: 0, regionOriginalHeight: 0,
	edges: null,
	width: 0, height: 0,
	updateUVs: function (u, v, u2, v2, rotate) {
		var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;
		var n = this.regionUVs.length;
		if (!this.uvs || this.uvs.length != n) {
            this.uvs = new spine.Float32Array(n);
		}
		if (this.regionRotate) {
			for (var i = 0; i < n; i += 2) {
                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;
                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;
			}
		} else {
			for (var i = 0; i < n; i += 2) {
                this.uvs[i] = this.regionU + this.regionUVs[i] * width;
                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;
			}
		}
	},
	computeWorldVertices: function (x, y, slot, worldVertices) {
		var skeletonBones = slot.bone.skeleton.bones;
		var weights = this.weights;
		var bones = this.bones;

		var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;
		var wx, wy, bone, vx, vy, weight;
		if (!slot.attachmentVertices.length) {
			for (; v < n; w += 2) {
				wx = 0;
				wy = 0;
				nn = bones[v++] + v;
				for (; v < nn; v++, b += 3) {
					bone = skeletonBones[bones[v]];
					vx = weights[b];
					vy = weights[b + 1];
					weight = weights[b + 2];
					wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;
					wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;
				}
				worldVertices[w] = wx + x;
				worldVertices[w + 1] = wy + y;
			}
		} else {
			var ffd = slot.attachmentVertices;
			for (; v < n; w += 2) {
				wx = 0;
				wy = 0;
				nn = bones[v++] + v;
				for (; v < nn; v++, b += 3, f += 2) {
					bone = skeletonBones[bones[v]];
					vx = weights[b] + ffd[f];
					vy = weights[b + 1] + ffd[f + 1];
					weight = weights[b + 2];
					wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;
					wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;
				}
				worldVertices[w] = wx + x;
				worldVertices[w + 1] = wy + y;
			}
		}
	}
};

spine.BoundingBoxAttachment = function (name) {
	this.name = name;
	this.vertices = [];
};
spine.BoundingBoxAttachment.prototype = {
	type: spine.AttachmentType.boundingbox,
	computeWorldVertices: function (x, y, bone, worldVertices) {
		x += bone.worldX;
		y += bone.worldY;
		var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;
		var vertices = this.vertices;
		for (var i = 0, n = vertices.length; i < n; i += 2) {
			var px = vertices[i];
			var py = vertices[i + 1];
			worldVertices[i] = px * m00 + py * m01 + x;
			worldVertices[i + 1] = px * m10 + py * m11 + y;
		}
	}
};

spine.AnimationStateData = function (skeletonData) {
	this.skeletonData = skeletonData;
	this.animationToMixTime = {};
};
spine.AnimationStateData.prototype = {
	defaultMix: 0,
	setMixByName: function (fromName, toName, duration) {
		var from = this.skeletonData.findAnimation(fromName);
		if (!from) throw "Animation not found: " + fromName;
		var to = this.skeletonData.findAnimation(toName);
		if (!to) throw "Animation not found: " + toName;
		this.setMix(from, to, duration);
	},
	setMix: function (from, to, duration) {
		this.animationToMixTime[from.name + ":" + to.name] = duration;
	},
	getMix: function (from, to) {
		var key = from.name + ":" + to.name;
		return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;
	}
};

spine.TrackEntry = function () {};
spine.TrackEntry.prototype = {
	next: null, previous: null,
	animation: null,
	loop: false,
	delay: 0, time: 0, lastTime: -1, endTime: 0,
	timeScale: 1,
	mixTime: 0, mixDuration: 0, mix: 1,
	onStart: null, onEnd: null, onComplete: null, onEvent: null
};

spine.AnimationState = function (stateData) {
	this.data = stateData;
	this.tracks = [];
	this.events = [];
};
spine.AnimationState.prototype = {
	onStart: null,
	onEnd: null,
	onComplete: null,
	onEvent: null,
	timeScale: 1,
	update: function (delta) {
		delta *= this.timeScale;
		for (var i = 0; i < this.tracks.length; i++) {
			var current = this.tracks[i];
			if (!current) continue;

			current.time += delta * current.timeScale;
			if (current.previous) {
				var previousDelta = delta * current.previous.timeScale;
				current.previous.time += previousDelta;
				current.mixTime += previousDelta;
			}

			var next = current.next;
			if (next) {
				next.time = current.lastTime - next.delay;
				if (next.time >= 0) this.setCurrent(i, next);
			} else {
				// End non-looping animation when it reaches its end time and there is no next entry.
				if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);
			}
		}
	},
	apply: function (skeleton) {
		for (var i = 0; i < this.tracks.length; i++) {
			var current = this.tracks[i];
			if (!current) continue;

			this.events.length = 0;

			var time = current.time;
			var lastTime = current.lastTime;
			var endTime = current.endTime;
			var loop = current.loop;
			if (!loop && time > endTime) time = endTime;

			var previous = current.previous;
			if (!previous) {
				if (current.mix == 1)
					current.animation.apply(skeleton, current.lastTime, time, loop, this.events);
				else
					current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);
			} else {
				var previousTime = previous.time;
				if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;
				previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);

				var alpha = current.mixTime / current.mixDuration * current.mix;
				if (alpha >= 1) {
					alpha = 1;
					current.previous = null;
				}
				current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);
			}

			for (var ii = 0, nn = this.events.length; ii < nn; ii++) {
				var event = this.events[ii];
				if (current.onEvent) current.onEvent(i, event);
				if (this.onEvent) this.onEvent(i, event);
			}

			// Check if completed the animation or a loop iteration.
			if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime)) {
				var count = Math.floor(time / endTime);
				if (current.onComplete) current.onComplete(i, count);
				if (this.onComplete) this.onComplete(i, count);
			}

			current.lastTime = current.time;
		}
	},
	clearTracks: function () {
		for (var i = 0, n = this.tracks.length; i < n; i++)
			this.clearTrack(i);
		this.tracks.length = 0; 
	},
	clearTrack: function (trackIndex) {
		if (trackIndex >= this.tracks.length) return;
		var current = this.tracks[trackIndex];
		if (!current) return;

		if (current.onEnd) current.onEnd(trackIndex);
		if (this.onEnd) this.onEnd(trackIndex);

		this.tracks[trackIndex] = null;
	},
	_expandToIndex: function (index) {
		if (index < this.tracks.length) return this.tracks[index];
		while (index >= this.tracks.length)
			this.tracks.push(null);
		return null;
	},
	setCurrent: function (index, entry) {
		var current = this._expandToIndex(index);
		if (current) {
			var previous = current.previous;
			current.previous = null;

			if (current.onEnd) current.onEnd(index);
			if (this.onEnd) this.onEnd(index);

			entry.mixDuration = this.data.getMix(current.animation, entry.animation);
			if (entry.mixDuration > 0) {
				entry.mixTime = 0;
				// If a mix is in progress, mix from the closest animation.
				if (previous && current.mixTime / current.mixDuration < 0.5)
					entry.previous = previous;
				else
					entry.previous = current;
			}
		}

		this.tracks[index] = entry;

		if (entry.onStart) entry.onStart(index);
		if (this.onStart) this.onStart(index);
	},
	setAnimationByName: function (trackIndex, animationName, loop) {
		var animation = this.data.skeletonData.findAnimation(animationName);
		if (!animation) throw "Animation not found: " + animationName;
		return this.setAnimation(trackIndex, animation, loop);
	},
	/** Set the current animation. Any queued animations are cleared. */
	setAnimation: function (trackIndex, animation, loop) {
		var entry = new spine.TrackEntry();
		entry.animation = animation;
		entry.loop = loop;
		entry.endTime = animation.duration;
		this.setCurrent(trackIndex, entry);
		return entry;
	},
	addAnimationByName: function (trackIndex, animationName, loop, delay) {
		var animation = this.data.skeletonData.findAnimation(animationName);
		if (!animation) throw "Animation not found: " + animationName;
		return this.addAnimation(trackIndex, animation, loop, delay);
	},
	/** Adds an animation to be played delay seconds after the current or last queued animation.
	 * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */
	addAnimation: function (trackIndex, animation, loop, delay) {
		var entry = new spine.TrackEntry();
		entry.animation = animation;
		entry.loop = loop;
		entry.endTime = animation.duration;

		var last = this._expandToIndex(trackIndex);
		if (last) {
			while (last.next)
				last = last.next;
			last.next = entry;
		} else
			this.tracks[trackIndex] = entry;

		if (delay <= 0) {
			if (last)
				delay += last.endTime - this.data.getMix(last.animation, animation);
			else
				delay = 0;
		}
		entry.delay = delay;

		return entry;
	},
	/** May be null. */
	getCurrent: function (trackIndex) {
		if (trackIndex >= this.tracks.length) return null;
		return this.tracks[trackIndex];
	}
};

spine.SkeletonJson = function (attachmentLoader) {
	this.attachmentLoader = attachmentLoader;
};
spine.SkeletonJson.prototype = {
	scale: 1,
	readSkeletonData: function (root, name) {
		var skeletonData = new spine.SkeletonData();
		skeletonData.name = name;

		// Skeleton.
		var skeletonMap = root["skeleton"];
		if (skeletonMap) {
			skeletonData.hash = skeletonMap["hash"];
			skeletonData.version = skeletonMap["spine"];
			skeletonData.width = skeletonMap["width"] || 0;
			skeletonData.height = skeletonMap["height"] || 0;
		}

		// Bones.
		var bones = root["bones"];
		for (var i = 0, n = bones.length; i < n; i++) {
			var boneMap = bones[i];
			var parent = null;
			if (boneMap["parent"]) {
				parent = skeletonData.findBone(boneMap["parent"]);
				if (!parent) throw "Parent bone not found: " + boneMap["parent"];
			}
			var boneData = new spine.BoneData(boneMap["name"], parent);
			boneData.length = (boneMap["length"] || 0) * this.scale;
			boneData.x = (boneMap["x"] || 0) * this.scale;
			boneData.y = (boneMap["y"] || 0) * this.scale;
			boneData.rotation = (boneMap["rotation"] || 0);
			boneData.scaleX = boneMap.hasOwnProperty("scaleX") ? boneMap["scaleX"] : 1;
			boneData.scaleY = boneMap.hasOwnProperty("scaleY") ? boneMap["scaleY"] : 1;
			boneData.inheritScale = boneMap.hasOwnProperty("inheritScale") ? boneMap["inheritScale"] : true;
			boneData.inheritRotation = boneMap.hasOwnProperty("inheritRotation") ? boneMap["inheritRotation"] : true;
			skeletonData.bones.push(boneData);
		}

		// IK constraints.
		var ik = root["ik"];
		if (ik) {
			for (var i = 0, n = ik.length; i < n; i++) {
				var ikMap = ik[i];
				var ikConstraintData = new spine.IkConstraintData(ikMap["name"]);

				var bones = ikMap["bones"];
				for (var ii = 0, nn = bones.length; ii < nn; ii++) {
					var bone = skeletonData.findBone(bones[ii]);
					if (!bone) throw "IK bone not found: " + bones[ii];
					ikConstraintData.bones.push(bone);
				}

				ikConstraintData.target = skeletonData.findBone(ikMap["target"]);
				if (!ikConstraintData.target) throw "Target bone not found: " + ikMap["target"];

				ikConstraintData.bendDirection = (!ikMap.hasOwnProperty("bendPositive") || ikMap["bendPositive"]) ? 1 : -1;
				ikConstraintData.mix = ikMap.hasOwnProperty("mix") ? ikMap["mix"] : 1;

				skeletonData.ikConstraints.push(ikConstraintData);
			}
		}

		// Slots.
		var slots = root["slots"];
		for (var i = 0, n = slots.length; i < n; i++) {
			var slotMap = slots[i];
			var boneData = skeletonData.findBone(slotMap["bone"]);
			if (!boneData) throw "Slot bone not found: " + slotMap["bone"];
			var slotData = new spine.SlotData(slotMap["name"], boneData);

			var color = slotMap["color"];
			if (color) {
				slotData.r = this.toColor(color, 0);
				slotData.g = this.toColor(color, 1);
				slotData.b = this.toColor(color, 2);
				slotData.a = this.toColor(color, 3);
			}

			slotData.attachmentName = slotMap["attachment"];
			slotData.blendMode = spine.BlendMode[slotMap["blend"] || "normal"];

			skeletonData.slots.push(slotData);
		}

		// Skins.
		var skins = root["skins"];
		for (var skinName in skins) {
			if (!skins.hasOwnProperty(skinName)) continue;
			var skinMap = skins[skinName];
			var skin = new spine.Skin(skinName);
			for (var slotName in skinMap) {
				if (!skinMap.hasOwnProperty(slotName)) continue;
				var slotIndex = skeletonData.findSlotIndex(slotName);
				var slotEntry = skinMap[slotName];
				for (var attachmentName in slotEntry) {
					if (!slotEntry.hasOwnProperty(attachmentName)) continue;
					var attachment = this.readAttachment(skin, attachmentName, slotEntry[attachmentName]);
					if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);
				}
			}
			skeletonData.skins.push(skin);
			if (skin.name == "default") skeletonData.defaultSkin = skin;
		}

		// Events.
		var events = root["events"];
		for (var eventName in events) {
			if (!events.hasOwnProperty(eventName)) continue;
			var eventMap = events[eventName];
			var eventData = new spine.EventData(eventName);
			eventData.intValue = eventMap["int"] || 0;
			eventData.floatValue = eventMap["float"] || 0;
			eventData.stringValue = eventMap["string"] || null;
			skeletonData.events.push(eventData);
		}

		// Animations.
		var animations = root["animations"];
		for (var animationName in animations) {
			if (!animations.hasOwnProperty(animationName)) continue;
			this.readAnimation(animationName, animations[animationName], skeletonData);
		}

		return skeletonData;
	},
	readAttachment: function (skin, name, map) {
		name = map["name"] || name;

		var type = spine.AttachmentType[map["type"] || "region"];
		var path = map["path"] || name;
		
		var scale = this.scale;
		if (type == spine.AttachmentType.region) {
			var region = this.attachmentLoader.newRegionAttachment(skin, name, path);
			if (!region) return null;
			region.path = path;
			region.x = (map["x"] || 0) * scale;
			region.y = (map["y"] || 0) * scale;
			region.scaleX = map.hasOwnProperty("scaleX") ? map["scaleX"] : 1;
			region.scaleY = map.hasOwnProperty("scaleY") ? map["scaleY"] : 1;
			region.rotation = map["rotation"] || 0;
			region.width = (map["width"] || 0) * scale;
			region.height = (map["height"] || 0) * scale;

			var color = map["color"];
			if (color) {
				region.r = this.toColor(color, 0);
				region.g = this.toColor(color, 1);
				region.b = this.toColor(color, 2);
				region.a = this.toColor(color, 3);
			}

			region.updateOffset();
			return region;
		} else if (type == spine.AttachmentType.mesh) {
			var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);
			if (!mesh) return null;
			mesh.path = path; 
			mesh.vertices = this.getFloatArray(map, "vertices", scale);
			mesh.triangles = this.getIntArray(map, "triangles");
			mesh.regionUVs = this.getFloatArray(map, "uvs", 1);
			mesh.updateUVs();

			color = map["color"];
			if (color) {
				mesh.r = this.toColor(color, 0);
				mesh.g = this.toColor(color, 1);
				mesh.b = this.toColor(color, 2);
				mesh.a = this.toColor(color, 3);
			}

			mesh.hullLength = (map["hull"] || 0) * 2;
			if (map["edges"]) mesh.edges = this.getIntArray(map, "edges");
			mesh.width = (map["width"] || 0) * scale;
			mesh.height = (map["height"] || 0) * scale;
			return mesh;
		} else if (type == spine.AttachmentType.skinnedmesh) {
			var mesh = this.attachmentLoader.newSkinnedMeshAttachment(skin, name, path);
			if (!mesh) return null;
			mesh.path = path;

			var uvs = this.getFloatArray(map, "uvs", 1);
			var vertices = this.getFloatArray(map, "vertices", 1);
			var weights = [];
			var bones = [];
			for (var i = 0, n = vertices.length; i < n; ) {
				var boneCount = vertices[i++] | 0;
				bones[bones.length] = boneCount;
				for (var nn = i + boneCount * 4; i < nn; ) {
					bones[bones.length] = vertices[i];
					weights[weights.length] = vertices[i + 1] * scale;
					weights[weights.length] = vertices[i + 2] * scale;
					weights[weights.length] = vertices[i + 3];
					i += 4;
				}
			}
			mesh.bones = bones;
			mesh.weights = weights;
			mesh.triangles = this.getIntArray(map, "triangles");
			mesh.regionUVs = uvs;
			mesh.updateUVs();
			
			color = map["color"];
			if (color) {
				mesh.r = this.toColor(color, 0);
				mesh.g = this.toColor(color, 1);
				mesh.b = this.toColor(color, 2);
				mesh.a = this.toColor(color, 3);
			}
			
			mesh.hullLength = (map["hull"] || 0) * 2;
			if (map["edges"]) mesh.edges = this.getIntArray(map, "edges");
			mesh.width = (map["width"] || 0) * scale;
			mesh.height = (map["height"] || 0) * scale;
			return mesh;
		} else if (type == spine.AttachmentType.boundingbox) {
			var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);
			var vertices = map["vertices"];
			for (var i = 0, n = vertices.length; i < n; i++)
				attachment.vertices.push(vertices[i] * scale);
			return attachment;
		}
		throw "Unknown attachment type: " + type;
	},
	readAnimation: function (name, map, skeletonData) {
		var timelines = [];
		var duration = 0;

		var slots = map["slots"];
		for (var slotName in slots) {
			if (!slots.hasOwnProperty(slotName)) continue;
			var slotMap = slots[slotName];
			var slotIndex = skeletonData.findSlotIndex(slotName);

			for (var timelineName in slotMap) {
				if (!slotMap.hasOwnProperty(timelineName)) continue;
				var values = slotMap[timelineName];
				if (timelineName == "color") {
					var timeline = new spine.ColorTimeline(values.length);
					timeline.slotIndex = slotIndex;

					var frameIndex = 0;
					for (var i = 0, n = values.length; i < n; i++) {
						var valueMap = values[i];
						var color = valueMap["color"];
						var r = this.toColor(color, 0);
						var g = this.toColor(color, 1);
						var b = this.toColor(color, 2);
						var a = this.toColor(color, 3);
						timeline.setFrame(frameIndex, valueMap["time"], r, g, b, a);
						this.readCurve(timeline, frameIndex, valueMap);
						frameIndex++;
					}
					timelines.push(timeline);
					duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);

				} else if (timelineName == "attachment") {
					var timeline = new spine.AttachmentTimeline(values.length);
					timeline.slotIndex = slotIndex;

					var frameIndex = 0;
					for (var i = 0, n = values.length; i < n; i++) {
						var valueMap = values[i];
						timeline.setFrame(frameIndex++, valueMap["time"], valueMap["name"]);
					}
					timelines.push(timeline);
					duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);

				} else
					throw "Invalid timeline type for a slot: " + timelineName + " (" + slotName + ")";
			}
		}

		var bones = map["bones"];
		for (var boneName in bones) {
			if (!bones.hasOwnProperty(boneName)) continue;
			var boneIndex = skeletonData.findBoneIndex(boneName);
			if (boneIndex == -1) throw "Bone not found: " + boneName;
			var boneMap = bones[boneName];

			for (var timelineName in boneMap) {
				if (!boneMap.hasOwnProperty(timelineName)) continue;
				var values = boneMap[timelineName];
				if (timelineName == "rotate") {
					var timeline = new spine.RotateTimeline(values.length);
					timeline.boneIndex = boneIndex;

					var frameIndex = 0;
					for (var i = 0, n = values.length; i < n; i++) {
						var valueMap = values[i];
						timeline.setFrame(frameIndex, valueMap["time"], valueMap["angle"]);
						this.readCurve(timeline, frameIndex, valueMap);
						frameIndex++;
					}
					timelines.push(timeline);
					duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);

				} else if (timelineName == "translate" || timelineName == "scale") {
					var timeline;
					var timelineScale = 1;
					if (timelineName == "scale")
						timeline = new spine.ScaleTimeline(values.length);
					else {
						timeline = new spine.TranslateTimeline(values.length);
						timelineScale = this.scale;
					}
					timeline.boneIndex = boneIndex;

					var frameIndex = 0;
					for (var i = 0, n = values.length; i < n; i++) {
						var valueMap = values[i];
						var x = (valueMap["x"] || 0) * timelineScale;
						var y = (valueMap["y"] || 0) * timelineScale;
						timeline.setFrame(frameIndex, valueMap["time"], x, y);
						this.readCurve(timeline, frameIndex, valueMap);
						frameIndex++;
					}
					timelines.push(timeline);
					duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);

				} else if (timelineName == "flipX" || timelineName == "flipY") {
					var x = timelineName == "flipX";
					var timeline = x ? new spine.FlipXTimeline(values.length) : new spine.FlipYTimeline(values.length);
					timeline.boneIndex = boneIndex;

					var field = x ? "x" : "y";
					var frameIndex = 0;
					for (var i = 0, n = values.length; i < n; i++) {
						var valueMap = values[i];
						timeline.setFrame(frameIndex, valueMap["time"], valueMap[field] || false);
						frameIndex++;
					}
					timelines.push(timeline);
					duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);
				} else
					throw "Invalid timeline type for a bone: " + timelineName + " (" + boneName + ")";
			}
		}

		var ikMap = map["ik"];
		for (var ikConstraintName in ikMap) {
			if (!ikMap.hasOwnProperty(ikConstraintName)) continue;
			var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);
			var values = ikMap[ikConstraintName];
			var timeline = new spine.IkConstraintTimeline(values.length);
			timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);
			var frameIndex = 0;
			for (var i = 0, n = values.length; i < n; i++) {
				var valueMap = values[i];
				var mix = valueMap.hasOwnProperty("mix") ? valueMap["mix"] : 1;
				var bendDirection = (!valueMap.hasOwnProperty("bendPositive") || valueMap["bendPositive"]) ? 1 : -1;
				timeline.setFrame(frameIndex, valueMap["time"], mix, bendDirection);
				this.readCurve(timeline, frameIndex, valueMap);
				frameIndex++;
			}
			timelines.push(timeline);
			duration = Math.max(duration, timeline.frames[timeline.frameCount * 3 - 3]);
		}

		var ffd = map["ffd"];
		for (var skinName in ffd) {
			var skin = skeletonData.findSkin(skinName);
			var slotMap = ffd[skinName];
			for (slotName in slotMap) {
				var slotIndex = skeletonData.findSlotIndex(slotName);
				var meshMap = slotMap[slotName];
				for (var meshName in meshMap) {
					var values = meshMap[meshName];
					var timeline = new spine.FfdTimeline(values.length);
					var attachment = skin.getAttachment(slotIndex, meshName);
					if (!attachment) throw "FFD attachment not found: " + meshName;
					timeline.slotIndex = slotIndex;
					timeline.attachment = attachment;
					
					var isMesh = attachment.type == spine.AttachmentType.mesh;
					var vertexCount;
					if (isMesh)
						vertexCount = attachment.vertices.length;
					else
						vertexCount = attachment.weights.length / 3 * 2;

					var frameIndex = 0;
					for (var i = 0, n = values.length; i < n; i++) {
						var valueMap = values[i];
						var vertices;
						if (!valueMap["vertices"]) {
							if (isMesh)
								vertices = attachment.vertices;
							else {
								vertices = [];
								vertices.length = vertexCount;
							}
						} else {
							var verticesValue = valueMap["vertices"];
							var vertices = [];
							vertices.length = vertexCount;
							var start = valueMap["offset"] || 0;
							var nn = verticesValue.length;
							if (this.scale == 1) {
								for (var ii = 0; ii < nn; ii++)
									vertices[ii + start] = verticesValue[ii];
							} else {
								for (var ii = 0; ii < nn; ii++)
									vertices[ii + start] = verticesValue[ii] * this.scale;
							}
							if (isMesh) {
								var meshVertices = attachment.vertices;
								for (var ii = 0, nn = vertices.length; ii < nn; ii++)
									vertices[ii] += meshVertices[ii];
							}
						}
						
						timeline.setFrame(frameIndex, valueMap["time"], vertices);
						this.readCurve(timeline, frameIndex, valueMap);
						frameIndex++;
					}
					timelines[timelines.length] = timeline;
					duration = Math.max(duration, timeline.frames[timeline.frameCount - 1]);
				}
			}
		}

		var drawOrderValues = map["drawOrder"];
		if (!drawOrderValues) drawOrderValues = map["draworder"];
		if (drawOrderValues) {
			var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);
			var slotCount = skeletonData.slots.length;
			var frameIndex = 0;
			for (var i = 0, n = drawOrderValues.length; i < n; i++) {
				var drawOrderMap = drawOrderValues[i];
				var drawOrder = null;
				if (drawOrderMap["offsets"]) {
					drawOrder = [];
					drawOrder.length = slotCount;
					for (var ii = slotCount - 1; ii >= 0; ii--)
						drawOrder[ii] = -1;
					var offsets = drawOrderMap["offsets"];
					var unchanged = [];
					unchanged.length = slotCount - offsets.length;
					var originalIndex = 0, unchangedIndex = 0;
					for (var ii = 0, nn = offsets.length; ii < nn; ii++) {
						var offsetMap = offsets[ii];
						var slotIndex = skeletonData.findSlotIndex(offsetMap["slot"]);
						if (slotIndex == -1) throw "Slot not found: " + offsetMap["slot"];
						// Collect unchanged items.
						while (originalIndex != slotIndex)
							unchanged[unchangedIndex++] = originalIndex++;
						// Set changed items.
						drawOrder[originalIndex + offsetMap["offset"]] = originalIndex++;
					}
					// Collect remaining unchanged items.
					while (originalIndex < slotCount)
						unchanged[unchangedIndex++] = originalIndex++;
					// Fill in unchanged items.
					for (var ii = slotCount - 1; ii >= 0; ii--)
						if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];
				}
				timeline.setFrame(frameIndex++, drawOrderMap["time"], drawOrder);
			}
			timelines.push(timeline);
			duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);
		}

		var events = map["events"];
		if (events) {
			var timeline = new spine.EventTimeline(events.length);
			var frameIndex = 0;
			for (var i = 0, n = events.length; i < n; i++) {
				var eventMap = events[i];
				var eventData = skeletonData.findEvent(eventMap["name"]);
				if (!eventData) throw "Event not found: " + eventMap["name"];
				var event = new spine.Event(eventData);
				event.intValue = eventMap.hasOwnProperty("int") ? eventMap["int"] : eventData.intValue;
				event.floatValue = eventMap.hasOwnProperty("float") ? eventMap["float"] : eventData.floatValue;
				event.stringValue = eventMap.hasOwnProperty("string") ? eventMap["string"] : eventData.stringValue;
				timeline.setFrame(frameIndex++, eventMap["time"], event);
			}
			timelines.push(timeline);
			duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);
		}

		skeletonData.animations.push(new spine.Animation(name, timelines, duration));
	},
	readCurve: function (timeline, frameIndex, valueMap) {
		var curve = valueMap["curve"];
		if (!curve) 
			timeline.curves.setLinear(frameIndex);
		else if (curve == "stepped")
			timeline.curves.setStepped(frameIndex);
		else if (curve instanceof Array)
			timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);
	},
	toColor: function (hexString, colorIndex) {
		if (hexString.length != 8) throw "Color hexidecimal length must be 8, recieved: " + hexString;
		return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;
	},
	getFloatArray: function (map, name, scale) {
		var list = map[name];
		var values = new spine.Float32Array(list.length);
		var i = 0, n = list.length;
		if (scale == 1) {
			for (; i < n; i++)
				values[i] = list[i];
		} else {
			for (; i < n; i++)
				values[i] = list[i] * scale;
		}
		return values;
	},
	getIntArray: function (map, name) {
		var list = map[name];
		var values = new spine.Uint16Array(list.length);
		for (var i = 0, n = list.length; i < n; i++)
			values[i] = list[i] | 0;
		return values;
	}
};

spine.Atlas = function (atlasText, textureLoader) {
	this.textureLoader = textureLoader;
	this.pages = [];
	this.regions = [];

	var reader = new spine.AtlasReader(atlasText);
	var tuple = [];
	tuple.length = 4;
	var page = null;
	while (true) {
		var line = reader.readLine();
		if (line === null) break;
		line = reader.trim(line);
		if (!line.length)
			page = null;
		else if (!page) {
			page = new spine.AtlasPage();
			page.name = line;

			if (reader.readTuple(tuple) == 2) { // size is only optional for an atlas packed with an old TexturePacker.
				page.width = parseInt(tuple[0]);
				page.height = parseInt(tuple[1]);
				reader.readTuple(tuple);
			}
			page.format = spine.Atlas.Format[tuple[0]];

			reader.readTuple(tuple);
			page.minFilter = spine.Atlas.TextureFilter[tuple[0]];
			page.magFilter = spine.Atlas.TextureFilter[tuple[1]];

			var direction = reader.readValue();
			page.uWrap = spine.Atlas.TextureWrap.clampToEdge;
			page.vWrap = spine.Atlas.TextureWrap.clampToEdge;
			if (direction == "x")
				page.uWrap = spine.Atlas.TextureWrap.repeat;
			else if (direction == "y")
				page.vWrap = spine.Atlas.TextureWrap.repeat;
			else if (direction == "xy")
				page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;

			textureLoader.load(page, line, this);

			this.pages.push(page);

		} else {
			var region = new spine.AtlasRegion();
			region.name = line;
			region.page = page;

			region.rotate = reader.readValue() == "true";

			reader.readTuple(tuple);
			var x = parseInt(tuple[0]);
			var y = parseInt(tuple[1]);

			reader.readTuple(tuple);
			var width = parseInt(tuple[0]);
			var height = parseInt(tuple[1]);

			region.u = x / page.width;
			region.v = y / page.height;
			if (region.rotate) {
				region.u2 = (x + height) / page.width;
				region.v2 = (y + width) / page.height;
			} else {
				region.u2 = (x + width) / page.width;
				region.v2 = (y + height) / page.height;
			}
			region.x = x;
			region.y = y;
			region.width = Math.abs(width);
			region.height = Math.abs(height);

			if (reader.readTuple(tuple) == 4) { // split is optional
				region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];

				if (reader.readTuple(tuple) == 4) { // pad is optional, but only present with splits
					region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];

					reader.readTuple(tuple);
				}
			}

			region.originalWidth = parseInt(tuple[0]);
			region.originalHeight = parseInt(tuple[1]);

			reader.readTuple(tuple);
			region.offsetX = parseInt(tuple[0]);
			region.offsetY = parseInt(tuple[1]);

			region.index = parseInt(reader.readValue());

			this.regions.push(region);
		}
	}
};
spine.Atlas.prototype = {
	findRegion: function (name) {
		var regions = this.regions;
		for (var i = 0, n = regions.length; i < n; i++)
			if (regions[i].name == name) return regions[i];
		return null;
	},
	dispose: function () {
		var pages = this.pages;
		for (var i = 0, n = pages.length; i < n; i++)
			this.textureLoader.unload(pages[i].rendererObject);
	},
	updateUVs: function (page) {
		var regions = this.regions;
		for (var i = 0, n = regions.length; i < n; i++) {
			var region = regions[i];
			if (region.page != page) continue;
			region.u = region.x / page.width;
			region.v = region.y / page.height;
			if (region.rotate) {
				region.u2 = (region.x + region.height) / page.width;
				region.v2 = (region.y + region.width) / page.height;
			} else {
				region.u2 = (region.x + region.width) / page.width;
				region.v2 = (region.y + region.height) / page.height;
			}
		}
	}
};

spine.Atlas.Format = {
	alpha: 0,
	intensity: 1,
	luminanceAlpha: 2,
	rgb565: 3,
	rgba4444: 4,
	rgb888: 5,
	rgba8888: 6
};

spine.Atlas.TextureFilter = {
	nearest: 0,
	linear: 1,
	mipMap: 2,
	mipMapNearestNearest: 3,
	mipMapLinearNearest: 4,
	mipMapNearestLinear: 5,
	mipMapLinearLinear: 6
};

spine.Atlas.TextureWrap = {
	mirroredRepeat: 0,
	clampToEdge: 1,
	repeat: 2
};

spine.AtlasPage = function () {};
spine.AtlasPage.prototype = {
	name: null,
	format: null,
	minFilter: null,
	magFilter: null,
	uWrap: null,
	vWrap: null,
	rendererObject: null,
	width: 0,
	height: 0
};

spine.AtlasRegion = function () {};
spine.AtlasRegion.prototype = {
	page: null,
	name: null,
	x: 0, y: 0,
	width: 0, height: 0,
	u: 0, v: 0, u2: 0, v2: 0,
	offsetX: 0, offsetY: 0,
	originalWidth: 0, originalHeight: 0,
	index: 0,
	rotate: false,
	splits: null,
	pads: null
};

spine.AtlasReader = function (text) {
	this.lines = text.split(/\r\n|\r|\n/);
};
spine.AtlasReader.prototype = {
	index: 0,
	trim: function (value) {
		return value.replace(/^\s+|\s+$/g, "");
	},
	readLine: function () {
		if (this.index >= this.lines.length) return null;
		return this.lines[this.index++];
	},
	readValue: function () {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if (colon == -1) throw "Invalid line: " + line;
		return this.trim(line.substring(colon + 1));
	},
	/** Returns the number of tuple values read (1, 2 or 4). */
	readTuple: function (tuple) {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if (colon == -1) throw "Invalid line: " + line;
		var i = 0, lastMatch = colon + 1;
		for (; i < 3; i++) {
			var comma = line.indexOf(",", lastMatch);
			if (comma == -1) break;
			tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));
			lastMatch = comma + 1;
		}
		tuple[i] = this.trim(line.substring(lastMatch));
		return i + 1;
	}
};

spine.AtlasAttachmentLoader = function (atlas) {
	this.atlas = atlas;
};
spine.AtlasAttachmentLoader.prototype = {
	newRegionAttachment: function (skin, name, path) {
		var region = this.atlas.findRegion(path);
		if (!region) throw "Region not found in atlas: " + path + " (region attachment: " + name + ")";
		var attachment = new spine.RegionAttachment(name);
		attachment.rendererObject = region;
		attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);
		attachment.regionOffsetX = region.offsetX;
		attachment.regionOffsetY = region.offsetY;
		attachment.regionWidth = region.width;
		attachment.regionHeight = region.height;
		attachment.regionOriginalWidth = region.originalWidth;
		attachment.regionOriginalHeight = region.originalHeight;
		return attachment;
	},
	newMeshAttachment: function (skin, name, path) {
		var region = this.atlas.findRegion(path);
		if (!region) throw "Region not found in atlas: " + path + " (mesh attachment: " + name + ")";
		var attachment = new spine.MeshAttachment(name);
		attachment.rendererObject = region;
		attachment.regionU = region.u;
		attachment.regionV = region.v;
		attachment.regionU2 = region.u2;
		attachment.regionV2 = region.v2;
		attachment.regionRotate = region.rotate;
		attachment.regionOffsetX = region.offsetX;
		attachment.regionOffsetY = region.offsetY;
		attachment.regionWidth = region.width;
		attachment.regionHeight = region.height;
		attachment.regionOriginalWidth = region.originalWidth;
		attachment.regionOriginalHeight = region.originalHeight;
		return attachment;
	},
	newSkinnedMeshAttachment: function (skin, name, path) {
		var region = this.atlas.findRegion(path);
		if (!region) throw "Region not found in atlas: " + path + " (skinned mesh attachment: " + name + ")";
		var attachment = new spine.SkinnedMeshAttachment(name);
		attachment.rendererObject = region;
		attachment.regionU = region.u;
		attachment.regionV = region.v;
		attachment.regionU2 = region.u2;
		attachment.regionV2 = region.v2;
		attachment.regionRotate = region.rotate;
		attachment.regionOffsetX = region.offsetX;
		attachment.regionOffsetY = region.offsetY;
		attachment.regionWidth = region.width;
		attachment.regionHeight = region.height;
		attachment.regionOriginalWidth = region.originalWidth;
		attachment.regionOriginalHeight = region.originalHeight;
		return attachment;
	},
	newBoundingBoxAttachment: function (skin, name) {
		return new spine.BoundingBoxAttachment(name);
	}
};

spine.SkeletonBounds = function () {
	this.polygonPool = [];
	this.polygons = [];
	this.boundingBoxes = [];
};
spine.SkeletonBounds.prototype = {
	minX: 0, minY: 0, maxX: 0, maxY: 0,
	update: function (skeleton, updateAabb) {
		var slots = skeleton.slots;
		var slotCount = slots.length;
		var x = skeleton.x, y = skeleton.y;
		var boundingBoxes = this.boundingBoxes;
		var polygonPool = this.polygonPool;
		var polygons = this.polygons;

		boundingBoxes.length = 0;
		for (var i = 0, n = polygons.length; i < n; i++)
			polygonPool.push(polygons[i]);
		polygons.length = 0;

		for (var i = 0; i < slotCount; i++) {
			var slot = slots[i];
			var boundingBox = slot.attachment;
			if (boundingBox.type != spine.AttachmentType.boundingbox) continue;
			boundingBoxes.push(boundingBox);

			var poolCount = polygonPool.length, polygon;
			if (poolCount > 0) {
				polygon = polygonPool[poolCount - 1];
				polygonPool.splice(poolCount - 1, 1);
			} else
				polygon = [];
			polygons.push(polygon);

			polygon.length = boundingBox.vertices.length;
			boundingBox.computeWorldVertices(x, y, slot.bone, polygon);
		}

		if (updateAabb) this.aabbCompute();
	},
	aabbCompute: function () {
		var polygons = this.polygons;
		var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;
		for (var i = 0, n = polygons.length; i < n; i++) {
			var vertices = polygons[i];
			for (var ii = 0, nn = vertices.length; ii < nn; ii += 2) {
				var x = vertices[ii];
				var y = vertices[ii + 1];
				minX = Math.min(minX, x);
				minY = Math.min(minY, y);
				maxX = Math.max(maxX, x);
				maxY = Math.max(maxY, y);
			}
		}
		this.minX = minX;
		this.minY = minY;
		this.maxX = maxX;
		this.maxY = maxY;
	},
	/** Returns true if the axis aligned bounding box contains the point. */
	aabbContainsPoint: function (x, y) {
		return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;
	},
	/** Returns true if the axis aligned bounding box intersects the line segment. */
	aabbIntersectsSegment: function (x1, y1, x2, y2) {
		var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;
		if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))
			return false;
		var m = (y2 - y1) / (x2 - x1);
		var y = m * (minX - x1) + y1;
		if (y > minY && y < maxY) return true;
		y = m * (maxX - x1) + y1;
		if (y > minY && y < maxY) return true;
		var x = (minY - y1) / m + x1;
		if (x > minX && x < maxX) return true;
		x = (maxY - y1) / m + x1;
		if (x > minX && x < maxX) return true;
		return false;
	},
	/** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */
	aabbIntersectsSkeleton: function (bounds) {
		return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;
	},
	/** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more
	 * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */
	containsPoint: function (x, y) {
		var polygons = this.polygons;
		for (var i = 0, n = polygons.length; i < n; i++)
			if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];
		return null;
	},
	/** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually
	 * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */
	intersectsSegment: function (x1, y1, x2, y2) {
		var polygons = this.polygons;
		for (var i = 0, n = polygons.length; i < n; i++)
			if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];
		return null;
	},
	/** Returns true if the polygon contains the point. */
	polygonContainsPoint: function (polygon, x, y) {
		var nn = polygon.length;
		var prevIndex = nn - 2;
		var inside = false;
		for (var ii = 0; ii < nn; ii += 2) {
			var vertexY = polygon[ii + 1];
			var prevY = polygon[prevIndex + 1];
			if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {
				var vertexX = polygon[ii];
				if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;
			}
			prevIndex = ii;
		}
		return inside;
	},
	/** Returns true if the polygon contains the line segment. */
	polygonIntersectsSegment: function (polygon, x1, y1, x2, y2) {
		var nn = polygon.length;
		var width12 = x1 - x2, height12 = y1 - y2;
		var det1 = x1 * y2 - y1 * x2;
		var x3 = polygon[nn - 2], y3 = polygon[nn - 1];
		for (var ii = 0; ii < nn; ii += 2) {
			var x4 = polygon[ii], y4 = polygon[ii + 1];
			var det2 = x3 * y4 - y3 * x4;
			var width34 = x3 - x4, height34 = y3 - y4;
			var det3 = width12 * height34 - height12 * width34;
			var x = (det1 * width34 - width12 * det2) / det3;
			if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {
				var y = (det1 * height34 - height12 * det2) / det3;
				if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;
			}
			x3 = x4;
			y3 = y4;
		}
		return false;
	},
	getPolygon: function (attachment) {
		var index = this.boundingBoxes.indexOf(attachment);
		return index == -1 ? null : this.polygons[index];
	},
	getWidth: function () {
		return this.maxX - this.minX;
	},
	getHeight: function () {
		return this.maxY - this.minY;
	}
};
(function() {

function c(a){throw a;}var d=void 0,aa=!0,e=null,ba=!1,h;h||(h=eval("(function() { try { return Module || {} } catch(e) { return {} } })()"));var ca={},da;for(da in h)h.hasOwnProperty(da)&&(ca[da]=h[da]);var ea="object"===typeof process&&"function"===typeof require,ga="object"===typeof window,ha="function"===typeof importScripts,ia=!ga&&!ea&&!ha;
if(ea){h.print||(h.print=function(a){process.stdout.write(a+"\n")});h.printErr||(h.printErr=function(a){process.stderr.write(a+"\n")});var ja=require("fs"),ka=require("path");h.read=function(a,b){var a=ka.normalize(a),f=ja.readFileSync(a);!f&&a!=ka.resolve(a)&&(a=path.join(__dirname,"..","src",a),f=ja.readFileSync(a));f&&!b&&(f=f.toString());return f};h.readBinary=function(a){return h.read(a,aa)};h.load=function(a){la(read(a))};h.thisProgram=process.argv[1].replace(/\\/g,"/");h.arguments=process.argv.slice(2);
"undefined"!==typeof module&&(module.exports=h);process.on("uncaughtException",function(a){a instanceof ma||c(a)})}else ia?(h.print||(h.print=print),"undefined"!=typeof printErr&&(h.printErr=printErr),h.read="undefined"!=typeof read?read:function(){c("no read() available (jsc?)")},h.readBinary=function(a){if("function"===typeof readbuffer)return new Uint8Array(readbuffer(a));a=read(a,"binary");oa("object"===typeof a);return a},"undefined"!=typeof scriptArgs?h.arguments=scriptArgs:"undefined"!=typeof arguments&&
(h.arguments=arguments),this.Module=h,eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined")):ga||ha?(h.read=function(a){var b=new XMLHttpRequest;b.open("GET",a,ba);b.send(e);return b.responseText},"undefined"!=typeof arguments&&(h.arguments=arguments),"undefined"!==typeof console?(h.print||(h.print=function(a){console.log(a)}),h.printErr||(h.printErr=function(a){console.log(a)})):h.print||(h.print=function(){}),ga?window.Module=h:h.load=importScripts):
c("Unknown runtime environment. Where are we?");function la(a){eval.call(e,a)}!h.load&&h.read&&(h.load=function(a){la(h.read(a))});h.print||(h.print=function(){});h.printErr||(h.printErr=h.print);h.arguments||(h.arguments=[]);h.thisProgram||(h.thisProgram="./this.program");h.print=h.print;h.n=h.printErr;h.preRun=[];h.postRun=[];for(da in ca)ca.hasOwnProperty(da)&&(h[da]=ca[da]);
var i={ea:function(a){pa=a},Z:function(){return pa},B:function(){return qa},J:function(a){qa=a},Q:function(a){switch(a){case "i1":case "i8":return 1;case "i16":return 2;case "i32":return 4;case "i64":return 8;case "float":return 4;case "double":return 8;default:return"*"===a[a.length-1]?i.C:"i"===a[0]?(a=parseInt(a.substr(1)),oa(0===a%8),a/8):0}},P:function(a){return Math.max(i.Q(a),i.C)},fa:16,sa:function(a,b,f){return!f&&("i64"==a||"double"==a)?8:!a?Math.min(b,8):Math.min(b||(a?i.P(a):0),i.C)},
u:function(a,b,f){return f&&f.length?(f.splice||(f=Array.prototype.slice.call(f)),f.splice(0,0,b),h["dynCall_"+a].apply(e,f)):h["dynCall_"+a].call(e,b)},p:[e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],V:function(a){for(var b=0;b<i.p.length;b++)if(!i.p[b])return i.p[b]=a,2*(1+b);c("Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.")},da:function(a){i.p[(a-2)/2]=e},O:function(a,b){i.F||(i.F={});var f=i.F[a];if(f)return f;for(var f=[],g=0;g<b;g++)f.push(String.fromCharCode(36)+
g);g=sa(a);'"'===g[0]&&(g.indexOf('"',1)===g.length-1?g=g.substr(1,g.length-2):ta("invalid EM_ASM input |"+g+"|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)"));try{var k=eval("(function(Module, FS) { return function("+f.join(",")+"){ "+g+" } })")(h,"undefined"!==typeof ua?ua:e)}catch(n){h.n("error in executing inline EM_ASM code: "+n+" on: \n\n"+g+"\n\nwith args |"+f+"| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)"),c(n)}return i.F[a]=
k},q:function(a){i.q.I||(i.q.I={});i.q.I[a]||(i.q.I[a]=1,h.n(a))},G:{},ua:function(a,b){oa(b);i.G[b]||(i.G[b]={});var f=i.G[b];f[a]||(f[a]=function(){return i.u(b,a,arguments)});return f[a]},M:function(){var a=[],b=0;this.ba=function(f){f&=255;if(0==a.length){if(0==(f&128))return String.fromCharCode(f);a.push(f);b=192==(f&224)?1:224==(f&240)?2:3;return""}if(b&&(a.push(f),b--,0<b))return"";var f=a[0],g=a[1],k=a[2],n=a[3];2==a.length?f=String.fromCharCode((f&31)<<6|g&63):3==a.length?f=String.fromCharCode((f&
15)<<12|(g&63)<<6|k&63):(f=(f&7)<<18|(g&63)<<12|(k&63)<<6|n&63,f=String.fromCharCode(((f-65536)/1024|0)+55296,(f-65536)%1024+56320));a.length=0;return f};this.ca=function(a){for(var a=unescape(encodeURIComponent(a)),b=[],k=0;k<a.length;k++)b.push(a.charCodeAt(k));return b}},ta:function(){c("You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work")},A:function(a){var b=qa;qa=qa+a|0;qa=qa+15&-16;return b},U:function(a){var b=va;va=
va+a|0;va=va+15&-16;return b},o:function(a){var b=wa;wa=wa+a|0;wa=wa+15&-16;wa>=xa&&ta("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value "+xa+", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.");return b},r:function(a,b){return Math.ceil(a/(b?b:16))*(b?b:16)},aa:function(a,b,f){return f?+(a>>>0)+4294967296*+(b>>>0):+(a>>>0)+4294967296*
+(b|0)},L:8,C:4,ga:0};h.Runtime=i;i.addFunction=i.V;i.removeFunction=i.da;var za=ba,Ba,Ca,pa;function oa(a,b){a||ta("Assertion failed: "+b)}function Da(a){var b=h["_"+a];if(!b)try{b=eval("_"+a)}catch(f){}oa(b,"Cannot call unknown function "+a+" (perhaps LLVM optimizations or closure removed it?)");return b}var Ea,Fa;
(function(){function a(a){a=a.toString().match(k).slice(1);return{arguments:a[0],body:a[1],returnValue:a[2]}}var b=0,f={stackSave:function(){b=i.B()},stackRestore:function(){i.J(b)},arrayToC:function(a){var b=i.A(a.length);Ga(a,b);return b},stringToC:function(a){var b=0;a!==e&&(a!==d&&0!==a)&&(b=i.A((a.length<<2)+1),Ha(a,b));return b}},g={string:f.stringToC,array:f.arrayToC};Fa=function(a,k,m,n){var a=Da(a),ra=[];if(n)for(var ya=0;ya<n.length;ya++){var gb=g[m[ya]];gb?(0===b&&(b=i.B()),ra[ya]=gb(n[ya])):
ra[ya]=n[ya]}m=a.apply(e,ra);"string"===k&&(m=sa(m));0!==b&&f.stackRestore();return m};var k=/^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/,n={},m;for(m in f)f.hasOwnProperty(m)&&(n[m]=a(f[m]));Ea=function(b,f,g){var g=g||[],k=Da(b),b=g.every(function(a){return"number"===a}),m="string"!==f;if(m&&b)return k;var ya=g.map(function(a,b){return"$"+b}),f="(function("+ya.join(",")+") {",gb=g.length;if(!b)for(var f=f+(n.stackSave.body+";"),Ta=0;Ta<gb;Ta++){var ab=ya[Ta],Aa=g[Ta];
"number"!==Aa&&(Aa=n[Aa+"ToC"],f+="var "+Aa.arguments+" = "+ab+";",f+=Aa.body+";",f+=ab+"="+Aa.returnValue+";")}g=a(function(){return k}).returnValue;f+="var ret = "+g+"("+ya.join(",")+");";m||(g=a(function(){return sa}).returnValue,f+="ret = "+g+"(ret);");b||(f+=n.stackRestore.body+";");return eval(f+"return ret})")}})();h.cwrap=Ea;h.ccall=Fa;
function Ia(a,b,f){f=f||"i8";"*"===f.charAt(f.length-1)&&(f="i32");switch(f){case "i1":Ja[a>>0]=b;break;case "i8":Ja[a>>0]=b;break;case "i16":Ka[a>>1]=b;break;case "i32":Ma[a>>2]=b;break;case "i64":Ca=[b>>>0,(Ba=b,1<=+Na(Ba)?0<Ba?(Oa(+Pa(Ba/4294967296),4294967295)|0)>>>0:~~+Qa((Ba-+(~~Ba>>>0))/4294967296)>>>0:0)];Ma[a>>2]=Ca[0];Ma[a+4>>2]=Ca[1];break;case "float":Ra[a>>2]=b;break;case "double":Sa[a>>3]=b;break;default:ta("invalid type for setValue: "+f)}}h.setValue=Ia;
function Ua(a,b){b=b||"i8";"*"===b.charAt(b.length-1)&&(b="i32");switch(b){case "i1":return Ja[a>>0];case "i8":return Ja[a>>0];case "i16":return Ka[a>>1];case "i32":return Ma[a>>2];case "i64":return Ma[a>>2];case "float":return Ra[a>>2];case "double":return Sa[a>>3];default:ta("invalid type for setValue: "+b)}return e}h.getValue=Ua;var Va=1,Xa=2,Ya=4;h.ALLOC_NORMAL=0;h.ALLOC_STACK=Va;h.ALLOC_STATIC=Xa;h.ALLOC_DYNAMIC=3;h.ALLOC_NONE=Ya;
function Za(a,b,f,g){var k,n;"number"===typeof a?(k=aa,n=a):(k=ba,n=a.length);var m="string"===typeof b?b:e,f=f==Ya?g:[$a,i.A,i.U,i.o][f===d?Xa:f](Math.max(n,m?1:b.length));if(k){g=f;oa(0==(f&3));for(a=f+(n&-4);g<a;g+=4)Ma[g>>2]=0;for(a=f+n;g<a;)Ja[g++>>0]=0;return f}if("i8"===m)return a.subarray||a.slice?bb.set(a,f):bb.set(new Uint8Array(a),f),f;for(var g=0,l,fa;g<n;){var La=a[g];"function"===typeof La&&(La=i.va(La));k=m||b[g];0===k?g++:("i64"==k&&(k="i32"),Ia(f+g,La,k),fa!==k&&(l=i.Q(k),fa=k),g+=
l)}return f}h.allocate=Za;function sa(a,b){for(var f=ba,g,k=0;;){g=bb[a+k>>0];if(128<=g)f=aa;else if(0==g&&!b)break;k++;if(b&&k==b)break}b||(b=k);var n="";if(!f){for(;0<b;)g=String.fromCharCode.apply(String,bb.subarray(a,a+Math.min(b,1024))),n=n?n+g:g,a+=1024,b-=1024;return n}f=new i.M;for(k=0;k<b;k++)g=bb[a+k>>0],n+=f.ba(g);return n}h.Pointer_stringify=sa;h.UTF16ToString=function(a){for(var b=0,f="";;){var g=Ka[a+2*b>>1];if(0==g)return f;++b;f+=String.fromCharCode(g)}};
h.stringToUTF16=function(a,b){for(var f=0;f<a.length;++f)Ka[b+2*f>>1]=a.charCodeAt(f);Ka[b+2*a.length>>1]=0};h.UTF32ToString=function(a){for(var b=0,f="";;){var g=Ma[a+4*b>>2];if(0==g)return f;++b;65536<=g?(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023)):f+=String.fromCharCode(g)}};h.stringToUTF32=function(a,b){for(var f=0,g=0;g<a.length;++g){var k=a.charCodeAt(g);if(55296<=k&&57343>=k)var n=a.charCodeAt(++g),k=65536+((k&1023)<<10)|n&1023;Ma[b+4*f>>2]=k;++f}Ma[b+4*f>>2]=0};
function cb(a){function b(f,g,k){var g=g||Infinity,m="",n=[],R;if("N"===a[l]){l++;"K"===a[l]&&l++;for(R=[];"E"!==a[l];)if("S"===a[l]){l++;var na=a.indexOf("_",l);R.push(La[a.substring(l,na)||0]||"?");l=na+1}else if("C"===a[l])R.push(R[R.length-1]),l+=2;else{var na=parseInt(a.substr(l)),x=na.toString().length;if(!na||!x){l--;break}var ra=a.substr(l+x,na);R.push(ra);La.push(ra);l+=x+na}l++;R=R.join("::");g--;if(0===g)return f?[R]:R}else if(("K"===a[l]||Wa&&"L"===a[l])&&l++,na=parseInt(a.substr(l)))x=
na.toString().length,R=a.substr(l+x,na),l+=x+na;Wa=ba;"I"===a[l]?(l++,na=b(aa),x=b(aa,1,aa),m+=x[0]+" "+R+"<"+na.join(", ")+">"):m=R;a:for(;l<a.length&&0<g--;)if(R=a[l++],R in fa)n.push(fa[R]);else switch(R){case "P":n.push(b(aa,1,aa)[0]+"*");break;case "R":n.push(b(aa,1,aa)[0]+"&");break;case "L":l++;na=a.indexOf("E",l)-l;n.push(a.substr(l,na));l+=na+2;break;case "A":na=parseInt(a.substr(l));l+=na.toString().length;"_"!==a[l]&&c("?");l++;n.push(b(aa,1,aa)[0]+" ["+na+"]");break;case "E":break a;default:m+=
"?"+R;break a}!k&&(1===n.length&&"void"===n[0])&&(n=[]);return f?(m&&n.push(m+"?"),n):m+("("+n.join(", ")+")")}var f=!!h.___cxa_demangle;if(f)try{var g=$a(a.length);Ha(a.substr(1),g);var k=$a(4),n=h.___cxa_demangle(g,0,0,k);if(0===Ua(k,"i32")&&n)return sa(n)}catch(m){}finally{g&&db(g),k&&db(k),n&&db(n)}var l=3,fa={v:"void",b:"bool",c:"char",s:"short",i:"int",l:"long",f:"float",d:"double",w:"wchar_t",a:"signed char",h:"unsigned char",t:"unsigned short",j:"unsigned int",m:"unsigned long",x:"long long",
y:"unsigned long long",z:"..."},La=[],Wa=aa,g=a;try{if("Object._main"==a||"_main"==a)return"main()";"number"===typeof a&&(a=sa(a));if("_"!==a[0]||"_"!==a[1]||"Z"!==a[2])return a;switch(a[3]){case "n":return"operator new()";case "d":return"operator delete()"}g=b()}catch(ra){g+="?"}0<=g.indexOf("?")&&!f&&i.q("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return g}
function eb(){var a;a:{a=Error();if(!a.stack){try{c(Error(0))}catch(b){a=b}if(!a.stack){a="(no stack trace available)";break a}}a=a.stack.toString()}return a.replace(/__Z[\w\d_]+/g,function(a){var b=cb(a);return a===b?a:a+" ["+b+"]"})}h.stackTrace=function(){return eb()};for(var Ja,bb,Ka,fb,Ma,hb,Ra,Sa,ib=0,va=0,jb=0,qa=0,kb=0,lb=0,wa=0,mb=h.TOTAL_STACK||5242880,xa=h.TOTAL_MEMORY||16777216,nb=65536;nb<xa||nb<2*mb;)nb=16777216>nb?2*nb:nb+16777216;
nb!==xa&&(h.n("increasing TOTAL_MEMORY to "+nb+" to be more reasonable"),xa=nb);oa("undefined"!==typeof Int32Array&&"undefined"!==typeof Float64Array&&!!(new Int32Array(1)).subarray&&!!(new Int32Array(1)).set,"JS engine does not provide full typed array support");var ob=new ArrayBuffer(xa);Ja=new Int8Array(ob);Ka=new Int16Array(ob);Ma=new Int32Array(ob);bb=new Uint8Array(ob);fb=new Uint16Array(ob);hb=new Uint32Array(ob);Ra=new Float32Array(ob);Sa=new Float64Array(ob);Ma[0]=255;
oa(255===bb[0]&&0===bb[3],"Typed arrays 2 must be run on a little-endian system");h.HEAP=d;h.HEAP8=Ja;h.HEAP16=Ka;h.HEAP32=Ma;h.HEAPU8=bb;h.HEAPU16=fb;h.HEAPU32=hb;h.HEAPF32=Ra;h.HEAPF64=Sa;function pb(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b();else{var f=b.ra;"number"===typeof f?b.D===d?i.u("v",f):i.u("vi",f,[b.D]):f(b.D===d?e:b.D)}}}var qb=[],rb=[],sb=[],tb=[],ub=[],wb=ba;function xb(a){qb.unshift(a)}h.addOnPreRun=h.la=xb;h.addOnInit=h.ia=function(a){rb.unshift(a)};
h.addOnPreMain=h.ka=function(a){sb.unshift(a)};h.addOnExit=h.ha=function(a){tb.unshift(a)};function yb(a){ub.unshift(a)}h.addOnPostRun=h.ja=yb;function zb(a,b,f){a=(new i.M).ca(a);f&&(a.length=f);b||a.push(0);return a}h.intArrayFromString=zb;function Ab(a){for(var b=[],f=0;f<a.length;f++){var g=a[f];255<g&&(g&=255);b.push(String.fromCharCode(g))}return b.join("")}h.intArrayToString=Ab;function Ha(a,b,f){a=zb(a,f);for(f=0;f<a.length;)Ja[b+f>>0]=a[f],f+=1}h.writeStringToMemory=Ha;
function Ga(a,b){for(var f=0;f<a.length;f++)Ja[b+f>>0]=a[f]}h.writeArrayToMemory=Ga;h.writeAsciiToMemory=function(a,b,f){for(var g=0;g<a.length;g++)Ja[b+g>>0]=a.charCodeAt(g);f||(Ja[b+a.length>>0]=0)};function Bb(a,b){return 0<=a?a:32>=b?2*Math.abs(1<<b-1)+a:Math.pow(2,b)+a}function Cb(a,b){if(0>=a)return a;var f=32>=b?Math.abs(1<<b-1):Math.pow(2,b-1);if(a>=f&&(32>=b||a>f))a=-2*f+a;return a}
if(!Math.imul||-5!==Math.imul(4294967295,5))Math.imul=function(a,b){var f=a&65535,g=b&65535;return f*g+((a>>>16)*g+f*(b>>>16)<<16)|0};Math.xa=Math.imul;var Na=Math.abs,Db=Math.cos,Eb=Math.sin,Fb=Math.atan2,Gb=Math.sqrt,Qa=Math.ceil,Pa=Math.floor,Oa=Math.min,Hb=0,Ib=e,Jb=e;function Kb(){Hb++;h.monitorRunDependencies&&h.monitorRunDependencies(Hb)}h.addRunDependency=Kb;
function Lb(){Hb--;h.monitorRunDependencies&&h.monitorRunDependencies(Hb);if(0==Hb&&(Ib!==e&&(clearInterval(Ib),Ib=e),Jb)){var a=Jb;Jb=e;a()}}h.removeRunDependency=Lb;h.preloadedImages={};h.preloadedAudios={};var Mb=e,ib=8,va=ib+i.r(19235);rb.push();
Za([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,3,0,0,42,0,0,0,43,0,0,0,42,0,0,0,43,0,0,0,42,0,0,0,42,0,0,0,44,0,0,0,42,0,0,0,54,74,83,68,114,97,119,0,54,98,50,68,114,97,119,0,88,72,0,0,136,3,0,0,128,72,0,0,128,3,0,0,144,3,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,
40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,84,114,97,110,115,102,111,114,109,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,
58,58,68,114,97,119,84,114,97,110,115,102,111,114,109,46,39,59,32,115,101,108,102,46,68,114,97,119,84,114,97,110,115,102,111,114,109,40,36,49,41,59,32,125,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,83,101,103,109,101,110,116,39,41,41,32,116,104,
114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,83,101,103,109,101,110,116,46,39,59,32,115,101,108,102,46,68,114,97,119,83,101,103,109,101,110,116,40,36,49,44,36,50,44,36,51,41,59,32,125,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,
101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,83,111,108,105,100,67,105,114,99,108,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,
114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,83,111,108,105,100,67,105,114,99,108,101,46,39,59,32,115,101,108,102,46,68,114,97,119,83,111,108,105,100,67,105,114,99,108,101,40,36,49,44,36,50,44,36,51,44,36,52,41,59,32,125,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,
101,114,116,121,40,39,68,114,97,119,67,105,114,99,108,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,67,105,114,99,108,101,46,39,59,32,115,101,108,102,46,68,114,97,119,67,105,114,99,108,101,40,36,49,44,36,50,44,36,51,41,59,32,125,0,0,0,0,123,
32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,83,111,108,105,100,80,111,108,121,103,111,110,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,
32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,83,111,108,105,100,80,111,108,121,103,111,110,46,39,59,32,115,101,108,102,46,68,114,97,119,83,111,108,105,100,80,111,108,121,103,111,110,40,36,49,44,36,50,44,36,51,41,59,32,125,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,
93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,80,111,108,121,103,111,110,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,80,111,108,121,103,111,110,46,39,59,32,115,101,108,102,
46,68,114,97,119,80,111,108,121,103,111,110,40,36,49,44,36,50,44,36,51,41,59,32,125,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,111,110,116,97,99,116,70,105,108,116,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,39,41,41,32,116,104,114,111,119,32,
39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,67,111,110,116,97,99,116,70,105,108,116,101,114,58,58,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,46,39,59,32,115,101,108,102,46,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,40,41,59,32,125,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,
32,38,38,32,105,110,100,101,120,32,60,32,109,95,118,101,114,116,101,120,67,111,117,110,116,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,80,111,108,121,103,111,110,83,104,97,112,101,46,104,0,0,0,0,0,0,0,0,136,10,0,0,44,0,0,0,45,0,0,0,43,0,0,0,44,0,0,0,42,0,0,0,43,0,0,0,49,55,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,0,0,0,0,0,49,55,98,50,67,111,110,116,97,99,116,76,105,115,116,101,110,
101,114,0,0,0,0,0,88,72,0,0,104,10,0,0,128,72,0,0,80,10,0,0,128,10,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,80,111,115,116,83,111,108,118,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,
101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,58,58,80,111,115,116,83,111,108,118,101,46,39,59,32,115,101,108,102,46,80,111,115,116,83,111,108,118,101,40,36,49,44,36,50,41,59,32,125,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,
101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,80,114,101,83,111,108,118,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,
103,111,116,32,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,58,58,80,114,101,83,111,108,118,101,46,39,59,32,115,101,108,102,46,80,114,101,83,111,108,118,101,40,36,49,44,36,50,41,59,32,125,0,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,
110,80,114,111,112,101,114,116,121,40,39,69,110,100,67,111,110,116,97,99,116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,58,58,69,110,100,67,111,110,116,97,99,116,46,39,59,32,115,101,108,102,46,69,110,100,67,111,110,116,97,
99,116,40,36,49,41,59,32,125,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,66,101,103,105,110,67,111,110,116,97,99,116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,
111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,58,58,66,101,103,105,110,67,111,110,116,97,99,116,46,39,59,32,115,101,108,102,46,66,101,103,105,110,67,111,110,116,97,99,116,40,36,49,41,59,32,125,0,0,0,0,0,0,0,0,0,0,144,14,0,0,46,0,0,0,47,0,0,0,42,0,0,0,0,0,0,0,49,55,74,83,82,97,121,67,97,115,116,67,97,108,108,98,97,99,107,
0,0,0,0,0,49,55,98,50,82,97,121,67,97,115,116,67,97,108,108,98,97,99,107,0,0,0,0,0,88,72,0,0,112,14,0,0,128,72,0,0,88,14,0,0,136,14,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,82,97,121,67,97,115,116,67,97,108,108,98,97,99,107,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,82,101,112,111,114,116,70,105,120,116,
117,114,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,82,97,121,67,97,115,116,67,97,108,108,98,97,99,107,58,58,82,101,112,111,114,116,70,105,120,116,117,114,101,46,39,59,32,114,101,116,117,114,110,32,115,101,108,102,46,82,101,112,111,114,116,70,105,120,116,117,114,101,40,36,
49,44,36,50,44,36,51,44,36,52,41,59,32,125,0,0,0,0,0,0,0,240,15,0,0,48,0,0,0,49,0,0,0,42,0,0,0,0,0,0,0,49,53,74,83,81,117,101,114,121,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,49,53,98,50,81,117,101,114,121,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,88,72,0,0,208,15,0,0,128,72,0,0,184,15,0,0,232,15,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,81,117,101,114,121,67,97,108,108,98,97,99,107,
39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,82,101,112,111,114,116,70,105,120,116,117,114,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,81,117,101,114,121,67,97,108,108,98,97,99,107,58,58,82,101,112,
111,114,116,70,105,120,116,117,114,101,46,39,59,32,114,101,116,117,114,110,32,115,101,108,102,46,82,101,112,111,114,116,70,105,120,116,117,114,101,40,36,49,41,59,32,125,0,0,0,0,0,0,0,0,48,32,60,61,32,99,104,105,108,100,73,110,100,101,120,32,38,38,32,99,104,105,108,100,73,110,100,101,120,32,60,32,109,95,112,114,111,120,121,67,111,117,110,116,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,104,0,71,101,116,65,
65,66,66,0,98,50,73,115,86,97,108,105,100,40,100,101,110,115,105,116,121,41,32,38,38,32,100,101,110,115,105,116,121,32,62,61,32,48,46,48,102,0,0,0,83,101,116,68,101,110,115,105,116,121,0,0,0,0,0,0,0,0,0,0,32,18,0,0,50,0,0,0,51,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,50,49,74,83,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,0,50,56,98,50,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,87,114,97,112,112,101,114,0,0,50,49,98,50,68,101,115,116,114,
117,99,116,105,111,110,76,105,115,116,101,110,101,114,0,88,72,0,0,232,17,0,0,224,72,0,0,200,17,0,0,0,0,0,0,1,0,0,0,0,18,0,0,0,0,0,0,128,72,0,0,176,17,0,0,8,18,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,
121,40,39,83,97,121,71,111,111,100,98,121,101,70,105,120,116,117,114,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,58,58,83,97,121,71,111,111,100,98,121,101,70,105,120,116,117,114,101,46,39,59,32,115,101,
108,102,46,83,97,121,71,111,111,100,98,121,101,70,105,120,116,117,114,101,40,36,49,41,59,32,125,0,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,83,97,121,71,111,111,100,98,121,101,74,111,105,110,
116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,58,58,83,97,121,71,111,111,100,98,121,101,74,111,105,110,116,46,39,59,32,115,101,108,102,46,83,97,121,71,111,111,100,98,121,101,74,111,105,110,116,40,36,49,
41,59,32,125,0,0,0,0,0,100,101,110,32,62,32,48,46,48,102,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,69,100,103,101,46,99,112,112,0,0,98,50,67,111,108,108,105,100,101,69,100,103,101,65,110,100,67,105,114,99,108,101,0,0,48,32,60,61,32,101,100,103,101,49,32,38,38,32,101,100,103,101,49,32,60,32,112,111,108,121,49,45,62,109,95,118,101,114,116,101,120,67,111,117,110,116,0,0,0,0,0,0,66,111,120,50,68,95,
118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,80,111,108,121,103,111,110,46,99,112,112,0,0,0,0,0,0,0,98,50,70,105,110,100,73,110,99,105,100,101,110,116,69,100,103,101,0,0,0,0,0,0,98,50,69,100,103,101,83,101,112,97,114,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,99,104,97,105,110,45,62,109,95,99,111,117,110,116,0,0,0,0,
66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,99,112,112,0,0,0,0,0,98,50,68,105,115,116,97,110,99,101,0,0,0,0,0,0,71,101,116,77,101,116,114,105,99,0,0,0,0,0,0,0,71,101,116,87,105,116,110,101,115,115,80,111,105,110,116,115,0,0,0,0,0,0,0,0,71,101,116,83,101,97,114,99,104,68,105,114,101,99,116,105,111,110,0,0,0,0,0,0,71,101,116,67,108,111,115,101,115,116,80,111,105,110,116,0,99,97,99,104,101,45,62,99,111,117,
110,116,32,60,61,32,51,0,0,0,0,0,0,0,82,101,97,100,67,97,99,104,101,0,0,0,0,0,0,0,109,95,110,111,100,101,67,111,117,110,116,32,61,61,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,99,112,112,0,0,65,108,108,111,99,97,116,101,78,111,100,101,0,0,0,0,48,32,60,61,32,110,111,100,101,73,100,32,38,38,32,110,111,100,101,73,100,32,60,32,109,95,110,
111,100,101,67,97,112,97,99,105,116,121,0,0,70,114,101,101,78,111,100,101,0,0,0,0,0,0,0,0,48,32,60,32,109,95,110,111,100,101,67,111,117,110,116,0,68,101,115,116,114,111,121,80,114,111,120,121,0,0,0,0,109,95,110,111,100,101,115,91,112,114,111,120,121,73,100,93,46,73,115,76,101,97,102,40,41,0,0,0,0,0,0,0,77,111,118,101,80,114,111,120,121,0,0,0,0,0,0,0,99,104,105,108,100,49,32,33,61,32,40,45,49,41,0,0,73,110,115,101,114,116,76,101,97,102,0,0,0,0,0,0,99,104,105,108,100,50,32,33,61,32,40,45,49,41,0,0,
105,65,32,33,61,32,40,45,49,41,0,0,0,0,0,0,66,97,108,97,110,99,101,0,48,32,60,61,32,105,66,32,38,38,32,105,66,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,67,32,38,38,32,105,67,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,70,32,38,38,32,105,70,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,71,32,38,38,32,105,71,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,109,95,110,111,
100,101,115,91,67,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,48,32,60,61,32,105,68,32,38,38,32,105,68,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,69,32,38,38,32,105,69,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,109,95,110,111,100,101,115,91,66,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,110,111,100,101,45,62,73,115,76,101,97,102,40,41,32,61,61,32,102,97,108,115,101,0,71,
101,116,77,97,120,66,97,108,97,110,99,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,97,114,103,101,116,32,62,32,116,111,108,101,114,97,110,99,101,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,84,105,109,101,79,102,73,109,112,97,99,116,46,99,112,112,0,98,50,84,105,109,101,79,102,73,109,112,97,99,116,0,0,69,118,97,108,117,97,116,101,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,
32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,104,0,0,0,0,0,0,0,71,101,116,86,101,114,116,101,120,0,0,0,0,0,0,0,70,105,110,100,77,105,110,83,101,112,97,114,97,116,105,111,110,0,0,0,0,0,0,0,48,32,60,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,32,51,0,0,0,0,0,0,216,26,0,0,52,0,0,0,53,0,0,0,43,0,0,0,42,0,0,0,42,0,0,0,42,0,
0,0,45,0,0,0,42,0,0,0,109,95,118,101,114,116,105,99,101,115,32,61,61,32,48,76,32,38,38,32,109,95,99,111,117,110,116,32,61,61,32,48,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,67,104,97,105,110,83,104,97,112,101,46,99,112,112,0,0,0,0,67,114,101,97,116,101,76,111,111,112,0,0,0,0,0,0,67,114,101,97,116,101,67,104,97,105,110,0,0,0,0,0,99,111,117,110,116,32,62,61,32,50,0,0,0,0,0,0,48,32,60,61,32,105,110,
100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,32,45,32,49,0,0,0,0,0,0,0,71,101,116,67,104,105,108,100,69,100,103,101,0,0,0,0,99,104,105,108,100,73,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0,0,0,0,67,111,109,112,117,116,101,65,65,66,66,0,0,0,0,0,49,50,98,50,67,104,97,105,110,83,104,97,112,101,0,0,55,98,50,83,104,97,112,101,0,0,0,0,0,0,0,0,88,72,0,0,192,26,0,0,128,72,0,0,176,26,0,0,208,26,0,0,0,0,0,0,0,0,0,0,32,27,0,0,54,0,0,0,55,0,0,0,44,0,0,0,43,0,0,0,43,
0,0,0,43,0,0,0,46,0,0,0,43,0,0,0,49,51,98,50,67,105,114,99,108,101,83,104,97,112,101,0,128,72,0,0,16,27,0,0,208,26,0,0,0,0,0,0,0,0,0,0,104,27,0,0,56,0,0,0,57,0,0,0,45,0,0,0,44,0,0,0,44,0,0,0,44,0,0,0,47,0,0,0,44,0,0,0,49,49,98,50,69,100,103,101,83,104,97,112,101,0,0,0,128,72,0,0,88,27,0,0,208,26,0,0,0,0,0,0,51,32,60,61,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,61,32,56,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,
47,83,104,97,112,101,115,47,98,50,80,111,108,121,103,111,110,83,104,97,112,101,46,99,112,112,0,0,83,101,116,0,0,0,0,0,101,100,103,101,46,76,101,110,103,116,104,83,113,117,97,114,101,100,40,41,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,32,42,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,0,0,0,0,0,0,0,48,46,48,102,32,60,61,32,108,111,119,101,114,32,38,38,32,108,111,119,101,114,32,60,61,32,105,110,112,117,116,46,109,97,120,70,114,97,99,
116,105,111,110,0,0,0,0,0,109,95,118,101,114,116,101,120,67,111,117,110,116,32,62,61,32,51,0,0,0,0,0,0,67,111,109,112,117,116,101,77,97,115,115,0,0,0,0,0,97,114,101,97,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,0,0,0,0,0,224,28,0,0,58,0,0,0,59,0,0,0,46,0,0,0,45,0,0,0,45,0,0,0,45,0,0,0,48,0,0,0,45,0,0,0,49,52,98,50,80,111,108,121,103,111,110,83,104,97,112,101,0,0,0,0,0,0,0,0,128,72,0,0,200,28,0,0,208,26,0,0,0,0,0,0,99,111,117,110,116,32,62,61,32,51,0,0,0,0,0,0,
67,111,109,112,117,116,101,67,101,110,116,114,111,105,100,0,16,0,0,0,32,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,128,1,0,0,192,1,0,0,0,2,0,0,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,
32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,0,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,0,0,0,0,0,0,0,0,48,32,60,32,115,105,122,101,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,0,0,0,0,98,108,111,99,107,67,
111,117,110,116,32,42,32,98,108,111,99,107,83,105,122,101,32,60,61,32,98,50,95,99,104,117,110,107,83,105,122,101,0,0,109,95,105,110,100,101,120,32,61,61,32,48,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,0,126,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,61,61,32,48,0,0,0,0,0,0,0,109,95,101,110,116,114,
121,67,111,117,110,116,32,60,32,98,50,95,109,97,120,83,116,97,99,107,69,110,116,114,105,101,115,0,0,0,0,0,0,0,65,108,108,111,99,97,116,101,0,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,70,114,101,101,0,0,0,0,112,32,61,61,32,101,110,116,114,121,45,62,100,97,116,97,0,0,0,0,0,0,0,0,98,100,45,62,112,111,115,105,116,105,111,110,46,73,115,86,97,108,105,100,40,41,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,
98,50,66,111,100,121,46,99,112,112,0,0,98,50,66,111,100,121,0,0,98,100,45,62,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,73,115,86,97,108,105,100,40,41,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,108,101,41,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,41,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,97,110,103,117,
108,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,109,95,119,111,114,108,100,45,62,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,0,0,0,83,101,116,84,121,112,101,0,67,114,101,97,116,101,70,105,120,116,117,114,101,0,0,0,68,101,115,116,114,111,121,
70,105,120,116,117,114,101,0,0,102,105,120,116,117,114,101,45,62,109,95,98,111,100,121,32,61,61,32,116,104,105,115,0,109,95,102,105,120,116,117,114,101,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,102,111,117,110,100,0,0,0,109,95,116,121,112,101,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,0,0,0,0,0,0,82,101,115,101,116,77,97,115,115,68,97,116,97,0,0,0,109,95,73,32,62,32,48,46,48,102,0,0,0,0,0,0,83,101,116,77,97,115,115,68,97,116,97,0,0,0,0,0,83,101,116,84,114,97,110,115,102,111,
114,109,0,0,0,0,83,101,116,65,99,116,105,118,101,0,0,0,0,0,0,0,32,32,98,50,66,111,100,121,68,101,102,32,98,100,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,116,121,112,101,32,61,32,98,50,66,111,100,121,84,121,112,101,40,37,100,41,59,10,0,0,0,0,32,32,98,100,46,112,111,115,105,116,105,111,110,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,98,100,46,97,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,98,100,46,108,105,110,101,97,114,86,101,108,111,
99,105,116,121,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,98,100,46,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,108,105,110,101,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,98,100,46,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,98,100,46,97,108,108,111,119,83,108,101,101,112,
32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,32,32,98,100,46,97,119,97,107,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0,32,32,98,100,46,102,105,120,101,100,82,111,116,97,116,105,111,110,32,61,32,98,111,111,108,40,37,100,41,59,10,0,32,32,98,100,46,98,117,108,108,101,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,97,99,116,105,118,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,103,114,97,118,105,116,121,83,99,97,108,101,32,61,
32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,98,111,100,105,101,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,66,111,100,121,40,38,98,100,41,59,10,0,0,0,0,0,0,0,32,32,123,10,0,0,0,0,32,32,125,10,0,0,0,0,16,47,0,0,0,0,0,0,240,37,0,0,0,0,0,0,109,95,99,111,117,110,116,32,62,32,48,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,46,104,0,0,0,0,0,80,111,112,0,0,0,0,0,
0,0,0,0,128,10,0,0,60,0,0,0,61,0,0,0,49,0,0,0,50,0,0,0,44,0,0,0,45,0,0,0,109,95,112,114,111,120,121,67,111,117,110,116,32,61,61,32,48,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,99,112,112,0,0,0,0,0,0,0,67,114,101,97,116,101,80,114,111,120,105,101,115,0,0,0,32,32,32,32,98,50,70,105,120,116,117,114,101,68,101,102,32,102,100,59,10,0,0,0,32,32,32,32,102,100,46,102,114,105,99,116,105,111,110,32,61,32,37,
46,49,53,108,101,102,59,10,0,0,0,0,0,32,32,32,32,102,100,46,114,101,115,116,105,116,117,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,32,32,102,100,46,100,101,110,115,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,32,32,32,32,102,100,46,105,115,83,101,110,115,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,99,97,116,101,103,111,114,121,66,105,116,115,32,61,32,117,105,110,116,49,54,40,37,100,41,59,10,0,
0,0,0,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,109,97,115,107,66,105,116,115,32,61,32,117,105,110,116,49,54,40,37,100,41,59,10,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,103,114,111,117,112,73,110,100,101,120,32,61,32,105,110,116,49,54,40,37,100,41,59,10,0,0,32,32,32,32,98,50,67,105,114,99,108,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,114,97,100,105,117,115,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,32,
32,115,104,97,112,101,46,109,95,112,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,32,32,98,50,69,100,103,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116],"i8",Ya,i.L);
Za([101,120,48,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,49,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,50,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,51,46,83,101,116,
40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,48,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,51,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,32,32,32,32,98,50,80,111,108,121,103,111,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,0,0,32,32,32,32,98,50,86,101,99,50,32,118,115,91,37,100,93,59,10,
0,0,0,0,0,32,32,32,32,118,115,91,37,100,93,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,83,101,116,40,118,115,44,32,37,100,41,59,10,0,32,32,32,32,98,50,67,104,97,105,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,67,114,101,97,116,101,67,104,97,105,110,40,118,115,44,32,37,100,41,59,10,0,32,32,32,32,115,104,97,112,101,46,109,95,112,114,101,118,86,101,114,116,101,120,
46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,110,101,120,116,86,101,114,116,101,120,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,80,114,101,118,86,101,114,116,101,120,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,78,101,120,116,86,101,114,116,101,120,32,61,32,98,111,111,108,40,
37,100,41,59,10,0,0,10,0,0,0,0,0,0,0,32,32,32,32,102,100,46,115,104,97,112,101,32,61,32,38,115,104,97,112,101,59,10,0,32,32,32,32,98,111,100,105,101,115,91,37,100,93,45,62,67,114,101,97,116,101,70,105,120,116,117,114,101,40,38,102,100,41,59,10,0,0,0,0,116,111,105,73,110,100,101,120,65,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,99,112,112,0,0,0,0,0,0,0,0,116,111,105,
73,110,100,101,120,66,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,87,111,114,108,100,46,99,112,112,0,67,114,101,97,116,101,66,111,100,121,0,0,0,0,0,0,109,95,98,111,100,121,67,111,117,110,116,32,62,32,48,0,68,101,115,116,114,111,121,66,111,100,121,0,0,0,0,0,67,114,101,97,116,101,74,111,105,110,116,0,0,0,0,0,68,101,115,
116,114,111,121,74,111,105,110,116,0,0,0,0,109,95,106,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,98,45,62,73,115,65,99,116,105,118,101,40,41,32,61,61,32,116,114,117,101,0,0,0,83,111,108,118,101,0,0,0,115,116,97,99,107,67,111,117,110,116,32,60,32,115,116,97,99,107,83,105,122,101,0,0,116,121,112,101,65,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,32,124,124,32,116,121,112,101,66,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,0,0,0,0,83,111,108,
118,101,84,79,73,0,0,0,0,0,0,0,0,97,108,112,104,97,48,32,60,32,49,46,48,102,0,0,0,118,101,114,116,101,120,67,111,117,110,116,32,60,61,32,56,0,0,0,0,0,0,0,0,68,114,97,119,83,104,97,112,101,0,0,0,0,0,0,0,98,50,86,101,99,50,32,103,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,109,95,119,111,114,108,100,45,62,83,101,116,71,114,97,118,105,116,121,40,103,41,59,10,0,0,0,0,0,0,0,0,98,50,66,111,100,121,42,42,32,98,111,100,105,101,115,32,61,32,40,98,50,66,111,100,121,42,42,41,98,
50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,66,111,100,121,42,41,41,59,10,0,0,0,0,0,98,50,74,111,105,110,116,42,42,32,106,111,105,110,116,115,32,61,32,40,98,50,74,111,105,110,116,42,42,41,98,50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,74,111,105,110,116,42,41,41,59,10,0,0,123,10,0,0,0,0,0,0,125,10,0,0,0,0,0,0,98,50,70,114,101,101,40,106,111,105,110,116,115,41,59,10,0,0,0,0,0,0,0,0,98,50,70,114,101,101,40,98,111,100,105,101,115,41,59,10,0,0,
0,0,0,0,0,0,106,111,105,110,116,115,32,61,32,78,85,76,76,59,10,0,98,111,100,105,101,115,32,61,32,78,85,76,76,59,10,0,114,46,76,101,110,103,116,104,83,113,117,97,114,101,100,40,41,32,62,32,48,46,48,102,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,104,0,0,0,0,82,97,121,67,97,115,116,0,48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,
110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,0,0,0,0,0,71,101,116,85,115,101,114,68,97,116,97,0,0,0,0,0,71,101,116,70,97,116,65,65,66,66,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,77,97,116,104,46,104,0,0,0,0,0,0,65,100,118,97,110,99,101,0,109,95,106,111,105,110,116,67,111,117,110,116,32,60,32,109,95,106,111,105,110,116,67,97,112,97,99,105,116,121,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,
105,99,115,47,98,50,73,115,108,97,110,100,46,104,0,0,65,100,100,0,0,0,0,0,109,95,99,111,110,116,97,99,116,67,111,117,110,116,32,60,32,109,95,99,111,110,116,97,99,116,67,97,112,97,99,105,116,121,0,0,0,0,0,0,109,95,98,111,100,121,67,111,117,110,116,32,60,32,109,95,98,111,100,121,67,97,112,97,99,105,116,121,0,0,0,0,0,0,0,0,56,47,0,0,62,0,0,0,63,0,0,0,46,0,0,0,0,0,0,0,49,53,98,50,67,111,110,116,97,99,116,70,105,108,116,101,114,0,0,0,0,0,0,0,88,72,0,0,32,47,0,0,0,0,0,0,240,47,0,0,49,0,0,0,64,0,0,0,65,
0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,0,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,50,51,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,57,98,50,67,111,110,116,97,99,116,0,0,0,0,0,0,88,72,0,0,216,47,
0,0,128,72,0,0,184,47,0,0,232,47,0,0,0,0,0,0,0,0,0,0,208,48,0,0,50,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,98,50,
67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,50,52,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,128,72,0,0,176,48,0,0,232,47,0,0,0,0,0,0,0,0,0,0,144,49,0,0,51,0,0,0,68,0,0,0,69,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,
111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,0,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,49,53,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,128,72,0,0,120,49,0,0,232,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,32,60,61,32,116,121,112,101,49,32,38,38,32,116,121,112,101,49,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,
99,116,115,47,98,50,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,48,32,60,61,32,116,121,112,101,50,32,38,38,32,116,121,112,101,50,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,115,95,105,110,105,116,105,97,108,105,122,101,100,32,61,61,32,116,114,117,101,0,0,0,48,32,60,61,32,116,121,112,101,65,32,38,38,32,116,121,112,101,66,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,112,111,105,110,116,67,111,117,
110,116,32,62,32,48,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,46,99,112,112,0,0,0,0,0,0,0,0,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,0,109,97,110,105,102,111,108,100,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,
0,0,0,112,111,105,110,116,67,111,117,110,116,32,61,61,32,49,32,124,124,32,112,111,105,110,116,67,111,117,110,116,32,61,61,32,50,0,0,0,0,0,0,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,0,0,0,0,0,0,0,97,46,120,32,62,61,32,48,46,48,102,32,38,38,32,97,46,121,32,62,61,32,48,46,48,102,0,0,0,0,0,0,112,99,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,0,0,248,52,0,0,52,0,0,0,70,0,0,0,71,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,
50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,50,50,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,128,72,0,0,216,52,0,0,232,47,0,0,0,0,0,0,0,0,0,0,208,53,0,0,53,0,0,0,72,0,0,0,73,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,
101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,0,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,50,51,98,50,69,100,103,101,65,110,100,80,111,108,
121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,128,72,0,0,176,53,0,0,232,47,0,0,0,0,0,0,0,0,0,0,176,54,0,0,54,0,0,0,74,0,0,0,75,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,109,
95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,50,53,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,128,72,0,0,144,54,0,0,232,47,0,0,0,0,0,0,0,0,0,0,168,55,0,0,55,0,0,0,76,0,0,0,77,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,
111,110,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,49,54,98,50,80,111,108,121,103,111,
110,67,111,110,116,97,99,116,0,0,0,0,0,0,128,72,0,0,144,55,0,0,232,47,0,0,0,0,0,0,0,0,0,0,80,56,0,0,51,0,0,0,52,0,0,0,46,0,0,0,42,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,53,0,0,0,54,0,0,0,47,0,0,0,32,32,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,0,32,32,106,100,46,108,101,110,103,116,104,32,61,32,37,46,49,53,108,101,102,59,10,0,49,53,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,0,0,0,0,0,0,0,55,98,50,74,111,105,110,116,0,0,0,0,0,0,0,0,88,72,0,0,
56,56,0,0,128,72,0,0,32,56,0,0,72,56,0,0,0,0,0,0,0,0,0,0,176,57,0,0,55,0,0,0,56,0,0,0,47,0,0,0,43,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,57,0,0,0,58,0,0,0,48,0,0,0,98,50,73,115,86,97,108,105,100,40,102,111,114,99,101,41,32,38,38,32,102,111,114,99,101,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,46,99,112,112,0,0,83,101,116,77,97,120,70,
111,114,99,101,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,116,111,114,113,117,101,41,32,38,38,32,116,111,114,113,117,101,32,62,61,32,48,46,48,102,0,0,0,0,0,83,101,116,77,97,120,84,111,114,113,117,101,0,0,0,0,32,32,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,0,32,32,106,100,46,109,97,120,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,32,32,106,100,46,109,97,120,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,
0,0,0,0,0,0,49,53,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,0,0,0,0,0,0,0,128,72,0,0,152,57,0,0,72,56,0,0,0,0,0,0,0,0,0,0,72,59,0,0,59,0,0,0,60,0,0,0,48,0,0,0,44,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,61,0,0,0,62,0,0,0,49,0,0,0,109,95,116,121,112,101,65,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,65,32,61,61,32,101,95,112,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,
111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,71,101,97,114,74,111,105,110,116,46,99,112,112,0,0,0,0,0,0,98,50,71,101,97,114,74,111,105,110,116,0,0,0,0,0,109,95,116,121,112,101,66,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,66,32,61,61,32,101,95,112,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,114,97,116,105,111,41,0,0,0,0,0,0,0,0,83,101,116,82,97,116,
105,111,0,0,0,0,0,0,0,0,32,32,98,50,71,101,97,114,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,106,111,105,110,116,49,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0,0,0,0,0,0,32,32,106,100,46,106,111,105,110,116,50,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0,0,0,0,0,0,49,49,98,50,71,101,97,114,74,111,105,110,116,0,0,0,128,72,0,0,56,59,0,0,72,56,0,0,0,0,0,0,102,97,108,115,101,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,
109,105,99,115,47,74,111,105,110,116,115,47,98,50,74,111,105,110,116,46,99,112,112,0,0,67,114,101,97,116,101,0,0,68,101,115,116,114,111,121,0,0,0,0,0,72,56,0,0,42,0,0,0,42,0,0,0,42,0,0,0,42,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,42,0,0,0,42,0,0,0,42,0,0,0,100,101,102,45,62,98,111,100,121,65,32,33,61,32,100,101,102,45,62,98,111,100,121,66,0,0,0,0,0,0,0,0,98,50,74,111,105,110,116,0,47,47,32,68,117,109,112,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,116,104,105,115,32,
106,111,105,110,116,32,116,121,112,101,46,10,0,0,0,0,0,0,184,61,0,0,63,0,0,0,64,0,0,0,49,0,0,0,45,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,65,0,0,0,66,0,0,0,50,0,0,0,100,101,102,45,62,116,97,114,103,101,116,46,73,115,86,97,108,105,100,40,41,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,77,111,117,115,101,74,111,105,110,116,46,99,112,112,0,0,0,0,0,98,50,77,111,117,115,101,74,111,105,110,116,0,0,0,0,98,50,73,115,86,97,108,
105,100,40,100,101,102,45,62,109,97,120,70,111,114,99,101,41,32,38,38,32,100,101,102,45,62,109,97,120,70,111,114,99,101,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,41,32,38,38,32,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,32,62,61,32,48,46,48,102,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,100,97,109,112,105,110,103,82,97,116,105,111,41,32,38,38,32,100,101,102,45,62,100,97,109,112,105,
110,103,82,97,116,105,111,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,100,32,43,32,104,32,42,32,107,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,0,0,0,0,73,110,105,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,49,50,98,50,77,111,117,115,101,74,111,105,110,116,0,0,128,72,0,0,168,61,0,0,72,56,0,0,0,0,0,0,77,111,117,115,101,32,106,111,105,110,116,32,100,117,109,112,105,110,103,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,
100,46,10,0,0,0,0,0,0,0,63,0,0,67,0,0,0,68,0,0,0,50,0,0,0,46,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,69,0,0,0,70,0,0,0,51,0,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,46,99,112,112,0,32,32,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,32,32,106,100,46,108,111,119,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,
32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,32,32,106,100,46,117,112,112,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,32,32,106,100,46,109,97,120,77,111,116,111,114,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,49,54,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,0,0,0,0,128,72,0,0,232,62,0,0,72,56,0,0,0,0,0,0,114,97,116,105,111,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,
66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,117,108,108,101,121,74,111,105,110,116,46,99,112,112,0,0,0,0,73,110,105,116,105,97,108,105,122,101,0,0,0,0,0,0,0,0,0,0,176,64,0,0,71,0,0,0,72,0,0,0,51,0,0,0,47,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,73,0,0,0,74,0,0,0,52,0,0,0,100,101,102,45,62,114,97,116,105,111,32,33,61,32,48,46,48,102,0,0,0,0,0,0,98,50,80,117,108,108,101,121,74,111,105,110,116,0,0,0,32,32,98,50,80,117,108,108,
101,121,74,111,105,110,116,68,101,102,32,106,100,59,10,0,32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,32,32,106,100,46,108,101,110,103,116,104,65,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,0,32,32,106,100,46,108,101,110,
103,116,104,66,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,0,32,32,106,100,46,114,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,49,51,98,50,80,117,108,108,101,121,74,111,105,110,116,0,128,72,0,0,160,64,0,0,72,56,0,0,0,0,0,0,0,0,0,0,224,65,0,0,75,0,0,0,76,0,0,0,52,0,0,0,48,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,77,0,0,0,78,0,0,0,53,0,0,0,108,111,119,101,114,32,60,61,32,117,112,112,101,114,0,0,66,111,120,50,68,95,118,50,46,50,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,
47,74,111,105,110,116,115,47,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,46,99,112,112,0,0,83,101,116,76,105,109,105,116,115,0,0,0,0,0,0,0,32,32,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,0,32,32,106,100,46,101,110,97,98,108,101,76,105,109,105,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,108,111,119,101,114,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,32,32,106,100,46,117,112,112,101,114,
65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,49,53,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,0,0,0,0,0,0,0,128,72,0,0,200,65,0,0,72,56,0,0,0,0,0,0,0,0,0,0,104,66,0,0,79,0,0,0,80,0,0,0,53,0,0,0,49,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,81,0,0,0,82,0,0,0,54,0,0,0,32,32,98,50,82,111,112,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,109,97,120,76,101,110,103,116,104,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,49,49,98,50,82,111,112,
101,74,111,105,110,116,0,0,0,128,72,0,0,88,66,0,0,72,56,0,0,0,0,0,0,0,0,0,0,240,66,0,0,83,0,0,0,84,0,0,0,54,0,0,0,50,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,85,0,0,0,86,0,0,0,55,0,0,0,32,32,98,50,87,101,108,100,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,114,101,102,101,114,101,110,99,101,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,49,49,98,50,87,101,108,100,74,111,105,110,116,0,0,0,128,72,0,0,224,66,0,0,72,56,0,0,0,0,0,0,0,0,0,0,24,69,0,0,87,0,0,0,88,0,0,0,55,
0,0,0,51,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,89,0,0,0,90,0,0,0,56,0,0,0,32,32,98,50,87,104,101,101,108,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,0,0,0,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,0,0,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,0,32,32,106,100,
46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,0,32,32,106,100,46,108,111,99,97,108,65,120,105,115,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,32,32,106,100,46,101,110,97,98,108,101,77,111,116,111,114,32,61,32,98,111,
111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,109,111,116,111,114,83,112,101,101,100,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,32,32,106,100,46,109,97,120,77,111,116,111,114,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,106,100,46,102,114,101,113,117,101,110,99,121,72,122,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,32,32,106,100,46,100,97,109,112,105,110,103,82,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,106,111,105,110,116,115,91,37,100,
93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,0,0,0,0,49,50,98,50,87,104,101,101,108,74,111,105,110,116,0,0,128,72,0,0,8,69,0,0,72,56,0,0,0,0,0,0,43,0,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,
116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,
115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,200,70,0,0,111,0,0,0,112,0,0,0,46,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,
97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,128,72,0,0,184,70,0,0,80,71,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,
112,116,105,111,110,0,0,0,0,88,72,0,0,64,71,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,88,72,0,0,88,71,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,128,72,0,0,112,71,0,0,104,71,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,128,72,0,0,168,71,0,0,152,71,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,
49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,128,72,0,0,8,72,0,0,152,71,0,0,0,0,0,0,128,72,0,0,224,71,0,0,48,72,0,0,0,0,0,0,0,0,0,0,208,71,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,47,0,0,0,42,0,0,0,42,0,0,0,56,0,0,0,0,0,0,0,200,72,0,0,113,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,47,0,0,0,43,0,0,0,43,0,0,0,57,0,0,0,78,49,48,95,95,
99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,128,72,0,0,160,72,0,0,208,71,0,0,0,0,0,0,0,0,0,0,40,73,0,0,113,0,0,0,118,0,0,0,115,0,0,0,116,0,0,0,47,0,0,0,44,0,0,0,44,0,0,0,58,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,128,72,0,0,0,73,0,0,208,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",Ya,i.L+10240);var Nb=i.r(Za(12,"i8",Xa),8);oa(0==Nb%8);var Ob=Pa;
function Pb(){return!!Pb.K}var Qb=0,Rb=[],Sb={};function Tb(a){if(!a||Sb[a])return a;for(var b in Sb)if(Sb[b].N===a)return b;return a}
function Ub(){var a=Qb;if(!a)return(j.setTempRet0(0),0)|0;var b=Sb[a],f=b.type;if(!f)return(j.setTempRet0(0),a)|0;var g=Array.prototype.slice.call(arguments);h.___cxa_is_pointer_type(f);Ub.buffer||(Ub.buffer=$a(4));Ma[Ub.buffer>>2]=a;for(var a=Ub.buffer,k=0;k<g.length;k++)if(g[k]&&h.___cxa_can_catch(g[k],f,a))return a=Ma[a>>2],b.N=a,(j.setTempRet0(g[k]),a)|0;a=Ma[a>>2];return(j.setTempRet0(f),a)|0}h._memset=Vb;function Wb(a,b){Wb.H||(Wb.H={});a in Wb.H||(i.u("v",b),Wb.H[a]=1)}h._strlen=Xb;
var ua=d,Yb=0;function Zb(a){return Ma[Yb>>2]=a}var $b=9;function ac(a,b,f){a=ua.Y(a);if(!a)return Zb($b),-1;try{return ua.write(a,Ja,b,f)}catch(g){return ua.$(g),-1}}function bc(a){a=ua.R(a);return!a?-1:a.qa}function cc(a,b){var f=Bb(a&255);Ja[cc.T>>0]=f;var g=bc(b);if(-1==ac(g,cc.T,1)){if(f=ua.R(b))f.error=aa;return-1}return f}var dc={},ec=1;function fc(a,b,f,g){f*=b;if(0==f)return 0;var k=bc(g),a=ac(k,a,f);if(-1==a){if(b=ua.R(g))b.error=aa;return 0}return a/b|0}
function gc(a){return 0>a||0===a&&-Infinity===1/a}
function hc(a,b){function f(a){var f;"double"===a?f=(Ma[Nb>>2]=Ma[b+k>>2],Ma[Nb+4>>2]=Ma[b+(k+4)>>2],+Sa[Nb>>3]):"i64"==a?f=[Ma[b+k>>2],Ma[b+(k+4)>>2]]:(a="i32",f=Ma[b+k>>2]);k+=i.P(a);return f}for(var g=a,k=0,n=[],m,l;;){var fa=g;m=Ja[g>>0];if(0===m)break;l=Ja[g+1>>0];if(37==m){var La=ba,Wa=ba,ra=ba,ya=ba,gb=ba;a:for(;;){switch(l){case 43:La=aa;break;case 45:Wa=aa;break;case 35:ra=aa;break;case 48:if(ya)break a;else{ya=aa;break}case 32:gb=aa;break;default:break a}g++;l=Ja[g+1>>0]}var Ta=0;if(42==
l)Ta=f("i32"),g++,l=Ja[g+1>>0];else for(;48<=l&&57>=l;)Ta=10*Ta+(l-48),g++,l=Ja[g+1>>0];var ab=ba,Aa=-1;if(46==l){Aa=0;ab=aa;g++;l=Ja[g+1>>0];if(42==l)Aa=f("i32"),g++;else for(;;){l=Ja[g+1>>0];if(48>l||57<l)break;Aa=10*Aa+(l-48);g++}l=Ja[g+1>>0]}0>Aa&&(Aa=6,ab=ba);var R;switch(String.fromCharCode(l)){case "h":l=Ja[g+2>>0];104==l?(g++,R=1):R=2;break;case "l":l=Ja[g+2>>0];108==l?(g++,R=8):R=4;break;case "L":case "q":case "j":R=8;break;case "z":case "t":case "I":R=4;break;default:R=e}R&&g++;l=Ja[g+1>>
0];switch(String.fromCharCode(l)){case "d":case "i":case "u":case "o":case "x":case "X":case "p":fa=100==l||105==l;R=R||4;var na=m=f("i"+8*R),x;8==R&&(m=i.aa(m[0],m[1],117==l));4>=R&&(m=(fa?Cb:Bb)(m&Math.pow(256,R)-1,8*R));var vb=Math.abs(m),fa="";if(100==l||105==l)x=8==R&&ic?ic.stringify(na[0],na[1],e):Cb(m,8*R).toString(10);else if(117==l)x=8==R&&ic?ic.stringify(na[0],na[1],aa):Bb(m,8*R).toString(10),m=Math.abs(m);else if(111==l)x=(ra?"0":"")+vb.toString(8);else if(120==l||88==l){fa=ra&&0!=m?"0x":
"";if(8==R&&ic)if(na[1]){x=(na[1]>>>0).toString(16);for(ra=(na[0]>>>0).toString(16);8>ra.length;)ra="0"+ra;x+=ra}else x=(na[0]>>>0).toString(16);else if(0>m){m=-m;x=(vb-1).toString(16);na=[];for(ra=0;ra<x.length;ra++)na.push((15-parseInt(x[ra],16)).toString(16));for(x=na.join("");x.length<2*R;)x="f"+x}else x=vb.toString(16);88==l&&(fa=fa.toUpperCase(),x=x.toUpperCase())}else 112==l&&(0===vb?x="(nil)":(fa="0x",x=vb.toString(16)));if(ab)for(;x.length<Aa;)x="0"+x;0<=m&&(La?fa="+"+fa:gb&&(fa=" "+fa));
"-"==x.charAt(0)&&(fa="-"+fa,x=x.substr(1));for(;fa.length+x.length<Ta;)Wa?x+=" ":ya?x="0"+x:fa=" "+fa;x=fa+x;x.split("").forEach(function(a){n.push(a.charCodeAt(0))});break;case "f":case "F":case "e":case "E":case "g":case "G":m=f("double");if(isNaN(m))x="nan",ya=ba;else if(isFinite(m)){ab=ba;R=Math.min(Aa,20);if(103==l||71==l)ab=aa,Aa=Aa||1,R=parseInt(m.toExponential(R).split("e")[1],10),Aa>R&&-4<=R?(l=(103==l?"f":"F").charCodeAt(0),Aa-=R+1):(l=(103==l?"e":"E").charCodeAt(0),Aa--),R=Math.min(Aa,
20);if(101==l||69==l)x=m.toExponential(R),/[eE][-+]\d$/.test(x)&&(x=x.slice(0,-1)+"0"+x.slice(-1));else if(102==l||70==l)x=m.toFixed(R),0===m&&gc(m)&&(x="-"+x);fa=x.split("e");if(ab&&!ra)for(;1<fa[0].length&&-1!=fa[0].indexOf(".")&&("0"==fa[0].slice(-1)||"."==fa[0].slice(-1));)fa[0]=fa[0].slice(0,-1);else for(ra&&-1==x.indexOf(".")&&(fa[0]+=".");Aa>R++;)fa[0]+="0";x=fa[0]+(1<fa.length?"e"+fa[1]:"");69==l&&(x=x.toUpperCase());0<=m&&(La?x="+"+x:gb&&(x=" "+x))}else x=(0>m?"-":"")+"inf",ya=ba;for(;x.length<
Ta;)x=Wa?x+" ":ya&&("-"==x[0]||"+"==x[0])?x[0]+"0"+x.slice(1):(ya?"0":" ")+x;97>l&&(x=x.toUpperCase());x.split("").forEach(function(a){n.push(a.charCodeAt(0))});break;case "s":ya=(La=f("i8*"))?Xb(La):6;ab&&(ya=Math.min(ya,Aa));if(!Wa)for(;ya<Ta--;)n.push(32);if(La)for(ra=0;ra<ya;ra++)n.push(bb[La++>>0]);else n=n.concat(zb("(null)".substr(0,ya),aa));if(Wa)for(;ya<Ta--;)n.push(32);break;case "c":for(Wa&&n.push(f("i8"));0<--Ta;)n.push(32);Wa||n.push(f("i8"));break;case "n":Wa=f("i32*");Ma[Wa>>2]=n.length;
break;case "%":n.push(m);break;default:for(ra=fa;ra<g+2;ra++)n.push(Ja[ra>>0])}g+=2}else n.push(m),g+=1}return n}function jc(a,b,f){f=hc(b,f);b=i.B();a=fc(Za(f,"i8",Va),1,f.length,a);i.J(b);return a}function kc(a,b){var f=hc(a,b),g=Ab(f);"\n"===g[g.length-1]&&(g=g.substr(0,g.length-1));h.print(g);return f.length}h._memcpy=lc;function mc(a){mc.X||(wa=wa+4095&-4096,mc.X=aa,oa(i.o),mc.W=i.o,i.o=function(){ta("cannot dynamically allocate, sbrk now has control")});var b=wa;0!=a&&mc.W(a);return b}
function $a(a){return i.o(a+8)+8&4294967288}h._malloc=$a;var nc=Za(1,"i32*",Xa);cc.T=Za([0],"i8",Xa);Yb=i.U(4);Ma[Yb>>2]=0;jb=qa=i.r(va);kb=jb+5242880;lb=wa=i.r(kb);oa(lb<xa,"TOTAL_MEMORY not big enough for stack");Oa=Math.min;
var j=(function(global,env,buffer) {
// EMSCRIPTEN_START_ASM
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env._stderr|0;var n=0;var o=0;var p=0;var q=0;var r=+env.NaN,s=+env.Infinity;var t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0.0;var C=0;var D=0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=global.Math.floor;var N=global.Math.abs;var O=global.Math.sqrt;var P=global.Math.pow;var Q=global.Math.cos;var R=global.Math.sin;var S=global.Math.tan;var T=global.Math.acos;var U=global.Math.asin;var V=global.Math.atan;var W=global.Math.atan2;var X=global.Math.exp;var Y=global.Math.log;var Z=global.Math.ceil;var _=global.Math.imul;var $=env.abort;var aa=env.assert;var ba=env.min;var ca=env.jsCall;var da=env.invoke_iiii;var ea=env.invoke_viiiii;var fa=env.invoke_did;var ga=env.invoke_vi;var ha=env.invoke_diiiid;var ia=env.invoke_vii;var ja=env.invoke_viidii;var ka=env.invoke_ii;var la=env.invoke_viidi;var ma=env.invoke_viii;var na=env.invoke_v;var oa=env.invoke_viid;var pa=env.invoke_viiiiii;var qa=env.invoke_iii;var ra=env.invoke_iiiiii;var sa=env.invoke_viiii;var ta=env._cosf;var ua=env._send;var va=env._pthread_key_create;var wa=env.___cxa_guard_acquire;var xa=env.___setErrNo;var ya=env._vfprintf;var za=env._emscripten_asm_const_int;var Aa=env.___assert_fail;var Ba=env._atan2f;var Ca=env.__ZSt18uncaught_exceptionv;var Da=env.___cxa_guard_release;var Ea=env._pwrite;var Fa=env._emscripten_asm_const_double;var Ga=env._fprintf;var Ha=env.__reallyNegative;var Ia=env._sbrk;var Ja=env.___cxa_begin_catch;var Ka=env._sinf;var La=env._fileno;var Ma=env.___resumeException;var Na=env.___cxa_find_matching_catch;var Oa=env._sysconf;var Pa=env._pthread_getspecific;var Qa=env._vprintf;var Ra=env._emscripten_memcpy_big;var Sa=env._pthread_once;var Ta=env._printf;var Ua=env._floorf;var Va=env._sqrtf;var Wa=env._write;var Xa=env.___errno_location;var Ya=env._pthread_setspecific;var Za=env._fputc;var _a=env.___cxa_throw;var $a=env._abort;var ab=env._fwrite;var bb=env._time;var cb=env.___cxa_allocate_exception;var db=env.__formatString;var eb=env.___cxa_pure_virtual;var fb=0.0;
// EMSCRIPTEN_START_FUNCS
function wb(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function xb(){return i|0}function yb(a){a=a|0;i=a}function zb(a,b){a=a|0;b=b|0;if((n|0)==0){n=a;o=b}}function Ab(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0]}function Bb(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0];a[k+4>>0]=a[b+4>>0];a[k+5>>0]=a[b+5>>0];a[k+6>>0]=a[b+6>>0];a[k+7>>0]=a[b+7>>0]}function Cb(a){a=a|0;C=a}function Db(){return C|0}function Eb(){var a=0,b=0,d=0;a=i;b=CA(4)|0;if((b|0)!=0){d=b;c[d>>2]=4504;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(4)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){c[d>>2]=4504;i=a;return d|0}return 0}function Fb(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+16>>2]&127](a,b);i=d;return}function Gb(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+20>>2]&127](a,b);i=d;return}function Hb(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Ib(a){a=a|0;return c[a+16>>2]|0}function Jb(a,b){a=a|0;b=b|0;c[a+16>>2]=b;return}function Kb(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Lb(a){a=a|0;return a+80|0}function Mb(a){a=a|0;return a+88|0}function Nb(a,b){a=a|0;b=+b;g[a+104>>2]=b;return}function Ob(a){a=a|0;return+(+g[a+104>>2])}function Pb(a,b){a=a|0;b=+b;g[a+68>>2]=b;return}function Qb(a){a=a|0;return+(+g[a+68>>2])}function Rb(a,b){a=a|0;b=+b;g[a+72>>2]=b;return}function Sb(a){a=a|0;return+(+g[a+72>>2])}function Tb(a){a=a|0;return c[a+4>>2]|0}function Ub(a){a=a|0;return c[a+48>>2]|0}function Vb(a){a=a|0;return c[a+52>>2]|0}function Wb(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[16]|0)==0?(wa(16)|0)!=0:0)Da(16);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=8;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 8}function Xb(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[32]|0)==0?(wa(32)|0)!=0:0)Da(32);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=24;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 24}function Yb(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[48]|0)==0?(wa(48)|0)!=0:0)Da(48);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=40;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 40}function Zb(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function _b(a){a=a|0;return c[a+12>>2]|0}function $b(a){a=a|0;return c[a+64>>2]|0}function ac(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function bc(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function cc(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function dc(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function ec(){var a=0,b=0,d=0;a=i;b=CA(36)|0;if((b|0)!=0){d=b;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(36)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){i=a;return d|0}return 0}function fc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;f=CA(36)|0;a:do if((f|0)==0){while(1){f=c[4558]|0;c[4558]=f+0;if((f|0)==0)break;qb[f&63]();f=CA(36)|0;if((f|0)!=0)break a}f=cb(4)|0;c[f>>2]=18072;_a(f|0,18120,111)}while(0);h=f+12|0;g=f+24|0;c[f+0>>2]=c[a+0>>2];c[f+4>>2]=c[a+4>>2];c[f+8>>2]=c[a+8>>2];c[h+0>>2]=c[b+0>>2];c[h+4>>2]=c[b+4>>2];c[h+8>>2]=c[b+8>>2];c[g+0>>2]=c[d+0>>2];c[g+4>>2]=c[d+4>>2];c[g+8>>2]=c[d+8>>2];i=e;return f|0}function gc(a){a=a|0;var b=0,d=0;b=i;d=a+0|0;a=d+36|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(a|0));i=b;return}function hc(b,d){b=b|0;d=d|0;var e=0,f=0;f=i;i=i+16|0;e=f;if((a[72]|0)==0?(wa(72)|0)!=0:0)Da(72);zw(e,b,d);c[14]=c[e+0>>2];c[15]=c[e+4>>2];c[16]=c[e+8>>2];i=f;return 56}function ic(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;d=i;if((a[88]|0)==0?(wa(88)|0)!=0:0)Da(88);f=+g[b>>2];h=+g[b+12>>2];e=+g[b+4>>2];j=+g[b+16>>2];k=f*j-h*e;if(k!=0.0)k=1.0/k;l=+g[c>>2];m=+g[c+4>>2];j=+(k*(j*l-h*m));k=+(k*(f*m-e*l));b=80;g[b>>2]=j;g[b+4>>2]=k;i=d;return 80}function jc(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;e=+g[a>>2];h=+g[a+12>>2];f=+g[a+4>>2];j=+g[a+16>>2];k=e*j-h*f;if(k!=0.0)k=1.0/k;g[b>>2]=j*k;j=-k;g[b+12>>2]=h*j;g[b+8>>2]=0.0;g[b+4>>2]=f*j;g[b+16>>2]=e*k;a=b+20|0;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=d;return}function kc(a,b){a=a|0;b=b|0;var c=0;c=i;Bw(a,b);i=c;return}function lc(a){a=a|0;return a|0}function mc(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];i=d;return}function nc(a){a=a|0;return a+12|0}function oc(a,b){a=a|0;b=b|0;var d=0;d=i;a=a+12|0;c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];i=d;return}function pc(a){a=a|0;return a+24|0}function qc(a,b){a=a|0;b=b|0;var d=0;d=i;a=a+24|0;c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];i=d;return}function rc(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function sc(a){a=a|0;return c[(c[a+12>>2]|0)+4>>2]|0}function tc(a){a=a|0;return c[a+12>>2]|0}function uc(f,h){f=f|0;h=h|0;var j=0,k=0,l=0,m=0;j=i;k=f+38|0;if((h&1|0)==(d[k>>0]|0|0)){i=j;return}f=c[f+8>>2]|0;l=f+4|0;m=e[l>>1]|0;if((m&2|0)==0){b[l>>1]=m|2;g[f+144>>2]=0.0}a[k>>0]=h&1;i=j;return}function vc(b){b=b|0;return(a[b+38>>0]|0)!=0|0}function wc(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;l=a+32|0;b[l+0>>1]=b[d+0>>1]|0;b[l+2>>1]=b[d+2>>1]|0;b[l+4>>1]=b[d+4>>1]|0;d=c[a+8>>2]|0;if((d|0)==0){i=e;return}g=c[d+112>>2]|0;if((g|0)!=0)do{f=c[g+4>>2]|0;if((c[f+48>>2]|0)==(a|0)?1:(c[f+52>>2]|0)==(a|0)){l=f+4|0;c[l>>2]=c[l>>2]|8}g=c[g+12>>2]|0}while((g|0)!=0);h=c[d+88>>2]|0;if((h|0)==0){i=e;return}d=a+28|0;if((c[d>>2]|0)<=0){i=e;return}a=a+24|0;g=h+102912|0;f=h+102908|0;k=h+102904|0;l=c[g>>2]|0;j=0;do{h=c[(c[a>>2]|0)+(j*28|0)+24>>2]|0;if((l|0)==(c[f>>2]|0)){m=c[k>>2]|0;c[f>>2]=l<<1;l=CA(l<<3)|0;c[k>>2]=l;HA(l|0,m|0,c[g>>2]<<2|0)|0;DA(m);l=c[g>>2]|0}c[(c[k>>2]|0)+(l<<2)>>2]=h;l=(c[g>>2]|0)+1|0;c[g>>2]=l;j=j+1|0}while((j|0)<(c[d>>2]|0));i=e;return}function xc(a){a=a|0;return a+32|0}function yc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;b=i;d=c[a+8>>2]|0;if((d|0)==0){i=b;return}f=c[d+112>>2]|0;if((f|0)!=0)do{e=c[f+4>>2]|0;if((c[e+48>>2]|0)==(a|0)?1:(c[e+52>>2]|0)==(a|0)){k=e+4|0;c[k>>2]=c[k>>2]|8}f=c[f+12>>2]|0}while((f|0)!=0);g=c[d+88>>2]|0;if((g|0)==0){i=b;return}d=a+28|0;if((c[d>>2]|0)<=0){i=b;return}a=a+24|0;f=g+102912|0;e=g+102908|0;g=g+102904|0;k=c[f>>2]|0;j=0;do{h=c[(c[a>>2]|0)+(j*28|0)+24>>2]|0;if((k|0)==(c[e>>2]|0)){l=c[g>>2]|0;c[e>>2]=k<<1;k=CA(k<<3)|0;c[g>>2]=k;HA(k|0,l|0,c[f>>2]<<2|0)|0;DA(l);k=c[f>>2]|0}c[(c[g>>2]|0)+(k<<2)>>2]=h;k=(c[f>>2]|0)+1|0;c[f>>2]=k;j=j+1|0}while((j|0)<(c[d>>2]|0));i=b;return}function zc(a){a=a|0;return c[a+8>>2]|0}function Ac(a){a=a|0;return c[a+4>>2]|0}function Bc(a){a=a|0;return c[a+40>>2]|0}function Cc(a,b){a=a|0;b=b|0;c[a+40>>2]=b;return}function Dc(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=c[a+12>>2]|0;a=gb[c[(c[e>>2]|0)+16>>2]&63](e,(c[a+8>>2]|0)+12|0,b)|0;i=d;return a|0}function Ec(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=c[a+12>>2]|0;b=ub[c[(c[g>>2]|0)+20>>2]&63](g,b,d,(c[a+8>>2]|0)+12|0,e)|0;i=f;return b|0}function Fc(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=c[a+12>>2]|0;rb[c[(c[e>>2]|0)+28>>2]&63](e,b,+g[a>>2]);i=d;return}function Gc(a,b){a=a|0;b=+b;var c=0;c=i;if(b==b&0.0==0.0&b>-s?b<s&b>=0.0:0){g[a>>2]=b;i=c;return}Aa(4440,4392,295,4480)}function Hc(a){a=a|0;return+(+g[a>>2])}function Ic(a){a=a|0;return+(+g[a+16>>2])}function Jc(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function Kc(a){a=a|0;return+(+g[a+20>>2])}function Lc(a,b){a=a|0;b=+b;g[a+20>>2]=b;return}function Mc(a,b){a=a|0;b=b|0;var d=0;d=i;if((b|0)>-1?(c[a+28>>2]|0)>(b|0):0){i=d;return(c[a+24>>2]|0)+(b*28|0)|0}Aa(4344,4392,341,4432);return 0}function Nc(a,b){a=a|0;b=b|0;var c=0;c=i;ex(a,b);i=c;return}function Oc(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Pc(){var a=0,d=0;a=i;d=CA(6)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(6)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);b[d>>1]=1;b[d+2>>1]=-1;b[d+4>>1]=0;i=a;return d|0}function Qc(a){a=a|0;return b[a>>1]|0}function Rc(a,c){a=a|0;c=c|0;b[a>>1]=c;return}function Sc(a){a=a|0;return b[a+2>>1]|0}function Tc(a,c){a=a|0;c=c|0;b[a+2>>1]=c;return}function Uc(a){a=a|0;return b[a+4>>1]|0}function Vc(a,c){a=a|0;c=c|0;b[a+4>>1]=c;return}function Wc(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Xc(){var a=0,b=0,d=0;a=i;b=CA(4)|0;if((b|0)!=0){d=b;c[d>>2]=4008;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(4)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){c[d>>2]=4008;i=a;return d|0}return 0}function Yc(a,b){a=a|0;b=b|0;var d=0;d=i;a=tb[c[(c[a>>2]|0)+8>>2]&63](a,b)|0;i=d;return a|0}function Zc(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function _c(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0,k=0;e=i;h=c[a+52>>2]|0;f=h+4|0;j=b[f>>1]|0;if((j&2)==0?(k=j&65535,(k&2|0)==0):0){b[f>>1]=k|2;g[h+144>>2]=0.0}h=d;j=c[h+4>>2]|0;k=a+76|0;c[k>>2]=c[h>>2];c[k+4>>2]=j;i=e;return}function $c(a){a=a|0;return a+76|0}function ad(a,b){a=a|0;b=+b;g[a+104>>2]=b;return}function bd(a){a=a|0;return+(+g[a+104>>2])}function cd(a,b){a=a|0;b=+b;g[a+84>>2]=b;return}function dd(a){a=a|0;return+(+g[a+84>>2])}function ed(a,b){a=a|0;b=+b;g[a+88>>2]=b;return}function fd(a){a=a|0;return+(+g[a+88>>2])}function gd(a){a=a|0;return c[a+4>>2]|0}function hd(a){a=a|0;return c[a+48>>2]|0}function id(a){a=a|0;return c[a+52>>2]|0}function jd(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[104]|0)==0?(wa(104)|0)!=0:0)Da(104);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=96;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 96}function kd(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[120]|0)==0?(wa(120)|0)!=0:0)Da(120);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=112;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 112}function ld(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[136]|0)==0?(wa(136)|0)!=0:0)Da(136);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=128;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 128}function md(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function nd(a){a=a|0;return c[a+12>>2]|0}function od(a){a=a|0;return c[a+64>>2]|0}function pd(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function qd(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function rd(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function sd(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function td(){var a=0,b=0,d=0;a=i;b=CA(8)|0;if((b|0)!=0){d=b;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(8)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){i=a;return d|0}return 0}function ud(a){a=+a;var b=0,d=0;b=i;d=CA(8)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(8)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);g[d>>2]=+R(+a);g[d+4>>2]=+Q(+a);i=b;return d|0}function vd(a,b){a=a|0;b=+b;g[a>>2]=+R(+b);g[a+4>>2]=+Q(+b);return}function wd(a){a=a|0;g[a>>2]=0.0;g[a+4>>2]=1.0;return}function xd(a){a=a|0;var b=0.0;b=+W(+(+g[a>>2]),+(+g[a+4>>2]));return+b}function yd(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[152]|0)==0?(wa(152)|0)!=0:0)Da(152);e=+(+g[b+4>>2]);d=+(+g[b>>2]);b=144;g[b>>2]=e;g[b+4>>2]=d;i=c;return 144}function zd(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[168]|0)==0?(wa(168)|0)!=0:0)Da(168);e=+-+g[b>>2];d=+(+g[b+4>>2]);b=160;g[b>>2]=e;g[b+4>>2]=d;i=c;return 160}function Ad(a){a=a|0;return+(+g[a>>2])}function Bd(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Cd(a){a=a|0;return+(+g[a+4>>2])}function Dd(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Ed(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Fd(a){a=a|0;return+(+g[a>>2])}function Gd(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Hd(a){a=a|0;return+(+g[a+4>>2])}function Id(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Jd(a){a=a|0;return+(+g[a+8>>2])}function Kd(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Ld(a){a=a|0;return+(+g[a+12>>2])}function Md(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function Nd(a){a=a|0;return+(+g[a+16>>2])}function Od(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function Pd(a){a=a|0;return+(+g[a+20>>2])}function Qd(a,b){a=a|0;b=+b;g[a+20>>2]=b;return}function Rd(a){a=a|0;return+(+g[a+24>>2])}function Sd(a,b){a=a|0;b=+b;g[a+24>>2]=b;return}function Td(a){a=a|0;return+(+g[a+28>>2])}function Ud(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function Vd(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Wd(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Xd(){var b=0,d=0,e=0,f=0;b=i;d=CA(52)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(52)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+44>>2]=0;f=d+4|0;e=d+36|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;a[e>>0]=1;a[d+37>>0]=1;a[d+38>>0]=0;a[d+39>>0]=0;c[d>>2]=0;a[d+40>>0]=1;g[d+48>>2]=1.0;i=b;return d|0}function Yd(a){a=a|0;return c[a>>2]|0}function Zd(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function _d(a){a=a|0;return a+4|0}function $d(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+4|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function ae(a){a=a|0;return+(+g[a+12>>2])}function be(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function ce(a){a=a|0;return a+16|0}function de(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+16|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function ee(a){a=a|0;return+(+g[a+24>>2])}function fe(a,b){a=a|0;b=+b;g[a+24>>2]=b;return}function ge(a){a=a|0;return+(+g[a+28>>2])}function he(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function ie(a){a=a|0;return+(+g[a+32>>2])}function je(a,b){a=a|0;b=+b;g[a+32>>2]=b;return}function ke(b){b=b|0;return(a[b+36>>0]|0)!=0|0}function le(b,c){b=b|0;c=c|0;a[b+36>>0]=c&1;return}function me(b){b=b|0;return(a[b+37>>0]|0)!=0|0}function ne(b,c){b=b|0;c=c|0;a[b+37>>0]=c&1;return}function oe(b){b=b|0;return(a[b+38>>0]|0)!=0|0}function pe(b,c){b=b|0;c=c|0;a[b+38>>0]=c&1;return}function qe(b){b=b|0;return(a[b+39>>0]|0)!=0|0}function re(b,c){b=b|0;c=c|0;a[b+39>>0]=c&1;return}function se(b){b=b|0;return(a[b+40>>0]|0)!=0|0}function te(b,c){b=b|0;c=c|0;a[b+40>>0]=c&1;return}function ue(a){a=a|0;return c[a+44>>2]|0}function ve(a,b){a=a|0;b=b|0;c[a+44>>2]=b;return}function we(a){a=a|0;return+(+g[a+48>>2])}function xe(a,b){a=a|0;b=+b;g[a+48>>2]=b;return}function ye(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function ze(){var a=0,b=0,d=0;a=i;b=CA(4)|0;if((b|0)!=0){d=b;c[d>>2]=3656;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(4)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){c[d>>2]=3656;i=a;return d|0}return 0}function Ae(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var g=0;g=i;f=+kb[c[(c[a>>2]|0)+8>>2]&63](a,b,d,e,f);i=g;return+f}function Be(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Ce(b){b=b|0;return a[b>>0]|0}function De(b,c){b=b|0;c=c|0;a[b>>0]=c;return}function Ee(b){b=b|0;return a[b+1>>0]|0}function Fe(b,c){b=b|0;c=c|0;a[b+1>>0]=c;return}function Ge(b){b=b|0;return a[b+2>>0]|0}function He(b,c){b=b|0;c=c|0;a[b+2>>0]=c;return}function Ie(b){b=b|0;return a[b+3>>0]|0}function Je(b,c){b=b|0;c=c|0;a[b+3>>0]=c;return}function Ke(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Le(){var a=0,b=0,d=0;a=i;b=CA(8)|0;if((b|0)!=0){d=b;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(8)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){i=a;return d|0}return 0}function Me(a,b){a=+a;b=+b;var d=0,e=0;d=i;e=CA(8)|0;a:do if((e|0)==0){while(1){e=c[4558]|0;c[4558]=e+0;if((e|0)==0)break;qb[e&63]();e=CA(8)|0;if((e|0)!=0)break a}e=cb(4)|0;c[e>>2]=18072;_a(e|0,18120,111)}while(0);g[e>>2]=a;g[e+4>>2]=b;i=d;return e|0}function Ne(a){a=a|0;g[a>>2]=0.0;g[a+4>>2]=0.0;return}function Oe(a,b,c){a=a|0;b=+b;c=+c;g[a>>2]=b;g[a+4>>2]=c;return}function Pe(a,b){a=a|0;b=b|0;g[a>>2]=+g[b>>2]+ +g[a>>2];a=a+4|0;g[a>>2]=+g[b+4>>2]+ +g[a>>2];return}function Qe(a,b){a=a|0;b=b|0;g[a>>2]=+g[a>>2]- +g[b>>2];a=a+4|0;g[a>>2]=+g[a>>2]- +g[b+4>>2];return}function Re(a,b){a=a|0;b=+b;g[a>>2]=+g[a>>2]*b;a=a+4|0;g[a>>2]=+g[a>>2]*b;return}function Se(a){a=a|0;var b=0.0,c=0.0;c=+g[a>>2];b=+g[a+4>>2];b=+O(+(c*c+b*b));return+b}function Te(a){a=a|0;var b=0.0,c=0.0;c=+g[a>>2];b=+g[a+4>>2];return+(c*c+b*b)}function Ue(a){a=a|0;var b=0,c=0.0,d=0.0,e=0.0,f=0,h=0.0;b=i;d=+g[a>>2];f=a+4|0;e=+g[f>>2];c=+O(+(d*d+e*e));if(c<1.1920928955078125e-7){e=0.0;i=b;return+e}h=1.0/c;g[a>>2]=d*h;g[f>>2]=e*h;e=c;i=b;return+e}function Ve(a){a=a|0;var b=0,c=0.0;b=i;c=+g[a>>2];if(!(c==c&0.0==0.0&c>-s&c<s)){a=0;i=b;return a|0}c=+g[a+4>>2];if(!(c==c&0.0==0.0&c>-s)){a=0;i=b;return a|0}a=c<s;i=b;return a|0}function We(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[184]|0)==0?(wa(184)|0)!=0:0)Da(184);e=+-+g[b+4>>2];d=+(+g[b>>2]);b=176;g[b>>2]=e;g[b+4>>2]=d;i=c;return 176}function Xe(a){a=a|0;return+(+g[a>>2])}function Ye(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Ze(a){a=a|0;return+(+g[a+4>>2])}function _e(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function $e(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function af(){var a=0,b=0,d=0;a=i;b=CA(12)|0;if((b|0)!=0){d=b;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(12)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){i=a;return d|0}return 0}function bf(a,b,d){a=+a;b=+b;d=+d;var e=0,f=0;e=i;f=CA(12)|0;a:do if((f|0)==0){while(1){f=c[4558]|0;c[4558]=f+0;if((f|0)==0)break;qb[f&63]();f=CA(12)|0;if((f|0)!=0)break a}f=cb(4)|0;c[f>>2]=18072;_a(f|0,18120,111)}while(0);g[f>>2]=a;g[f+4>>2]=b;g[f+8>>2]=d;i=e;return f|0}function cf(a){a=a|0;g[a>>2]=0.0;g[a+4>>2]=0.0;g[a+8>>2]=0.0;return}function df(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;return}function ef(a,b){a=a|0;b=b|0;var c=0;g[a>>2]=+g[b>>2]+ +g[a>>2];c=a+4|0;g[c>>2]=+g[b+4>>2]+ +g[c>>2];a=a+8|0;g[a>>2]=+g[b+8>>2]+ +g[a>>2];return}function ff(a,b){a=a|0;b=b|0;var c=0;g[a>>2]=+g[a>>2]- +g[b>>2];c=a+4|0;g[c>>2]=+g[c>>2]- +g[b+4>>2];a=a+8|0;g[a>>2]=+g[a>>2]- +g[b+8>>2];return}function gf(a,b){a=a|0;b=+b;var c=0;g[a>>2]=+g[a>>2]*b;c=a+4|0;g[c>>2]=+g[c>>2]*b;a=a+8|0;g[a>>2]=+g[a>>2]*b;return}function hf(a){a=a|0;return+(+g[a>>2])}function jf(a,b){a=a|0;b=+b;g[a>>2]=b;return}function kf(a){a=a|0;return+(+g[a+4>>2])}function lf(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function mf(a){a=a|0;return+(+g[a+8>>2])}function nf(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function of(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function pf(){var a=0,b=0;a=i;b=CA(16)|0;a:do if((b|0)==0){while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0)break;qb[b&63]();b=CA(16)|0;if((b|0)!=0)break a}b=cb(4)|0;c[b>>2]=18072;_a(b|0,18120,111)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return b|0}function qf(a){a=a|0;var b=0,c=0.0,d=0.0,e=0.0,f=0.0;b=i;d=+g[a+8>>2];e=+g[a>>2];c=+g[a+12>>2];f=+g[a+4>>2];if(!(d-e>=0.0&c-f>=0.0)){a=0;i=b;return a|0}if(!(e==e&0.0==0.0&e>-s&e<s)){a=0;i=b;return a|0}if(!(f==f&0.0==0.0&f>-s&f<s)){a=0;i=b;return a|0}if(!(d==d&0.0==0.0&d>-s&d<s)){a=0;i=b;return a|0}if(!(c==c&0.0==0.0&c>-s)){a=0;i=b;return a|0}a=c<s;i=b;return a|0}function rf(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[200]|0)==0?(wa(200)|0)!=0:0)Da(200);e=+((+g[b>>2]+ +g[b+8>>2])*.5);d=+((+g[b+4>>2]+ +g[b+12>>2])*.5);b=192;g[b>>2]=e;g[b+4>>2]=d;i=c;return 192}function sf(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[216]|0)==0?(wa(216)|0)!=0:0)Da(216);e=+((+g[b+8>>2]- +g[b>>2])*.5);d=+((+g[b+12>>2]- +g[b+4>>2])*.5);b=208;g[b>>2]=e;g[b+4>>2]=d;i=c;return 208}function tf(a){a=a|0;return+((+g[a+8>>2]- +g[a>>2]+(+g[a+12>>2]- +g[a+4>>2]))*2.0)}function uf(a,b){a=a|0;b=b|0;var c=0,d=0.0,e=0.0,f=0,h=0.0,j=0.0;c=i;d=+g[a>>2];e=+g[b>>2];h=+g[a+4>>2];j=+g[b+4>>2];e=+(d<e?d:e);j=+(h<j?h:j);f=a;g[f>>2]=e;g[f+4>>2]=j;f=a+8|0;j=+g[f>>2];e=+g[b+8>>2];h=+g[a+12>>2];d=+g[b+12>>2];e=+(j>e?j:e);d=+(h>d?h:d);a=f;g[a>>2]=e;g[a+4>>2]=d;i=c;return}function vf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0;d=i;e=+g[b>>2];f=+g[c>>2];h=+g[b+4>>2];j=+g[c+4>>2];f=+(e<f?e:f);j=+(h<j?h:j);k=a;g[k>>2]=f;g[k+4>>2]=j;j=+g[b+8>>2];f=+g[c+8>>2];h=+g[b+12>>2];e=+g[c+12>>2];f=+(j>f?j:f);e=+(h>e?h:e);b=a+8|0;g[b>>2]=f;g[b+4>>2]=e;i=d;return}function wf(a,b){a=a|0;b=b|0;var c=0;c=i;if((+g[a>>2]<=+g[b>>2]?+g[a+4>>2]<=+g[b+4>>2]:0)?+g[b+8>>2]<=+g[a+8>>2]:0)b=+g[b+12>>2]<=+g[a+12>>2];else b=0;i=c;return b|0}function xf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0;e=i;i=i+32|0;l=e+8|0;h=e+24|0;j=e+16|0;f=e;n=d;t=c[n>>2]|0;n=c[n+4>>2]|0;o=l;c[o>>2]=t;c[o+4>>2]=n;r=+g[d+8>>2]-(c[k>>2]=t,+g[k>>2]);p=+g[d+12>>2]- +g[d+4>>2];g[h>>2]=r;g[h+4>>2]=p;if(!(r>0.0))r=-r;if(!(p>0.0))p=-p;g[j>>2]=r;g[j+4>>2]=p;n=a+8|0;m=f+4|0;o=0;p=3.4028234663852886e+38;q=-3.4028234663852886e+38;while(1){if(r<1.1920928955078125e-7){r=+g[l+(o<<2)>>2];if(r<+g[a+(o<<2)>>2]){f=0;a=17;break}if(+g[n+(o<<2)>>2]<r){f=0;a=17;break}}else{s=1.0/+g[h+(o<<2)>>2];r=+g[l+(o<<2)>>2];u=s*(+g[a+(o<<2)>>2]-r);r=s*(+g[n+(o<<2)>>2]-r);t=u>r;s=t?r:u;r=t?u:r;if(s>q){g[f>>2]=0.0;g[m>>2]=0.0;g[f+(o<<2)>>2]=t?1.0:-1.0;q=s}p=p<r?p:r;if(q>p){f=0;a=17;break}}o=o+1|0;if((o|0)>=2){a=14;break}r=+g[j+(o<<2)>>2]}if((a|0)==14){if(q<0.0){t=0;i=e;return t|0}if(+g[d+16>>2]<q){t=0;i=e;return t|0}g[b+8>>2]=q;n=f;o=c[n+4>>2]|0;t=b;c[t>>2]=c[n>>2];c[t+4>>2]=o;t=1;i=e;return t|0}else if((a|0)==17){i=e;return f|0}return 0}function yf(a){a=a|0;return a|0}function zf(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Af(a){a=a|0;return a+8|0}function Bf(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Cf(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Df(){var d=0,e=0;d=i;e=CA(28)|0;a:do if((e|0)==0){while(1){e=c[4558]|0;c[4558]=e+0;if((e|0)==0)break;qb[e&63]();e=CA(28)|0;if((e|0)!=0)break a}e=cb(4)|0;c[e>>2]=18072;_a(e|0,18120,111)}while(0);b[e+22>>1]=1;b[e+24>>1]=-1;b[e+26>>1]=0;c[e>>2]=0;c[e+4>>2]=0;g[e+8>>2]=.20000000298023224;g[e+12>>2]=0.0;g[e+16>>2]=0.0;a[e+20>>0]=0;i=d;return e|0}function Ef(a){a=a|0;return c[a>>2]|0}function Ff(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Gf(a){a=a|0;return c[a+4>>2]|0}function Hf(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function If(a){a=a|0;return+(+g[a+8>>2])}function Jf(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Kf(a){a=a|0;return+(+g[a+12>>2])}function Lf(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function Mf(a){a=a|0;return+(+g[a+16>>2])}function Nf(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function Of(b){b=b|0;return(a[b+20>>0]|0)!=0|0}function Pf(b,c){b=b|0;c=c|0;a[b+20>>0]=c&1;return}function Qf(a){a=a|0;return a+22|0}function Rf(a,c){a=a|0;c=c|0;var d=0;d=i;a=a+22|0;b[a+0>>1]=b[c+0>>1]|0;b[a+2>>1]=b[c+2>>1]|0;b[a+4>>1]=b[c+4>>1]|0;i=d;return}function Sf(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Tf(){var b=0,d=0,e=0;b=i;d=CA(44)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(44)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=9;e=d+20|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;i=b;return d|0}function Uf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0;f=i;c[a+8>>2]=b;c[a+12>>2]=d;m=+g[e>>2]- +g[b+12>>2];n=e+4|0;h=+g[n>>2]- +g[b+16>>2];j=+g[b+24>>2];k=+g[b+20>>2];l=+(m*j+h*k);k=+(j*h-m*k);b=a+20|0;g[b>>2]=l;g[b+4>>2]=k;k=+g[e>>2]- +g[d+12>>2];l=+g[n>>2]- +g[d+16>>2];m=+g[d+24>>2];h=+g[d+20>>2];j=+(k*m+l*h);h=+(m*l-k*h);b=a+28|0;g[b>>2]=j;g[b+4>>2]=h;i=f;return}function Vf(a){a=a|0;return a+20|0}function Wf(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Xf(a){a=a|0;return a+28|0}function Yf(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Zf(a){a=a|0;return+(+g[a+36>>2])}function _f(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function $f(a){a=a|0;return+(+g[a+40>>2])}function ag(a,b){a=a|0;b=+b;g[a+40>>2]=b;return}function bg(a){a=a|0;return c[a>>2]|0}function cg(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function dg(a){a=a|0;return c[a+4>>2]|0}function eg(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function fg(a){a=a|0;return c[a+8>>2]|0}function gg(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function hg(a){a=a|0;return c[a+12>>2]|0}function ig(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function jg(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function kg(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function lg(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function mg(){var a=0,b=0,d=0,e=0;a=i;e=CA(64)|0;a:do if((e|0)==0){while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0)break;qb[b&63]();e=CA(64)|0;if((e|0)!=0)break a}e=cb(4)|0;c[e>>2]=18072;_a(e|0,18120,111)}while(0);d=e+0|0;b=d+64|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(b|0));i=a;return e|0}function ng(a){a=a|0;return a+40|0}function og(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+40|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function pg(a){a=a|0;return a+48|0}function qg(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+48|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function rg(a){a=a|0;return c[a+56>>2]|0}function sg(a,b){a=a|0;b=b|0;c[a+56>>2]=b;return}function tg(a){a=a|0;return c[a+60>>2]|0}function ug(a,b){a=a|0;b=b|0;c[a+60>>2]=b;return}function vg(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function wg(){var b=0,d=0,e=0,f=0;b=i;d=CA(72)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(72)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=2;f=d+20|0;e=d+36|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;g[e>>2]=1.0;g[d+40>>2]=0.0;g[d+44>>2]=0.0;a[d+48>>0]=0;g[d+52>>2]=0.0;g[d+56>>2]=0.0;a[d+60>>0]=0;g[d+64>>2]=0.0;g[d+68>>2]=0.0;i=b;return d|0}function xg(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0;h=i;c[a+8>>2]=b;c[a+12>>2]=d;k=+g[e>>2]- +g[b+12>>2];q=e+4|0;n=+g[q>>2]- +g[b+16>>2];p=b+24|0;l=+g[p>>2];o=b+20|0;j=+g[o>>2];m=+(k*l+n*j);j=+(l*n-k*j);r=a+20|0;g[r>>2]=m;g[r+4>>2]=j;j=+g[e>>2]- +g[d+12>>2];m=+g[q>>2]- +g[d+16>>2];k=+g[d+24>>2];n=+g[d+20>>2];l=+(j*k+m*n);n=+(k*m-j*n);e=a+28|0;g[e>>2]=l;g[e+4>>2]=n;n=+g[p>>2];l=+g[f>>2];j=+g[o>>2];m=+g[f+4>>2];k=+(n*l+j*m);j=+(n*m-l*j);e=a+36|0;g[e>>2]=k;g[e+4>>2]=j;g[a+44>>2]=+g[d+56>>2]- +g[b+56>>2];i=h;return}function yg(a){a=a|0;return a+20|0}function zg(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Ag(a){a=a|0;return a+28|0}function Bg(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Cg(a){a=a|0;return a+36|0}function Dg(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+36|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Eg(a){a=a|0;return+(+g[a+44>>2])}function Fg(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function Gg(b){b=b|0;return(a[b+48>>0]|0)!=0|0}function Hg(b,c){b=b|0;c=c|0;a[b+48>>0]=c&1;return}function Ig(a){a=a|0;return+(+g[a+52>>2])}function Jg(a,b){a=a|0;b=+b;g[a+52>>2]=b;return}function Kg(a){a=a|0;return+(+g[a+56>>2])}function Lg(a,b){a=a|0;b=+b;g[a+56>>2]=b;return}function Mg(b){b=b|0;return(a[b+60>>0]|0)!=0|0}function Ng(b,c){b=b|0;c=c|0;a[b+60>>0]=c&1;return}function Og(a){a=a|0;return+(+g[a+64>>2])}function Pg(a,b){a=a|0;b=+b;g[a+64>>2]=b;return}function Qg(a){a=a|0;return+(+g[a+68>>2])}function Rg(a,b){a=a|0;b=+b;g[a+68>>2]=b;return}function Sg(a){a=a|0;return c[a>>2]|0}function Tg(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Ug(a){a=a|0;return c[a+4>>2]|0}function Vg(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Wg(a){a=a|0;return c[a+8>>2]|0}function Xg(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Yg(a){a=a|0;return c[a+12>>2]|0}function Zg(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function _g(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function $g(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function ah(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function bh(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0;d=i;e=CA(103028)|0;a:do if((e|0)==0){while(1){e=c[4558]|0;c[4558]=e+0;if((e|0)==0)break;qb[e&63]();e=CA(103028)|0;if((e|0)!=0)break a}k=cb(4)|0;c[k>>2]=18072;_a(k|0,18120,111)}while(0);h=e+8|0;c[h>>2]=128;c[e+4>>2]=0;f=CA(1024)|0;c[e>>2]=f;FA(f|0,0,c[h>>2]<<3|0)|0;h=e+12|0;f=h+56|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(f|0));do if((a[8144]|0)==0){f=1;h=0;while(1){if((h|0)>=14){f=7;break}if((f|0)>(c[7440+(h<<2)>>2]|0)){h=h+1|0;a[7496+f>>0]=h}else a[7496+f>>0]=h;f=f+1|0;if((f|0)>=641){f=12;break}}if((f|0)==7)Aa(8152,8176,73,8224);else if((f|0)==12){a[8144]=1;break}}while(0);c[e+102468>>2]=0;c[e+102472>>2]=0;c[e+102476>>2]=0;c[e+102864>>2]=0;c[e+102872>>2]=-1;f=e+102884|0;c[f>>2]=16;c[e+102880>>2]=0;j=CA(576)|0;h=e+102876|0;c[h>>2]=j;FA(j|0,0,(c[f>>2]|0)*36|0)|0;j=(c[f>>2]|0)+ -1|0;h=c[h>>2]|0;if((j|0)>0){k=0;do{j=k;k=k+1|0;c[h+(j*36|0)+20>>2]=k;c[h+(j*36|0)+32>>2]=-1;j=(c[f>>2]|0)+ -1|0}while((k|0)<(j|0))}c[h+(j*36|0)+20>>2]=-1;c[h+(((c[f>>2]|0)+ -1|0)*36|0)+32>>2]=-1;j=e+102888|0;k=e+102920|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[k>>2]=16;c[e+102924>>2]=0;c[e+102916>>2]=CA(192)|0;c[e+102908>>2]=16;c[e+102912>>2]=0;c[e+102904>>2]=CA(64)|0;c[e+102932>>2]=0;c[e+102936>>2]=0;c[e+102940>>2]=9616;c[e+102944>>2]=9624;k=e+102948|0;j=e+102968|0;c[e+102980>>2]=0;c[e+102984>>2]=0;f=e+102992|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;a[f>>0]=1;a[e+102993>>0]=1;a[e+102994>>0]=0;a[e+102995>>0]=1;a[e+102976>>0]=1;f=b;h=c[f+4>>2]|0;c[j>>2]=c[f>>2];c[j+4>>2]=h;c[e+102868>>2]=4;g[e+102988>>2]=0.0;c[k>>2]=e;k=e+102996|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;c[k+20>>2]=0;c[k+24>>2]=0;c[k+28>>2]=0;i=d;return e|0}function ch(a,b){a=a|0;b=b|0;c[a+102980>>2]=b;return}function dh(a,b){a=a|0;b=b|0;c[a+102944>>2]=b;return}function eh(a,b){a=a|0;b=b|0;c[a+102984>>2]=b;return}function fh(d,e){d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0;f=i;if((c[d+102868>>2]&2|0)!=0)Aa(11032,11056,109,11096);h=xw(d,152)|0;if((h|0)==0)h=0;else{k=e+4|0;r=+g[k>>2];if(!(r==r&0.0==0.0&r>-s&r<s))Aa(8568,8592,27,8632);r=+g[e+8>>2];if(!(r==r&0.0==0.0&r>-s&r<s))Aa(8568,8592,27,8632);n=e+16|0;r=+g[n>>2];if(!(r==r&0.0==0.0&r>-s&r<s))Aa(8640,8592,28,8632);r=+g[e+20>>2];if(!(r==r&0.0==0.0&r>-s&r<s))Aa(8640,8592,28,8632);o=e+12|0;r=+g[o>>2];if(!(r==r&0.0==0.0&r>-s&r<s))Aa(8672,8592,29,8632);p=e+24|0;r=+g[p>>2];if(!(r==r&0.0==0.0&r>-s&r<s))Aa(8696,8592,30,8632);m=e+32|0;r=+g[m>>2];if(!(r>=0.0)|r==r&0.0==0.0&r>-s&r<s^1)Aa(8728,8592,31,8632);l=e+28|0;r=+g[l>>2];if(!(r>=0.0)|r==r&0.0==0.0&r>-s&r<s^1)Aa(8792,8592,32,8632);j=h+4|0;q=(a[e+39>>0]|0)==0?0:8;b[j>>1]=q;if((a[e+38>>0]|0)!=0){q=(q&65535|16)&65535;b[j>>1]=q}if((a[e+36>>0]|0)!=0){q=(q&65535|4)&65535;b[j>>1]=q}if((a[e+37>>0]|0)!=0){q=(q&65535|2)&65535;b[j>>1]=q}if((a[e+40>>0]|0)!=0)b[j>>1]=q&65535|32;c[h+88>>2]=d;q=k;k=c[q>>2]|0;q=c[q+4>>2]|0;j=h+12|0;c[j>>2]=k;c[j+4>>2]=q;r=+g[o>>2];g[h+20>>2]=+R(+r);g[h+24>>2]=+Q(+r);g[h+28>>2]=0.0;g[h+32>>2]=0.0;j=h+36|0;c[j>>2]=k;c[j+4>>2]=q;j=h+44|0;c[j>>2]=k;c[j+4>>2]=q;g[h+52>>2]=+g[o>>2];g[h+56>>2]=+g[o>>2];g[h+60>>2]=0.0;c[h+108>>2]=0;c[h+112>>2]=0;c[h+92>>2]=0;c[h+96>>2]=0;o=n;j=c[o+4>>2]|0;q=h+64|0;c[q>>2]=c[o>>2];c[q+4>>2]=j;g[h+72>>2]=+g[p>>2];g[h+132>>2]=+g[l>>2];g[h+136>>2]=+g[m>>2];g[h+140>>2]=+g[e+48>>2];g[h+76>>2]=0.0;g[h+80>>2]=0.0;g[h+84>>2]=0.0;g[h+144>>2]=0.0;q=c[e>>2]|0;c[h>>2]=q;j=h+116|0;if((q|0)==2){g[j>>2]=1.0;g[h+120>>2]=1.0}else{g[j>>2]=0.0;g[h+120>>2]=0.0}g[h+124>>2]=0.0;g[h+128>>2]=0.0;c[h+148>>2]=c[e+44>>2];c[h+100>>2]=0;c[h+104>>2]=0}c[h+92>>2]=0;j=d+102952|0;c[h+96>>2]=c[j>>2];e=c[j>>2]|0;if((e|0)==0){c[j>>2]=h;q=d+102960|0;p=c[q>>2]|0;p=p+1|0;c[q>>2]=p;i=f;return h|0}c[e+92>>2]=h;c[j>>2]=h;q=d+102960|0;p=c[q>>2]|0;p=p+1|0;c[q>>2]=p;i=f;return h|0}function gh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;f=b+102960|0;if((c[f>>2]|0)<=0)Aa(11112,11056,133,11128);if((c[b+102868>>2]&2|0)!=0)Aa(11032,11056,134,11128);j=d+108|0;k=c[j>>2]|0;if((k|0)!=0){h=b+102980|0;do{m=k;k=c[k+12>>2]|0;l=c[h>>2]|0;if((l|0)==0)l=m+4|0;else{o=m+4|0;lb[c[(c[l>>2]|0)+8>>2]&127](l,c[o>>2]|0);l=o}ix(b,c[l>>2]|0);c[j>>2]=k}while((k|0)!=0)}c[j>>2]=0;h=d+112|0;k=c[h>>2]|0;if((k|0)!=0){j=b+102872|0;do{o=k;k=c[k+12>>2]|0;Mw(j,c[o+4>>2]|0)}while((k|0)!=0)}c[h>>2]=0;h=d+100|0;m=c[h>>2]|0;a:do if((m|0)==0)g=d+104|0;else{l=b+102980|0;j=b+102872|0;k=d+104|0;while(1){n=m;m=c[m+4>>2]|0;o=c[l>>2]|0;if((o|0)!=0)lb[c[(c[o>>2]|0)+12>>2]&127](o,n);cx(n,j);ax(n,b);o=a[7540]|0;if(!((o&255)<14))break;o=b+((o&255)<<2)+12|0;c[n>>2]=c[o>>2];c[o>>2]=n;c[h>>2]=m;c[k>>2]=(c[k>>2]|0)+ -1;if((m|0)==0){g=k;break a}}Aa(8264,8176,173,8536)}while(0);c[h>>2]=0;c[g>>2]=0;h=d+92|0;j=c[h>>2]|0;g=d+96|0;if((j|0)!=0)c[j+96>>2]=c[g>>2];j=c[g>>2]|0;if((j|0)!=0)c[j+92>>2]=c[h>>2];h=b+102952|0;if((c[h>>2]|0)==(d|0))c[h>>2]=c[g>>2];c[f>>2]=(c[f>>2]|0)+ -1;f=a[7648]|0;if((f&255)<14){o=b+((f&255)<<2)+12|0;c[d>>2]=c[o>>2];c[o>>2]=d;i=e;return}else Aa(8264,8176,173,8536)}function hh(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0,N=0.0;e=i;if((c[b+102868>>2]&2|0)!=0)Aa(11032,11056,214,11144);do switch(c[d>>2]|0){case 5:{f=xw(b,168)|0;do if((f|0)!=0){c[f>>2]=15272;l=d+8|0;j=d+12|0;if((c[l>>2]|0)==(c[j>>2]|0))Aa(15312,15200,173,15344);c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[l>>2];n=c[j>>2]|0;c[f+52>>2]=n;c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];m=f+16|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[m+16>>2]=0;c[m+20>>2]=0;c[m+24>>2]=0;c[m+28>>2]=0;c[f>>2]=15408;m=d+20|0;D=+g[m>>2];if(!(D==D&0.0==0.0&D>-s&D<s))Aa(15448,15472,34,15528);D=+g[d+24>>2];if(!(D==D&0.0==0.0&D>-s&D<s))Aa(15448,15472,34,15528);j=d+28|0;D=+g[j>>2];if(!(D>=0.0)|D==D&0.0==0.0&D>-s&D<s^1)Aa(15544,15472,35,15528);l=d+32|0;D=+g[l>>2];if(!(D>=0.0)|D==D&0.0==0.0&D>-s&D<s^1)Aa(15600,15472,36,15528);o=d+36|0;D=+g[o>>2];if(!(D>=0.0)|D==D&0.0==0.0&D>-s&D<s^1)Aa(15656,15472,37,15528);else{h=m;C=c[h>>2]|0;h=c[h+4>>2]|0;x=f+76|0;c[x>>2]=C;c[x+4>>2]=h;A=(c[k>>2]=C,+g[k>>2])- +g[n+12>>2];z=(c[k>>2]=h,+g[k>>2])- +g[n+16>>2];y=+g[n+24>>2];D=+g[n+20>>2];B=+(A*y+z*D);D=+(y*z-A*D);h=f+68|0;g[h>>2]=B;g[h+4>>2]=D;g[f+104>>2]=+g[j>>2];g[f+96>>2]=0.0;g[f+100>>2]=0.0;g[f+84>>2]=+g[l>>2];g[f+88>>2]=+g[o>>2];g[f+92>>2]=0.0;g[f+108>>2]=0.0;h=f;break}}else h=0;while(0);f=h;break};case 3:{f=xw(b,176)|0;do if((f|0)!=0){c[f>>2]=15272;h=d+8|0;j=d+12|0;if((c[h>>2]|0)==(c[j>>2]|0))Aa(15312,15200,173,15344);else{c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[h>>2];c[f+52>>2]=c[j>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];o=f+16|0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;c[o+16>>2]=0;c[o+20>>2]=0;c[o+24>>2]=0;c[o+28>>2]=0;c[f>>2]=14272;o=d+20|0;C=c[o+4>>2]|0;x=f+80|0;c[x>>2]=c[o>>2];c[x+4>>2]=C;x=d+28|0;C=c[x+4>>2]|0;o=f+88|0;c[o>>2]=c[x>>2];c[o+4>>2]=C;g[f+104>>2]=+g[d+36>>2];g[f+68>>2]=+g[d+40>>2];g[f+72>>2]=+g[d+44>>2];g[f+100>>2]=0.0;g[f+96>>2]=0.0;g[f+76>>2]=0.0;o=f;break}}else o=0;while(0);f=o;break};case 2:{f=xw(b,256)|0;if((f|0)==0)f=0;else{c[f>>2]=15272;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15312,15200,173,15344);c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[j>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];h=f+16|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;c[h+20>>2]=0;c[h+24>>2]=0;c[h+28>>2]=0;c[f>>2]=15864;h=f+84|0;C=d+20|0;x=c[C+4>>2]|0;w=f+68|0;c[w>>2]=c[C>>2];c[w+4>>2]=x;w=d+28|0;x=c[w+4>>2]|0;C=f+76|0;c[C>>2]=c[w>>2];c[C+4>>2]=x;C=d+36|0;x=c[C>>2]|0;C=c[C+4>>2]|0;w=h;c[w>>2]=x;c[w+4>>2]=C;y=(c[k>>2]=x,+g[k>>2]);z=(c[k>>2]=C,+g[k>>2]);A=+O(+(y*y+z*z));if(!(A<1.1920928955078125e-7)){D=1.0/A;y=y*D;g[h>>2]=y;z=z*D;g[f+88>>2]=z}B=+-z;D=+y;x=f+92|0;g[x>>2]=B;g[x+4>>2]=D;g[f+100>>2]=+g[d+44>>2];x=f+104|0;g[f+252>>2]=0.0;C=d+52|0;c[x+0>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;c[x+12>>2]=0;g[f+120>>2]=+g[C>>2];g[f+124>>2]=+g[d+56>>2];g[f+128>>2]=+g[d+64>>2];g[f+132>>2]=+g[d+68>>2];a[f+136>>0]=a[d+48>>0]|0;a[f+137>>0]=a[d+60>>0]|0;c[f+140>>2]=0;C=f+184|0;c[C+0>>2]=0;c[C+4>>2]=0;c[C+8>>2]=0;c[C+12>>2]=0}break};case 1:{j=xw(b,228)|0;do if((j|0)!=0){c[j>>2]=15272;f=d+8|0;h=d+12|0;if((c[f>>2]|0)==(c[h>>2]|0))Aa(15312,15200,173,15344);else{c[j+4>>2]=c[d>>2];c[j+8>>2]=0;c[j+12>>2]=0;c[j+48>>2]=c[f>>2];c[j+52>>2]=c[h>>2];c[j+56>>2]=0;a[j+61>>0]=a[d+16>>0]|0;a[j+60>>0]=0;c[j+64>>2]=c[d+4>>2];C=j+16|0;c[C+0>>2]=0;c[C+4>>2]=0;c[C+8>>2]=0;c[C+12>>2]=0;c[C+16>>2]=0;c[C+20>>2]=0;c[C+24>>2]=0;c[C+28>>2]=0;c[j>>2]=16584;C=d+20|0;l=c[C+4>>2]|0;x=j+68|0;c[x>>2]=c[C>>2];c[x+4>>2]=l;x=d+28|0;l=c[x+4>>2]|0;C=j+76|0;c[C>>2]=c[x>>2];c[C+4>>2]=l;g[j+116>>2]=+g[d+36>>2];C=j+84|0;l=d+44|0;c[C+0>>2]=0;c[C+4>>2]=0;c[C+8>>2]=0;c[C+12>>2]=0;g[j+120>>2]=+g[l>>2];g[j+124>>2]=+g[d+48>>2];g[j+104>>2]=+g[d+60>>2];g[j+108>>2]=+g[d+56>>2];a[j+112>>0]=a[d+40>>0]|0;a[j+100>>0]=a[d+52>>0]|0;c[j+224>>2]=0;l=j;break}}else l=0;while(0);f=l;break};case 4:{f=xw(b,196)|0;do if((f|0)!=0){c[f>>2]=15272;l=d+8|0;h=d+12|0;if((c[l>>2]|0)==(c[h>>2]|0))Aa(15312,15200,173,15344);c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[l>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];l=f+16|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[l+16>>2]=0;c[l+20>>2]=0;c[l+24>>2]=0;c[l+28>>2]=0;c[f>>2]=16256;l=d+20|0;h=c[l+4>>2]|0;C=f+68|0;c[C>>2]=c[l>>2];c[C+4>>2]=h;C=d+28|0;h=c[C+4>>2]|0;l=f+76|0;c[l>>2]=c[C>>2];c[l+4>>2]=h;l=d+36|0;h=c[l+4>>2]|0;C=f+92|0;c[C>>2]=c[l>>2];c[C+4>>2]=h;C=d+44|0;h=c[C+4>>2]|0;l=f+100|0;c[l>>2]=c[C>>2];c[l+4>>2]=h;l=d+52|0;g[f+84>>2]=+g[l>>2];h=d+56|0;g[f+88>>2]=+g[h>>2];y=+g[d+60>>2];if(y!=0.0){g[f+112>>2]=y;g[f+108>>2]=+g[l>>2]+y*+g[h>>2];g[f+116>>2]=0.0;j=f;break}else Aa(16296,16176,65,16320)}else j=0;while(0);f=j;break};case 6:{f=xw(b,276)|0;if((f|0)==0)f=0;else{c[f>>2]=15272;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15312,15200,173,15344);c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;C=f+48|0;c[C>>2]=c[j>>2];o=f+52|0;c[o>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];r=f+16|0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;c[r+24>>2]=0;c[r+28>>2]=0;c[f>>2]=14792;r=f+92|0;l=f+100|0;q=f+108|0;h=f+116|0;u=f+124|0;m=f+132|0;w=d+20|0;x=c[w>>2]|0;c[f+68>>2]=x;n=d+24|0;p=c[n>>2]|0;c[f+72>>2]=p;v=c[x+4>>2]|0;c[f+76>>2]=v;j=c[p+4>>2]|0;c[f+80>>2]=j;if(!((v+ -1|0)>>>0<2))Aa(14832,14896,53,14952);if(!((j+ -1|0)>>>0<2))Aa(14968,14896,54,14952);t=c[x+48>>2]|0;c[f+84>>2]=t;x=c[x+52>>2]|0;c[C>>2]=x;B=+g[x+20>>2];A=+g[x+24>>2];y=+g[t+20>>2];z=+g[t+24>>2];w=c[w>>2]|0;if((v|0)==1){B=+g[x+56>>2];D=+g[t+56>>2];C=w+68|0;x=c[C+4>>2]|0;v=q;c[v>>2]=c[C>>2];c[v+4>>2]=x;v=w+76|0;x=c[v+4>>2]|0;C=r;c[C>>2]=c[v>>2];c[C+4>>2]=x;y=+g[w+116>>2];g[f+140>>2]=y;g[u>>2]=0.0;g[f+128>>2]=0.0;y=B-D-y}else{I=+g[t+16>>2];E=+g[t+12>>2];J=+g[x+16>>2];K=+g[x+12>>2];L=w+68|0;M=c[L>>2]|0;L=c[L+4>>2]|0;v=q;c[v>>2]=M;c[v+4>>2]=L;v=w+76|0;t=c[v>>2]|0;v=c[v+4>>2]|0;C=r;c[C>>2]=t;c[C+4>>2]=v;g[f+140>>2]=+g[w+100>>2];C=w+84|0;x=c[C>>2]|0;C=c[C+4>>2]|0;w=u;c[w>>2]=x;c[w+4>>2]=C;F=(c[k>>2]=M,+g[k>>2]);D=(c[k>>2]=L,+g[k>>2]);H=(c[k>>2]=t,+g[k>>2]);G=(c[k>>2]=v,+g[k>>2]);E=K-E+(A*H-B*G);B=J-I+(B*H+A*G);A=(c[k>>2]=x,+g[k>>2])*(z*E+y*B-F);y=A+(c[k>>2]=C,+g[k>>2])*(z*B-y*E-D)}q=c[p+48>>2]|0;c[f+88>>2]=q;p=c[p+52>>2]|0;c[o>>2]=p;D=+g[p+20>>2];B=+g[p+24>>2];z=+g[q+20>>2];A=+g[q+24>>2];n=c[n>>2]|0;if((j|0)==1){J=+g[p+56>>2];K=+g[q+56>>2];M=n+68|0;L=c[M+4>>2]|0;C=h;c[C>>2]=c[M>>2];c[C+4>>2]=L;C=n+76|0;L=c[C+4>>2]|0;M=l;c[M>>2]=c[C>>2];c[M+4>>2]=L;z=+g[n+116>>2];g[f+144>>2]=z;g[m>>2]=0.0;g[f+136>>2]=0.0;z=J-K-z}else{F=+g[q+16>>2];J=+g[q+12>>2];E=+g[p+16>>2];N=+g[p+12>>2];w=n+68|0;v=c[w>>2]|0;w=c[w+4>>2]|0;C=h;c[C>>2]=v;c[C+4>>2]=w;C=n+76|0;x=c[C>>2]|0;C=c[C+4>>2]|0;M=l;c[M>>2]=x;c[M+4>>2]=C;g[f+144>>2]=+g[n+100>>2];M=n+84|0;L=c[M>>2]|0;M=c[M+4>>2]|0;u=m;c[u>>2]=L;c[u+4>>2]=M;H=(c[k>>2]=v,+g[k>>2]);K=(c[k>>2]=w,+g[k>>2]);G=(c[k>>2]=x,+g[k>>2]);I=(c[k>>2]=C,+g[k>>2]);J=N-J+(B*G-D*I);I=E-F+(D*G+B*I);H=(c[k>>2]=L,+g[k>>2])*(A*J+z*I-H);z=H+(c[k>>2]=M,+g[k>>2])*(A*I-z*J-K)}N=+g[d+28>>2];g[f+152>>2]=N;g[f+148>>2]=y+z*N;g[f+156>>2]=0.0}break};case 7:{j=xw(b,224)|0;do if((j|0)!=0){c[j>>2]=15272;f=d+8|0;h=d+12|0;if((c[f>>2]|0)==(c[h>>2]|0))Aa(15312,15200,173,15344);else{c[j+4>>2]=c[d>>2];c[j+8>>2]=0;c[j+12>>2]=0;c[j+48>>2]=c[f>>2];c[j+52>>2]=c[h>>2];c[j+56>>2]=0;a[j+61>>0]=a[d+16>>0]|0;a[j+60>>0]=0;c[j+64>>2]=c[d+4>>2];L=j+16|0;c[L+0>>2]=0;c[L+4>>2]=0;c[L+8>>2]=0;c[L+12>>2]=0;c[L+16>>2]=0;c[L+20>>2]=0;c[L+24>>2]=0;c[L+28>>2]=0;c[j>>2]=17160;L=d+20|0;M=c[L+4>>2]|0;m=j+76|0;c[m>>2]=c[L>>2];c[m+4>>2]=M;m=d+28|0;M=c[m+4>>2]|0;L=j+84|0;c[L>>2]=c[m>>2];c[L+4>>2]=M;L=d+36|0;M=c[L>>2]|0;L=c[L+4>>2]|0;m=j+92|0;c[m>>2]=M;c[m+4>>2]=L;m=j+100|0;g[m>>2]=-(c[k>>2]=L,+g[k>>2]);c[m+4>>2]=M;g[j+204>>2]=0.0;g[j+108>>2]=0.0;g[j+208>>2]=0.0;g[j+112>>2]=0.0;g[j+212>>2]=0.0;g[j+116>>2]=0.0;g[j+120>>2]=+g[d+48>>2];g[j+124>>2]=+g[d+52>>2];a[j+128>>0]=a[d+44>>0]|0;g[j+68>>2]=+g[d+56>>2];g[j+72>>2]=+g[d+60>>2];g[j+216>>2]=0.0;g[j+220>>2]=0.0;m=j+172|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;m=j;break}}else m=0;while(0);f=m;break};case 8:{j=xw(b,208)|0;do if((j|0)!=0){c[j>>2]=15272;h=d+8|0;f=d+12|0;if((c[h>>2]|0)==(c[f>>2]|0))Aa(15312,15200,173,15344);else{c[j+4>>2]=c[d>>2];c[j+8>>2]=0;c[j+12>>2]=0;c[j+48>>2]=c[h>>2];c[j+52>>2]=c[f>>2];c[j+56>>2]=0;a[j+61>>0]=a[d+16>>0]|0;a[j+60>>0]=0;c[j+64>>2]=c[d+4>>2];n=j+16|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;c[n+20>>2]=0;c[n+24>>2]=0;c[n+28>>2]=0;c[j>>2]=17024;n=d+20|0;M=c[n+4>>2]|0;L=j+80|0;c[L>>2]=c[n>>2];c[L+4>>2]=M;L=d+28|0;M=c[L+4>>2]|0;n=j+88|0;c[n>>2]=c[L>>2];c[n+4>>2]=M;g[j+96>>2]=+g[d+36>>2];g[j+68>>2]=+g[d+40>>2];g[j+72>>2]=+g[d+44>>2];g[j+104>>2]=0.0;g[j+108>>2]=0.0;g[j+112>>2]=0.0;n=j;break}}else n=0;while(0);f=n;break};case 9:{f=xw(b,180)|0;do if((f|0)!=0){c[f>>2]=15272;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15312,15200,173,15344);else{c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[j>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];q=f+16|0;c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;c[q+16>>2]=0;c[q+20>>2]=0;c[q+24>>2]=0;c[q+28>>2]=0;c[f>>2]=14440;q=d+20|0;M=c[q+4>>2]|0;L=f+68|0;c[L>>2]=c[q>>2];c[L+4>>2]=M;L=d+28|0;M=c[L+4>>2]|0;q=f+76|0;c[q>>2]=c[L>>2];c[q+4>>2]=M;g[f+84>>2]=0.0;g[f+88>>2]=0.0;g[f+92>>2]=0.0;g[f+96>>2]=+g[d+36>>2];g[f+100>>2]=+g[d+40>>2];q=f;break}}else q=0;while(0);f=q;break};case 10:{f=xw(b,168)|0;do if((f|0)!=0){c[f>>2]=15272;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15312,15200,173,15344);else{c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[j>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];p=f+16|0;c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;c[p+16>>2]=0;c[p+20>>2]=0;c[p+24>>2]=0;c[p+28>>2]=0;c[f>>2]=16888;p=d+20|0;M=c[p+4>>2]|0;L=f+68|0;c[L>>2]=c[p>>2];c[L+4>>2]=M;L=d+28|0;M=c[L+4>>2]|0;p=f+76|0;c[p>>2]=c[L>>2];c[p+4>>2]=M;g[f+84>>2]=+g[d+36>>2];g[f+160>>2]=0.0;g[f+92>>2]=0.0;c[f+164>>2]=0;g[f+88>>2]=0.0;p=f;break}}else p=0;while(0);f=p;break};default:Aa(15192,15200,113,15248)}while(0);c[f+8>>2]=0;j=b+102956|0;c[f+12>>2]=c[j>>2];h=c[j>>2]|0;if((h|0)!=0)c[h+8>>2]=f;c[j>>2]=f;j=b+102964|0;c[j>>2]=(c[j>>2]|0)+1;j=f+16|0;c[f+20>>2]=f;b=f+52|0;c[j>>2]=c[b>>2];c[f+24>>2]=0;h=f+48|0;m=c[h>>2]|0;l=m+108|0;c[f+28>>2]=c[l>>2];l=c[l>>2]|0;if((l|0)!=0){c[l+8>>2]=j;m=c[h>>2]|0}c[m+108>>2]=j;j=f+32|0;c[f+36>>2]=f;c[j>>2]=c[h>>2];c[f+40>>2]=0;l=c[b>>2]|0;h=l+108|0;c[f+44>>2]=c[h>>2];h=c[h>>2]|0;if((h|0)!=0){c[h+8>>2]=j;l=c[b>>2]|0}c[l+108>>2]=j;b=c[d+8>>2]|0;if((a[d+16>>0]|0)!=0){i=e;return f|0}d=c[(c[d+12>>2]|0)+112>>2]|0;if((d|0)==0){i=e;return f|0}do{if((c[d>>2]|0)==(b|0)){M=(c[d+4>>2]|0)+4|0;c[M>>2]=c[M>>2]|8}d=c[d+12>>2]|0}while((d|0)!=0);i=e;return f|0}function ih(a,b){a=a|0;b=b|0;var c=0;c=i;ix(a,b);i=c;return}function jh(a,b,c,d){a=a|0;b=+b;c=c|0;d=d|0;var e=0;e=i;lx(a,b,c,d);i=e;return}function kh(a){a=a|0;var b=0;b=i;a=c[a+102952>>2]|0;if((a|0)==0){i=b;return}do{g[a+76>>2]=0.0;g[a+80>>2]=0.0;g[a+84>>2]=0.0;a=c[a+96>>2]|0}while((a|0)!=0);i=b;return}function lh(a){a=a|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0.0,R=0.0,S=0.0,T=0.0;e=i;i=i+192|0;n=e+40|0;q=e+32|0;t=e+176|0;s=e+168|0;r=e+152|0;p=e+24|0;o=e+16|0;z=e+140|0;w=e+128|0;x=e+116|0;y=e+104|0;v=e+92|0;k=e+80|0;l=e+48|0;f=e;d=a+102984|0;j=c[d>>2]|0;if((j|0)==0){i=e;return}j=c[j+4>>2]|0;if((j&1|0)!=0?(K=c[a+102952>>2]|0,(K|0)!=0):0){B=z+4|0;A=z+8|0;E=y+4|0;F=y+8|0;G=v+4|0;H=v+8|0;I=w+4|0;J=w+8|0;C=x+4|0;D=x+8|0;do{L=K+12|0;N=c[K+100>>2]|0;if((N|0)!=0){M=K+4|0;do{O=b[M>>1]|0;do if(!((O&32)==0)){P=c[K>>2]|0;if((P|0)==1){g[x>>2]=.5;g[C>>2]=.5;g[D>>2]=.8999999761581421;mx(a,c[N+12>>2]|0,L,x);break}else if((P|0)!=0)if((O&2)==0){g[y>>2]=.6000000238418579;g[E>>2]=.6000000238418579;g[F>>2]=.6000000238418579;mx(a,c[N+12>>2]|0,L,y);break}else{g[v>>2]=.8999999761581421;g[G>>2]=.699999988079071;g[H>>2]=.699999988079071;mx(a,c[N+12>>2]|0,L,v);break}else{g[w>>2]=.5;g[I>>2]=.8999999761581421;g[J>>2]=.5;mx(a,c[N+12>>2]|0,L,w);break}}else{g[z>>2]=.5;g[B>>2]=.5;g[A>>2]=.30000001192092896;mx(a,c[N+12>>2]|0,L,z)}while(0);N=c[N+4>>2]|0}while((N|0)!=0)}K=c[K+96>>2]|0}while((K|0)!=0)}if((j&2|0)!=0?(u=c[a+102956>>2]|0,(u|0)!=0):0){v=r+4|0;w=r+8|0;do{O=(c[u+52>>2]|0)+12|0;N=(c[u+48>>2]|0)+12|0;x=c[N+4>>2]|0;P=n;c[P>>2]=c[N>>2];c[P+4>>2]=x;P=c[O+4>>2]|0;x=q;c[x>>2]=c[O>>2];c[x+4>>2]=P;lb[c[c[u>>2]>>2]&127](t,u);lb[c[(c[u>>2]|0)+4>>2]&127](s,u);g[r>>2]=.5;g[v>>2]=.800000011920929;g[w>>2]=.800000011920929;x=c[u+4>>2]|0;if((x|0)==3){P=c[d>>2]|0;vb[c[(c[P>>2]|0)+24>>2]&63](P,t,s,r)}else if((x|0)==4){P=u+68|0;O=c[P+4>>2]|0;N=p;c[N>>2]=c[P>>2];c[N+4>>2]=O;N=u+76|0;O=c[N+4>>2]|0;P=o;c[P>>2]=c[N>>2];c[P+4>>2]=O;P=c[d>>2]|0;vb[c[(c[P>>2]|0)+24>>2]&63](P,p,t,r);P=c[d>>2]|0;vb[c[(c[P>>2]|0)+24>>2]&63](P,o,s,r);P=c[d>>2]|0;vb[c[(c[P>>2]|0)+24>>2]&63](P,p,o,r)}else if((x|0)!=5){P=c[d>>2]|0;vb[c[(c[P>>2]|0)+24>>2]&63](P,n,t,r);P=c[d>>2]|0;vb[c[(c[P>>2]|0)+24>>2]&63](P,t,s,r);P=c[d>>2]|0;vb[c[(c[P>>2]|0)+24>>2]&63](P,q,s,r)}u=c[u+12>>2]|0}while((u|0)!=0)}if((j&8|0)!=0){n=a+102932|0;while(1){n=c[n>>2]|0;if((n|0)==0)break;else n=n+12|0}}a:do if((j&4|0)!=0?(g[k>>2]=.8999999761581421,g[k+4>>2]=.30000001192092896,g[k+8>>2]=.8999999761581421,m=c[a+102952>>2]|0,(m|0)!=0):0){o=a+102884|0;u=a+102876|0;n=l+4|0;v=l+8|0;t=l+12|0;s=l+16|0;r=l+20|0;q=l+24|0;p=l+28|0;b:while(1){if(!((b[m+4>>1]&32)==0)?(h=c[m+100>>2]|0,(h|0)!=0):0){z=h;do{y=z+28|0;if((c[y>>2]|0)>0){x=z+24|0;w=0;do{A=c[(c[x>>2]|0)+(w*28|0)+24>>2]|0;if(!((A|0)>-1)){h=37;break b}if((c[o>>2]|0)<=(A|0)){h=37;break b}P=c[u>>2]|0;R=+g[P+(A*36|0)>>2];T=+g[P+(A*36|0)+4>>2];S=+g[P+(A*36|0)+8>>2];Q=+g[P+(A*36|0)+12>>2];g[l>>2]=R;g[n>>2]=T;g[v>>2]=S;g[t>>2]=T;g[s>>2]=S;g[r>>2]=Q;g[q>>2]=R;g[p>>2]=Q;P=c[d>>2]|0;vb[c[(c[P>>2]|0)+8>>2]&63](P,l,4,k);w=w+1|0}while((w|0)<(c[y>>2]|0))}z=c[z+4>>2]|0}while((z|0)!=0)}m=c[m+96>>2]|0;if((m|0)==0)break a}if((h|0)==37)Aa(11760,11704,159,11824)}while(0);if((j&16|0)==0){i=e;return}a=c[a+102952>>2]|0;if((a|0)==0){i=e;return}do{N=a+12|0;c[f+0>>2]=c[N+0>>2];c[f+4>>2]=c[N+4>>2];c[f+8>>2]=c[N+8>>2];c[f+12>>2]=c[N+12>>2];N=a+44|0;O=c[N+4>>2]|0;P=f;c[P>>2]=c[N>>2];c[P+4>>2]=O;P=c[d>>2]|0;lb[c[(c[P>>2]|0)+28>>2]&127](P,f);a=c[a+96>>2]|0}while((a|0)!=0);i=e;return}function mh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;j=i;i=i+1040|0;f=j;h=f+4|0;c[f>>2]=h;k=f+1028|0;c[k>>2]=0;l=f+1032|0;c[l>>2]=256;n=c[f>>2]|0;c[n+(c[k>>2]<<2)>>2]=c[a+102872>>2];u=c[k>>2]|0;s=u+1|0;c[k>>2]=s;do if((u|0)>-1){q=a+102876|0;p=d+4|0;o=d+8|0;n=d+12|0;a=a+102884|0;a:while(1){if((s|0)<=0){k=4;break}s=s+ -1|0;c[k>>2]=s;u=c[f>>2]|0;r=c[u+(s<<2)>>2]|0;do if(!((r|0)==-1)?(m=c[q>>2]|0,!((+g[d>>2]- +g[m+(r*36|0)+8>>2]>0.0?1:+g[p>>2]- +g[m+(r*36|0)+12>>2]>0.0)|+g[m+(r*36|0)>>2]- +g[o>>2]>0.0|+g[m+(r*36|0)+4>>2]- +g[n>>2]>0.0)):0){t=m+(r*36|0)+24|0;if((c[t>>2]|0)==-1){if(!((r|0)>-1)){k=11;break a}if((c[a>>2]|0)<=(r|0)){k=11;break a}if(!(tb[c[(c[b>>2]|0)+8>>2]&63](b,c[(c[m+(r*36|0)+16>>2]|0)+16>>2]|0)|0)){k=21;break a}s=c[k>>2]|0;break}if((s|0)==(c[l>>2]|0)?(c[l>>2]=s<<1,s=CA(s<<3)|0,c[f>>2]=s,HA(s|0,u|0,c[k>>2]<<2|0)|0,(u|0)!=(h|0)):0)DA(u);s=c[f>>2]|0;c[s+(c[k>>2]<<2)>>2]=c[t>>2];t=(c[k>>2]|0)+1|0;c[k>>2]=t;r=m+(r*36|0)+28|0;if((t|0)==(c[l>>2]|0)?(c[l>>2]=t<<1,u=CA(t<<3)|0,c[f>>2]=u,HA(u|0,s|0,c[k>>2]<<2|0)|0,(s|0)!=(h|0)):0)DA(s);c[(c[f>>2]|0)+(c[k>>2]<<2)>>2]=c[r>>2];s=(c[k>>2]|0)+1|0;c[k>>2]=s}while(0);if((s|0)<=0){k=21;break}}if((k|0)==4)Aa(9632,9648,67,9696);else if((k|0)==11)Aa(11760,11704,153,11808);else if((k|0)==21){e=c[f>>2]|0;break}}else e=n;while(0);if((e|0)==(h|0)){i=j;return}DA(e);c[f>>2]=0;i=j;return}function nh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,l=0,m=0.0,n=0.0,o=0,p=0,q=0.0,r=0.0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0,D=0,E=0,F=0,G=0.0,H=0,I=0,J=0,K=0,L=0.0,M=0,N=0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0,U=0,V=0,W=0,X=0.0,Y=0.0,Z=0.0;f=i;i=i+1088|0;l=f+1064|0;j=f+1056|0;h=f+20|0;o=f;s=c[d>>2]|0;d=c[d+4>>2]|0;x=e;e=c[x>>2]|0;x=c[x+4>>2]|0;w=(c[k>>2]=s,+g[k>>2]);t=(c[k>>2]=d,+g[k>>2]);u=(c[k>>2]=e,+g[k>>2]);u=u-w;v=(c[k>>2]=x,+g[k>>2])-t;z=u*u+v*v;if(!(z>0.0))Aa(11672,11704,204,11752);z=+O(+z);if(z<1.1920928955078125e-7){B=v;A=u}else{A=1.0/z;B=v*A;A=u*A}z=-B;G=B<-0.0?z:B;if(A>0.0)B=A;else B=-A;Q=w+u;R=t+v;y=h+4|0;c[h>>2]=y;D=h+1028|0;c[D>>2]=0;C=h+1032|0;c[C>>2]=256;c[(c[h>>2]|0)+(c[D>>2]<<2)>>2]=c[a+102872>>2];W=c[D>>2]|0;V=W+1|0;c[D>>2]=V;a:do if((W|0)>-1){E=a+102876|0;F=o+8|0;H=o+16|0;I=a+102884|0;J=l+8|0;K=o+4|0;M=o+8|0;a=o+12|0;N=j+4|0;L=w<Q?w:Q;P=t>R?t:R;Q=w>Q?w:Q;R=t<R?t:R;S=1.0;b:while(1){c:while(1){if((V|0)<=0){j=11;break b}V=V+ -1|0;c[D>>2]=V;U=c[h>>2]|0;T=c[U+(V<<2)>>2]|0;do if(!((T|0)==-1)?(p=c[E>>2]|0,q=+g[p+(T*36|0)+8>>2],m=+g[p+(T*36|0)+12>>2],n=+g[p+(T*36|0)>>2],r=+g[p+(T*36|0)+4>>2],!(L-q>0.0|R-m>0.0|n-Q>0.0|r-P>0.0)):0){X=(w-(q+n)*.5)*z+A*(t-(m+r)*.5);if(!(X>0.0))X=-X;if(!(X-(G*(q-n)*.5+B*(m-r)*.5)>0.0)){W=p+(T*36|0)+24|0;if(!((c[W>>2]|0)==-1)){if((V|0)==(c[C>>2]|0)?(c[C>>2]=V<<1,V=CA(V<<3)|0,c[h>>2]=V,HA(V|0,U|0,c[D>>2]<<2|0)|0,(U|0)!=(y|0)):0)DA(U);U=c[h>>2]|0;c[U+(c[D>>2]<<2)>>2]=c[W>>2];V=(c[D>>2]|0)+1|0;c[D>>2]=V;T=p+(T*36|0)+28|0;if((V|0)==(c[C>>2]|0)?(c[C>>2]=V<<1,W=CA(V<<3)|0,c[h>>2]=W,HA(W|0,U|0,c[D>>2]<<2|0)|0,(U|0)!=(y|0)):0)DA(U);c[(c[h>>2]|0)+(c[D>>2]<<2)>>2]=c[T>>2];V=(c[D>>2]|0)+1|0;c[D>>2]=V;break}W=o;c[W>>2]=s;c[W+4>>2]=d;W=F;c[W>>2]=e;c[W+4>>2]=x;g[H>>2]=S;if(!((T|0)>-1)){j=21;break b}if((c[I>>2]|0)<=(T|0)){j=21;break b}W=c[p+(T*36|0)+16>>2]|0;T=c[W+16>>2]|0;V=c[T+12>>2]|0;if(ub[c[(c[V>>2]|0)+20>>2]&63](V,l,o,(c[T+8>>2]|0)+12|0,c[W+20>>2]|0)|0){X=+g[J>>2];Z=1.0-X;Y=Z*+g[K>>2]+X*+g[a>>2];g[j>>2]=+g[o>>2]*Z+X*+g[M>>2];g[N>>2]=Y;X=+kb[c[(c[b>>2]|0)+8>>2]&63](b,T,j,l,X)}else X=+g[H>>2];if(X==0.0)break a;if(X>0.0)break c;V=c[D>>2]|0}}while(0);if((V|0)<=0)break a}Q=w+u*X;R=t+v*X;V=c[D>>2]|0;if((V|0)<=0)break a;else{L=w<Q?w:Q;P=t>R?t:R;Q=w>Q?w:Q;R=t<R?t:R;S=X}}if((j|0)==11)Aa(9632,9648,67,9696);else if((j|0)==21)Aa(11760,11704,153,11808)}while(0);j=c[h>>2]|0;if((j|0)==(y|0)){i=f;return}DA(j);c[h>>2]=0;i=f;return}function oh(a){a=a|0;return c[a+102952>>2]|0}function ph(a){a=a|0;return c[a+102956>>2]|0}function qh(a){a=a|0;return c[a+102932>>2]|0}function rh(f,h){f=f|0;h=h|0;var j=0,k=0;j=i;k=f+102976|0;if((h&1|0)==(d[k>>0]|0|0)){i=j;return}a[k>>0]=h&1;if(h){i=j;return}f=c[f+102952>>2]|0;if((f|0)==0){i=j;return}do{k=f+4|0;h=e[k>>1]|0;if((h&2|0)==0){b[k>>1]=h|2;g[f+144>>2]=0.0}f=c[f+96>>2]|0}while((f|0)!=0);i=j;return}function sh(b){b=b|0;return(a[b+102976>>0]|0)!=0|0}function th(b,c){b=b|0;c=c|0;a[b+102992>>0]=c&1;return}function uh(b){b=b|0;return(a[b+102992>>0]|0)!=0|0}function vh(b,c){b=b|0;c=c|0;a[b+102993>>0]=c&1;return}function wh(b){b=b|0;return(a[b+102993>>0]|0)!=0|0}function xh(b,c){b=b|0;c=c|0;a[b+102994>>0]=c&1;return}function yh(b){b=b|0;return(a[b+102994>>0]|0)!=0|0}function zh(a){a=a|0;return c[a+102900>>2]|0}function Ah(a){a=a|0;return c[a+102960>>2]|0}function Bh(a){a=a|0;return c[a+102964>>2]|0}function Ch(a){a=a|0;return c[a+102936>>2]|0}function Dh(a){a=a|0;var b=0,d=0;b=i;d=c[a+102872>>2]|0;if((d|0)==-1){d=0;i=b;return d|0}d=c[(c[a+102876>>2]|0)+(d*36|0)+32>>2]|0;i=b;return d|0}function Eh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=c[a+102884>>2]|0;if((d|0)<=0){g=0;i=b;return g|0}a=c[a+102876>>2]|0;e=0;f=0;while(1){if((c[a+(e*36|0)+32>>2]|0)>=2){g=c[a+(e*36|0)+24>>2]|0;if((g|0)==-1){d=5;break}g=(c[a+((c[a+(e*36|0)+28>>2]|0)*36|0)+32>>2]|0)-(c[a+(g*36|0)+32>>2]|0)|0;g=(g|0)>0?g:0-g|0;f=(f|0)>(g|0)?f:g}e=e+1|0;if((e|0)>=(d|0)){d=8;break}}if((d|0)==5)Aa(6224,5696,686,6248);else if((d|0)==8){i=b;return f|0}return 0}function Fh(a){a=a|0;var b=0,d=0.0,e=0,f=0,h=0.0;b=i;f=c[a+102872>>2]|0;if((f|0)==-1){h=0.0;i=b;return+h}e=c[a+102876>>2]|0;d=(+g[e+(f*36|0)+8>>2]- +g[e+(f*36|0)>>2]+(+g[e+(f*36|0)+12>>2]- +g[e+(f*36|0)+4>>2]))*2.0;a=c[a+102884>>2]|0;if((a|0)>0){f=0;h=0.0;do{if((c[e+(f*36|0)+32>>2]|0)>=0)h=h+(+g[e+(f*36|0)+8>>2]- +g[e+(f*36|0)>>2]+(+g[e+(f*36|0)+12>>2]- +g[e+(f*36|0)+4>>2]))*2.0;f=f+1|0}while((f|0)<(a|0))}else h=0.0;h=h/d;i=b;return+h}function Gh(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+102968|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Hh(b){b=b|0;var d=0,e=0,f=0;d=i;if((a[232]|0)==0?(wa(232)|0)!=0:0)Da(232);f=b+102968|0;e=c[f+4>>2]|0;b=224;c[b>>2]=c[f>>2];c[b+4>>2]=e;i=d;return 224}function Ih(a){a=a|0;return(c[a+102868>>2]&2|0)!=0|0}function Jh(a,b){a=a|0;b=b|0;var d=0;a=a+102868|0;d=c[a>>2]|0;c[a>>2]=b?d|4:d&-5;return}function Kh(a){a=a|0;return(c[a+102868>>2]&4|0)!=0|0}function Lh(a){a=a|0;return a+102996|0}function Mh(a){a=a|0;var b=0,d=0,e=0,f=0,j=0.0;d=i;i=i+16|0;b=d;if((c[a+102868>>2]&2|0)!=0){i=d;return}j=+g[a+102972>>2];h[k>>3]=+g[a+102968>>2];c[b>>2]=c[k>>2];c[b+4>>2]=c[k+4>>2];e=b+8|0;h[k>>3]=j;c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(11384,b);Cw(11416,b);c[b>>2]=c[a+102960>>2];Cw(11448,b);c[b>>2]=c[a+102964>>2];Cw(11512,b);e=c[a+102952>>2]|0;if((e|0)!=0){f=0;while(1){c[e+8>>2]=f;Jw(e);e=c[e+96>>2]|0;if((e|0)==0)break;else f=f+1|0}}a=a+102956|0;f=c[a>>2]|0;if((f|0)!=0){e=0;while(1){c[f+56>>2]=e;f=c[f+12>>2]|0;if((f|0)==0)break;else e=e+1|0}e=c[a>>2]|0;if((e|0)!=0){do{if((c[e+4>>2]|0)!=6){Cw(11576,b);jb[c[(c[e>>2]|0)+16>>2]&127](e);Cw(11584,b)}e=c[e+12>>2]|0}while((e|0)!=0);a=c[a>>2]|0;if((a|0)!=0)do{if((c[a+4>>2]|0)==6){Cw(11576,b);jb[c[(c[a>>2]|0)+16>>2]&127](a);Cw(11584,b)}a=c[a+12>>2]|0}while((a|0)!=0)}}Cw(11592,b);Cw(11616,b);Cw(11640,b);Cw(11656,b);i=d;return}function Nh(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;if((a|0)==0){i=b;return}d=c[a+102952>>2]|0;if((d|0)!=0)do{e=d;d=c[d+96>>2]|0;e=c[e+100>>2]|0;while(1){if((e|0)==0)break;f=c[e+4>>2]|0;c[e+28>>2]=0;ax(e,a);e=f}}while((d|0)!=0);DA(c[a+102904>>2]|0);DA(c[a+102916>>2]|0);DA(c[a+102876>>2]|0);if((c[a+102468>>2]|0)!=0)Aa(8344,8360,32,8408);if((c[a+102864>>2]|0)!=0)Aa(8432,8360,33,8408);d=a+4|0;f=c[a>>2]|0;if((c[d>>2]|0)>0){e=0;do{DA(c[f+(e<<3)+4>>2]|0);e=e+1|0;f=c[a>>2]|0}while((e|0)<(c[d>>2]|0))}DA(f);DA(a);i=b;return}function Oh(a){a=a|0;return a+68|0}function Ph(a){a=a|0;return a+76|0}function Qh(a){a=a|0;return a+84|0}function Rh(a){a=a|0;return+(+g[a+100>>2])}function Sh(a){a=a|0;var b=0.0,d=0.0,e=0.0,f=0.0,h=0,i=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0.0;h=c[a+48>>2]|0;d=+g[h+24>>2];j=+g[a+68>>2];f=+g[h+20>>2];i=+g[a+72>>2];k=c[a+52>>2]|0;m=+g[k+24>>2];o=+g[a+76>>2];n=+g[k+20>>2];l=+g[a+80>>2];e=+g[a+84>>2];b=+g[a+88>>2];return+((+g[k+12>>2]+(m*o-n*l)-(+g[h+12>>2]+(d*j-f*i)))*(d*e-f*b)+(o*n+m*l+ +g[k+16>>2]-(j*f+d*i+ +g[h+16>>2]))*(f*e+d*b))}function Th(a){a=a|0;var b=0.0,d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0;d=i;q=c[a+48>>2]|0;r=c[a+52>>2]|0;o=+g[a+68>>2]- +g[q+28>>2];f=+g[a+72>>2]- +g[q+32>>2];l=+g[q+24>>2];n=+g[q+20>>2];e=o*l-f*n;o=l*f+o*n;f=+g[a+76>>2]- +g[r+28>>2];k=+g[a+80>>2]- +g[r+32>>2];p=+g[r+24>>2];m=+g[r+20>>2];j=f*p-k*m;m=p*k+f*m;f=+g[a+84>>2];k=+g[a+88>>2];p=l*f-n*k;k=n*f+l*k;a=q+64|0;l=+g[a>>2];f=+g[a+4>>2];a=r+64|0;n=+g[a>>2];b=+g[q+72>>2];h=+g[r+72>>2];b=(m+ +g[r+48>>2]-(o+ +g[q+48>>2]))*p*b-(j+ +g[r+44>>2]-(e+ +g[q+44>>2]))*k*b+(p*(o*b+(n-m*h-l))+k*(+g[a+4>>2]+j*h-f-e*b));i=d;return+b}function Uh(b){b=b|0;return(a[b+136>>0]|0)!=0|0}function Vh(f,h){f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;j=i;k=f+136|0;if((h&1|0)==(d[k>>0]|0|0)){i=j;return}l=c[f+48>>2]|0;m=l+4|0;n=e[m>>1]|0;if((n&2|0)==0){b[m>>1]=n|2;g[l+144>>2]=0.0}l=c[f+52>>2]|0;m=l+4|0;n=e[m>>1]|0;if((n&2|0)==0){b[m>>1]=n|2;g[l+144>>2]=0.0}a[k>>0]=h&1;g[f+112>>2]=0.0;i=j;return}function Wh(a){a=a|0;return+(+g[a+120>>2])}function Xh(a){a=a|0;return+(+g[a+124>>2])}function Yh(a,d,f){a=a|0;d=+d;f=+f;var h=0,j=0,k=0,l=0,m=0;j=i;if(!(d<=f))Aa(16624,15904,575,16696);h=a+120|0;if(!(+g[h>>2]!=d)?!(+g[a+124>>2]!=f):0){i=j;return}m=c[a+48>>2]|0;k=m+4|0;l=e[k>>1]|0;if((l&2|0)==0){b[k>>1]=l|2;g[m+144>>2]=0.0}l=c[a+52>>2]|0;m=l+4|0;k=e[m>>1]|0;if((k&2|0)==0){b[m>>1]=k|2;g[l+144>>2]=0.0}g[h>>2]=d;g[a+124>>2]=f;g[a+112>>2]=0.0;i=j;return}function Zh(b){b=b|0;return(a[b+137>>0]|0)!=0|0}function _h(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;j=c[d+48>>2]|0;k=j+4|0;l=e[k>>1]|0;if((l&2|0)==0){b[k>>1]=l|2;g[j+144>>2]=0.0}l=c[d+52>>2]|0;k=l+4|0;j=e[k>>1]|0;if((j&2|0)!=0){l=d+137|0;k=f&1;a[l>>0]=k;i=h;return}b[k>>1]=j|2;g[l+144>>2]=0.0;l=d+137|0;k=f&1;a[l>>0]=k;i=h;return}function $h(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if((k&2|0)==0){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if((h&2|0)!=0){k=a+132|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+132|0;g[k>>2]=d;i=f;return}function ai(a){a=a|0;return+(+g[a+132>>2])}function bi(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if((k&2|0)==0){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if((h&2|0)!=0){k=a+128|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+128|0;g[k>>2]=d;i=f;return}function ci(a){a=a|0;return+(+g[a+128>>2])}function di(a,b){a=a|0;b=+b;return+(+g[a+116>>2]*b)}function ei(a){a=a|0;return c[a+4>>2]|0}function fi(a){a=a|0;return c[a+48>>2]|0}function gi(a){a=a|0;return c[a+52>>2]|0}function hi(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[248]|0)==0?(wa(248)|0)!=0:0)Da(248);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=240;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 240}function ii(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[264]|0)==0?(wa(264)|0)!=0:0)Da(264);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=256;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 256}function ji(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[280]|0)==0?(wa(280)|0)!=0:0)Da(280);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=272;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 272}function ki(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function li(a){a=a|0;return c[a+12>>2]|0}function mi(a){a=a|0;return c[a+64>>2]|0}function ni(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function oi(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function pi(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function qi(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function ri(a){a=a|0;return a|0}function si(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function ti(a){a=a|0;return+(+g[a+8>>2])}function ui(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function vi(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function wi(a){a=a|0;return a|0}function xi(b,c){b=b|0;c=c|0;c=d[c>>0]|d[c+1>>0]<<8|d[c+2>>0]<<16|d[c+3>>0]<<24;a[b>>0]=c;a[b+1>>0]=c>>8;a[b+2>>0]=c>>16;a[b+3>>0]=c>>24;return}function yi(a){a=a|0;return c[a>>2]|0}function zi(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Ai(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Bi(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Ci(){var a=0,b=0,d=0;a=i;b=CA(4)|0;if((b|0)!=0){d=b;c[d>>2]=2616;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(4)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){c[d>>2]=2616;i=a;return d|0}return 0}function Di(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+8>>2]&127](a,b);i=d;return}function Ei(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+12>>2]&127](a,b);i=d;return}function Fi(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;pb[c[(c[a>>2]|0)+16>>2]&63](a,b,d);i=e;return}function Gi(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;pb[c[(c[a>>2]|0)+20>>2]&63](a,b,d);i=e;return}function Hi(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Ii(){var a=0,b=0,d=0;a=i;b=CA(16)|0;if((b|0)!=0){d=b;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(16)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){i=a;return d|0}return 0}function Ji(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;e=CA(16)|0;a:do if((e|0)==0){while(1){e=c[4558]|0;c[4558]=e+0;if((e|0)==0)break;qb[e&63]();e=CA(16)|0;if((e|0)!=0)break a}e=cb(4)|0;c[e>>2]=18072;_a(e|0,18120,111)}while(0);g=a;a=c[g+4>>2]|0;f=e;c[f>>2]=c[g>>2];c[f+4>>2]=a;f=b;a=c[f+4>>2]|0;b=e+8|0;c[b>>2]=c[f>>2];c[b+4>>2]=a;i=d;return e|0}function Ki(a,b,d,e){a=+a;b=+b;d=+d;e=+e;var f=0,h=0;f=i;h=CA(16)|0;a:do if((h|0)==0){while(1){h=c[4558]|0;c[4558]=h+0;if((h|0)==0)break;qb[h&63]();h=CA(16)|0;if((h|0)!=0)break a}h=cb(4)|0;c[h>>2]=18072;_a(h|0,18120,111)}while(0);g[h>>2]=a;g[h+4>>2]=d;g[h+8>>2]=b;g[h+12>>2]=e;i=f;return h|0}function Li(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=b;b=c[f+4>>2]|0;e=a;c[e>>2]=c[f>>2];c[e+4>>2]=b;e=d;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Mi(a){a=a|0;g[a>>2]=1.0;g[a+8>>2]=0.0;g[a+4>>2]=0.0;g[a+12>>2]=1.0;return}function Ni(a){a=a|0;var b=0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=b;return}function Oi(b){b=b|0;var c=0,d=0.0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;c=i;if((a[304]|0)==0?(wa(304)|0)!=0:0)Da(304);d=+g[b>>2];e=+g[b+8>>2];f=+g[b+4>>2];h=+g[b+12>>2];j=d*h-e*f;if(j!=0.0)j=1.0/j;k=-j;g[72]=h*j;g[73]=f*k;g[74]=e*k;g[75]=d*j;i=c;return 288}function Pi(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;d=i;if((a[320]|0)==0?(wa(320)|0)!=0:0)Da(320);f=+g[b>>2];h=+g[b+8>>2];e=+g[b+4>>2];j=+g[b+12>>2];k=f*j-h*e;if(k!=0.0)k=1.0/k;l=+g[c>>2];m=+g[c+4>>2];j=+(k*(j*l-h*m));k=+(k*(f*m-e*l));b=312;g[b>>2]=j;g[b+4>>2]=k;i=d;return 312}function Qi(a){a=a|0;return a|0}function Ri(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Si(a){a=a|0;return a+8|0}function Ti(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Ui(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Vi(){var b=0,d=0,e=0,f=0;b=i;d=CA(64)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(64)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=7;f=d+20|0;e=d+36|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;g[e>>2]=1.0;g[d+40>>2]=0.0;a[d+44>>0]=0;g[d+48>>2]=0.0;g[d+52>>2]=0.0;g[d+56>>2]=2.0;g[d+60>>2]=.699999988079071;i=b;return d|0}function Wi(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0;h=i;c[a+8>>2]=b;c[a+12>>2]=d;k=+g[e>>2]- +g[b+12>>2];p=e+4|0;n=+g[p>>2]- +g[b+16>>2];o=b+24|0;l=+g[o>>2];b=b+20|0;j=+g[b>>2];m=+(k*l+n*j);j=+(l*n-k*j);q=a+20|0;g[q>>2]=m;g[q+4>>2]=j;j=+g[e>>2]- +g[d+12>>2];m=+g[p>>2]- +g[d+16>>2];k=+g[d+24>>2];n=+g[d+20>>2];l=+(j*k+m*n);n=+(k*m-j*n);e=a+28|0;g[e>>2]=l;g[e+4>>2]=n;n=+g[o>>2];l=+g[f>>2];j=+g[b>>2];m=+g[f+4>>2];k=+(n*l+j*m);j=+(n*m-l*j);b=a+36|0;g[b>>2]=k;g[b+4>>2]=j;i=h;return}function Xi(a){a=a|0;return a+20|0}function Yi(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Zi(a){a=a|0;return a+28|0}function _i(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function $i(a){a=a|0;return a+36|0}function aj(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+36|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function bj(b){b=b|0;return(a[b+44>>0]|0)!=0|0}function cj(b,c){b=b|0;c=c|0;a[b+44>>0]=c&1;return}function dj(a){a=a|0;return+(+g[a+48>>2])}function ej(a,b){a=a|0;b=+b;g[a+48>>2]=b;return}function fj(a){a=a|0;return+(+g[a+52>>2])}function gj(a,b){a=a|0;b=+b;g[a+52>>2]=b;return}function hj(a){a=a|0;return+(+g[a+56>>2])}function ij(a,b){a=a|0;b=+b;g[a+56>>2]=b;return}function jj(a){a=a|0;return+(+g[a+60>>2])}function kj(a,b){a=a|0;b=+b;g[a+60>>2]=b;return}function lj(a){a=a|0;return c[a>>2]|0}function mj(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function nj(a){a=a|0;return c[a+4>>2]|0}function oj(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function pj(a){a=a|0;return c[a+8>>2]|0}function qj(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function rj(a){a=a|0;return c[a+12>>2]|0}function sj(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function tj(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function uj(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function vj(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function wj(){var a=0,b=0,d=0;a=i;b=CA(20)|0;a:do if((b|0)==0){while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0)break;qb[b&63]();b=CA(20)|0;if((b|0)!=0)break a}b=cb(4)|0;c[b>>2]=18072;_a(b|0,18120,111)}while(0);c[b>>2]=6896;d=b+4|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;i=a;return b|0}function xj(a){a=a|0;return c[a+4>>2]|0}function yj(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function zj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function Aj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function Bj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function Cj(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function Dj(a){a=a|0;return a+12|0}function Ej(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+12|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Fj(a){a=a|0;return c[a+4>>2]|0}function Gj(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Hj(a){a=a|0;return+(+g[a+8>>2])}function Ij(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Jj(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Kj(){var b=0,d=0,e=0;b=i;d=CA(48)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(48)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=8;e=d+20|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;i=b;return d|0}function Lj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0;f=i;c[a+8>>2]=b;c[a+12>>2]=d;m=+g[e>>2]- +g[b+12>>2];n=e+4|0;h=+g[n>>2]- +g[b+16>>2];j=+g[b+24>>2];k=+g[b+20>>2];l=+(m*j+h*k);k=+(j*h-m*k);o=a+20|0;g[o>>2]=l;g[o+4>>2]=k;k=+g[e>>2]- +g[d+12>>2];l=+g[n>>2]- +g[d+16>>2];m=+g[d+24>>2];h=+g[d+20>>2];j=+(k*m+l*h);h=+(m*l-k*h);e=a+28|0;g[e>>2]=j;g[e+4>>2]=h;g[a+36>>2]=+g[d+56>>2]- +g[b+56>>2];i=f;return}function Mj(a){a=a|0;return a+20|0}function Nj(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Oj(a){a=a|0;return a+28|0}function Pj(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Qj(a){a=a|0;return+(+g[a+36>>2])}function Rj(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function Sj(a){a=a|0;return+(+g[a+40>>2])}function Tj(a,b){a=a|0;b=+b;g[a+40>>2]=b;return}function Uj(a){a=a|0;return+(+g[a+44>>2])}function Vj(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function Wj(a){a=a|0;return c[a>>2]|0}function Xj(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Yj(a){a=a|0;return c[a+4>>2]|0}function Zj(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function _j(a){a=a|0;return c[a+8>>2]|0}function $j(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function ak(a){a=a|0;return c[a+12>>2]|0}function bk(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function ck(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function dk(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function ek(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function fk(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function gk(a){a=a|0;return c[a+4>>2]|0}function hk(a,b){a=a|0;b=b|0;a=a+4|0;c[a>>2]=c[a>>2]|b;return}function ik(a,b){a=a|0;b=b|0;a=a+4|0;c[a>>2]=c[a>>2]&~b;return}function jk(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function kk(){var a=0,b=0;a=i;b=CA(16)|0;a:do if((b|0)==0){while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0)break;qb[b&63]();b=CA(16)|0;if((b|0)!=0)break a}b=cb(4)|0;c[b>>2]=18072;_a(b|0,18120,111)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return b|0}function lk(a){a=a|0;return+(+g[a>>2])}function mk(a,b){a=a|0;b=+b;g[a>>2]=b;return}function nk(a){a=a|0;return a+4|0}function ok(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+4|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function pk(a){a=a|0;return+(+g[a+12>>2])}function qk(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function rk(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function sk(a){a=a|0;return c[a+4>>2]|0}function tk(a){a=a|0;return c[a+48>>2]|0}function uk(a){a=a|0;return c[a+52>>2]|0}function vk(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[336]|0)==0?(wa(336)|0)!=0:0)Da(336);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=328;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 328}function wk(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[352]|0)==0?(wa(352)|0)!=0:0)Da(352);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=344;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 344}function xk(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[368]|0)==0?(wa(368)|0)!=0:0)Da(368);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=360;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 360}function yk(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function zk(a){a=a|0;return c[a+12>>2]|0}function Ak(a){a=a|0;return c[a+64>>2]|0}function Bk(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Ck(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function Dk(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function Ek(a){a=a|0;var b=0;b=i;jb[c[(c[a>>2]|0)+16>>2]&127](a);i=b;return}function Fk(a){a=a|0;return c[a+68>>2]|0}function Gk(a){a=a|0;return c[a+72>>2]|0}function Hk(a,b){a=a|0;b=+b;if(b==b&0.0==0.0&b>-s&b<s){g[a+152>>2]=b;return}else Aa(15032,14896,398,15056)}function Ik(a){a=a|0;return+(+g[a+152>>2])}function Jk(a){a=a|0;return c[a+4>>2]|0}function Kk(a){a=a|0;return c[a+48>>2]|0}function Lk(a){a=a|0;return c[a+52>>2]|0}function Mk(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[384]|0)==0?(wa(384)|0)!=0:0)Da(384);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=376;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 376}function Nk(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[400]|0)==0?(wa(400)|0)!=0:0)Da(400);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=392;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 392}function Ok(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[416]|0)==0?(wa(416)|0)!=0:0)Da(416);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=408;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 408}function Pk(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Qk(a){a=a|0;return c[a+12>>2]|0}function Rk(a){a=a|0;return c[a+64>>2]|0}function Sk(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Tk(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function Uk(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function Vk(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function Wk(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Xk(a){a=a|0;return a+80|0}function Yk(a){a=a|0;return a+88|0}function Zk(a,b){a=a|0;b=+b;g[a+68>>2]=b;return}function _k(a){a=a|0;return+(+g[a+68>>2])}function $k(a,b){a=a|0;b=+b;g[a+72>>2]=b;return}function al(a){a=a|0;return+(+g[a+72>>2])}function bl(a){a=a|0;var b=0;b=i;jb[c[(c[a>>2]|0)+16>>2]&127](a);i=b;return}function cl(a){a=a|0;return c[a+4>>2]|0}function dl(a){a=a|0;return c[a+48>>2]|0}function el(a){a=a|0;return c[a+52>>2]|0}function fl(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[432]|0)==0?(wa(432)|0)!=0:0)Da(432);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=424;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 424}function gl(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[448]|0)==0?(wa(448)|0)!=0:0)Da(448);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=440;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 440}function hl(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[464]|0)==0?(wa(464)|0)!=0:0)Da(464);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=456;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 456}function il(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function jl(a){a=a|0;return c[a+12>>2]|0}function kl(a){a=a|0;return c[a+64>>2]|0}function ll(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function ml(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function nl(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function ol(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function pl(){var a=0,b=0;a=i;b=CA(16)|0;a:do if((b|0)==0){while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0)break;qb[b&63]();b=CA(16)|0;if((b|0)!=0)break a}b=cb(4)|0;c[b>>2]=18072;_a(b|0,18120,111)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return b|0}function ql(a){a=a|0;return c[a>>2]|0}function rl(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function sl(a){a=a|0;return c[a+4>>2]|0}function tl(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function ul(a){a=a|0;return c[a+8>>2]|0}function vl(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function wl(a){a=a|0;return c[a+12>>2]|0}function xl(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function yl(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function zl(){var b=0,d=0;b=i;d=CA(64)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(64)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d>>2]=4;g[d+20>>2]=-1.0;g[d+24>>2]=1.0;g[d+28>>2]=1.0;g[d+32>>2]=1.0;g[d+36>>2]=-1.0;g[d+40>>2]=0.0;g[d+44>>2]=1.0;g[d+48>>2]=0.0;g[d+52>>2]=0.0;g[d+56>>2]=0.0;g[d+60>>2]=1.0;a[d+16>>0]=1;i=b;return d|0}function Al(a,b,d,e,f,h,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=+k;var l=0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0,t=0;l=i;c[a+8>>2]=b;c[a+12>>2]=d;o=e;s=c[o+4>>2]|0;t=a+20|0;c[t>>2]=c[o>>2];c[t+4>>2]=s;t=f;s=c[t+4>>2]|0;o=a+28|0;c[o>>2]=c[t>>2];c[o+4>>2]=s;r=+g[h>>2]- +g[b+12>>2];o=h+4|0;m=+g[o>>2]- +g[b+16>>2];n=+g[b+24>>2];p=+g[b+20>>2];q=+(r*n+m*p);p=+(n*m-r*p);b=a+36|0;g[b>>2]=q;g[b+4>>2]=p;p=+g[j>>2]- +g[d+12>>2];b=j+4|0;q=+g[b>>2]- +g[d+16>>2];r=+g[d+24>>2];m=+g[d+20>>2];n=+(p*r+q*m);m=+(r*q-p*m);d=a+44|0;g[d>>2]=n;g[d+4>>2]=m;m=+g[h>>2]- +g[e>>2];n=+g[o>>2]- +g[e+4>>2];g[a+52>>2]=+O(+(m*m+n*n));n=+g[j>>2]- +g[f>>2];m=+g[b>>2]- +g[f+4>>2];g[a+56>>2]=+O(+(n*n+m*m));g[a+60>>2]=k;if(k>1.1920928955078125e-7){i=l;return}else Aa(16144,16176,51,16232)}function Bl(a){a=a|0;return a+20|0}function Cl(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Dl(a){a=a|0;return a+28|0}function El(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Fl(a){a=a|0;return a+36|0}function Gl(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+36|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Hl(a){a=a|0;return a+44|0}function Il(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+44|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Jl(a){a=a|0;return+(+g[a+52>>2])}function Kl(a,b){a=a|0;b=+b;g[a+52>>2]=b;return}function Ll(a){a=a|0;return+(+g[a+56>>2])}function Ml(a,b){a=a|0;b=+b;g[a+56>>2]=b;return}function Nl(a){a=a|0;return+(+g[a+60>>2])}function Ol(a,b){a=a|0;b=+b;g[a+60>>2]=b;return}function Pl(a){a=a|0;return c[a>>2]|0}function Ql(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Rl(a){a=a|0;return c[a+4>>2]|0}function Sl(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Tl(a){a=a|0;return c[a+8>>2]|0}function Ul(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Vl(a){a=a|0;return c[a+12>>2]|0}function Wl(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Xl(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Yl(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Zl(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function _l(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function $l(){var a=0,b=0;a=i;b=CA(20)|0;a:do if((b|0)==0){while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0)break;qb[b&63]();b=CA(20)|0;if((b|0)!=0)break a}b=cb(4)|0;c[b>>2]=18072;_a(b|0,18120,111)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;i=a;return b|0}function am(a){a=a|0;return a|0}function bm(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function cm(a){a=a|0;return+(+g[a+8>>2])}function dm(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function em(a){a=a|0;return+(+g[a+12>>2])}function fm(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function gm(a){a=a|0;return a+16|0}function hm(a,b){a=a|0;b=b|0;c[a+16>>2]=c[b>>2];return}function im(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function jm(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function km(){var b=0,d=0;b=i;d=CA(20)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(20)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;i=b;return d|0}function lm(a){a=a|0;return c[a>>2]|0}function mm(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function nm(a){a=a|0;return c[a+4>>2]|0}function om(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function pm(a){a=a|0;return c[a+8>>2]|0}function qm(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function rm(a){a=a|0;return c[a+12>>2]|0}function sm(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function tm(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function um(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function vm(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function wm(){var a=0,b=0,d=0;a=i;b=CA(16)|0;if((b|0)!=0){d=b;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(16)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){i=a;return d|0}return 0}function xm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;e=CA(16)|0;a:do if((e|0)==0){while(1){e=c[4558]|0;c[4558]=e+0;if((e|0)==0)break;qb[e&63]();e=CA(16)|0;if((e|0)!=0)break a}e=cb(4)|0;c[e>>2]=18072;_a(e|0,18120,111)}while(0);g=a;a=c[g+4>>2]|0;f=e;c[f>>2]=c[g>>2];c[f+4>>2]=a;f=b;a=c[f+4>>2]|0;b=e+8|0;c[b>>2]=c[f>>2];c[b+4>>2]=a;i=d;return e|0}function ym(a){a=a|0;g[a>>2]=0.0;g[a+4>>2]=0.0;g[a+8>>2]=0.0;g[a+12>>2]=1.0;return}function zm(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0;f=b;e=c[f+4>>2]|0;b=a;c[b>>2]=c[f>>2];c[b+4>>2]=e;g[a+8>>2]=+R(+d);g[a+12>>2]=+Q(+d);return}function Am(a){a=a|0;return a|0}function Bm(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Cm(a){a=a|0;return a+8|0}function Dm(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Em(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Fm(){var b=0,d=0;b=i;d=CA(40)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(40)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d>>2]=6560;c[d+4>>2]=3;g[d+8>>2]=.009999999776482582;c[d+12>>2]=0;c[d+16>>2]=0;a[d+36>>0]=0;a[d+37>>0]=0;i=b;return d|0}function Gm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;g=i;f=b+12|0;if((c[f>>2]|0)!=0)Aa(6592,6632,34,6688);h=b+16|0;if((c[h>>2]|0)!=0)Aa(6592,6632,34,6688);if((e|0)>2){k=e+1|0;c[h>>2]=k;k=CA(k<<3)|0;c[f>>2]=k;HA(k|0,d|0,e<<3|0)|0;k=c[f>>2]|0;j=k;d=c[j+4>>2]|0;e=k+(e<<3)|0;c[e>>2]=c[j>>2];c[e+4>>2]=d;f=c[f>>2]|0;e=f+((c[h>>2]|0)+ -2<<3)|0;h=c[e+4>>2]|0;d=b+20|0;c[d>>2]=c[e>>2];c[d+4>>2]=h;f=f+8|0;d=c[f+4>>2]|0;h=b+28|0;c[h>>2]=c[f>>2];c[h+4>>2]=d;a[b+36>>0]=1;a[b+37>>0]=1;i=g;return}else Aa(7408,6632,35,6688)}function Hm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;g=i;f=b+12|0;if((c[f>>2]|0)!=0)Aa(6592,6632,48,6704);h=b+16|0;if((c[h>>2]|0)!=0)Aa(6592,6632,48,6704);if((e|0)>1){c[h>>2]=e;e=CA(e<<3)|0;c[f>>2]=e;HA(e|0,d|0,c[h>>2]<<3|0)|0;a[b+36>>0]=0;a[b+37>>0]=0;i=g;return}else Aa(6720,6632,49,6704)}function Im(b,d){b=b|0;d=d|0;var e=0,f=0;f=d;e=c[f+4>>2]|0;d=b+20|0;c[d>>2]=c[f>>2];c[d+4>>2]=e;a[b+36>>0]=1;return}function Jm(b,d){b=b|0;d=d|0;var e=0,f=0;f=d;e=c[f+4>>2]|0;d=b+28|0;c[d>>2]=c[f>>2];c[d+4>>2]=e;a[b+37>>0]=1;return}function Km(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;aw(a,b,c);i=d;return}function Lm(a){a=a|0;return c[a+4>>2]|0}function Mm(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function Nm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function Om(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function Pm(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function Qm(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function Rm(a){a=a|0;return c[a+12>>2]|0}function Sm(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Tm(a){a=a|0;return c[a+16>>2]|0}function Um(a,b){a=a|0;b=b|0;c[a+16>>2]=b;return}function Vm(a){a=a|0;return a+20|0}function Wm(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Xm(a){a=a|0;return a+28|0}function Ym(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Zm(b){b=b|0;return(a[b+36>>0]|0)!=0|0}function _m(b,c){b=b|0;c=c|0;a[b+36>>0]=c&1;return}function $m(b){b=b|0;return(a[b+37>>0]|0)!=0|0}function an(b,c){b=b|0;c=c|0;a[b+37>>0]=c&1;return}function bn(a){a=a|0;return c[a+4>>2]|0}function cn(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function dn(a){a=a|0;return+(+g[a+8>>2])}function en(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function fn(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function gn(){var a=0,b=0,d=0;a=i;b=CA(12)|0;if((b|0)!=0){d=b;i=a;return d|0}while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0){b=4;break}qb[b&63]();d=CA(12)|0;if((d|0)!=0){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}else if((b|0)==5){i=a;return d|0}return 0}function hn(a,b,d){a=+a;b=+b;d=+d;var e=0,f=0;e=i;f=CA(12)|0;a:do if((f|0)==0){while(1){f=c[4558]|0;c[4558]=f+0;if((f|0)==0)break;qb[f&63]();f=CA(12)|0;if((f|0)!=0)break a}f=cb(4)|0;c[f>>2]=18072;_a(f|0,18120,111)}while(0);g[f>>2]=a;g[f+4>>2]=b;g[f+8>>2]=d;i=e;return f|0}function jn(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;return}function kn(a){a=a|0;return+(+g[a>>2])}function ln(a,b){a=a|0;b=+b;g[a>>2]=b;return}function mn(a){a=a|0;return+(+g[a+4>>2])}function nn(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function on(a){a=a|0;return+(+g[a+8>>2])}function pn(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function qn(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function rn(a){a=a|0;return a+68|0}function sn(a){a=a|0;return a+76|0}function tn(a,b){a=a|0;b=+b;g[a+84>>2]=b;return}function un(a){a=a|0;return+(+g[a+84>>2])}function vn(a){a=a|0;return c[a+164>>2]|0}function wn(a){a=a|0;return c[a+4>>2]|0}function xn(a){a=a|0;return c[a+48>>2]|0}function yn(a){a=a|0;return c[a+52>>2]|0}function zn(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[480]|0)==0?(wa(480)|0)!=0:0)Da(480);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=472;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 472}function An(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[496]|0)==0?(wa(496)|0)!=0:0)Da(496);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=488;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 488}function Bn(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[512]|0)==0?(wa(512)|0)!=0:0)Da(512);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=504;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 504}function Cn(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Dn(a){a=a|0;return c[a+12>>2]|0}function En(a){a=a|0;return c[a+64>>2]|0}function Fn(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Gn(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function Hn(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function In(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function Jn(a){a=a|0;return a|0}function Kn(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Ln(a){a=a|0;return a+8|0}function Mn(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Nn(a){a=a|0;return+(+g[a+16>>2])}function On(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function Pn(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Qn(){var a=0,b=0;a=i;b=CA(152)|0;a:do if((b|0)==0){while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0)break;qb[b&63]();b=CA(152)|0;if((b|0)!=0)break a}b=cb(4)|0;c[b>>2]=18072;_a(b|0,18120,111)}while(0);c[b>>2]=7336;c[b+4>>2]=2;g[b+8>>2]=.009999999776482582;c[b+148>>2]=0;g[b+12>>2]=0.0;g[b+16>>2]=0.0;i=a;return b|0}function Rn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,h=0.0,j=0.0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0,t=0,u=0,v=0.0,w=0.0;k=i;if(!((d+ -3|0)>>>0<6))Aa(7032,7064,122,7120);n=a+148|0;c[n>>2]=d;s=0;do{u=b+(s<<3)|0;t=c[u+4>>2]|0;d=a+(s<<3)+20|0;c[d>>2]=c[u>>2];c[d+4>>2]=t;s=s+1|0;d=c[n>>2]|0}while((s|0)<(d|0));if((d|0)>0){l=d;m=0}else Aa(7408,7064,76,7424);do{b=m;m=m+1|0;u=(m|0)<(l|0)?m:0;r=+g[a+(u<<3)+20>>2]- +g[a+(b<<3)+20>>2];p=+g[a+(u<<3)+24>>2]- +g[a+(b<<3)+24>>2];q=p*p;if(!(r*r+q>1.4210854715202004e-14)){o=8;break}l=a+(b<<3)+84|0;v=+p;r=+-r;u=l;g[u>>2]=v;g[u+4>>2]=r;b=a+(b<<3)+88|0;r=+g[b>>2];q=+O(+(q+r*r));if(!(q<1.1920928955078125e-7)){v=1.0/q;g[l>>2]=p*v;g[b>>2]=r*v}l=c[n>>2]|0}while((m|0)<(l|0));if((o|0)==8)Aa(7128,7064,137,7120);m=a+12|0;n=a+20|0;if((l|0)>2){h=0.0;e=0.0;j=0.0;f=0}else Aa(7408,7064,76,7424);do{u=a+(f<<3)+20|0;p=+g[u>>2];q=+g[u+4>>2];f=f+1|0;if((f|0)<(l|0))o=a+(f<<3)+20|0;else o=n;u=o;w=+g[u>>2];r=+g[u+4>>2];v=(p*r-q*w)*.5;j=j+v;v=v*.3333333432674408;h=h+(p+0.0+w)*v;e=e+(q+0.0+r)*v}while((f|0)!=(l|0));if(j>1.1920928955078125e-7){w=1.0/j;v=+(h*w);w=+(e*w);u=m;g[u>>2]=v;g[u+4>>2]=w;i=k;return}else Aa(7296,7064,115,7424)}function Sn(a,b,d){a=a|0;b=+b;d=+d;var e=0.0,f=0.0;c[a+148>>2]=4;e=-b;f=-d;g[a+20>>2]=e;g[a+24>>2]=f;g[a+28>>2]=b;g[a+32>>2]=f;g[a+36>>2]=b;g[a+40>>2]=d;g[a+44>>2]=e;g[a+48>>2]=d;g[a+84>>2]=0.0;g[a+88>>2]=-1.0;g[a+92>>2]=1.0;g[a+96>>2]=0.0;g[a+100>>2]=0.0;g[a+104>>2]=1.0;g[a+108>>2]=-1.0;g[a+112>>2]=0.0;g[a+12>>2]=0.0;g[a+16>>2]=0.0;return}function Tn(a,b,d,e,f){a=a|0;b=+b;d=+d;e=e|0;f=+f;var h=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0.0,r=0.0;j=i;h=a+148|0;c[h>>2]=4;k=-b;m=-d;g[a+20>>2]=k;g[a+24>>2]=m;g[a+28>>2]=b;g[a+32>>2]=m;g[a+36>>2]=b;g[a+40>>2]=d;g[a+44>>2]=k;g[a+48>>2]=d;g[a+84>>2]=0.0;g[a+88>>2]=-1.0;g[a+92>>2]=1.0;g[a+96>>2]=0.0;g[a+100>>2]=0.0;g[a+104>>2]=1.0;g[a+108>>2]=-1.0;g[a+112>>2]=0.0;p=e;o=c[p+4>>2]|0;n=a+12|0;c[n>>2]=c[p>>2];c[n+4>>2]=o;d=+g[e>>2];k=+g[e+4>>2];b=+R(+f);f=+Q(+f);l=-1.0;e=0;while(1){p=a+(e<<3)+20|0;r=+g[p>>2];q=+(d+(f*r-b*m));m=+(k+(b*r+f*m));g[p>>2]=q;g[p+4>>2]=m;p=a+(e<<3)+84|0;m=+g[p>>2];q=+(f*m-b*l);m=+(b*m+f*l);g[p>>2]=q;g[p+4>>2]=m;e=e+1|0;if((e|0)>=(c[h>>2]|0))break;m=+g[a+(e<<3)+24>>2];l=+g[a+(e<<3)+88>>2]}i=j;return}function Un(a){a=a|0;return c[a+148>>2]|0}function Vn(a,b){a=a|0;b=b|0;var d=0;d=i;if((b|0)>-1?(c[a+148>>2]|0)>(b|0):0){i=d;return a+(b<<3)+20|0}Aa(2512,2552,91,6488);return 0}function Wn(a){a=a|0;return c[a+4>>2]|0}function Xn(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function Yn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function Zn(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function _n(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function $n(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function ao(a){a=a|0;return a+12|0}function bo(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+12|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function co(a){a=a|0;return c[a+148>>2]|0}function eo(a,b){a=a|0;b=b|0;c[a+148>>2]=b;return}function fo(a){a=a|0;return c[a+4>>2]|0}function go(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function ho(a){a=a|0;return+(+g[a+8>>2])}function io(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function jo(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function ko(){var a=0,d=0,e=0;a=i;d=CA(48)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(48)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d>>2]=6968;c[d+4>>2]=1;g[d+8>>2]=.009999999776482582;e=d+28|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;b[e+16>>1]=0;i=a;return d|0}function lo(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;g=d;d=c[g+4>>2]|0;f=b+12|0;c[f>>2]=c[g>>2];c[f+4>>2]=d;f=e;e=c[f+4>>2]|0;d=b+20|0;c[d>>2]=c[f>>2];c[d+4>>2]=e;a[b+44>>0]=0;a[b+45>>0]=0;return}function mo(a){a=a|0;return c[a+4>>2]|0}function no(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function oo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function po(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function qo(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function ro(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function so(a){a=a|0;return a+12|0}function to(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+12|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function uo(a){a=a|0;return a+20|0}function vo(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function wo(a){a=a|0;return a+28|0}function xo(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function yo(a){a=a|0;return a+36|0}function zo(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+36|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Ao(b){b=b|0;return(a[b+44>>0]|0)!=0|0}function Bo(b,c){b=b|0;c=c|0;a[b+44>>0]=c&1;return}function Co(b){b=b|0;return(a[b+45>>0]|0)!=0|0}function Do(b,c){b=b|0;c=c|0;a[b+45>>0]=c&1;return}function Eo(a){a=a|0;return c[a+4>>2]|0}function Fo(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Go(a){a=a|0;return+(+g[a+8>>2])}function Ho(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Io(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Jo(a){a=a|0;var b=0;b=i;za(2264,a|0)|0;i=b;return}function Ko(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+8>>2]&63](a,b,d)|0;i=e;return a|0}function Lo(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Mo(){var b=0,d=0,e=0;b=i;d=CA(64)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(64)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=1;e=d+20|0;g[d+44>>2]=0.0;g[d+48>>2]=0.0;g[d+60>>2]=0.0;g[d+56>>2]=0.0;a[d+52>>0]=0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;a[e+20>>0]=0;i=b;return d|0}function No(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0;f=i;c[a+8>>2]=b;c[a+12>>2]=d;m=+g[e>>2]- +g[b+12>>2];n=e+4|0;h=+g[n>>2]- +g[b+16>>2];j=+g[b+24>>2];k=+g[b+20>>2];l=+(m*j+h*k);k=+(j*h-m*k);o=a+20|0;g[o>>2]=l;g[o+4>>2]=k;k=+g[e>>2]- +g[d+12>>2];l=+g[n>>2]- +g[d+16>>2];m=+g[d+24>>2];h=+g[d+20>>2];j=+(k*m+l*h);h=+(m*l-k*h);e=a+28|0;g[e>>2]=j;g[e+4>>2]=h;g[a+36>>2]=+g[d+56>>2]- +g[b+56>>2];i=f;return}function Oo(a){a=a|0;return a+20|0}function Po(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Qo(a){a=a|0;return a+28|0}function Ro(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function So(a){a=a|0;return+(+g[a+36>>2])}function To(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function Uo(b){b=b|0;return(a[b+40>>0]|0)!=0|0}function Vo(b,c){b=b|0;c=c|0;a[b+40>>0]=c&1;return}function Wo(a){a=a|0;return+(+g[a+44>>2])}function Xo(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function Yo(a){a=a|0;return+(+g[a+48>>2])}function Zo(a,b){a=a|0;b=+b;g[a+48>>2]=b;return}function _o(b){b=b|0;return(a[b+52>>0]|0)!=0|0}function $o(b,c){b=b|0;c=c|0;a[b+52>>0]=c&1;return}function ap(a){a=a|0;return+(+g[a+56>>2])}function bp(a,b){a=a|0;b=+b;g[a+56>>2]=b;return}function cp(a){a=a|0;return+(+g[a+60>>2])}function dp(a,b){a=a|0;b=+b;g[a+60>>2]=b;return}function ep(a){a=a|0;return c[a>>2]|0}function fp(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function gp(a){a=a|0;return c[a+4>>2]|0}function hp(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function ip(a){a=a|0;return c[a+8>>2]|0}function jp(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function kp(a){a=a|0;return c[a+12>>2]|0}function lp(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function mp(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function np(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function op(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function pp(){var a=0,b=0,d=0;a=i;b=CA(8)|0;a:do if((b|0)==0){while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0)break;qb[b&63]();b=CA(8)|0;if((b|0)!=0)break a}b=cb(4)|0;c[b>>2]=18072;_a(b|0,18120,111)}while(0);d=b;c[d>>2]=0;c[d+4>>2]=0;c[b+4>>2]=0;c[b>>2]=864;i=a;return b|0}function qp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+8>>2]&63](a,b,d,e);i=f;return}function rp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+12>>2]&63](a,b,d,e);i=f;return}function sp(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;var f=0;f=i;ob[c[(c[a>>2]|0)+16>>2]&63](a,b,d,e);i=f;return}function tp(a,b,d,e,f){a=a|0;b=b|0;d=+d;e=e|0;f=f|0;var g=0;g=i;mb[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f);i=g;return}function up(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function vp(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+28>>2]&127](a,b);i=d;return}function wp(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function xp(a){a=a|0;return a+76|0}function yp(a){a=a|0;return a+84|0}function zp(a){a=a|0;return a+92|0}function Ap(a){a=a|0;var b=0.0,d=0.0,e=0.0,f=0.0,h=0,i=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0.0;h=c[a+48>>2]|0;k=c[a+52>>2]|0;d=+g[h+24>>2];j=+g[a+76>>2];f=+g[h+20>>2];i=+g[a+80>>2];m=+g[k+24>>2];o=+g[a+84>>2];n=+g[k+20>>2];l=+g[a+88>>2];e=+g[a+92>>2];b=+g[a+96>>2];return+((+g[k+12>>2]+(m*o-n*l)-(+g[h+12>>2]+(d*j-f*i)))*(d*e-f*b)+(o*n+m*l+ +g[k+16>>2]-(j*f+d*i+ +g[h+16>>2]))*(f*e+d*b))}function Bp(a){a=a|0;return+(+g[(c[a+52>>2]|0)+72>>2]- +g[(c[a+48>>2]|0)+72>>2])}function Cp(b){b=b|0;return(a[b+128>>0]|0)!=0|0}function Dp(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;j=c[d+48>>2]|0;k=j+4|0;l=e[k>>1]|0;if((l&2|0)==0){b[k>>1]=l|2;g[j+144>>2]=0.0}l=c[d+52>>2]|0;k=l+4|0;j=e[k>>1]|0;if((j&2|0)!=0){l=d+128|0;k=f&1;a[l>>0]=k;i=h;return}b[k>>1]=j|2;g[l+144>>2]=0.0;l=d+128|0;k=f&1;a[l>>0]=k;i=h;return}function Ep(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if((k&2|0)==0){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if((h&2|0)!=0){k=a+124|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+124|0;g[k>>2]=d;i=f;return}function Fp(a){a=a|0;return+(+g[a+124>>2])}function Gp(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if((k&2|0)==0){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if((h&2|0)!=0){k=a+120|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+120|0;g[k>>2]=d;i=f;return}function Hp(a){a=a|0;return+(+g[a+120>>2])}function Ip(a,b){a=a|0;b=+b;return+(+g[a+112>>2]*b)}function Jp(a,b){a=a|0;b=+b;g[a+68>>2]=b;return}function Kp(a){a=a|0;return+(+g[a+68>>2])}function Lp(a,b){a=a|0;b=+b;g[a+72>>2]=b;return}function Mp(a){a=a|0;return+(+g[a+72>>2])}function Np(a){a=a|0;return c[a+4>>2]|0}function Op(a){a=a|0;return c[a+48>>2]|0}function Pp(a){a=a|0;return c[a+52>>2]|0}function Qp(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[528]|0)==0?(wa(528)|0)!=0:0)Da(528);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=520;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 520}function Rp(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[544]|0)==0?(wa(544)|0)!=0:0)Da(544);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=536;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 536}function Sp(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[560]|0)==0?(wa(560)|0)!=0:0)Da(560);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=552;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 552}function Tp(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Up(a){a=a|0;return c[a+12>>2]|0}function Vp(a){a=a|0;return c[a+64>>2]|0}function Wp(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Xp(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function Yp(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function Zp(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function _p(b){b=b|0;var d=0,e=0,f=0;d=i;if((a[576]|0)==0?(wa(576)|0)!=0:0)Da(576);f=b+68|0;e=c[f+4>>2]|0;b=568;c[b>>2]=c[f>>2];c[b+4>>2]=e;i=d;return 568}function $p(b){b=b|0;var d=0,e=0,f=0;d=i;if((a[592]|0)==0?(wa(592)|0)!=0:0)Da(592);f=b+76|0;e=c[f+4>>2]|0;b=584;c[b>>2]=c[f>>2];c[b+4>>2]=e;i=d;return 584}function aq(a){a=a|0;var b=0.0,d=0,e=0.0,f=0,h=0.0,j=0.0,k=0.0;d=i;f=c[a+48>>2]|0;h=+g[f+24>>2];k=+g[a+92>>2];j=+g[f+20>>2];b=+g[a+96>>2];a=a+68|0;e=+g[a>>2];e=+g[f+12>>2]+(h*k-j*b)-e;b=k*j+h*b+ +g[f+16>>2]- +g[a+4>>2];b=+O(+(e*e+b*b));i=d;return+b}function bq(a){a=a|0;var b=0.0,d=0,e=0.0,f=0,h=0.0,j=0.0,k=0.0;d=i;f=c[a+52>>2]|0;h=+g[f+24>>2];k=+g[a+100>>2];j=+g[f+20>>2];b=+g[a+104>>2];a=a+76|0;e=+g[a>>2];e=+g[f+12>>2]+(h*k-j*b)-e;b=k*j+h*b+ +g[f+16>>2]- +g[a+4>>2];b=+O(+(e*e+b*b));i=d;return+b}function cq(a){a=a|0;return+(+g[a+112>>2])}function dq(a){a=a|0;return c[a+4>>2]|0}function eq(a){a=a|0;return c[a+48>>2]|0}function fq(a){a=a|0;return c[a+52>>2]|0}function gq(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[608]|0)==0?(wa(608)|0)!=0:0)Da(608);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=600;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 600}function hq(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[624]|0)==0?(wa(624)|0)!=0:0)Da(624);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=616;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 616}function iq(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[640]|0)==0?(wa(640)|0)!=0:0)Da(640);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=632;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 632}function jq(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function kq(a){a=a|0;return c[a+12>>2]|0}function lq(a){a=a|0;return c[a+64>>2]|0}function mq(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function nq(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function oq(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function pq(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function qq(){var b=0,d=0;b=i;d=CA(40)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(40)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=5;g[d+20>>2]=0.0;g[d+24>>2]=0.0;g[d+28>>2]=0.0;g[d+32>>2]=5.0;g[d+36>>2]=.699999988079071;i=b;return d|0}function rq(a){a=a|0;return a+20|0}function sq(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function tq(a){a=a|0;return+(+g[a+28>>2])}function uq(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function vq(a){a=a|0;return+(+g[a+32>>2])}function wq(a,b){a=a|0;b=+b;g[a+32>>2]=b;return}function xq(a){a=a|0;return+(+g[a+36>>2])}function yq(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function zq(a){a=a|0;return c[a>>2]|0}function Aq(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Bq(a){a=a|0;return c[a+4>>2]|0}function Cq(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Dq(a){a=a|0;return c[a+8>>2]|0}function Eq(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Fq(a){a=a|0;return c[a+12>>2]|0}function Gq(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Hq(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Iq(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Jq(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Kq(a){a=a|0;return a+64|0}function Lq(a){a=a|0;return(c[a+4>>2]&2|0)!=0|0}function Mq(a,b){a=a|0;b=b|0;var d=0;a=a+4|0;d=c[a>>2]|0;c[a>>2]=b?d|4:d&-5;return}function Nq(a){a=a|0;return(c[a+4>>2]&4|0)!=0|0}function Oq(a){a=a|0;return c[a+12>>2]|0}function Pq(a){a=a|0;return c[a+48>>2]|0}function Qq(a){a=a|0;return c[a+56>>2]|0}function Rq(a){a=a|0;return c[a+52>>2]|0}function Sq(a){a=a|0;return c[a+60>>2]|0}function Tq(a,b){a=a|0;b=+b;g[a+136>>2]=b;return}function Uq(a){a=a|0;return+(+g[a+136>>2])}function Vq(a){a=a|0;g[a+136>>2]=+O(+(+g[(c[a+48>>2]|0)+16>>2]*+g[(c[a+52>>2]|0)+16>>2]));return}function Wq(a,b){a=a|0;b=+b;g[a+140>>2]=b;return}function Xq(a){a=a|0;return+(+g[a+140>>2])}function Yq(a){a=a|0;var b=0.0,d=0.0;d=+g[(c[a+48>>2]|0)+20>>2];b=+g[(c[a+52>>2]|0)+20>>2];g[a+140>>2]=d>b?d:b;return}function Zq(a){a=a|0;return c[a+4>>2]|0}function _q(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function $q(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function ar(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function br(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function cr(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function dr(a){a=a|0;return c[a+4>>2]|0}function er(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function fr(a){a=a|0;return+(+g[a+8>>2])}function gr(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function hr(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function ir(){var b=0,d=0,e=0,f=0;b=i;d=CA(48)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(48)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=3;f=d+20|0;e=d+36|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;g[e>>2]=1.0;g[d+40>>2]=0.0;g[d+44>>2]=0.0;i=b;return d|0}function jr(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0;h=i;c[a+8>>2]=b;c[a+12>>2]=d;o=+g[e>>2]- +g[b+12>>2];l=e+4|0;k=+g[l>>2]- +g[b+16>>2];j=+g[b+24>>2];m=+g[b+20>>2];n=+(o*j+k*m);m=+(j*k-o*m);b=a+20|0;g[b>>2]=n;g[b+4>>2]=m;m=+g[f>>2]- +g[d+12>>2];b=f+4|0;n=+g[b>>2]- +g[d+16>>2];o=+g[d+24>>2];k=+g[d+20>>2];j=+(m*o+n*k);k=+(o*n-m*k);d=a+28|0;g[d>>2]=j;g[d+4>>2]=k;k=+g[f>>2]- +g[e>>2];j=+g[b>>2]- +g[l>>2];g[a+36>>2]=+O(+(k*k+j*j));i=h;return}function kr(a){a=a|0;return a+20|0}function lr(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function mr(a){a=a|0;return a+28|0}function nr(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function or(a){a=a|0;return+(+g[a+36>>2])}function pr(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function qr(a){a=a|0;return+(+g[a+40>>2])}function rr(a,b){a=a|0;b=+b;g[a+40>>2]=b;return}function sr(a){a=a|0;return+(+g[a+44>>2])}function tr(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function ur(a){a=a|0;return c[a>>2]|0}function vr(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function wr(a){a=a|0;return c[a+4>>2]|0}function xr(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function yr(a){a=a|0;return c[a+8>>2]|0}function zr(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Ar(a){a=a|0;return c[a+12>>2]|0}function Br(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Cr(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Dr(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Er(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function Fr(a,b){a=a|0;b=b|0;var c=0;c=i;a=Hw(a,b)|0;i=c;return a|0}function Gr(d,e,f){d=d|0;e=e|0;f=+f;var h=0,j=0;h=i;i=i+32|0;j=h;b[j+22>>1]=1;b[j+24>>1]=-1;b[j+26>>1]=0;c[j+4>>2]=0;g[j+8>>2]=.20000000298023224;g[j+12>>2]=0.0;a[j+20>>0]=0;c[j>>2]=e;g[j+16>>2]=f;e=Hw(d,j)|0;i=h;return e|0}function Hr(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;j=d+88|0;if((c[(c[j>>2]|0)+102868>>2]&2|0)!=0)Aa(8856,8592,201,8912);h=e+8|0;if((c[h>>2]|0)!=(d|0))Aa(8928,8592,207,8912);g=d+104|0;if((c[g>>2]|0)<=0)Aa(8952,8592,210,8912);o=d+100|0;n=c[o>>2]|0;if((n|0)==0)Aa(8976,8592,226,8912);else{m=n;k=o}while(1){n=m+4|0;if((m|0)==(e|0))break;m=c[n>>2]|0;if((m|0)==0){l=11;break}else k=n}if((l|0)==11)Aa(8976,8592,226,8912);l=e+4|0;c[k>>2]=c[l>>2];k=c[d+112>>2]|0;if((k|0)!=0)do{m=c[k+4>>2]|0;k=c[k+12>>2]|0;if((c[m+48>>2]|0)==(e|0)?1:(c[m+52>>2]|0)==(e|0))Mw((c[j>>2]|0)+102872|0,m)}while((k|0)!=0);j=c[j>>2]|0;if(!((b[d+4>>1]&32)==0))cx(e,j+102872|0);ax(e,j);c[h>>2]=0;c[l>>2]=0;h=a[7540]|0;if((h&255)<14){o=j+((h&255)<<2)+12|0;c[e>>2]=c[o>>2];c[o>>2]=e;c[g>>2]=(c[g>>2]|0)+ -1;Fw(d);i=f;return}else Aa(8264,8176,173,8536)}function Ir(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0,h=0,j=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0;e=i;f=a+88|0;j=c[f>>2]|0;if((c[j+102868>>2]&2|0)!=0)Aa(8856,8592,404,9064);h=a+12|0;o=+R(+d);g[a+20>>2]=o;n=+Q(+d);g[a+24>>2]=n;q=c[b>>2]|0;b=c[b+4>>2]|0;r=h;c[r>>2]=q;c[r+4>>2]=b;p=+g[a+28>>2];l=+g[a+32>>2];m=(c[k>>2]=q,+g[k>>2])+(n*p-o*l);l=p*o+n*l+(c[k>>2]=b,+g[k>>2]);m=+m;l=+l;b=a+44|0;g[b>>2]=m;g[b+4>>2]=l;g[a+56>>2]=d;b=a+36|0;g[b>>2]=m;g[b+4>>2]=l;g[a+52>>2]=d;b=j+102872|0;a=c[a+100>>2]|0;if((a|0)==0){r=j;r=r+102872|0;Nw(r);i=e;return}do{dx(a,b,h,h);a=c[a+4>>2]|0}while((a|0)!=0);r=c[f>>2]|0;r=r+102872|0;Nw(r);i=e;return}function Jr(a){a=a|0;return a+12|0}function Kr(a){a=a|0;return a+12|0}function Lr(a){a=a|0;return+(+g[a+56>>2])}function Mr(a){a=a|0;return a+44|0}function Nr(a){a=a|0;return a+28|0}function Or(a,d){a=a|0;d=d|0;var f=0,h=0,j=0,k=0.0,l=0.0;f=i;if((c[a>>2]|0)==0){i=f;return}l=+g[d>>2];k=+g[d+4>>2];if(l*l+k*k>0.0?(j=a+4|0,h=e[j>>1]|0,(h&2|0)==0):0){b[j>>1]=h|2;g[a+144>>2]=0.0}h=d;j=c[h+4>>2]|0;d=a+64|0;c[d>>2]=c[h>>2];c[d+4>>2]=j;i=f;return}function Pr(b){b=b|0;var d=0,e=0,f=0;d=i;if((a[656]|0)==0?(wa(656)|0)!=0:0)Da(656);f=b+64|0;e=c[f+4>>2]|0;b=648;c[b>>2]=c[f>>2];c[b+4>>2]=e;i=d;return 648}function Qr(a,d){a=a|0;d=+d;var f=0,h=0,j=0;f=i;if((c[a>>2]|0)==0){i=f;return}if(d*d>0.0?(j=a+4|0,h=e[j>>1]|0,(h&2|0)==0):0){b[j>>1]=h|2;g[a+144>>2]=0.0}g[a+72>>2]=d;i=f;return}function Rr(a){a=a|0;return+(+g[a+72>>2])}function Sr(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0;f=i;if((c[a>>2]|0)!=2){i=f;return}j=a+4|0;k=b[j>>1]|0;if((k&2)==0?(h=k&65535,(h&2|0)==0):0){b[j>>1]=h|2;g[a+144>>2]=0.0}j=a+76|0;g[j>>2]=+g[d>>2]+ +g[j>>2];j=d+4|0;k=a+80|0;g[k>>2]=+g[j>>2]+ +g[k>>2];k=a+84|0;g[k>>2]=+g[k>>2]+((+g[e>>2]- +g[a+44>>2])*+g[j>>2]-(+g[e+4>>2]- +g[a+48>>2])*+g[d>>2]);i=f;return}function Tr(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0;e=i;if((c[a>>2]|0)!=2){i=e;return}h=a+4|0;j=b[h>>1]|0;if((j&2)==0?(f=j&65535,(f&2|0)==0):0){b[h>>1]=f|2;g[a+144>>2]=0.0}j=a+76|0;g[j>>2]=+g[d>>2]+ +g[j>>2];j=a+80|0;g[j>>2]=+g[d+4>>2]+ +g[j>>2];i=e;return}function Ur(a,d){a=a|0;d=+d;var e=0,f=0,h=0,j=0;e=i;if((c[a>>2]|0)!=2){i=e;return}h=a+4|0;j=b[h>>1]|0;if((j&2)==0?(f=j&65535,(f&2|0)==0):0){b[h>>1]=f|2;g[a+144>>2]=0.0}j=a+84|0;g[j>>2]=+g[j>>2]+d;i=e;return}function Vr(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0.0,m=0.0;f=i;if((c[a>>2]|0)!=2){i=f;return}j=a+4|0;k=b[j>>1]|0;if((k&2)==0?(h=k&65535,(h&2|0)==0):0){b[j>>1]=h|2;g[a+144>>2]=0.0}m=+g[a+120>>2];j=d+4|0;l=m*+g[j>>2];k=a+64|0;g[k>>2]=m*+g[d>>2]+ +g[k>>2];k=a+68|0;g[k>>2]=l+ +g[k>>2];k=a+72|0;g[k>>2]=+g[k>>2]+ +g[a+128>>2]*((+g[e>>2]- +g[a+44>>2])*+g[j>>2]-(+g[e+4>>2]- +g[a+48>>2])*+g[d>>2]);i=f;return}function Wr(a,d){a=a|0;d=+d;var e=0,f=0,h=0,j=0;e=i;if((c[a>>2]|0)!=2){i=e;return}h=a+4|0;j=b[h>>1]|0;if((j&2)==0?(f=j&65535,(f&2|0)==0):0){b[h>>1]=f|2;g[a+144>>2]=0.0}j=a+72|0;g[j>>2]=+g[j>>2]+ +g[a+128>>2]*d;i=e;return}function Xr(a){a=a|0;return+(+g[a+116>>2])}function Yr(a){a=a|0;var b=0.0,c=0.0;c=+g[a+28>>2];b=+g[a+32>>2];return+(+g[a+124>>2]+ +g[a+116>>2]*(c*c+b*b))}function Zr(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0;d=a+116|0;g[b>>2]=+g[d>>2];e=a+28|0;h=+g[e>>2];f=+g[a+32>>2];g[b+12>>2]=+g[a+124>>2]+ +g[d>>2]*(h*h+f*f);d=c[e+4>>2]|0;a=b+4|0;c[a>>2]=c[e>>2];c[a+4>>2]=d;return}function _r(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0.0,l=0.0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0;e=i;if((c[(c[a+88>>2]|0)+102868>>2]&2|0)!=0)Aa(8856,8592,340,9048);if((c[a>>2]|0)!=2){i=e;return}m=a+120|0;g[m>>2]=0.0;h=a+124|0;g[h>>2]=0.0;f=a+128|0;g[f>>2]=0.0;j=+g[d>>2];j=!(j<=0.0)?j:1.0;g[a+116>>2]=j;g[m>>2]=1.0/j;l=+g[d+12>>2];do if(l>0.0?(b[a+4>>1]&16)==0:0){o=+g[d+4>>2];n=+g[d+8>>2];j=l-j*(o*o+n*n);g[h>>2]=j;if(j>0.0){g[f>>2]=1.0/j;break}else Aa(9032,8592,366,9048)}while(0);m=a+44|0;h=m;o=+g[h>>2];j=+g[h+4>>2];h=d+4|0;f=c[h>>2]|0;h=c[h+4>>2]|0;d=a+28|0;c[d>>2]=f;c[d+4>>2]=h;q=+g[a+24>>2];r=(c[k>>2]=f,+g[k>>2]);l=+g[a+20>>2];p=(c[k>>2]=h,+g[k>>2]);n=+g[a+12>>2]+(q*r-l*p);p=r*l+q*p+ +g[a+16>>2];q=+n;l=+p;g[m>>2]=q;g[m+4>>2]=l;m=a+36|0;g[m>>2]=q;g[m+4>>2]=l;l=+g[a+72>>2];m=a+64|0;g[m>>2]=+g[m>>2]-l*(p-j);m=a+68|0;g[m>>2]=l*(n-o)+ +g[m>>2];i=e;return}function $r(a){a=a|0;var b=0;b=i;Fw(a);i=b;return}function as(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;if((a[672]|0)==0?(wa(672)|0)!=0:0)Da(672);h=+g[b+24>>2];k=+g[c>>2];j=+g[b+20>>2];e=+g[c+4>>2];f=+(+g[b+12>>2]+(h*k-j*e));e=+(k*j+h*e+ +g[b+16>>2]);c=664;g[c>>2]=f;g[c+4>>2]=e;i=d;return 664}function bs(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;if((a[688]|0)==0?(wa(688)|0)!=0:0)Da(688);h=+g[b+24>>2];k=+g[c>>2];j=+g[b+20>>2];e=+g[c+4>>2];f=+(h*k-j*e);e=+(k*j+h*e);c=680;g[c>>2]=f;g[c+4>>2]=e;i=d;return 680}function cs(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;if((a[704]|0)==0?(wa(704)|0)!=0:0)Da(704);h=+g[c>>2]- +g[b+12>>2];j=+g[c+4>>2]- +g[b+16>>2];k=+g[b+24>>2];e=+g[b+20>>2];f=+(h*k+j*e);e=+(k*j-h*e);b=696;g[b>>2]=f;g[b+4>>2]=e;i=d;return 696}function ds(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;if((a[720]|0)==0?(wa(720)|0)!=0:0)Da(720);k=+g[b+24>>2];h=+g[c>>2];e=+g[b+20>>2];j=+g[c+4>>2];f=+(k*h+e*j);e=+(k*j-h*e);c=712;g[c>>2]=f;g[c+4>>2]=e;i=d;return 712}function es(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0;d=i;if((a[736]|0)==0?(wa(736)|0)!=0:0)Da(736);e=+g[b+72>>2];f=+(+g[b+64>>2]-e*(+g[c+4>>2]- +g[b+48>>2]));e=+(e*(+g[c>>2]- +g[b+44>>2])+ +g[b+68>>2]);c=728;g[c>>2]=f;g[c+4>>2]=e;i=d;return 728}function fs(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;d=i;if((a[752]|0)==0?(wa(752)|0)!=0:0)Da(752);k=+g[b+24>>2];j=+g[c>>2];h=+g[b+20>>2];e=+g[c+4>>2];l=+g[b+72>>2];f=+(+g[b+64>>2]-l*(j*h+k*e+ +g[b+16>>2]- +g[b+48>>2]));e=+(l*(+g[b+12>>2]+(k*j-h*e)- +g[b+44>>2])+ +g[b+68>>2]);c=744;g[c>>2]=f;g[c+4>>2]=e;i=d;return 744}function gs(a){a=a|0;return+(+g[a+132>>2])}function hs(a,b){a=a|0;b=+b;g[a+132>>2]=b;return}function is(a){a=a|0;return+(+g[a+136>>2])}function js(a,b){a=a|0;b=+b;g[a+136>>2]=b;return}function ks(a){a=a|0;return+(+g[a+140>>2])}function ls(a,b){a=a|0;b=+b;g[a+140>>2]=b;return}function ms(a,d){a=a|0;d=d|0;var f=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0;h=i;i=i+16|0;j=h;n=a+88|0;if((c[(c[n>>2]|0)+102868>>2]&2|0)!=0)Aa(8856,8592,115,8888);if((c[a>>2]|0)==(d|0)){i=h;return}c[a>>2]=d;Fw(a);if((c[a>>2]|0)==0?(g[a+64>>2]=0.0,g[a+68>>2]=0.0,g[a+72>>2]=0.0,s=+g[a+56>>2],g[a+52>>2]=s,l=a+44|0,m=c[l>>2]|0,l=c[l+4>>2]|0,p=a+36|0,c[p>>2]=m,c[p+4>>2]=l,t=+R(+s),g[j+8>>2]=t,s=+Q(+s),g[j+12>>2]=s,u=+g[a+28>>2],q=+g[a+32>>2],r=(c[k>>2]=m,+g[k>>2])-(s*u-t*q),q=(c[k>>2]=l,+g[k>>2])-(u*t+s*q),r=+r,q=+q,l=j,g[l>>2]=r,g[l+4>>2]=q,l=(c[n>>2]|0)+102872|0,m=c[a+100>>2]|0,(m|0)!=0):0){d=a+12|0;do{dx(m,l,j,d);m=c[m+4>>2]|0}while((m|0)!=0)}l=a+4|0;j=e[l>>1]|0;if((j&2|0)==0){b[l>>1]=j|2;g[a+144>>2]=0.0}g[a+76>>2]=0.0;g[a+80>>2]=0.0;g[a+84>>2]=0.0;a=c[a+100>>2]|0;if((a|0)==0){i=h;return}do{j=c[a+8>>2]|0;if((j|0)!=0){m=c[j+112>>2]|0;if((m|0)!=0)do{l=c[m+4>>2]|0;if((c[l+48>>2]|0)==(a|0)?1:(c[l+52>>2]|0)==(a|0)){p=l+4|0;c[p>>2]=c[p>>2]|8}m=c[m+12>>2]|0}while((m|0)!=0);d=c[j+88>>2]|0;if((d|0)!=0?(f=a+28|0,(c[f>>2]|0)>0):0){m=a+24|0;l=d+102912|0;j=d+102908|0;o=d+102904|0;p=c[l>>2]|0;n=0;do{d=c[(c[m>>2]|0)+(n*28|0)+24>>2]|0;if((p|0)==(c[j>>2]|0)){v=c[o>>2]|0;c[j>>2]=p<<1;p=CA(p<<3)|0;c[o>>2]=p;HA(p|0,v|0,c[l>>2]<<2|0)|0;DA(v);p=c[l>>2]|0}c[(c[o>>2]|0)+(p<<2)>>2]=d;p=(c[l>>2]|0)+1|0;c[l>>2]=p;n=n+1|0}while((n|0)<(c[f>>2]|0))}}a=c[a+4>>2]|0}while((a|0)!=0);i=h;return}function ns(a){a=a|0;return c[a>>2]|0}function os(a,c){a=a|0;c=c|0;var d=0;a=a+4|0;d=e[a>>1]|0;b[a>>1]=c?d|8:d&65527;return}function ps(a){a=a|0;return(b[a+4>>1]&8)!=0|0}function qs(a,c){a=a|0;c=c|0;var d=0,f=0,h=0;d=i;f=a+4|0;h=e[f>>1]|0;if(c){b[f>>1]=h|4;i=d;return}c=h&65531;b[f>>1]=c;if((h&2|0)!=0){i=d;return}b[f>>1]=c|2;g[a+144>>2]=0.0;i=d;return}function rs(a){a=a|0;return(b[a+4>>1]&4)!=0|0}function ss(a,d){a=a|0;d=d|0;var f=0,h=0,j=0;f=i;h=a+4|0;j=e[h>>1]|0;if(!d){b[h>>1]=j&65533;g[a+144>>2]=0.0;d=a+64|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[d+20>>2]=0;i=f;return}if((j&2|0)!=0){i=f;return}b[h>>1]=j|2;g[a+144>>2]=0.0;i=f;return}function ts(a){a=a|0;return(b[a+4>>1]&2)!=0|0}function us(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=a+88|0;g=c[f>>2]|0;if((c[g+102868>>2]&2|0)!=0)Aa(8856,8592,443,9080);h=a+4|0;j=b[h>>1]|0;if(!((j&32)!=0^d)){i=e;return}j=j&65535;if(d){b[h>>1]=j|32;f=g+102872|0;g=c[a+100>>2]|0;if((g|0)==0){i=e;return}a=a+12|0;do{bx(g,f,a);g=c[g+4>>2]|0}while((g|0)!=0);i=e;return}b[h>>1]=j&65503;g=g+102872|0;d=c[a+100>>2]|0;if((d|0)!=0)do{cx(d,g);d=c[d+4>>2]|0}while((d|0)!=0);a=a+112|0;g=c[a>>2]|0;if((g|0)!=0)do{j=g;g=c[g+12>>2]|0;Mw((c[f>>2]|0)+102872|0,c[j+4>>2]|0)}while((g|0)!=0);c[a>>2]=0;i=e;return}function vs(a){a=a|0;return(b[a+4>>1]&32)!=0|0}function ws(a,c){a=a|0;c=c|0;var d=0,f=0,g=0;d=i;f=a+4|0;g=e[f>>1]|0;b[f>>1]=c?g|16:g&65519;Fw(a);i=d;return}function xs(a){a=a|0;return(b[a+4>>1]&16)!=0|0}function ys(a){a=a|0;return c[a+100>>2]|0}function zs(a){a=a|0;return c[a+108>>2]|0}function As(a){a=a|0;return c[a+112>>2]|0}function Bs(a){a=a|0;return c[a+96>>2]|0}function Cs(a){a=a|0;return c[a+148>>2]|0}function Ds(a,b){a=a|0;b=b|0;c[a+148>>2]=b;return}function Es(a){a=a|0;return c[a+88>>2]|0}function Fs(a){a=a|0;var b=0;b=i;Jw(a);i=b;return}function Gs(a){a=a|0;return a+68|0}function Hs(a){a=a|0;return a+76|0}function Is(a,b){a=a|0;b=+b;var c=0;c=i;if(b==b&0.0==0.0&b>-s?b<s&b>=0.0:0){g[a+96>>2]=b;i=c;return}Aa(14480,14520,217,14576)}function Js(a){a=a|0;return+(+g[a+96>>2])}function Ks(a,b){a=a|0;b=+b;var c=0;c=i;if(b==b&0.0==0.0&b>-s?b<s&b>=0.0:0){g[a+100>>2]=b;i=c;return}Aa(14592,14520,228,14632)}function Ls(a){a=a|0;return+(+g[a+100>>2])}function Ms(a){a=a|0;return c[a+4>>2]|0}function Ns(a){a=a|0;return c[a+48>>2]|0}function Os(a){a=a|0;return c[a+52>>2]|0}function Ps(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[768]|0)==0?(wa(768)|0)!=0:0)Da(768);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=760;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 760}function Qs(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[784]|0)==0?(wa(784)|0)!=0:0)Da(784);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=776;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 776}function Rs(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[800]|0)==0?(wa(800)|0)!=0:0)Da(800);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=792;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 792}function Ss(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Ts(a){a=a|0;return c[a+12>>2]|0}function Us(a){a=a|0;return c[a+64>>2]|0}function Vs(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Ws(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function Xs(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function Ys(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function Zs(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function _s(){var b=0,d=0;b=i;d=CA(32)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(32)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=6;c[d+20>>2]=0;c[d+24>>2]=0;g[d+28>>2]=1.0;i=b;return d|0}function $s(a){a=a|0;return c[a+20>>2]|0}function at(a,b){a=a|0;b=b|0;c[a+20>>2]=b;return}function bt(a){a=a|0;return c[a+24>>2]|0}function ct(a,b){a=a|0;b=b|0;c[a+24>>2]=b;return}function dt(a){a=a|0;return+(+g[a+28>>2])}function et(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function ft(a){a=a|0;return c[a>>2]|0}function gt(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function ht(a){a=a|0;return c[a+4>>2]|0}function it(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function jt(a){a=a|0;return c[a+8>>2]|0}function kt(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function lt(a){a=a|0;return c[a+12>>2]|0}function mt(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function nt(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function ot(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function pt(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function qt(a){a=a|0;return a+68|0}function rt(a){a=a|0;return a+76|0}function st(a){a=a|0;return+(+g[a+116>>2])}function tt(a){a=a|0;return+(+g[(c[a+52>>2]|0)+56>>2]- +g[(c[a+48>>2]|0)+56>>2]- +g[a+116>>2])}function ut(a){a=a|0;return+(+g[(c[a+52>>2]|0)+72>>2]- +g[(c[a+48>>2]|0)+72>>2])}function vt(b){b=b|0;return(a[b+112>>0]|0)!=0|0}function wt(f,h){f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;j=i;k=f+112|0;if((h&1|0)==(d[k>>0]|0|0)){i=j;return}l=c[f+48>>2]|0;m=l+4|0;n=e[m>>1]|0;if((n&2|0)==0){b[m>>1]=n|2;g[l+144>>2]=0.0}l=c[f+52>>2]|0;m=l+4|0;n=e[m>>1]|0;if((n&2|0)==0){b[m>>1]=n|2;g[l+144>>2]=0.0}a[k>>0]=h&1;g[f+92>>2]=0.0;i=j;return}function xt(a){a=a|0;return+(+g[a+120>>2])}function yt(a){a=a|0;return+(+g[a+124>>2])}function zt(a,d,f){a=a|0;d=+d;f=+f;var h=0,j=0,k=0,l=0,m=0;j=i;if(!(d<=f))Aa(16624,16640,473,16696);h=a+120|0;if(!(+g[h>>2]!=d)?!(+g[a+124>>2]!=f):0){i=j;return}m=c[a+48>>2]|0;k=m+4|0;l=e[k>>1]|0;if((l&2|0)==0){b[k>>1]=l|2;g[m+144>>2]=0.0}l=c[a+52>>2]|0;m=l+4|0;k=e[m>>1]|0;if((k&2|0)==0){b[m>>1]=k|2;g[l+144>>2]=0.0}g[a+92>>2]=0.0;g[h>>2]=d;g[a+124>>2]=f;i=j;return}function At(b){b=b|0;return(a[b+100>>0]|0)!=0|0}function Bt(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;j=c[d+48>>2]|0;k=j+4|0;l=e[k>>1]|0;if((l&2|0)==0){b[k>>1]=l|2;g[j+144>>2]=0.0}l=c[d+52>>2]|0;k=l+4|0;j=e[k>>1]|0;if((j&2|0)!=0){l=d+100|0;k=f&1;a[l>>0]=k;i=h;return}b[k>>1]=j|2;g[l+144>>2]=0.0;l=d+100|0;k=f&1;a[l>>0]=k;i=h;return}function Ct(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if((k&2|0)==0){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if((h&2|0)!=0){k=a+108|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+108|0;g[k>>2]=d;i=f;return}function Dt(a){a=a|0;return+(+g[a+108>>2])}function Et(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if((k&2|0)==0){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if((h&2|0)!=0){k=a+104|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+104|0;g[k>>2]=d;i=f;return}function Ft(a){a=a|0;return+(+g[a+104>>2])}function Gt(a,b){a=a|0;b=+b;return+(+g[a+96>>2]*b)}function Ht(a){a=a|0;return c[a+4>>2]|0}function It(a){a=a|0;return c[a+48>>2]|0}function Jt(a){a=a|0;return c[a+52>>2]|0}function Kt(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[816]|0)==0?(wa(816)|0)!=0:0)Da(816);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=808;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 808}function Lt(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[832]|0)==0?(wa(832)|0)!=0:0)Da(832);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=824;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 824}function Mt(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[848]|0)==0?(wa(848)|0)!=0:0)Da(848);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=840;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 840}function Nt(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Ot(a){a=a|0;return c[a+12>>2]|0}function Pt(a){a=a|0;return c[a+64>>2]|0}function Qt(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Rt(a){a=a|0;var d=0;d=i;if((b[(c[a+48>>2]|0)+4>>1]&32)==0){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function St(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function Tt(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+24>>2]&127](a);i=b;return}function Ut(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Vt(){var a=0,b=0;a=i;b=CA(16)|0;a:do if((b|0)==0){while(1){b=c[4558]|0;c[4558]=b+0;if((b|0)==0)break;qb[b&63]();b=CA(16)|0;if((b|0)!=0)break a}b=cb(4)|0;c[b>>2]=18072;_a(b|0,18120,111)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return b|0}function Wt(a){a=a|0;return c[a>>2]|0}function Xt(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Yt(a){a=a|0;return c[a+4>>2]|0}function Zt(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function _t(a){a=a|0;return c[a+8>>2]|0}function $t(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function au(a){a=a|0;return c[a+12>>2]|0}function bu(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function cu(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function du(){var b=0,d=0;b=i;d=CA(40)|0;a:do if((d|0)==0){while(1){d=c[4558]|0;c[4558]=d+0;if((d|0)==0)break;qb[d&63]();d=CA(40)|0;if((d|0)!=0)break a}d=cb(4)|0;c[d>>2]=18072;_a(d|0,18120,111)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=10;g[d+20>>2]=-1.0;g[d+24>>2]=0.0;g[d+28>>2]=1.0;g[d+32>>2]=0.0;g[d+36>>2]=0.0;i=b;return d|0}function eu(a){a=a|0;return a+20|0}function fu(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function gu(a){a=a|0;return a+28|0}function hu(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function iu(a){a=a|0;return+(+g[a+36>>2])}function ju(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function ku(a){a=a|0;return c[a>>2]|0}function lu(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function mu(a){a=a|0;return c[a+4>>2]|0}function nu(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function ou(a){a=a|0;return c[a+8>>2]|0}function pu(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function qu(a){a=a|0;return c[a+12>>2]|0}function ru(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function su(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function tu(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function uu(a){a=a|0;var b=0;b=i;if((a|0)!=0)DA(a);i=b;return}function vu(){return 0}function wu(){return 1}function xu(){return 2}function yu(){return 3}function zu(){return 4}function Au(){return 0}function Bu(){return 1}function Cu(){return 2}function Du(){return 3}function Eu(){return 4}function Fu(){return 5}function Gu(){return 6}function Hu(){return 7}function Iu(){return 8}function Ju(){return 9}function Ku(){return 10}function Lu(){return 0}function Mu(){return 1}function Nu(){return 2}function Ou(){return 3}function Pu(){return 0}function Qu(){return 1}function Ru(){return 2}function Su(){return 0}function Tu(){return 1}function Uu(){return 2}function Vu(){return 1}function Wu(){return 2}function Xu(){return 4}function Yu(){return 8}function Zu(){return 16}function _u(){return 0}function $u(){return 1}function av(a){a=a|0;return}function bv(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function cv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;za(2048,a|0,b|0,c|0,d|0)|0;i=e;return}function dv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;za(1816,a|0,b|0,c|0,d|0)|0;i=e;return}function ev(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;var e=0;e=i;za(1600,a|0,b|0,+c,d|0)|0;i=e;return}function fv(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;var f=0;f=i;za(1368,a|0,b|0,+c,d|0,e|0)|0;i=f;return}function gv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;za(1152,a|0,b|0,c|0,d|0)|0;i=e;return}function hv(a,b){a=a|0;b=b|0;var c=0;c=i;za(936,a|0,b|0)|0;i=c;return}function iv(a){a=a|0;return}function jv(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function kv(a){a=a|0;return}function lv(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function mv(a){a=a|0;return}function nv(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function ov(a){a=a|0;return}function pv(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function qv(a,b){a=a|0;b=b|0;var c=0;c=i;za(3408,a|0,b|0)|0;i=c;return}function rv(a,b){a=a|0;b=b|0;var c=0;c=i;za(3176,a|0,b|0)|0;i=c;return}function sv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;za(2944,a|0,b|0,c|0)|0;i=d;return}function tv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;za(2712,a|0,b|0,c|0)|0;i=d;return}function uv(a){a=a|0;return}function vv(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function wv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0;f=i;e=+Fa(3744,a|0,b|0,c|0,d|0,+e);i=f;return+e}function xv(a){a=a|0;return}function yv(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function zv(a,b){a=a|0;b=b|0;var c=0;c=i;a=(za(4096,a|0,b|0)|0)!=0;i=c;return a|0}function Av(a){a=a|0;return}function Bv(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Cv(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+16>>2]&127](a,b);i=d;return}function Dv(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+20>>2]&127](a,b);i=d;return}function Ev(a,b){a=a|0;b=b|0;var c=0;c=i;za(4920,a|0,b|0)|0;i=c;return}function Fv(a,b){a=a|0;b=b|0;var c=0;c=i;za(4656,a|0,b|0)|0;i=c;return}function Gv(a){a=a|0;Ja(a|0)|0;dA()}function Hv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=a+40|0;f=c[e>>2]|0;g=a+36|0;a=a+32|0;if((f|0)==(c[g>>2]|0)){h=c[a>>2]|0;c[g>>2]=f<<1;f=CA(f<<3)|0;c[a>>2]=f;HA(f|0,h|0,c[e>>2]<<2|0)|0;DA(h);f=c[e>>2]|0}c[(c[a>>2]|0)+(f<<2)>>2]=b;c[e>>2]=(c[e>>2]|0)+1;i=d;return}function Iv(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0;m=i;j=b+60|0;c[j>>2]=0;l=f+12|0;o=+g[h+12>>2];B=+g[l>>2];w=+g[h+8>>2];x=+g[f+16>>2];A=+g[h>>2]+(o*B-w*x)- +g[e>>2];x=B*w+o*x+ +g[h+4>>2]- +g[e+4>>2];o=+g[e+12>>2];w=+g[e+8>>2];B=A*o+x*w;w=o*x-A*w;e=d+12|0;h=c[e>>2]|0;e=c[e+4>>2]|0;A=(c[k>>2]=h,+g[k>>2]);x=(c[k>>2]=e,+g[k>>2]);u=d+20|0;t=c[u>>2]|0;u=c[u+4>>2]|0;o=(c[k>>2]=t,+g[k>>2]);p=(c[k>>2]=u,+g[k>>2]);n=o-A;v=p-x;y=n*(o-B)+v*(p-w);s=B-A;r=w-x;z=s*n+r*v;q=+g[d+8>>2]+ +g[f+8>>2];if(z<=0.0){if(s*s+r*r>q*q){i=m;return}if((a[d+44>>0]|0)!=0?(f=d+28|0,C=+g[f>>2],(A-B)*(A-C)+(x-w)*(x- +g[f+4>>2])>0.0):0){i=m;return}c[j>>2]=1;c[b+56>>2]=0;g[b+40>>2]=0.0;g[b+44>>2]=0.0;t=b+48|0;c[t>>2]=h;c[t+4>>2]=e;t=b+16|0;c[t>>2]=0;a[t>>0]=0;a[t+1>>0]=0;a[t+2>>0]=0;a[t+3>>0]=0;t=l;u=c[t+4>>2]|0;f=b;c[f>>2]=c[t>>2];c[f+4>>2]=u;i=m;return}if(y<=0.0){n=B-o;r=w-p;if(n*n+r*r>q*q){i=m;return}if((a[d+45>>0]|0)!=0?(f=d+36|0,C=+g[f>>2],n*(C-o)+r*(+g[f+4>>2]-p)>0.0):0){i=m;return}c[j>>2]=1;c[b+56>>2]=0;g[b+40>>2]=0.0;g[b+44>>2]=0.0;f=b+48|0;c[f>>2]=t;c[f+4>>2]=u;t=b+16|0;c[t>>2]=0;a[t>>0]=1;a[t+1>>0]=0;a[t+2>>0]=0;a[t+3>>0]=0;t=l;u=c[t+4>>2]|0;f=b;c[f>>2]=c[t>>2];c[f+4>>2]=u;i=m;return}C=n*n+v*v;if(!(C>0.0))Aa(5176,5192,127,5240);C=1.0/C;B=B-(A*y+o*z)*C;C=w-(x*y+p*z)*C;if(B*B+C*C>q*q){i=m;return}o=-v;if(n*r+s*o<0.0)n=-n;else v=o;o=+O(+(n*n+v*v));if(!(o<1.1920928955078125e-7)){C=1.0/o;v=v*C;n=n*C}c[j>>2]=1;c[b+56>>2]=1;B=+v;C=+n;t=b+40|0;g[t>>2]=B;g[t+4>>2]=C;t=b+48|0;c[t>>2]=h;c[t+4>>2]=e;t=b+16|0;c[t>>2]=0;a[t>>0]=0;a[t+1>>0]=0;a[t+2>>0]=1;a[t+3>>0]=0;t=l;u=c[t+4>>2]|0;f=b;c[f>>2]=c[t>>2];c[f+4>>2]=u;i=m;return}



function Jv(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0,N=0.0,P=0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0,V=0,W=0.0,X=0.0;j=i;i=i+336|0;q=j;o=j+304|0;l=j+280|0;r=j+24|0;m=r+132|0;F=+g[e+12>>2];N=+g[h+8>>2];A=+g[e+8>>2];E=+g[h+12>>2];z=F*N-A*E;E=N*A+F*E;N=+z;D=+E;C=+g[h>>2]- +g[e>>2];L=+g[h+4>>2]- +g[e+4>>2];B=F*C+A*L;C=F*L-A*C;A=+B;L=+C;e=m;g[e>>2]=A;g[e+4>>2]=L;e=r+140|0;g[e>>2]=N;g[e+4>>2]=D;e=r+144|0;D=+g[f+12>>2];h=r+140|0;N=+g[f+16>>2];B=B+(E*D-z*N);n=r+136|0;C=D*z+E*N+C;N=+B;E=+C;M=r+148|0;g[M>>2]=N;g[M+4>>2]=E;M=d+28|0;G=c[M>>2]|0;M=c[M+4>>2]|0;s=r+156|0;c[s>>2]=G;c[s+4>>2]=M;s=r+164|0;y=d+12|0;u=c[y>>2]|0;y=c[y+4>>2]|0;t=s;c[t>>2]=u;c[t+4>>2]=y;t=r+172|0;w=d+20|0;V=c[w>>2]|0;w=c[w+4>>2]|0;U=t;c[U>>2]=V;c[U+4>>2]=w;U=d+36|0;P=c[U>>2]|0;U=c[U+4>>2]|0;v=r+180|0;c[v>>2]=P;c[v+4>>2]=U;v=(a[d+44>>0]|0)!=0;x=(a[d+45>>0]|0)==0;E=(c[k>>2]=V,+g[k>>2]);N=(c[k>>2]=u,+g[k>>2]);z=E-N;D=(c[k>>2]=w,+g[k>>2]);L=(c[k>>2]=y,+g[k>>2]);A=D-L;F=+O(+(z*z+A*A));J=(c[k>>2]=G,+g[k>>2]);K=(c[k>>2]=M,+g[k>>2]);I=(c[k>>2]=P,+g[k>>2]);H=(c[k>>2]=U,+g[k>>2]);if(!(F<1.1920928955078125e-7)){T=1.0/F;z=z*T;A=A*T}u=r+196|0;F=-z;g[u>>2]=A;d=r+200|0;g[d>>2]=F;F=(B-N)*A+(C-L)*F;if(v){N=N-J;L=L-K;Q=+O(+(N*N+L*L));if(!(Q<1.1920928955078125e-7)){T=1.0/Q;N=N*T;L=L*T}T=-N;g[r+188>>2]=L;g[r+192>>2]=T;w=A*N-z*L>=0.0;J=(B-J)*L+(C-K)*T}else{w=0;J=0.0}a:do if(x){if(!v){V=F>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V){P=u;V=c[P>>2]|0;P=c[P+4>>2]|0;U=v;c[U>>2]=V;c[U+4>>2]=P;S=+-(c[k>>2]=V,+g[k>>2]);T=+z;V=r+228|0;g[V>>2]=S;g[V+4>>2]=T;V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}else{S=+-A;T=+z;U=v;g[U>>2]=S;g[U+4>>2]=T;U=u;P=c[U>>2]|0;U=c[U+4>>2]|0;V=r+228|0;c[V>>2]=P;c[V+4>>2]=U;V=r+236|0;c[V>>2]=P;c[V+4>>2]=U;break}}v=J>=0.0;if(w){if(!v){V=F>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(!V){S=+-A;T=+z;P=v;g[P>>2]=S;g[P+4>>2]=T;P=u;U=c[P>>2]|0;P=c[P+4>>2]|0;V=r+228|0;c[V>>2]=U;c[V+4>>2]=P;V=r+236|0;g[V>>2]=-(c[k>>2]=U,+g[k>>2]);g[V+4>>2]=T;break}}else{a[r+248>>0]=1;v=r+212|0}V=u;U=c[V+4>>2]|0;P=v;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=r+188|0;U=c[P+4>>2]|0;V=r+228|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;S=+-+g[u>>2];T=+-+g[d>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}else{if(v){V=F>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V){P=u;V=c[P>>2]|0;P=c[P+4>>2]|0;U=v;c[U>>2]=V;c[U+4>>2]=P;U=r+228|0;c[U>>2]=V;c[U+4>>2]=P;S=+-(c[k>>2]=V,+g[k>>2]);T=+z;V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}}else{a[r+248>>0]=0;v=r+212|0}T=+-A;S=+z;P=v;g[P>>2]=T;g[P+4>>2]=S;P=u;U=c[P+4>>2]|0;V=r+228|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;S=+-+g[r+188>>2];T=+-+g[r+192>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}}else{I=I-E;H=H-D;K=+O(+(I*I+H*H));if(!(K<1.1920928955078125e-7)){T=1.0/K;I=I*T;H=H*T}T=-I;x=r+204|0;g[x>>2]=H;y=r+208|0;g[y>>2]=T;G=z*H-A*I>0.0;B=(B-E)*H+(C-D)*T;if(!v){v=F>=0.0;if(G){if(!v){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(!V){S=+-A;T=+z;P=v;g[P>>2]=S;g[P+4>>2]=T;P=r+228|0;g[P>>2]=S;g[P+4>>2]=T;P=u;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}}else{a[r+248>>0]=1;v=r+212|0}V=u;U=c[V+4>>2]|0;P=v;c[P>>2]=c[V>>2];c[P+4>>2]=U;S=+-+g[u>>2];T=+-+g[d>>2];P=r+228|0;g[P>>2]=S;g[P+4>>2]=T;P=r+204|0;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}else{if(v){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V){U=u;P=c[U>>2]|0;U=c[U+4>>2]|0;V=v;c[V>>2]=P;c[V+4>>2]=U;S=+-(c[k>>2]=P,+g[k>>2]);T=+z;V=r+228|0;g[V>>2]=S;g[V+4>>2]=T;V=r+236|0;c[V>>2]=P;c[V+4>>2]=U;break}}else{a[r+248>>0]=0;v=r+212|0}T=+-A;S=+z;P=v;g[P>>2]=T;g[P+4>>2]=S;S=+-+g[x>>2];T=+-+g[y>>2];P=r+228|0;g[P>>2]=S;g[P+4>>2]=T;P=u;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}}if(w&G){if(!(J>=0.0)&!(F>=0.0)){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(!V){S=+-A;T=+z;V=v;g[V>>2]=S;g[V+4>>2]=T;V=r+228|0;g[V>>2]=S;g[V+4>>2]=T;V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}}else{a[r+248>>0]=1;v=r+212|0}P=u;U=c[P+4>>2]|0;V=v;c[V>>2]=c[P>>2];c[V+4>>2]=U;V=r+188|0;U=c[V+4>>2]|0;P=r+228|0;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=r+204|0;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}if(w){do if(!(J>=0.0)){if(F>=0.0){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V)break}else{a[r+248>>0]=0;v=r+212|0}S=+-A;T=+z;V=v;g[V>>2]=S;g[V+4>>2]=T;T=+-+g[x>>2];S=+-+g[y>>2];V=r+228|0;g[V>>2]=T;g[V+4>>2]=S;S=+-+g[u>>2];T=+-+g[d>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break a}else{a[r+248>>0]=1;v=r+212|0}while(0);P=u;U=c[P+4>>2]|0;V=v;c[V>>2]=c[P>>2];c[V+4>>2]=U;V=r+188|0;U=c[V+4>>2]|0;P=r+228|0;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=u;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}if(!G){if(!(!(J>=0.0)|!(F>=0.0))){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V){U=u;P=c[U>>2]|0;U=c[U+4>>2]|0;V=v;c[V>>2]=P;c[V+4>>2]=U;V=r+228|0;c[V>>2]=P;c[V+4>>2]=U;V=r+236|0;c[V>>2]=P;c[V+4>>2]=U;break}}else{a[r+248>>0]=0;v=r+212|0}S=+-A;T=+z;V=v;g[V>>2]=S;g[V+4>>2]=T;T=+-+g[x>>2];S=+-+g[y>>2];V=r+228|0;g[V>>2]=T;g[V+4>>2]=S;S=+-+g[r+188>>2];T=+-+g[r+192>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}do if(!(B>=0.0)){if(J>=0.0){V=F>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V)break}else{a[r+248>>0]=0;v=r+212|0}S=+-A;T=+z;V=v;g[V>>2]=S;g[V+4>>2]=T;T=+-+g[u>>2];S=+-+g[d>>2];V=r+228|0;g[V>>2]=T;g[V+4>>2]=S;S=+-+g[r+188>>2];T=+-+g[r+192>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break a}else{a[r+248>>0]=1;v=r+212|0}while(0);P=u;U=c[P+4>>2]|0;V=v;c[V>>2]=c[P>>2];c[V+4>>2]=U;V=u;U=c[V+4>>2]|0;P=r+228|0;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=r+204|0;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U}while(0);y=c[f+148>>2]|0;v=r+128|0;c[v>>2]=y;if((y|0)>0){w=0;do{Q=+g[e>>2];S=+g[f+(w<<3)+20>>2];T=+g[h>>2];R=+g[f+(w<<3)+24>>2];N=+(+g[m>>2]+(Q*S-T*R));R=+(S*T+Q*R+ +g[n>>2]);V=r+(w<<3)|0;g[V>>2]=N;g[V+4>>2]=R;R=+g[e>>2];N=+g[f+(w<<3)+84>>2];Q=+g[h>>2];T=+g[f+(w<<3)+88>>2];S=+(R*N-Q*T);T=+(N*Q+R*T);V=r+(w<<3)+64|0;g[V>>2]=S;g[V+4>>2]=T;w=w+1|0}while((w|0)<(y|0));y=c[v>>2]|0}w=r+244|0;g[w>>2]=.019999999552965164;v=b+60|0;c[v>>2]=0;x=a[r+248>>0]|0;G=(y|0)>0;if(!G){i=j;return}z=+g[r+164>>2];D=+g[r+168>>2];C=+g[r+212>>2];E=+g[r+216>>2];F=3.4028234663852886e+38;B=3.4028234663852886e+38;P=0;while(1){A=(+g[r+(P<<3)>>2]-z)*C+(+g[r+(P<<3)+4>>2]-D)*E;M=A<F;B=M?A:B;P=P+1|0;if((P|0)>=(y|0))break;else F=M?A:F}if(B>.019999999552965164){i=j;return}z=+g[r+216>>2];A=+g[r+212>>2];do if(G){H=+g[r+164>>2];J=+g[r+168>>2];K=+g[r+172>>2];L=+g[r+176>>2];I=+g[r+228>>2];F=+g[r+232>>2];E=+g[r+236>>2];D=+g[r+240>>2];N=-3.4028234663852886e+38;G=0;P=0;M=-1;Q=-3.4028234663852886e+38;while(1){R=+g[r+(G<<3)+64>>2];T=-R;S=-+g[r+(G<<3)+68>>2];X=+g[r+(G<<3)>>2];C=+g[r+(G<<3)+4>>2];W=(X-H)*T+(C-J)*S;C=(X-K)*T+(C-L)*S;C=W<C?W:C;if(C>.019999999552965164){P=2;break}if(!(z*R+A*S>=0.0))if(C>N?!((T-I)*A+(S-F)*z<-.03490658849477768):0)p=77;else C=Q;else if(C>N?!((T-E)*A+(S-D)*z<-.03490658849477768):0)p=77;else C=Q;if((p|0)==77){p=0;N=C;P=2;M=G}G=G+1|0;if((G|0)>=(y|0)){G=M;p=79;break}else Q=C}if((p|0)==79)if((P|0)==0){p=82;break}if(C>.019999999552965164){i=j;return}if(C>B*.9800000190734863+.0010000000474974513){M=(P|0)==1;P=b+56|0;if(M){G=M;M=q;p=84}else{c[P>>2]=2;x=s;d=c[x+4>>2]|0;s=q;c[s>>2]=c[x>>2];c[s+4>>2]=d;s=q+8|0;a[s>>0]=0;d=G&255;a[s+1>>0]=d;a[s+2>>0]=0;a[s+3>>0]=1;s=t;t=c[s+4>>2]|0;x=q+12|0;c[x>>2]=c[s>>2];c[x+4>>2]=t;x=q+20|0;a[x>>0]=0;a[x+1>>0]=d;a[x+2>>0]=0;a[x+3>>0]=1;x=G+1|0;x=(x|0)<(y|0)?x:0;y=r+(G<<3)|0;t=r+(x<<3)|0;d=r+(G<<3)+64|0;s=c[t+4>>2]|0;t=c[t>>2]|0;r=M;M=x;x=c[y>>2]|0;y=c[y+4>>2]|0;u=c[d>>2]|0;d=c[d+4>>2]|0}}else p=82}else p=82;while(0);if((p|0)==82){G=1;M=q;P=b+56|0;p=84}do if((p|0)==84){c[P>>2]=1;if((y|0)>1){U=0;B=A*+g[r+64>>2]+z*+g[r+68>>2];p=1;while(1){C=A*+g[r+(p<<3)+64>>2]+z*+g[r+(p<<3)+68>>2];P=C<B;U=P?p:U;p=p+1|0;if((p|0)>=(y|0))break;else B=P?C:B}}else U=0;P=U+1|0;P=(P|0)<(y|0)?P:0;p=r+(U<<3)|0;V=c[p+4>>2]|0;y=q;c[y>>2]=c[p>>2];c[y+4>>2]=V;y=q+8|0;a[y>>0]=0;a[y+1>>0]=U;a[y+2>>0]=1;a[y+3>>0]=0;y=r+(P<<3)|0;U=c[y+4>>2]|0;V=q+12|0;c[V>>2]=c[y>>2];c[V+4>>2]=U;V=q+20|0;a[V>>0]=0;a[V+1>>0]=P;a[V+2>>0]=1;a[V+3>>0]=0;if(x<<24>>24==0){y=t;t=s;u=(g[k>>2]=-+g[u>>2],c[k>>2]|0);s=c[t+4>>2]|0;t=c[t>>2]|0;q=M;r=G;G=1;M=0;x=c[y>>2]|0;y=c[y+4>>2]|0;d=(g[k>>2]=-+g[d>>2],c[k>>2]|0);break}else{y=s;d=u;s=c[t+4>>2]|0;t=c[t>>2]|0;q=M;r=G;G=0;M=1;x=c[y>>2]|0;y=c[y+4>>2]|0;u=c[d>>2]|0;d=c[d+4>>2]|0;break}}while(0);A=(c[k>>2]=y,+g[k>>2]);z=(c[k>>2]=d,+g[k>>2]);T=(c[k>>2]=d,+g[k>>2]);C=(c[k>>2]=u,+g[k>>2]);W=(c[k>>2]=x,+g[k>>2]);X=-C;B=-T;if((Mv(o,q,T,X,T*W+(c[k>>2]=y,+g[k>>2])*X,G)|0)<2){i=j;return}X=(c[k>>2]=s,+g[k>>2]);X=(c[k>>2]=t,+g[k>>2])*B+C*X;if((Mv(l,o,B,(c[k>>2]=u,+g[k>>2]),X,M)|0)<2){i=j;return}o=b+40|0;if(r){V=o;c[V>>2]=u;c[V+4>>2]=d;V=b+48|0;c[V>>2]=x;c[V+4>>2]=y}else{V=f+(G<<3)+84|0;U=c[V+4>>2]|0;P=o;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=f+(G<<3)+20|0;U=c[P+4>>2]|0;V=b+48|0;c[V>>2]=c[P>>2];c[V+4>>2]=U}B=(c[k>>2]=x,+g[k>>2]);C=(c[k>>2]=u,+g[k>>2]);D=+g[w>>2];E=+g[m>>2];F=+g[n>>2];H=+g[e>>2];I=+g[h>>2];h=0;e=0;do{n=l+(h*12|0)|0;J=+g[n>>2];K=+g[l+(h*12|0)+4>>2];if((J-B)*C+(K-A)*z<=D){m=b+(e*20|0)|0;if(r){X=J-E;T=K-F;W=+(X*H+T*I);X=+(H*T-X*I);V=m;g[V>>2]=W;g[V+4>>2]=X;c[b+(e*20|0)+16>>2]=c[l+(h*12|0)+8>>2]}else{P=n;V=c[P+4>>2]|0;U=m;c[U>>2]=c[P>>2];c[U+4>>2]=V;U=l+(h*12|0)+8|0;V=b+(e*20|0)+16|0;a[V+2>>0]=a[U+3>>0]|0;a[V+3>>0]=a[U+2>>0]|0;a[V>>0]=a[U+1>>0]|0;a[V+1>>0]=a[U>>0]|0}e=e+1|0}h=h+1|0}while((h|0)!=2);c[v>>2]=e;i=j;return}function Kv(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0;h=i;j=c[b+148>>2]|0;t=+g[f+12>>2];v=+g[e+12>>2];u=+g[f+8>>2];s=+g[e+16>>2];r=+g[d+12>>2];m=+g[b+12>>2];p=+g[d+8>>2];l=+g[b+16>>2];o=+g[f>>2]+(t*v-u*s)-(+g[d>>2]+(r*m-p*l));l=v*u+t*s+ +g[f+4>>2]-(m*p+r*l+ +g[d+4>>2]);m=r*o+p*l;p=r*l-o*p;if((j|0)>0){q=0;k=0;l=-3.4028234663852886e+38;while(1){o=m*+g[b+(k<<3)+84>>2]+p*+g[b+(k<<3)+88>>2];n=o>l;q=n?k:q;k=k+1|0;if((k|0)==(j|0))break;else l=n?o:l}}else q=0;o=+Lv(b,d,q,e,f);n=((q|0)>0?q:j)+ -1|0;l=+Lv(b,d,n,e,f);k=q+1|0;k=(k|0)<(j|0)?k:0;m=+Lv(b,d,k,e,f);if(!(l>o&l>m))if(m>o){n=k;l=m;k=0}else{v=o;c[a>>2]=q;i=h;return+v}else k=1;while(1){if(k)q=((n|0)>0?n:j)+ -1|0;else{q=n+1|0;q=(q|0)<(j|0)?q:0}m=+Lv(b,d,q,e,f);if(m>l){n=q;l=m}else break}c[a>>2]=n;i=h;return+l}function Lv(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0,w=0;o=i;p=c[e+148>>2]|0;if(!((d|0)>-1))Aa(5264,5312,32,5392);if((c[a+148>>2]|0)<=(d|0))Aa(5264,5312,32,5392);n=+g[b+12>>2];l=+g[a+(d<<3)+84>>2];h=+g[b+8>>2];j=+g[a+(d<<3)+88>>2];k=n*l-h*j;j=l*h+n*j;l=+g[f+12>>2];m=+g[f+8>>2];q=l*k+m*j;r=l*j-k*m;if((p|0)>0){t=0;w=0;s=3.4028234663852886e+38;while(1){u=q*+g[e+(t<<3)+20>>2]+r*+g[e+(t<<3)+24>>2];v=u<s;w=v?t:w;t=t+1|0;if((t|0)==(p|0))break;else s=v?u:s}}else w=0;s=+g[a+(d<<3)+20>>2];u=+g[a+(d<<3)+24>>2];q=+g[e+(w<<3)+20>>2];r=+g[e+(w<<3)+24>>2];i=o;return+(k*(+g[f>>2]+(l*q-m*r)-(+g[b>>2]+(n*s-h*u)))+j*(q*m+l*r+ +g[f+4>>2]-(s*h+n*u+ +g[b+4>>2])))}function Mv(b,d,e,f,h,j){b=b|0;d=d|0;e=+e;f=+f;h=+h;j=j|0;var k=0.0,l=0,m=0,n=0,o=0,p=0,q=0;o=i;l=d+4|0;k=+g[d>>2]*e+ +g[l>>2]*f-h;m=d+12|0;n=d+16|0;h=+g[m>>2]*e+ +g[n>>2]*f-h;if(!(k<=0.0))p=0;else{c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];p=1}if(h<=0.0){q=p+1|0;p=b+(p*12|0)|0;c[p+0>>2]=c[m+0>>2];c[p+4>>2]=c[m+4>>2];c[p+8>>2]=c[m+8>>2];p=q}if(!(k*h<0.0)){q=p;i=o;return q|0}h=k/(k-h);f=+g[d>>2];e=+g[l>>2];f=+(f+h*(+g[m>>2]-f));e=+(e+h*(+g[n>>2]-e));q=b+(p*12|0)|0;g[q>>2]=f;g[q+4>>2]=e;q=b+(p*12|0)+8|0;a[q>>0]=j;a[q+1>>0]=a[d+9>>0]|0;a[q+2>>0]=0;a[q+3>>0]=1;q=p+1|0;i=o;return q|0}function Nv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0;e=i;f=c[b+4>>2]|0;if((f|0)==0){c[a+16>>2]=b+12;c[a+20>>2]=1;g[a+24>>2]=+g[b+8>>2];i=e;return}else if((f|0)==2){c[a+16>>2]=b+20;c[a+20>>2]=c[b+148>>2];g[a+24>>2]=+g[b+8>>2];i=e;return}else if((f|0)==3){if(!((d|0)>-1))Aa(5440,5480,53,7120);f=b+16|0;if((c[f>>2]|0)<=(d|0))Aa(5440,5480,53,7120);j=b+12|0;l=(c[j>>2]|0)+(d<<3)|0;k=c[l+4>>2]|0;h=a;c[h>>2]=c[l>>2];c[h+4>>2]=k;h=d+1|0;d=a+8|0;j=c[j>>2]|0;if((h|0)<(c[f>>2]|0)){j=j+(h<<3)|0;k=c[j+4>>2]|0;l=d;c[l>>2]=c[j>>2];c[l+4>>2]=k}else{k=c[j+4>>2]|0;l=d;c[l>>2]=c[j>>2];c[l+4>>2]=k}c[a+16>>2]=a;c[a+20>>2]=2;g[a+24>>2]=+g[b+8>>2];i=e;return}else if((f|0)==1){c[a+16>>2]=b+12;c[a+20>>2]=2;g[a+24>>2]=+g[b+8>>2];i=e;return}else Aa(15192,5480,81,7120)}function Ov(e,f,h){e=e|0;f=f|0;h=h|0;var j=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0,D=0.0,E=0,F=0.0,G=0.0,H=0,I=0.0,J=0.0,K=0,L=0,M=0,N=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0.0,aa=0.0,ba=0.0,ca=0,da=0,ea=0,fa=0,ga=0.0,ha=0.0,ia=0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0,ta=0.0,ua=0.0;j=i;i=i+160|0;m=j;H=j+140|0;E=j+128|0;K=j+120|0;C=j+112|0;c[1354]=(c[1354]|0)+1;v=+g[h+56>>2];J=+g[h+60>>2];D=+g[h+64>>2];B=+g[h+68>>2];F=+g[h+72>>2];G=+g[h+76>>2];I=+g[h+80>>2];u=+g[h+84>>2];n=f+4|0;N=b[n>>1]|0;if(!((N&65535)<4))Aa(5624,5480,102,5648);M=N&65535;o=m+108|0;c[o>>2]=M;a:do if(!(N<<16>>16==0)){P=h+16|0;M=h+48|0;N=h+44|0;Q=c[h+20>>2]|0;R=0;while(1){T=d[f+R+6>>0]|0;c[m+(R*36|0)+28>>2]=T;S=d[f+R+9>>0]|0;c[m+(R*36|0)+32>>2]=S;if((Q|0)<=(T|0)){N=6;break}ia=(c[P>>2]|0)+(T<<3)|0;aa=+g[ia>>2];$=+g[ia+4>>2];if((c[M>>2]|0)<=(S|0)){N=8;break}S=(c[N>>2]|0)+(S<<3)|0;ka=+g[S>>2];ha=+g[S+4>>2];la=v+(aa*B-$*D);ja=+la;ma=+($*B+aa*D+J);S=m+(R*36|0)|0;g[S>>2]=ja;g[S+4>>2]=ma;ma=F+(ka*u-ha*I);ja=+ma;ka=+(ha*u+ka*I+G);S=m+(R*36|0)+8|0;g[S>>2]=ja;g[S+4>>2]=ka;la=+(ma-la);ma=+(+g[m+(R*36|0)+12>>2]- +g[m+(R*36|0)+4>>2]);S=m+(R*36|0)+16|0;g[S>>2]=la;g[S+4>>2]=ma;g[m+(R*36|0)+24>>2]=0.0;R=R+1|0;S=c[o>>2]|0;if((R|0)>=(S|0)){L=S;break a}}if((N|0)==6)Aa(6408,6440,103,6488);else if((N|0)==8)Aa(6408,6440,103,6488)}else L=M;while(0);do if((L|0)>1){la=+g[f>>2];ma=+Qv(m);if(!(ma<la*.5)?!(la*2.0<ma|ma<1.1920928955078125e-7):0){L=c[o>>2]|0;N=15;break}c[o>>2]=0;N=17}else N=15;while(0);if((N|0)==15)if((L|0)==0)N=17;else{y=h+20|0;z=h+44|0;A=h+48|0;w=m+16|0;x=h+16|0}do if((N|0)==17){c[m+28>>2]=0;c[m+32>>2]=0;N=h+20|0;if((c[N>>2]|0)<=0)Aa(6408,6440,103,6488);L=h+16|0;M=c[L>>2]|0;$=+g[M>>2];aa=+g[M+4>>2];M=h+48|0;if((c[M>>2]|0)>0){z=h+44|0;w=c[z>>2]|0;ka=+g[w>>2];ga=+g[w+4>>2];la=v+($*B-aa*D);ma=aa*B+$*D+J;ha=+la;ja=+ma;w=m;g[w>>2]=ha;g[w+4>>2]=ja;ja=F+(ka*u-ga*I);ka=ga*u+ka*I+G;ga=+ja;ha=+ka;w=m+8|0;g[w>>2]=ga;g[w+4>>2]=ha;w=m+16|0;la=+(ja-la);ma=+(ka-ma);y=w;g[y>>2]=la;g[y+4>>2]=ma;c[o>>2]=1;y=N;A=M;x=L;break}else Aa(6408,6440,103,6488)}while(0);Pv(K,m);N=m+16|0;S=m+20|0;R=m+52|0;V=m+56|0;Q=m+36|0;U=m+52|0;M=m+24|0;K=m+60|0;P=m+72|0;T=m+88|0;L=m+96|0;X=c[o>>2]|0;W=0;b:while(1){Y=(X|0)>0;if(Y){Z=0;do{c[H+(Z<<2)>>2]=c[m+(Z*36|0)+28>>2];c[E+(Z<<2)>>2]=c[m+(Z*36|0)+32>>2];Z=Z+1|0}while((Z|0)!=(X|0))}do if((X|0)==3){ia=w;qa=+g[ia>>2];oa=+g[ia+4>>2];ia=U;na=+g[ia>>2];pa=+g[ia+4>>2];ia=T;ra=+g[ia>>2];$=+g[ia+4>>2];ta=na-qa;aa=pa-oa;ma=qa*ta+oa*aa;la=na*ta+pa*aa;ba=ra-qa;sa=$-oa;ga=qa*ba+oa*sa;ha=ra*ba+$*sa;ua=ra-na;ka=$-pa;ja=na*ua+pa*ka;ka=ra*ua+$*ka;ba=ta*sa-aa*ba;aa=(na*$-pa*ra)*ba;$=(oa*ra-qa*$)*ba;ba=(qa*pa-oa*na)*ba;if(!(!(ma>=-0.0)|!(ga>=-0.0))){g[M>>2]=1.0;c[o>>2]=1;break}if(!(!(ma<-0.0)|!(la>0.0)|!(ba<=0.0))){ua=1.0/(la-ma);g[M>>2]=la*ua;g[K>>2]=-(ma*ua);c[o>>2]=2;break}if(!(!(ga<-0.0)|!(ha>0.0)|!($<=0.0))){ua=1.0/(ha-ga);g[M>>2]=ha*ua;g[L>>2]=-(ga*ua);c[o>>2]=2;ca=Q+0|0;Z=P+0|0;_=ca+36|0;do{c[ca>>2]=c[Z>>2];ca=ca+4|0;Z=Z+4|0}while((ca|0)<(_|0));break}if(!(!(la<=0.0)|!(ja>=-0.0))){g[K>>2]=1.0;c[o>>2]=1;ca=m+0|0;Z=Q+0|0;_=ca+36|0;do{c[ca>>2]=c[Z>>2];ca=ca+4|0;Z=Z+4|0}while((ca|0)<(_|0));break}if(!(!(ha<=0.0)|!(ka<=0.0))){g[L>>2]=1.0;c[o>>2]=1;ca=m+0|0;Z=P+0|0;_=ca+36|0;do{c[ca>>2]=c[Z>>2];ca=ca+4|0;Z=Z+4|0}while((ca|0)<(_|0));break}if(!(ja<-0.0)|!(ka>0.0)|!(aa<=0.0)){N=43;break b}ua=1.0/(ka-ja);g[K>>2]=ka*ua;g[L>>2]=-(ja*ua);c[o>>2]=2;ca=m+0|0;Z=P+0|0;_=ca+36|0;do{c[ca>>2]=c[Z>>2];ca=ca+4|0;Z=Z+4|0}while((ca|0)<(_|0))}else if((X|0)==2){ia=w;ua=+g[ia>>2];$=+g[ia+4>>2];ia=U;ha=+g[ia>>2];ga=+g[ia+4>>2];aa=ha-ua;ba=ga-$;$=ua*aa+$*ba;if($>=-0.0){g[M>>2]=1.0;c[o>>2]=1;break}aa=ha*aa+ga*ba;if(!(aa<=0.0)){ua=1.0/(aa-$);g[M>>2]=aa*ua;g[K>>2]=-($*ua);c[o>>2]=2;break}else{g[K>>2]=1.0;c[o>>2]=1;ca=m+0|0;Z=Q+0|0;_=ca+36|0;do{c[ca>>2]=c[Z>>2];ca=ca+4|0;Z=Z+4|0}while((ca|0)<(_|0));break}}else if((X|0)!=1){N=44;break b}while(0);Pv(C,m);Z=c[o>>2]|0;do if((Z|0)==1){$=-+g[N>>2];ba=-+g[S>>2]}else if((Z|0)==2){ta=+g[N>>2];ba=+g[R>>2]-ta;ua=+g[S>>2];$=+g[V>>2]-ua;if(ta*$-ba*ua>0.0){$=-$;break}else{ba=-ba;break}}else{N=50;break b}while(0);if($*$+ba*ba<1.4210854715202004e-14){X=Z;N=73;break}ca=m+(Z*36|0)|0;aa=-$;ua=-ba;ha=B*aa+D*ua;aa=B*ua-D*aa;da=c[x>>2]|0;ea=c[y>>2]|0;if((ea|0)>1){fa=0;ga=aa*+g[da+4>>2]+ha*+g[da>>2];ia=1;while(1){ja=ha*+g[da+(ia<<3)>>2]+aa*+g[da+(ia<<3)+4>>2];_=ja>ga;fa=_?ia:fa;ia=ia+1|0;if((ia|0)==(ea|0))break;else ga=_?ja:ga}_=m+(Z*36|0)+28|0;c[_>>2]=fa;if(!((fa|0)>-1)){N=58;break}}else{_=m+(Z*36|0)+28|0;c[_>>2]=0;fa=0}if((ea|0)<=(fa|0)){N=58;break}ua=+g[da+(fa<<3)>>2];ga=+g[da+(fa<<3)+4>>2];aa=v+(B*ua-D*ga);ha=+aa;ga=+(ua*D+B*ga+J);g[ca>>2]=ha;g[ca+4>>2]=ga;ga=u*$+I*ba;ha=u*ba-$*I;ca=c[z>>2]|0;da=c[A>>2]|0;if((da|0)>1){ea=0;$=ha*+g[ca+4>>2]+ga*+g[ca>>2];fa=1;while(1){ba=ga*+g[ca+(fa<<3)>>2]+ha*+g[ca+(fa<<3)+4>>2];ia=ba>$;ea=ia?fa:ea;fa=fa+1|0;if((fa|0)==(da|0))break;else $=ia?ba:$}fa=m+(Z*36|0)+32|0;c[fa>>2]=ea;if(!((ea|0)>-1)){N=65;break}}else{fa=m+(Z*36|0)+32|0;c[fa>>2]=0;ea=0}if((da|0)<=(ea|0)){N=65;break}ra=+g[ca+(ea<<3)>>2];ua=+g[ca+(ea<<3)+4>>2];ta=F+(u*ra-I*ua);sa=+ta;ua=+(ra*I+u*ua+G);ia=m+(Z*36|0)+8|0;g[ia>>2]=sa;g[ia+4>>2]=ua;ta=+(ta-aa);ua=+(+g[m+(Z*36|0)+12>>2]- +g[m+(Z*36|0)+4>>2]);ia=m+(Z*36|0)+16|0;g[ia>>2]=ta;g[ia+4>>2]=ua;W=W+1|0;c[1356]=(c[1356]|0)+1;if(Y){Y=c[_>>2]|0;Z=0;do{if((Y|0)==(c[H+(Z<<2)>>2]|0)?(c[fa>>2]|0)==(c[E+(Z<<2)>>2]|0):0){N=72;break b}Z=Z+1|0}while((Z|0)<(X|0))}X=(c[o>>2]|0)+1|0;c[o>>2]=X;if((W|0)>=20){N=73;break}}if((N|0)==43){ua=1.0/(ba+(aa+$));g[M>>2]=aa*ua;g[K>>2]=$*ua;g[L>>2]=ba*ua;c[o>>2]=3;l=c[1358]|0;c[1358]=(l|0)>(W|0)?l:W;l=e+8|0;r=W;N=77}else if((N|0)==44)Aa(15192,5480,498,5528);else if((N|0)==50)Aa(15192,5480,184,5584);else if((N|0)==58)Aa(6408,6440,103,6488);else if((N|0)==65)Aa(6408,6440,103,6488);else if((N|0)==72){X=c[o>>2]|0;N=73}do if((N|0)==73){w=c[1358]|0;c[1358]=(w|0)>(W|0)?w:W;w=e+8|0;if((X|0)==1){r=m;fa=c[r>>2]|0;r=c[r+4>>2]|0;l=e;c[l>>2]=fa;c[l+4>>2]=r;l=m+8|0;ia=c[l>>2]|0;l=c[l+4>>2]|0;ea=w;c[ea>>2]=ia;c[ea+4>>2]=l;s=(c[k>>2]=fa,+g[k>>2]);t=(c[k>>2]=ia,+g[k>>2]);q=(c[k>>2]=r,+g[k>>2]);p=(c[k>>2]=l,+g[k>>2]);l=w;r=W;break}else if((X|0)==2){ta=+g[M>>2];p=+g[K>>2];s=ta*+g[m>>2]+p*+g[m+36>>2];q=ta*+g[m+4>>2]+p*+g[m+40>>2];ua=+s;t=+q;l=e;g[l>>2]=ua;g[l+4>>2]=t;t=ta*+g[m+8>>2]+p*+g[m+44>>2];p=ta*+g[m+12>>2]+p*+g[m+48>>2];ta=+t;ua=+p;l=w;g[l>>2]=ta;g[l+4>>2]=ua;l=w;r=W;break}else if((X|0)==3){l=w;r=W;N=77;break}else if((X|0)==0)Aa(15192,5480,217,5560);else Aa(15192,5480,236,5560)}while(0);if((N|0)==77){t=+g[M>>2];p=+g[K>>2];q=+g[L>>2];s=t*+g[m>>2]+p*+g[m+36>>2]+q*+g[m+72>>2];q=t*+g[m+4>>2]+p*+g[m+40>>2]+q*+g[m+76>>2];p=+s;t=+q;ia=e;g[ia>>2]=p;g[ia+4>>2]=t;ia=l;g[ia>>2]=p;g[ia+4>>2]=t;t=s;p=q}ta=s-t;x=e+4|0;w=e+12|0;ua=q-p;y=e+16|0;g[y>>2]=+O(+(ta*ta+ua*ua));c[e+20>>2]=r;g[f>>2]=+Qv(m);o=c[o>>2]|0;b[n>>1]=o;if((o|0)>0){n=0;do{a[f+n+6>>0]=c[m+(n*36|0)+28>>2];a[f+n+9>>0]=c[m+(n*36|0)+32>>2];n=n+1|0}while((n|0)<(o|0))}if((a[h+88>>0]|0)==0){i=j;return}p=+g[h+24>>2];q=+g[h+52>>2];t=+g[y>>2];s=p+q;if(!(t>s&t>1.1920928955078125e-7)){ta=+((+g[e>>2]+ +g[l>>2])*.5);ua=+((+g[x>>2]+ +g[w>>2])*.5);ia=e;g[ia>>2]=ta;g[ia+4>>2]=ua;ia=l;g[ia>>2]=ta;g[ia+4>>2]=ua;g[y>>2]=0.0;i=j;return}g[y>>2]=t-s;t=+g[l>>2];v=+g[e>>2];D=t-v;s=+g[w>>2];u=+g[x>>2];B=s-u;F=+O(+(D*D+B*B));if(!(F<1.1920928955078125e-7)){ua=1.0/F;D=D*ua;B=B*ua}g[e>>2]=p*D+v;g[x>>2]=p*B+u;g[l>>2]=t-q*D;g[w>>2]=s-q*B;i=j;return}function Pv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0;d=i;e=c[b+108>>2]|0;if((e|0)==3){b=a;c[b>>2]=0;c[b+4>>2]=0;i=d;return}else if((e|0)==0)Aa(15192,5480,194,5608);else if((e|0)==2){j=+g[b+24>>2];h=+g[b+60>>2];f=j*+g[b+20>>2]+h*+g[b+56>>2];g[a>>2]=j*+g[b+16>>2]+h*+g[b+52>>2];g[a+4>>2]=f;i=d;return}else if((e|0)==1){k=b+16|0;e=c[k+4>>2]|0;b=a;c[b>>2]=c[k>>2];c[b+4>>2]=e;i=d;return}else Aa(15192,5480,207,5608)}function Qv(a){a=a|0;var b=0,d=0,e=0.0,f=0.0;b=i;d=c[a+108>>2]|0;if((d|0)==0)Aa(15192,5480,246,5544);else if((d|0)==1){e=0.0;i=b;return+e}else if((d|0)==2){f=+g[a+16>>2]- +g[a+52>>2];e=+g[a+20>>2]- +g[a+56>>2];e=+O(+(f*f+e*e));i=b;return+e}else if((d|0)==3){f=+g[a+16>>2];e=+g[a+20>>2];f=(+g[a+52>>2]-f)*(+g[a+92>>2]-e)-(+g[a+56>>2]-e)*(+g[a+88>>2]-f);i=b;return+f}else Aa(15192,5480,259,5544);return 0.0}function Rv(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;d=a+16|0;e=c[d>>2]|0;if((e|0)==-1){f=a+8|0;g=c[f>>2]|0;e=a+12|0;if((g|0)!=(c[e>>2]|0))Aa(5664,5696,61,5744);a=a+4|0;h=c[a>>2]|0;c[e>>2]=g<<1;g=CA(g*72|0)|0;c[a>>2]=g;HA(g|0,h|0,(c[f>>2]|0)*36|0)|0;DA(h);g=c[f>>2]|0;h=(c[e>>2]|0)+ -1|0;a=c[a>>2]|0;if((g|0)<(h|0))do{h=g;g=g+1|0;c[a+(h*36|0)+20>>2]=g;c[a+(h*36|0)+32>>2]=-1;h=(c[e>>2]|0)+ -1|0}while((g|0)<(h|0));c[a+(h*36|0)+20>>2]=-1;c[a+(((c[e>>2]|0)+ -1|0)*36|0)+32>>2]=-1;e=c[f>>2]|0;c[d>>2]=e}else{f=a+8|0;a=c[a+4>>2]|0}h=a+(e*36|0)+20|0;c[d>>2]=c[h>>2];c[h>>2]=-1;c[a+(e*36|0)+24>>2]=-1;c[a+(e*36|0)+28>>2]=-1;c[a+(e*36|0)+32>>2]=0;c[a+(e*36|0)+16>>2]=0;c[f>>2]=(c[f>>2]|0)+1;i=b;return e|0}function Sv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;if(!((b|0)>-1))Aa(5760,5696,97,5800);if((c[a+12>>2]|0)<=(b|0))Aa(5760,5696,97,5800);e=a+8|0;if((c[e>>2]|0)>0){f=a+16|0;a=c[a+4>>2]|0;c[a+(b*36|0)+20>>2]=c[f>>2];c[a+(b*36|0)+32>>2]=-1;c[f>>2]=b;c[e>>2]=(c[e>>2]|0)+ -1;i=d;return}else Aa(5816,5696,98,5800)}function Tv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0;d=i;n=a+24|0;c[n>>2]=(c[n>>2]|0)+1;n=c[a>>2]|0;if((n|0)==-1){c[a>>2]=b;c[(c[a+4>>2]|0)+(b*36|0)+20>>2]=-1;i=d;return}e=a+4|0;l=c[e>>2]|0;f=+g[l+(b*36|0)>>2];h=+g[l+(b*36|0)+4>>2];j=+g[l+(b*36|0)+8>>2];k=+g[l+(b*36|0)+12>>2];m=c[l+(n*36|0)+24>>2]|0;a:do if(!((m|0)==-1))do{o=c[l+(n*36|0)+28>>2]|0;s=+g[l+(n*36|0)+8>>2];y=+g[l+(n*36|0)>>2];u=+g[l+(n*36|0)+12>>2];q=+g[l+(n*36|0)+4>>2];w=((s>j?s:j)-(y<f?y:f)+((u>k?u:k)-(q<h?q:h)))*2.0;p=w*2.0;q=(w-(s-y+(u-q))*2.0)*2.0;u=+g[l+(m*36|0)>>2];y=f<u?f:u;s=+g[l+(m*36|0)+4>>2];w=h<s?h:s;v=+g[l+(m*36|0)+8>>2];r=j>v?j:v;t=+g[l+(m*36|0)+12>>2];x=k>t?k:t;if((c[l+(m*36|0)+24>>2]|0)==-1)r=(r-y+(x-w))*2.0;else r=(r-y+(x-w))*2.0-(v-u+(t-s))*2.0;r=q+r;s=+g[l+(o*36|0)>>2];w=f<s?f:s;z=+g[l+(o*36|0)+4>>2];y=h<z?h:z;u=+g[l+(o*36|0)+8>>2];v=j>u?j:u;t=+g[l+(o*36|0)+12>>2];x=k>t?k:t;if((c[l+(o*36|0)+24>>2]|0)==-1)s=(v-w+(x-y))*2.0;else s=(v-w+(x-y))*2.0-(u-s+(t-z))*2.0;q=q+s;if(p<r&p<q)break a;n=r<q?m:o;m=c[l+(n*36|0)+24>>2]|0}while(!((m|0)==-1));while(0);l=c[l+(n*36|0)+20>>2]|0;m=Rv(a)|0;o=c[e>>2]|0;c[o+(m*36|0)+20>>2]=l;c[o+(m*36|0)+16>>2]=0;o=c[e>>2]|0;z=+g[o+(n*36|0)>>2];y=+g[o+(n*36|0)+4>>2];z=+(f<z?f:z);y=+(h<y?h:y);A=o+(m*36|0)|0;g[A>>2]=z;g[A+4>>2]=y;y=+g[o+(n*36|0)+8>>2];z=+g[o+(n*36|0)+12>>2];y=+(j>y?j:y);z=+(k>z?k:z);o=o+(m*36|0)+8|0;g[o>>2]=y;g[o+4>>2]=z;o=c[e>>2]|0;c[o+(m*36|0)+32>>2]=(c[o+(n*36|0)+32>>2]|0)+1;if((l|0)==-1){c[o+(m*36|0)+24>>2]=n;c[o+(m*36|0)+28>>2]=b;c[o+(n*36|0)+20>>2]=m;A=o+(b*36|0)+20|0;c[A>>2]=m;c[a>>2]=m;m=c[A>>2]|0}else{A=o+(l*36|0)+24|0;if((c[A>>2]|0)==(n|0))c[A>>2]=m;else c[o+(l*36|0)+28>>2]=m;c[o+(m*36|0)+24>>2]=n;c[o+(m*36|0)+28>>2]=b;c[o+(n*36|0)+20>>2]=m;c[o+(b*36|0)+20>>2]=m}if((m|0)==-1){i=d;return}while(1){n=Wv(a,m)|0;b=c[e>>2]|0;l=c[b+(n*36|0)+24>>2]|0;m=c[b+(n*36|0)+28>>2]|0;if((l|0)==-1){e=20;break}if((m|0)==-1){e=22;break}o=c[b+(l*36|0)+32>>2]|0;A=c[b+(m*36|0)+32>>2]|0;c[b+(n*36|0)+32>>2]=((o|0)>(A|0)?o:A)+1;Vv(b+(n*36|0)|0,b+(l*36|0)|0,b+(m*36|0)|0);m=c[(c[e>>2]|0)+(n*36|0)+20>>2]|0;if((m|0)==-1){e=24;break}}if((e|0)==20)Aa(5896,5696,307,5912);else if((e|0)==22)Aa(5928,5696,308,5912);else if((e|0)==24){i=d;return}}function Uv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;e=i;if((c[a>>2]|0)==(b|0)){c[a>>2]=-1;i=e;return}d=a+4|0;f=c[d>>2]|0;g=c[f+(b*36|0)+20>>2]|0;h=c[f+(g*36|0)+20>>2]|0;j=c[f+(g*36|0)+24>>2]|0;if((j|0)==(b|0))j=c[f+(g*36|0)+28>>2]|0;if((h|0)==-1){c[a>>2]=j;c[f+(j*36|0)+20>>2]=-1;Sv(a,g);i=e;return}b=f+(h*36|0)+24|0;if((c[b>>2]|0)==(g|0))c[b>>2]=j;else c[f+(h*36|0)+28>>2]=j;c[f+(j*36|0)+20>>2]=h;Sv(a,g);do{j=Wv(a,h)|0;b=c[d>>2]|0;f=c[b+(j*36|0)+24>>2]|0;g=c[b+(j*36|0)+28>>2]|0;Vv(b+(j*36|0)|0,b+(f*36|0)|0,b+(g*36|0)|0);b=c[d>>2]|0;f=c[b+(f*36|0)+32>>2]|0;g=c[b+(g*36|0)+32>>2]|0;c[b+(j*36|0)+32>>2]=((f|0)>(g|0)?f:g)+1;h=c[b+(j*36|0)+20>>2]|0}while(!((h|0)==-1));i=e;return}function Vv(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0;d=i;e=+g[b>>2];f=+g[c>>2];h=+g[b+4>>2];j=+g[c+4>>2];f=+(e<f?e:f);j=+(h<j?h:j);k=a;g[k>>2]=f;g[k+4>>2]=j;j=+g[b+8>>2];f=+g[c+8>>2];h=+g[b+12>>2];e=+g[c+12>>2];f=+(j>f?j:f);e=+(h>e?h:e);b=a+8|0;g[b>>2]=f;g[b+4>>2]=e;i=d;return}function Wv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;d=i;if((b|0)==-1)Aa(5944,5696,382,5960);h=c[a+4>>2]|0;g=h+(b*36|0)|0;p=h+(b*36|0)+24|0;o=c[p>>2]|0;if((o|0)==-1){u=b;i=d;return u|0}j=h+(b*36|0)+32|0;if((c[j>>2]|0)<2){u=b;i=d;return u|0}q=h+(b*36|0)+28|0;n=c[q>>2]|0;if(!((o|0)>-1))Aa(5968,5696,392,5960);m=c[a+12>>2]|0;if((o|0)>=(m|0))Aa(5968,5696,392,5960);if(!((n|0)>-1&(n|0)<(m|0)))Aa(6e3,5696,393,5960);l=h+(o*36|0)|0;k=h+(n*36|0)|0;e=h+(n*36|0)+32|0;f=h+(o*36|0)+32|0;r=(c[e>>2]|0)-(c[f>>2]|0)|0;if((r|0)>1){u=h+(n*36|0)+24|0;o=c[u>>2]|0;p=h+(n*36|0)+28|0;r=c[p>>2]|0;t=h+(o*36|0)|0;s=h+(r*36|0)|0;if(!((o|0)>-1&(o|0)<(m|0)))Aa(6032,5696,407,5960);if(!((r|0)>-1&(r|0)<(m|0)))Aa(6064,5696,408,5960);c[u>>2]=b;u=h+(b*36|0)+20|0;m=h+(n*36|0)+20|0;c[m>>2]=c[u>>2];c[u>>2]=n;m=c[m>>2]|0;do if(!((m|0)==-1)){a=h+(m*36|0)+24|0;if((c[a>>2]|0)==(b|0)){c[a>>2]=n;break}a=h+(m*36|0)+28|0;if((c[a>>2]|0)==(b|0)){c[a>>2]=n;break}else Aa(6096,5696,424,5960)}else c[a>>2]=n;while(0);m=h+(o*36|0)+32|0;a=h+(r*36|0)+32|0;if((c[m>>2]|0)>(c[a>>2]|0)){c[p>>2]=o;c[q>>2]=r;c[h+(r*36|0)+20>>2]=b;Vv(g,l,s);Vv(k,g,t);f=c[f>>2]|0;u=c[a>>2]|0;u=((f|0)>(u|0)?f:u)+1|0;c[j>>2]=u;f=c[m>>2]|0;f=(u|0)>(f|0)?u:f}else{c[p>>2]=r;c[q>>2]=o;c[h+(o*36|0)+20>>2]=b;Vv(g,l,t);Vv(k,g,s);f=c[f>>2]|0;u=c[m>>2]|0;u=((f|0)>(u|0)?f:u)+1|0;c[j>>2]=u;f=c[a>>2]|0;f=(u|0)>(f|0)?u:f}c[e>>2]=f+1;u=n;i=d;return u|0}if(!((r|0)<-1)){u=b;i=d;return u|0}u=h+(o*36|0)+24|0;t=c[u>>2]|0;s=h+(o*36|0)+28|0;r=c[s>>2]|0;n=h+(t*36|0)|0;q=h+(r*36|0)|0;if(!((t|0)>-1&(t|0)<(m|0)))Aa(6128,5696,467,5960);if(!((r|0)>-1&(r|0)<(m|0)))Aa(6160,5696,468,5960);c[u>>2]=b;u=h+(b*36|0)+20|0;m=h+(o*36|0)+20|0;c[m>>2]=c[u>>2];c[u>>2]=o;m=c[m>>2]|0;do if(!((m|0)==-1)){a=h+(m*36|0)+24|0;if((c[a>>2]|0)==(b|0)){c[a>>2]=o;break}a=h+(m*36|0)+28|0;if((c[a>>2]|0)==(b|0)){c[a>>2]=o;break}else Aa(6192,5696,484,5960)}else c[a>>2]=o;while(0);m=h+(t*36|0)+32|0;a=h+(r*36|0)+32|0;if((c[m>>2]|0)>(c[a>>2]|0)){c[s>>2]=t;c[p>>2]=r;c[h+(r*36|0)+20>>2]=b;Vv(g,k,q);Vv(l,g,n);e=c[e>>2]|0;u=c[a>>2]|0;u=((e|0)>(u|0)?e:u)+1|0;c[j>>2]=u;e=c[m>>2]|0;e=(u|0)>(e|0)?u:e}else{c[s>>2]=r;c[p>>2]=t;c[h+(t*36|0)+20>>2]=b;Vv(g,k,n);Vv(l,g,q);e=c[e>>2]|0;u=c[m>>2]|0;u=((e|0)>(u|0)?e:u)+1|0;c[j>>2]=u;e=c[a>>2]|0;e=(u|0)>(e|0)?u:e}c[f>>2]=e+1;u=o;i=d;return u|0}function Xv(a,b,d,e){a=a|0;b=b|0;d=d|0;e=+e;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0;n=i;q=1.0-e;o=q*+g[a+32>>2]+ +g[a+36>>2]*e;m=+R(+o);o=+Q(+o);j=+g[a+8>>2];f=+g[a+12>>2];l=q*+g[a+16>>2]+ +g[a+24>>2]*e-(o*j-m*f);f=q*+g[a+20>>2]+ +g[a+28>>2]*e-(m*j+o*f);j=q*+g[a+68>>2]+ +g[a+72>>2]*e;k=+R(+j);j=+Q(+j);r=+g[a+44>>2];s=+g[a+48>>2];h=q*+g[a+52>>2]+ +g[a+60>>2]*e-(j*r-k*s);e=q*+g[a+56>>2]+ +g[a+64>>2]*e-(k*r+j*s);t=c[a+80>>2]|0;if((t|0)==1){s=+g[a+92>>2];p=+g[a+96>>2];q=+g[a+84>>2];r=+g[a+88>>2];a=c[a+4>>2]|0;if(!((d|0)>-1))Aa(6408,6440,103,6488);if((c[a+20>>2]|0)<=(d|0))Aa(6408,6440,103,6488);t=(c[a+16>>2]|0)+(d<<3)|0;v=+g[t>>2];u=+g[t+4>>2];s=(o*s-m*p)*(h+(j*v-k*u)-(l+(o*q-m*r)))+(m*s+o*p)*(e+(k*v+j*u)-(f+(m*q+o*r)));i=n;return+s}else if((t|0)==0){p=+g[a+92>>2];q=+g[a+96>>2];t=c[a>>2]|0;if(!((b|0)>-1))Aa(6408,6440,103,6488);if((c[t+20>>2]|0)<=(b|0))Aa(6408,6440,103,6488);t=(c[t+16>>2]|0)+(b<<3)|0;s=+g[t>>2];r=+g[t+4>>2];a=c[a+4>>2]|0;if(!((d|0)>-1))Aa(6408,6440,103,6488);if((c[a+20>>2]|0)<=(d|0))Aa(6408,6440,103,6488);t=(c[a+16>>2]|0)+(d<<3)|0;u=+g[t>>2];v=+g[t+4>>2];v=p*(h+(j*u-k*v)-(l+(o*s-m*r)))+q*(e+(k*u+j*v)-(f+(m*s+o*r)));i=n;return+v}else if((t|0)==2){p=+g[a+92>>2];s=+g[a+96>>2];r=+g[a+84>>2];q=+g[a+88>>2];a=c[a>>2]|0;if(!((b|0)>-1))Aa(6408,6440,103,6488);if((c[a+20>>2]|0)<=(b|0))Aa(6408,6440,103,6488);t=(c[a+16>>2]|0)+(b<<3)|0;u=+g[t>>2];v=+g[t+4>>2];v=(j*p-k*s)*(l+(o*u-m*v)-(h+(j*r-k*q)))+(k*p+j*s)*(f+(m*u+o*v)-(e+(k*r+j*q)));i=n;return+v}else Aa(15192,6328,242,6392);return 0.0}function Yv(a){a=a|0;var b=0;b=i;c[a>>2]=6560;DA(c[a+12>>2]|0);DA(a);i=b;return}function Zv(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=6560;d=a+12|0;DA(c[d>>2]|0);c[d>>2]=0;c[a+16>>2]=0;i=b;return}function _v(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0;e=i;d=xw(d,40)|0;if((d|0)==0)d=0;else{c[d>>2]=6560;c[d+4>>2]=3;g[d+8>>2]=.009999999776482582;c[d+12>>2]=0;c[d+16>>2]=0;a[d+36>>0]=0;a[d+37>>0]=0}j=c[b+12>>2]|0;f=c[b+16>>2]|0;h=d+12|0;if((c[h>>2]|0)!=0)Aa(6592,6632,48,6704);k=d+16|0;if((c[k>>2]|0)!=0)Aa(6592,6632,48,6704);if((f|0)>1){c[k>>2]=f;f=CA(f<<3)|0;c[h>>2]=f;HA(f|0,j|0,c[k>>2]<<3|0)|0;j=d+36|0;a[j>>0]=0;k=d+37|0;a[k>>0]=0;h=b+20|0;f=c[h+4>>2]|0;l=d+20|0;c[l>>2]=c[h>>2];c[l+4>>2]=f;l=b+28|0;f=c[l+4>>2]|0;h=d+28|0;c[h>>2]=c[l>>2];c[h+4>>2]=f;a[j>>0]=a[b+36>>0]|0;a[k>>0]=a[b+37>>0]|0;i=e;return d|0}else Aa(6720,6632,49,6704);return 0}function $v(a){a=a|0;return(c[a+16>>2]|0)+ -1|0}function aw(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;if(!((e|0)>-1))Aa(6736,6632,89,6776);h=b+16|0;if(((c[h>>2]|0)+ -1|0)<=(e|0))Aa(6736,6632,89,6776);c[d+4>>2]=1;g[d+8>>2]=+g[b+8>>2];j=b+12|0;k=(c[j>>2]|0)+(e<<3)|0;l=c[k+4>>2]|0;m=d+12|0;c[m>>2]=c[k>>2];c[m+4>>2]=l;m=(c[j>>2]|0)+(e+1<<3)|0;l=c[m+4>>2]|0;k=d+20|0;c[k>>2]=c[m>>2];c[k+4>>2]=l;k=d+28|0;if((e|0)>0){n=(c[j>>2]|0)+(e+ -1<<3)|0;l=c[n+4>>2]|0;m=k;c[m>>2]=c[n>>2];c[m+4>>2]=l;a[d+44>>0]=1}else{l=b+20|0;m=c[l+4>>2]|0;n=k;c[n>>2]=c[l>>2];c[n+4>>2]=m;a[d+44>>0]=a[b+36>>0]|0}k=d+36|0;if(((c[h>>2]|0)+ -2|0)>(e|0)){l=(c[j>>2]|0)+(e+2<<3)|0;m=c[l+4>>2]|0;n=k;c[n>>2]=c[l>>2];c[n+4>>2]=m;a[d+45>>0]=1;i=f;return}else{l=b+28|0;m=c[l+4>>2]|0;n=k;c[n>>2]=c[l>>2];c[n+4>>2]=m;a[d+45>>0]=a[b+37>>0]|0;i=f;return}}function bw(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function cw(a,d,e,f,h){a=a|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0;j=i;i=i+48|0;k=j;l=c[a+16>>2]|0;if((l|0)>(h|0)){c[k>>2]=6968;c[k+4>>2]=1;g[k+8>>2]=.009999999776482582;m=k+28|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;b[m+16>>1]=0;m=h+1|0;a=c[a+12>>2]|0;o=a+(h<<3)|0;n=c[o+4>>2]|0;h=k+12|0;c[h>>2]=c[o>>2];c[h+4>>2]=n;l=a+(((m|0)==(l|0)?0:m)<<3)|0;h=c[l+4>>2]|0;a=k+20|0;c[a>>2]=c[l>>2];c[a+4>>2]=h;a=ow(k,d,e,f,0)|0;i=j;return a|0}else Aa(6792,6632,129,11752);return 0}function dw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0;f=i;h=c[a+16>>2]|0;if((h|0)>(e|0)){r=e+1|0;h=(r|0)==(h|0)?0:r;a=c[a+12>>2]|0;o=+g[d+12>>2];n=+g[a+(e<<3)>>2];p=+g[d+8>>2];l=+g[a+(e<<3)+4>>2];k=+g[d>>2];m=k+(o*n-p*l);q=+g[d+4>>2];l=n*p+o*l+q;n=+g[a+(h<<3)>>2];j=+g[a+(h<<3)+4>>2];k=k+(o*n-p*j);j=q+(p*n+o*j);o=+(m<k?m:k);n=+(l<j?l:j);a=b;g[a>>2]=o;g[a+4>>2]=n;k=+(m>k?m:k);j=+(l>j?l:j);a=b+8|0;g[a>>2]=k;g[a+4>>2]=j;i=f;return}else Aa(6792,6632,148,6816)}function ew(a,b,d){a=a|0;b=b|0;d=+d;a=i;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return}function fw(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;b=xw(b,20)|0;if((b|0)==0)b=0;else{c[b>>2]=6896;e=b+4|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0}g=a+4|0;e=c[g+4>>2]|0;f=b+4|0;c[f>>2]=c[g>>2];c[f+4>>2]=e;f=a+12|0;a=c[f+4>>2]|0;e=b+12|0;c[e>>2]=c[f>>2];c[e+4>>2]=a;i=d;return b|0}function gw(a){a=a|0;return 1}function hw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0;d=+g[b+12>>2];i=+g[a+12>>2];h=+g[b+8>>2];e=+g[a+16>>2];f=+g[c>>2]-(+g[b>>2]+(d*i-h*e));e=+g[c+4>>2]-(+g[b+4>>2]+(i*h+d*e));d=+g[a+8>>2];return f*f+e*e<=d*d|0}function iw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;e=i;m=+g[d+12>>2];k=+g[a+12>>2];n=+g[d+8>>2];h=+g[a+16>>2];l=+g[c>>2];f=l-(+g[d>>2]+(m*k-n*h));j=+g[c+4>>2];h=j-(+g[d+4>>2]+(k*n+m*h));m=+g[a+8>>2];l=+g[c+8>>2]-l;j=+g[c+12>>2]-j;n=f*l+h*j;k=l*l+j*j;m=n*n-(f*f+h*h-m*m)*k;if(m<0.0|k<1.1920928955078125e-7){d=0;i=e;return d|0}n=n+ +O(+m);m=-n;if(!(n<=-0.0)){d=0;i=e;return d|0}if(!(k*+g[c+16>>2]>=m)){d=0;i=e;return d|0}n=m/k;g[b+8>>2]=n;f=f+l*n;j=h+j*n;n=+f;h=+j;d=b;g[d>>2]=n;g[d+4>>2]=h;h=+O(+(f*f+j*j));if(h<1.1920928955078125e-7){d=1;i=e;return d|0}n=1.0/h;g[b>>2]=f*n;g[b+4>>2]=j*n;d=1;i=e;return d|0}function jw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;e=+g[c+12>>2];j=+g[a+12>>2];i=+g[c+8>>2];f=+g[a+16>>2];h=+g[c>>2]+(e*j-i*f);f=+g[c+4>>2]+(j*i+e*f);d=a+8|0;e=+g[d>>2];g[b>>2]=h-e;g[b+4>>2]=f-e;e=+g[d>>2];g[b+8>>2]=h+e;g[b+12>>2]=f+e;return}function kw(a,b,d){a=a|0;b=b|0;d=+d;var e=0.0,f=0.0,h=0.0,i=0,j=0,k=0,l=0,m=0;j=a+8|0;h=+g[j>>2];h=h*d*3.1415927410125732*h;g[b>>2]=h;i=a+12|0;m=i;l=c[m+4>>2]|0;k=b+4|0;c[k>>2]=c[m>>2];c[k+4>>2]=l;f=+g[j>>2];e=+g[i>>2];d=+g[a+16>>2];g[b+12>>2]=h*(f*f*.5+(e*e+d*d));return}function lw(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0;e=i;d=xw(d,48)|0;if((d|0)==0)d=0;else{c[d>>2]=6968;c[d+4>>2]=1;g[d+8>>2]=.009999999776482582;f=d+28|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;b[f+16>>1]=0}j=a+4|0;h=c[j+4>>2]|0;f=d+4|0;c[f>>2]=c[j>>2];c[f+4>>2]=h;f=d+12|0;a=a+12|0;c[f+0>>2]=c[a+0>>2];c[f+4>>2]=c[a+4>>2];c[f+8>>2]=c[a+8>>2];c[f+12>>2]=c[a+12>>2];c[f+16>>2]=c[a+16>>2];c[f+20>>2]=c[a+20>>2];c[f+24>>2]=c[a+24>>2];c[f+28>>2]=c[a+28>>2];b[f+32>>1]=b[a+32>>1]|0;i=e;return d|0}function mw(a){a=a|0;return 1}function nw(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function ow(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0;e=i;j=+g[d>>2];k=+g[c>>2]-j;m=+g[d+4>>2];f=+g[c+4>>2]-m;o=+g[d+12>>2];h=+g[d+8>>2];l=k*o+f*h;k=o*f-k*h;j=+g[c+8>>2]-j;m=+g[c+12>>2]-m;f=o*j+h*m-l;j=o*m-h*j-k;d=a+12|0;h=+g[d>>2];m=+g[d+4>>2];d=a+20|0;o=+g[d>>2];o=o-h;p=+g[d+4>>2]-m;s=-o;n=o*o+p*p;q=+O(+n);if(q<1.1920928955078125e-7)q=p;else{t=1.0/q;q=p*t;s=t*s}r=(m-k)*s+(h-l)*q;t=j*s+f*q;if(t==0.0){d=0;i=e;return d|0}t=r/t;if(t<0.0){d=0;i=e;return d|0}if(n==0.0?1:+g[c+16>>2]<t){d=0;i=e;return d|0}p=(o*(l+f*t-h)+p*(k+j*t-m))/n;if(p<0.0|p>1.0){d=0;i=e;return d|0}g[b+8>>2]=t;if(r>0.0){r=+-q;t=+-s;d=b;g[d>>2]=r;g[d+4>>2]=t;d=1;i=e;return d|0}else{r=+q;t=+s;d=b;g[d>>2]=r;g[d+4>>2]=t;d=1;i=e;return d|0}return 0}function pw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;d=i;j=+g[c+12>>2];m=+g[a+12>>2];l=+g[c+8>>2];h=+g[a+16>>2];f=+g[c>>2];k=f+(j*m-l*h);n=+g[c+4>>2];h=m*l+j*h+n;m=+g[a+20>>2];e=+g[a+24>>2];f=f+(j*m-l*e);e=n+(l*m+j*e);j=+g[a+8>>2];m=+((k<f?k:f)-j);l=+((h<e?h:e)-j);c=b;g[c>>2]=m;g[c+4>>2]=l;f=+(j+(k>f?k:f));e=+(j+(h>e?h:e));c=b+8|0;g[c>>2]=f;g[c+4>>2]=e;i=d;return}function qw(a,b,c){a=a|0;b=b|0;c=+c;var d=0,e=0.0;d=i;g[b>>2]=0.0;e=+((+g[a+12>>2]+ +g[a+20>>2])*.5);c=+((+g[a+16>>2]+ +g[a+24>>2])*.5);a=b+4|0;g[a>>2]=e;g[a+4>>2]=c;g[b+12>>2]=0.0;i=d;return}function rw(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0;d=i;b=xw(b,152)|0;if((b|0)==0)b=0;else{c[b>>2]=7336;c[b+4>>2]=2;g[b+8>>2]=.009999999776482582;c[b+148>>2]=0;g[b+12>>2]=0.0;g[b+16>>2]=0.0}h=a+4|0;f=c[h+4>>2]|0;e=b+4|0;c[e>>2]=c[h>>2];c[e+4>>2]=f;HA(b+12|0,a+12|0,140)|0;i=d;return b|0}function sw(a){a=a|0;return 1}function tw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;j=+g[d>>2]- +g[b>>2];k=+g[d+4>>2]- +g[b+4>>2];l=+g[b+12>>2];h=+g[b+8>>2];f=j*l+k*h;h=l*k-j*h;b=c[a+148>>2]|0;if((b|0)>0)d=0;else{d=1;i=e;return d|0}while(1){if((f- +g[a+(d<<3)+20>>2])*+g[a+(d<<3)+84>>2]+(h- +g[a+(d<<3)+24>>2])*+g[a+(d<<3)+88>>2]>0.0){b=0;a=4;break}d=d+1|0;if((d|0)>=(b|0)){b=1;a=4;break}}if((a|0)==4){i=e;return b|0}return 0}function uw(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0.0,x=0.0;f=i;n=+g[e>>2];m=+g[d>>2]-n;w=+g[e+4>>2];r=+g[d+4>>2]-w;l=e+12|0;v=+g[l>>2];e=e+8|0;q=+g[e>>2];o=m*v+r*q;m=v*r-m*q;n=+g[d+8>>2]-n;w=+g[d+12>>2]-w;r=v*n+q*w-o;n=v*w-q*n-m;p=c[a+148>>2]|0;q=+g[d+16>>2];do if((p|0)>0){t=0;d=-1;s=0.0;u=q;a:while(1){x=+g[a+(t<<3)+84>>2];w=+g[a+(t<<3)+88>>2];v=(+g[a+(t<<3)+20>>2]-o)*x+(+g[a+(t<<3)+24>>2]-m)*w;w=r*x+n*w;do if(w==0.0){if(v<0.0){h=0;p=17;break a}}else{if(w<0.0?v<s*w:0){d=t;s=v/w;break}if(w>0.0?v<u*w:0)u=v/w}while(0);t=t+1|0;if(u<s){h=0;p=17;break}if((t|0)>=(p|0)){p=12;break}}if((p|0)==12){if(s>=0.0){j=q;h=d;k=s;break}Aa(7208,7064,249,11752)}else if((p|0)==17){i=f;return h|0}}else{j=q;h=-1;k=0.0}while(0);if(!(k<=j))Aa(7208,7064,249,11752);if(!((h|0)>-1)){t=0;i=f;return t|0}g[b+8>>2]=k;v=+g[l>>2];s=+g[a+(h<<3)+84>>2];u=+g[e>>2];x=+g[a+(h<<3)+88>>2];w=+(v*s-u*x);x=+(s*u+v*x);t=b;g[t>>2]=w;g[t+4>>2]=x;t=1;i=f;return t|0}function vw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0;e=i;f=+g[d+12>>2];n=+g[a+20>>2];h=+g[d+8>>2];o=+g[a+24>>2];j=+g[d>>2];l=j+(f*n-h*o);k=+g[d+4>>2];o=n*h+f*o+k;d=c[a+148>>2]|0;if((d|0)>1){m=l;n=o;p=1;do{s=+g[a+(p<<3)+20>>2];q=+g[a+(p<<3)+24>>2];r=j+(f*s-h*q);q=s*h+f*q+k;m=m<r?m:r;n=n<q?n:q;l=l>r?l:r;o=o>q?o:q;p=p+1|0}while((p|0)<(d|0))}else{n=o;m=l}s=+g[a+8>>2];q=+(m-s);r=+(n-s);p=b;g[p>>2]=q;g[p+4>>2]=r;r=+(l+s);s=+(o+s);p=b+8|0;g[p>>2]=r;g[p+4>>2]=s;i=e;return}function ww(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0,r=0,s=0,t=0,u=0.0,v=0,w=0.0,x=0.0,y=0.0,z=0.0;e=i;f=c[a+148>>2]|0;if((f|0)>2){j=0.0;h=0.0;o=0}else Aa(7256,7064,306,7280);do{h=h+ +g[a+(o<<3)+20>>2];j=j+ +g[a+(o<<3)+24>>2];o=o+1|0}while((o|0)<(f|0));n=1.0/+(f|0);h=h*n;n=j*n;s=a+20|0;v=a+24|0;l=0.0;m=0.0;j=0.0;k=0.0;t=0;do{u=+g[a+(t<<3)+20>>2]-h;p=+g[a+(t<<3)+24>>2]-n;t=t+1|0;o=(t|0)<(f|0);if(o){q=a+(t<<3)+20|0;r=a+(t<<3)+24|0}else{q=s;r=v}x=+g[q>>2]-h;w=+g[r>>2]-n;y=u*w-p*x;z=y*.5;k=k+z;z=z*.3333333432674408;l=l+(u+x)*z;m=m+(p+w)*z;j=j+y*.0833333358168602*(x*x+(u*u+u*x)+(w*w+(p*p+p*w)))}while(o);p=k*d;g[b>>2]=p;if(k>1.1920928955078125e-7){z=1.0/k;y=l*z;z=m*z;w=h+y;x=n+z;n=+w;u=+x;v=b+4|0;g[v>>2]=n;g[v+4>>2]=u;g[b+12>>2]=j*d+p*(w*w+x*x-(y*y+z*z));i=e;return}else Aa(7296,7064,352,7280)}function xw(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;if((d|0)==0){k=0;i=e;return k|0}if((d|0)<=0)Aa(8248,8176,104,8496);if((d|0)>640){k=CA(d)|0;i=e;return k|0}k=a[7496+d>>0]|0;g=k&255;if(!((k&255)<14))Aa(8264,8176,112,8496);d=b+(g<<2)+12|0;f=c[d>>2]|0;if((f|0)!=0){c[d>>2]=c[f>>2];k=f;i=e;return k|0}f=b+4|0;h=c[f>>2]|0;j=b+8|0;if((h|0)==(c[j>>2]|0)){k=c[b>>2]|0;h=h+128|0;c[j>>2]=h;h=CA(h<<3)|0;c[b>>2]=h;HA(h|0,k|0,c[f>>2]<<3|0)|0;FA((c[b>>2]|0)+(c[f>>2]<<3)|0,0,1024)|0;DA(k);h=c[f>>2]|0}k=c[b>>2]|0;j=CA(16384)|0;b=k+(h<<3)+4|0;c[b>>2]=j;g=c[7440+(g<<2)>>2]|0;c[k+(h<<3)>>2]=g;h=16384/(g|0)|0;if((_(h,g)|0)>=16385)Aa(8304,8176,140,8496);h=h+ -1|0;if((h|0)>0){k=0;do{l=k;k=k+1|0;c[j+(_(l,g)|0)>>2]=j+(_(k,g)|0);j=c[b>>2]|0}while((k|0)!=(h|0))}c[j+(_(h,g)|0)>>2]=0;c[d>>2]=c[c[b>>2]>>2];c[f>>2]=(c[f>>2]|0)+1;l=c[b>>2]|0;i=e;return l|0}function yw(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=i;if((e|0)==0){i=f;return}if((e|0)<=0)Aa(8248,8176,164,8536);if((e|0)>640){DA(d);i=f;return}e=a[7496+e>>0]|0;if(!((e&255)<14))Aa(8264,8176,173,8536);e=b+((e&255)<<2)+12|0;c[d>>2]=c[e>>2];c[e>>2]=d;i=f;return}function zw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0;e=+g[b+16>>2];l=+g[b+32>>2];h=+g[b+20>>2];d=+g[b+28>>2];o=e*l-h*d;k=+g[b+24>>2];f=+g[b+12>>2];n=h*k-l*f;m=d*f-e*k;j=+g[b>>2];i=+g[b+4>>2];p=+g[b+8>>2];q=o*j+i*n+m*p;if(q!=0.0)q=1.0/q;r=+g[c>>2];s=+g[c+4>>2];t=+g[c+8>>2];g[a>>2]=q*(o*r+s*n+m*t);g[a+4>>2]=q*((s*l-t*d)*j+i*(t*k-l*r)+(d*r-s*k)*p);g[a+8>>2]=q*((e*t-h*s)*j+i*(h*r-t*f)+(s*f-e*r)*p);return}function Aw(a,b,c,d){a=a|0;b=b|0;c=+c;d=+d;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;f=+g[b>>2];h=+g[b+12>>2];e=+g[b+4>>2];i=+g[b+16>>2];j=f*i-h*e;if(j!=0.0)j=1.0/j;g[a>>2]=j*(i*c-h*d);g[a+4>>2]=j*(f*d-e*c);return}function Bw(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0;d=+g[a+16>>2];c=+g[a+32>>2];l=d*c;m=+g[a+20>>2];f=+g[a+28>>2];h=+g[a+24>>2];i=+g[a+12>>2];k=c*i;j=f*i-d*h;e=+g[a>>2];m=(l-m*f)*e+ +g[a+4>>2]*(m*h-k)+j*+g[a+8>>2];if(m!=0.0)m=1.0/m;g[b>>2]=m*(l-f*f);l=m*(h*f-k);g[b+4>>2]=l;k=m*j;g[b+8>>2]=k;g[b+12>>2]=l;g[b+16>>2]=m*(e*c-h*h);l=m*(i*h-e*f);g[b+20>>2]=l;g[b+24>>2]=k;g[b+28>>2]=l;g[b+32>>2]=m*(e*d-i*i);return}function Cw(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+16|0;e=d;c[e>>2]=b;Qa(a|0,e|0)|0;i=d;return}function Dw(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;f=i;e=b+102796|0;g=c[e>>2]|0;if((g|0)>=32)Aa(8456,8360,38,8496);h=b+(g*12|0)+102412|0;c[b+(g*12|0)+102416>>2]=d;j=b+102400|0;k=c[j>>2]|0;if((k+d|0)>102400){c[h>>2]=CA(d)|0;a[b+(g*12|0)+102420>>0]=1}else{c[h>>2]=b+k;a[b+(g*12|0)+102420>>0]=0;c[j>>2]=(c[j>>2]|0)+d}k=b+102404|0;j=(c[k>>2]|0)+d|0;c[k>>2]=j;k=b+102408|0;d=c[k>>2]|0;c[k>>2]=(d|0)>(j|0)?d:j;c[e>>2]=(c[e>>2]|0)+1;i=f;return c[h>>2]|0}function Ew(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;f=i;e=b+102796|0;g=c[e>>2]|0;if((g|0)<=0)Aa(8512,8360,63,8536);h=g+ -1|0;if((c[b+(h*12|0)+102412>>2]|0)!=(d|0))Aa(8544,8360,65,8536);if((a[b+(h*12|0)+102420>>0]|0)==0){d=b+(h*12|0)+102416|0;h=b+102400|0;c[h>>2]=(c[h>>2]|0)-(c[d>>2]|0)}else{DA(d);d=b+(h*12|0)+102416|0;g=c[e>>2]|0}h=b+102404|0;c[h>>2]=(c[h>>2]|0)-(c[d>>2]|0);c[e>>2]=g+ -1;i=f;return}function Fw(a){a=a|0;var d=0,e=0,f=0,h=0,j=0.0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0.0,x=0,y=0.0;e=i;i=i+16|0;n=e;l=a+116|0;m=a+120|0;f=a+124|0;h=a+128|0;k=a+28|0;g[k>>2]=0.0;g[a+32>>2]=0.0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;o=c[a>>2]|0;if((o|0)==2){t=c[a+100>>2]|0;if((t|0)!=0){o=n+4|0;p=n+8|0;q=n+12|0;u=0.0;r=0.0;s=0.0;v=0.0;do{w=+g[t>>2];if(!(w==0.0)){x=c[t+12>>2]|0;rb[c[(c[x>>2]|0)+28>>2]&63](x,n,w);u=+g[n>>2];r=u+ +g[l>>2];g[l>>2]=r;s=s+u*+g[o>>2];v=v+u*+g[p>>2];u=+g[q>>2]+ +g[f>>2];g[f>>2]=u}t=c[t+4>>2]|0}while((t|0)!=0);if(r>0.0){w=1.0/r;g[m>>2]=w;s=s*w;v=v*w}else d=11}else{v=0.0;s=0.0;u=0.0;d=11}if((d|0)==11){g[l>>2]=1.0;g[m>>2]=1.0;r=1.0}do if(u>0.0?(b[a+4>>1]&16)==0:0){r=u-(v*v+s*s)*r;g[f>>2]=r;if(r>0.0){j=1.0/r;break}else Aa(9032,8592,319,9016)}else d=17;while(0);if((d|0)==17){g[f>>2]=0.0;j=0.0}g[h>>2]=j;x=a+44|0;t=x;w=+g[t>>2];r=+g[t+4>>2];y=+s;j=+v;t=k;g[t>>2]=y;g[t+4>>2]=j;j=+g[a+24>>2];y=+g[a+20>>2];u=+g[a+12>>2]+(j*s-y*v);s=s*y+j*v+ +g[a+16>>2];j=+u;v=+s;g[x>>2]=j;g[x+4>>2]=v;x=a+36|0;g[x>>2]=j;g[x+4>>2]=v;v=+g[a+72>>2];x=a+64|0;g[x>>2]=+g[x>>2]-v*(s-r);x=a+68|0;g[x>>2]=v*(u-w)+ +g[x>>2];i=e;return}else if((o|0)==1|(o|0)==0){t=a+12|0;q=c[t>>2]|0;t=c[t+4>>2]|0;x=a+36|0;c[x>>2]=q;c[x+4>>2]=t;x=a+44|0;c[x>>2]=q;c[x+4>>2]=t;g[a+52>>2]=+g[a+56>>2];i=e;return}else Aa(8984,8592,284,9016)}function Gw(a){a=a|0;var b=0,d=0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;b=i;i=i+16|0;e=b;k=+g[a+52>>2];l=+R(+k);g[e+8>>2]=l;k=+Q(+k);g[e+12>>2]=k;m=+g[a+28>>2];h=+g[a+32>>2];j=+(+g[a+36>>2]-(k*m-l*h));h=+(+g[a+40>>2]-(m*l+k*h));d=e;g[d>>2]=j;g[d+4>>2]=h;d=(c[a+88>>2]|0)+102872|0;f=c[a+100>>2]|0;if((f|0)==0){i=b;return}a=a+12|0;do{dx(f,d,e,a);f=c[f+4>>2]|0}while((f|0)!=0);i=b;return}function Hw(d,e){d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0;f=i;h=d+88|0;n=c[h>>2]|0;if((c[n+102868>>2]&2|0)!=0)Aa(8856,8592,153,8896);l=xw(n,44)|0;if((l|0)==0)l=0;else{b[l+32>>1]=1;b[l+34>>1]=-1;b[l+36>>1]=0;c[l+40>>2]=0;c[l+24>>2]=0;c[l+28>>2]=0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0}c[l+40>>2]=c[e+4>>2];g[l+16>>2]=+g[e+8>>2];g[l+20>>2]=+g[e+12>>2];j=l+8|0;c[j>>2]=d;k=l+4|0;c[k>>2]=0;m=l+32|0;p=e+22|0;b[m+0>>1]=b[p+0>>1]|0;b[m+2>>1]=b[p+2>>1]|0;b[m+4>>1]=b[p+4>>1]|0;a[l+38>>0]=a[e+20>>0]|0;m=c[e>>2]|0;m=tb[c[(c[m>>2]|0)+8>>2]&63](m,n)|0;c[l+12>>2]=m;m=nb[c[(c[m>>2]|0)+12>>2]&63](m)|0;p=xw(n,m*28|0)|0;n=l+24|0;c[n>>2]=p;if((m|0)>0){o=0;do{c[p+(o*28|0)+16>>2]=0;p=c[n>>2]|0;c[p+(o*28|0)+24>>2]=-1;o=o+1|0}while((o|0)!=(m|0))}c[l+28>>2]=0;q=+g[e+16>>2];g[l>>2]=q;if(!((b[d+4>>1]&32)==0)){bx(l,(c[h>>2]|0)+102872|0,d+12|0);q=+g[l>>2]}p=d+100|0;c[k>>2]=c[p>>2];c[p>>2]=l;p=d+104|0;c[p>>2]=(c[p>>2]|0)+1;c[j>>2]=d;if(!(q>0.0)){p=c[h>>2]|0;p=p+102868|0;o=c[p>>2]|0;o=o|1;c[p>>2]=o;i=f;return l|0}Fw(d);p=c[h>>2]|0;p=p+102868|0;o=c[p>>2]|0;o=o|1;c[p>>2]=o;i=f;return l|0}function Iw(b,d){b=b|0;d=d|0;var e=0,f=0;e=i;if((c[b>>2]|0)!=2?(c[d>>2]|0)!=2:0)d=0;else f=3;a:do if((f|0)==3){f=c[b+108>>2]|0;if((f|0)==0)d=1;else while(1){if((c[f>>2]|0)==(d|0)?(a[(c[f+4>>2]|0)+61>>0]|0)==0:0){d=0;break a}f=c[f+12>>2]|0;if((f|0)==0){d=1;break}}}while(0);i=e;return d|0}function Jw(a){a=a|0;var b=0,d=0,f=0,j=0,l=0,m=0.0;b=i;i=i+16|0;d=b;j=a+8|0;f=c[j>>2]|0;Cw(11576,d);Cw(9096,d);c[d>>2]=c[a>>2];Cw(9120,d);m=+g[a+16>>2];h[k>>3]=+g[a+12>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];l=d+8|0;h[k>>3]=m;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];Cw(9152,d);h[k>>3]=+g[a+56>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Cw(9192,d);m=+g[a+68>>2];h[k>>3]=+g[a+64>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];l=d+8|0;h[k>>3]=m;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];Cw(9216,d);h[k>>3]=+g[a+72>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Cw(9264,d);h[k>>3]=+g[a+132>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Cw(9304,d);h[k>>3]=+g[a+136>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Cw(9336,d);l=a+4|0;c[d>>2]=(e[l>>1]|0)&4;Cw(9368,d);c[d>>2]=(e[l>>1]|0)&2;Cw(9400,d);c[d>>2]=(e[l>>1]|0)&16;Cw(9424,d);c[d>>2]=(e[l>>1]|0)&8;Cw(9456,d);c[d>>2]=(e[l>>1]|0)&32;Cw(9488,d);h[k>>3]=+g[a+140>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Cw(9520,d);c[d>>2]=c[j>>2];Cw(9552,d);Cw(10864,d);a=c[a+100>>2]|0;if((a|0)==0){Cw(11584,d);i=b;return}do{Cw(9600,d);ex(a,f);Cw(9608,d);a=c[a+4>>2]|0}while((a|0)!=0);Cw(11584,d);i=b;return}function Kw(a){a=a|0;return}function Lw(a){a=a|0;return}function Mw(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;k=f+48|0;j=f+52|0;m=c[(c[k>>2]|0)+8>>2]|0;l=c[(c[j>>2]|0)+8>>2]|0;n=c[d+72>>2]|0;if((n|0)!=0?(c[f+4>>2]&2|0)!=0:0)lb[c[(c[n>>2]|0)+12>>2]&127](n,f);o=f+8|0;p=c[o>>2]|0;n=f+12|0;if((p|0)!=0)c[p+12>>2]=c[n>>2];p=c[n>>2]|0;if((p|0)!=0)c[p+8>>2]=c[o>>2];o=d+60|0;if((c[o>>2]|0)==(f|0))c[o>>2]=c[n>>2];o=f+24|0;p=c[o>>2]|0;n=f+28|0;if((p|0)!=0)c[p+12>>2]=c[n>>2];p=c[n>>2]|0;if((p|0)!=0)c[p+8>>2]=c[o>>2];m=m+112|0;if((f+16|0)==(c[m>>2]|0))c[m>>2]=c[n>>2];n=f+40|0;o=c[n>>2]|0;m=f+44|0;if((o|0)!=0)c[o+12>>2]=c[m>>2];o=c[m>>2]|0;if((o|0)!=0)c[o+8>>2]=c[n>>2];l=l+112|0;if((f+32|0)==(c[l>>2]|0))c[l>>2]=c[m>>2];l=c[d+76>>2]|0;if((a[12896]|0)==0)Aa(13056,12952,103,15256);k=c[k>>2]|0;if((c[f+124>>2]|0)>0){m=c[k+8>>2]|0;n=m+4|0;o=e[n>>1]|0;if((o&2|0)==0){b[n>>1]=o|2;g[m+144>>2]=0.0}o=c[j>>2]|0;m=c[o+8>>2]|0;j=m+4|0;n=e[j>>1]|0;if((n&2|0)==0){b[j>>1]=n|2;g[m+144>>2]=0.0}}else o=c[j>>2]|0;j=c[(c[k+12>>2]|0)+4>>2]|0;k=c[(c[o+12>>2]|0)+4>>2]|0;if((j|0)>-1&(k|0)<4){lb[c[12704+(j*48|0)+(k*12|0)+4>>2]&127](f,l);p=d+64|0;c[p>>2]=(c[p>>2]|0)+ -1;i=h;return}else Aa(13080,12952,114,15256)}function Nw(d){d=d|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;j=i;i=i+1040|0;l=j;f=d+52|0;c[f>>2]=0;k=d+40|0;y=c[k>>2]|0;do if((y|0)>0){u=d+32|0;p=d+56|0;t=d+12|0;r=d+4|0;q=l+4|0;v=l+1028|0;s=l+1032|0;o=d+48|0;m=d+44|0;x=0;while(1){B=c[(c[u>>2]|0)+(x<<2)>>2]|0;c[p>>2]=B;if(!((B|0)==-1)){if(!((B|0)>-1)){o=7;break}if((c[t>>2]|0)<=(B|0)){o=7;break}C=c[r>>2]|0;c[l>>2]=q;c[v>>2]=0;c[s>>2]=256;Uw(l,d);if((c[v>>2]|0)>0){A=C+(B*36|0)|0;y=C+(B*36|0)+4|0;z=C+(B*36|0)+8|0;B=C+(B*36|0)+12|0;do{C=Vw(l)|0;do if(!((C|0)==-1)?(w=c[r>>2]|0,!((+g[A>>2]- +g[w+(C*36|0)+8>>2]>0.0?1:+g[y>>2]- +g[w+(C*36|0)+12>>2]>0.0)|+g[w+(C*36|0)>>2]- +g[z>>2]>0.0|+g[w+(C*36|0)+4>>2]- +g[B>>2]>0.0)):0){D=w+(C*36|0)+24|0;if(!((c[D>>2]|0)==-1)){Uw(l,D);Uw(l,w+(C*36|0)+28|0);break}E=c[p>>2]|0;if((E|0)!=(C|0)){D=c[f>>2]|0;if((D|0)==(c[o>>2]|0)){E=c[m>>2]|0;c[o>>2]=D<<1;D=CA(D*24|0)|0;c[m>>2]=D;HA(D|0,E|0,(c[f>>2]|0)*12|0)|0;DA(E);E=c[p>>2]|0;D=c[f>>2]|0}F=c[m>>2]|0;c[F+(D*12|0)>>2]=(E|0)>(C|0)?C:E;E=c[p>>2]|0;c[F+((c[f>>2]|0)*12|0)+4>>2]=(E|0)<(C|0)?C:E;c[f>>2]=(c[f>>2]|0)+1}}while(0)}while((c[v>>2]|0)>0)}y=c[l>>2]|0;if((y|0)!=(q|0)){DA(y);c[l>>2]=0}y=c[k>>2]|0}x=x+1|0;if((x|0)>=(y|0)){o=23;break}}if((o|0)==7)Aa(11760,11704,159,11824);else if((o|0)==23){h=m;n=c[f>>2]|0;break}}else{h=d+44|0;n=0}while(0);c[k>>2]=0;F=c[h>>2]|0;c[l>>2]=57;Pw(F,F+(n*12|0)|0,l);if((c[f>>2]|0)<=0){i=j;return}k=d+12|0;o=d+4|0;n=d+68|0;m=d+76|0;l=d+60|0;p=d+64|0;s=c[h>>2]|0;q=s;s=c[s>>2]|0;r=0;a:while(1){d=q+(r*12|0)|0;if(!((s|0)>-1)){o=28;break}u=c[k>>2]|0;if((u|0)<=(s|0)){o=28;break}t=c[o>>2]|0;q=q+(r*12|0)+4|0;v=c[q>>2]|0;if(!((v|0)>-1&(u|0)>(v|0))){o=30;break}s=c[t+(s*36|0)+16>>2]|0;v=c[t+(v*36|0)+16>>2]|0;u=c[s+16>>2]|0;t=c[v+16>>2]|0;s=c[s+20>>2]|0;v=c[v+20>>2]|0;x=c[u+8>>2]|0;w=c[t+8>>2]|0;b:do if((x|0)!=(w|0)){z=c[w+112>>2]|0;if((z|0)!=0)do{if((c[z>>2]|0)==(x|0)){y=c[z+4>>2]|0;C=c[y+48>>2]|0;B=c[y+52>>2]|0;A=c[y+56>>2]|0;y=c[y+60>>2]|0;if((C|0)==(u|0)&(B|0)==(t|0)&(A|0)==(s|0)&(y|0)==(v|0))break b;if((C|0)==(t|0)&(B|0)==(u|0)&(A|0)==(v|0)&(y|0)==(s|0))break b}z=c[z+12>>2]|0}while((z|0)!=0);if(Iw(w,x)|0){w=c[n>>2]|0;if((w|0)!=0?!(gb[c[(c[w>>2]|0)+8>>2]&63](w,u,t)|0):0)break;w=c[m>>2]|0;if((a[12896]|0)==0){c[3176]=46;c[3177]=91;a[12712]=1;c[3200]=47;c[3201]=92;a[12808]=1;c[3182]=47;c[3183]=92;a[12736]=0;c[3206]=48;c[3207]=93;a[12832]=1;c[3188]=49;c[3189]=94;a[12760]=1;c[3179]=49;c[3180]=94;a[12724]=0;c[3194]=50;c[3195]=95;a[12784]=1;c[3203]=50;c[3204]=95;a[12820]=0;c[3212]=51;c[3213]=96;a[12856]=1;c[3185]=51;c[3186]=96;a[12748]=0;c[3218]=52;c[3219]=97;a[12880]=1;c[3209]=52;c[3210]=97;a[12844]=0;a[12896]=1}x=c[(c[u+12>>2]|0)+4>>2]|0;y=c[(c[t+12>>2]|0)+4>>2]|0;if(!(x>>>0<4)){o=43;break a}if(!(y>>>0<4)){o=45;break a}z=c[12704+(x*48|0)+(y*12|0)>>2]|0;if((z|0)!=0){if((a[12704+(x*48|0)+(y*12|0)+8>>0]|0)==0)u=ub[z&63](t,v,u,s,w)|0;else u=ub[z&63](u,s,t,v,w)|0;if((u|0)!=0){t=c[(c[u+48>>2]|0)+8>>2]|0;s=c[(c[u+52>>2]|0)+8>>2]|0;c[u+8>>2]=0;c[u+12>>2]=c[l>>2];v=c[l>>2]|0;if((v|0)!=0)c[v+8>>2]=u;c[l>>2]=u;w=u+16|0;c[u+20>>2]=u;c[w>>2]=s;c[u+24>>2]=0;v=t+112|0;c[u+28>>2]=c[v>>2];x=c[v>>2]|0;if((x|0)!=0)c[x+8>>2]=w;c[v>>2]=w;w=u+32|0;c[u+36>>2]=u;c[w>>2]=t;c[u+40>>2]=0;v=s+112|0;c[u+44>>2]=c[v>>2];u=c[v>>2]|0;if((u|0)!=0)c[u+8>>2]=w;c[v>>2]=w;u=t+4|0;v=e[u>>1]|0;if((v&2|0)==0){b[u>>1]=v|2;g[t+144>>2]=0.0}t=s+4|0;u=e[t>>1]|0;if((u&2|0)==0){b[t>>1]=u|2;g[s+144>>2]=0.0}c[p>>2]=(c[p>>2]|0)+1}}}}while(0);t=c[f>>2]|0;while(1){r=r+1|0;if((r|0)>=(t|0)){o=66;break a}u=c[h>>2]|0;s=c[u+(r*12|0)>>2]|0;if((s|0)!=(c[d>>2]|0)){q=u;continue a}if((c[u+(r*12|0)+4>>2]|0)!=(c[q>>2]|0)){q=u;continue a}}}if((o|0)==28)Aa(11760,11704,153,11808);else if((o|0)==30)Aa(11760,11704,153,11808);else if((o|0)==43)Aa(12904,12952,80,15248);else if((o|0)==45)Aa(13008,12952,81,15248);else if((o|0)==66){i=j;return}}function Ow(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;f=c[a>>2]|0;e=c[b>>2]|0;if((f|0)>=(e|0))if((f|0)==(e|0))a=(c[a+4>>2]|0)<(c[b+4>>2]|0);else a=0;else a=1;i=d;return a|0}function Pw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;e=f;a:while(1){j=b;h=b+ -12|0;b:while(1){k=a;n=j-k|0;switch((n|0)/12|0|0){case 4:{g=7;break a};case 5:{g=8;break a};case 2:{g=4;break a};case 3:{g=6;break a};case 1:case 0:{g=51;break a};default:{}}if((n|0)<372){g=10;break a}l=(n|0)/24|0;m=a+(l*12|0)|0;if((n|0)>11988){n=(n|0)/48|0;n=Sw(a,a+(n*12|0)|0,m,a+((n+l|0)*12|0)|0,h,d)|0}else n=Qw(a,m,h,d)|0;do if(tb[c[d>>2]&63](a,m)|0)o=h;else{o=h;while(1){o=o+ -12|0;if((a|0)==(o|0))break;if(tb[c[d>>2]&63](o,m)|0){g=34;break}}if((g|0)==34){g=0;c[e+0>>2]=c[a+0>>2];c[e+4>>2]=c[a+4>>2];c[e+8>>2]=c[a+8>>2];c[a+0>>2]=c[o+0>>2];c[a+4>>2]=c[o+4>>2];c[a+8>>2]=c[o+8>>2];c[o+0>>2]=c[e+0>>2];c[o+4>>2]=c[e+4>>2];c[o+8>>2]=c[e+8>>2];n=n+1|0;break}k=a+12|0;if(!(tb[c[d>>2]&63](a,h)|0)){if((k|0)==(h|0)){g=51;break a}while(1){l=k+12|0;if(tb[c[d>>2]&63](a,k)|0)break;if((l|0)==(h|0)){g=51;break a}else k=l}c[e+0>>2]=c[k+0>>2];c[e+4>>2]=c[k+4>>2];c[e+8>>2]=c[k+8>>2];c[k+0>>2]=c[h+0>>2];c[k+4>>2]=c[h+4>>2];c[k+8>>2]=c[h+8>>2];c[h+0>>2]=c[e+0>>2];c[h+4>>2]=c[e+4>>2];c[h+8>>2]=c[e+8>>2];k=l}if((k|0)==(h|0)){g=51;break a}else l=h;while(1){m=k;while(1){k=m+12|0;if(tb[c[d>>2]&63](a,m)|0)break;else m=k}do l=l+ -12|0;while(tb[c[d>>2]&63](a,l)|0);if(!(m>>>0<l>>>0)){a=m;continue b}c[e+0>>2]=c[m+0>>2];c[e+4>>2]=c[m+4>>2];c[e+8>>2]=c[m+8>>2];c[m+0>>2]=c[l+0>>2];c[m+4>>2]=c[l+4>>2];c[m+8>>2]=c[l+8>>2];c[l+0>>2]=c[e+0>>2];c[l+4>>2]=c[e+4>>2];c[l+8>>2]=c[e+8>>2]}}while(0);l=a+12|0;c:do if(l>>>0<o>>>0)while(1){q=l;while(1){l=q+12|0;if(tb[c[d>>2]&63](q,m)|0)q=l;else{p=o;break}}do p=p+ -12|0;while(!(tb[c[d>>2]&63](p,m)|0));if(q>>>0>p>>>0){l=q;break c}c[e+0>>2]=c[q+0>>2];c[e+4>>2]=c[q+4>>2];c[e+8>>2]=c[q+8>>2];c[q+0>>2]=c[p+0>>2];c[q+4>>2]=c[p+4>>2];c[q+8>>2]=c[p+8>>2];c[p+0>>2]=c[e+0>>2];c[p+4>>2]=c[e+4>>2];c[p+8>>2]=c[e+8>>2];o=p;m=(m|0)==(q|0)?p:m;n=n+1|0}while(0);if((l|0)!=(m|0)?tb[c[d>>2]&63](m,l)|0:0){c[e+0>>2]=c[l+0>>2];c[e+4>>2]=c[l+4>>2];c[e+8>>2]=c[l+8>>2];c[l+0>>2]=c[m+0>>2];c[l+4>>2]=c[m+4>>2];c[l+8>>2]=c[m+8>>2];c[m+0>>2]=c[e+0>>2];c[m+4>>2]=c[e+4>>2];c[m+8>>2]=c[e+8>>2];n=n+1|0}if((n|0)==0){m=Tw(a,l,d)|0;n=l+12|0;if(Tw(n,b,d)|0){g=46;break}if(m){a=n;continue}}q=l;if((q-k|0)>=(j-q|0)){g=50;break}Pw(a,l,d);a=l+12|0}if((g|0)==46){g=0;if(m){g=51;break}else{b=l;continue}}else if((g|0)==50){g=0;Pw(l+12|0,b,d);b=l;continue}}if((g|0)==4){if(!(tb[c[d>>2]&63](h,a)|0)){i=f;return}c[e+0>>2]=c[a+0>>2];c[e+4>>2]=c[a+4>>2];c[e+8>>2]=c[a+8>>2];c[a+0>>2]=c[h+0>>2];c[a+4>>2]=c[h+4>>2];c[a+8>>2]=c[h+8>>2];c[h+0>>2]=c[e+0>>2];c[h+4>>2]=c[e+4>>2];c[h+8>>2]=c[e+8>>2];i=f;return}else if((g|0)==6){Qw(a,a+12|0,h,d)|0;i=f;return}else if((g|0)==7){Rw(a,a+12|0,a+24|0,h,d)|0;i=f;return}else if((g|0)==8){Sw(a,a+12|0,a+24|0,a+36|0,h,d)|0;i=f;return}else if((g|0)==10){j=a+24|0;Qw(a,a+12|0,j,d)|0;g=a+36|0;if((g|0)==(b|0)){i=f;return}while(1){if(tb[c[d>>2]&63](g,j)|0){c[e+0>>2]=c[g+0>>2];c[e+4>>2]=c[g+4>>2];c[e+8>>2]=c[g+8>>2];h=g;while(1){c[h+0>>2]=c[j+0>>2];c[h+4>>2]=c[j+4>>2];c[h+8>>2]=c[j+8>>2];if((j|0)==(a|0))break;h=j+ -12|0;if(tb[c[d>>2]&63](e,h)|0){q=j;j=h;h=q}else break}c[j+0>>2]=c[e+0>>2];c[j+4>>2]=c[e+4>>2];c[j+8>>2]=c[e+8>>2]}h=g+12|0;if((h|0)==(b|0))break;else{j=g;g=h}}i=f;return}else if((g|0)==51){i=f;return}}function Qw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;i=i+16|0;g=f;j=tb[c[e>>2]&63](b,a)|0;h=tb[c[e>>2]&63](d,b)|0;if(!j){if(!h){j=0;i=f;return j|0}c[g+0>>2]=c[b+0>>2];c[g+4>>2]=c[b+4>>2];c[g+8>>2]=c[b+8>>2];c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[d+0>>2]=c[g+0>>2];c[d+4>>2]=c[g+4>>2];c[d+8>>2]=c[g+8>>2];if(!(tb[c[e>>2]&63](b,a)|0)){j=1;i=f;return j|0}c[g+0>>2]=c[a+0>>2];c[g+4>>2]=c[a+4>>2];c[g+8>>2]=c[a+8>>2];c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[b+0>>2]=c[g+0>>2];c[b+4>>2]=c[g+4>>2];c[b+8>>2]=c[g+8>>2];j=2;i=f;return j|0}if(h){c[g+0>>2]=c[a+0>>2];c[g+4>>2]=c[a+4>>2];c[g+8>>2]=c[a+8>>2];c[a+0>>2]=c[d+0>>2];c[a+4>>2]=c[d+4>>2];c[a+8>>2]=c[d+8>>2];c[d+0>>2]=c[g+0>>2];c[d+4>>2]=c[g+4>>2];c[d+8>>2]=c[g+8>>2];j=1;i=f;return j|0}c[g+0>>2]=c[a+0>>2];c[g+4>>2]=c[a+4>>2];c[g+8>>2]=c[a+8>>2];c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[b+0>>2]=c[g+0>>2];c[b+4>>2]=c[g+4>>2];c[b+8>>2]=c[g+8>>2];if(!(tb[c[e>>2]&63](d,b)|0)){j=1;i=f;return j|0}c[g+0>>2]=c[b+0>>2];c[g+4>>2]=c[b+4>>2];c[g+8>>2]=c[b+8>>2];c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[d+0>>2]=c[g+0>>2];c[d+4>>2]=c[g+4>>2];c[d+8>>2]=c[g+8>>2];j=2;i=f;return j|0}function Rw(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;i=i+16|0;j=g;h=Qw(a,b,d,f)|0;if(!(tb[c[f>>2]&63](e,d)|0)){e=h;i=g;return e|0}c[j+0>>2]=c[d+0>>2];c[j+4>>2]=c[d+4>>2];c[j+8>>2]=c[d+8>>2];c[d+0>>2]=c[e+0>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[e+0>>2]=c[j+0>>2];c[e+4>>2]=c[j+4>>2];c[e+8>>2]=c[j+8>>2];if(!(tb[c[f>>2]&63](d,b)|0)){e=h+1|0;i=g;return e|0}c[j+0>>2]=c[b+0>>2];c[j+4>>2]=c[b+4>>2];c[j+8>>2]=c[b+8>>2];c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[d+0>>2]=c[j+0>>2];c[d+4>>2]=c[j+4>>2];c[d+8>>2]=c[j+8>>2];if(!(tb[c[f>>2]&63](b,a)|0)){e=h+2|0;i=g;return e|0}c[j+0>>2]=c[a+0>>2];c[j+4>>2]=c[a+4>>2];c[j+8>>2]=c[a+8>>2];c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[b+0>>2]=c[j+0>>2];c[b+4>>2]=c[j+4>>2];c[b+8>>2]=c[j+8>>2];e=h+3|0;i=g;return e|0}function Sw(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;i=i+16|0;k=h;j=Rw(a,b,d,e,g)|0;if(!(tb[c[g>>2]&63](f,e)|0)){f=j;i=h;return f|0}c[k+0>>2]=c[e+0>>2];c[k+4>>2]=c[e+4>>2];c[k+8>>2]=c[e+8>>2];c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[f+0>>2]=c[k+0>>2];c[f+4>>2]=c[k+4>>2];c[f+8>>2]=c[k+8>>2];if(!(tb[c[g>>2]&63](e,d)|0)){f=j+1|0;i=h;return f|0}c[k+0>>2]=c[d+0>>2];c[k+4>>2]=c[d+4>>2];c[k+8>>2]=c[d+8>>2];c[d+0>>2]=c[e+0>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[e+0>>2]=c[k+0>>2];c[e+4>>2]=c[k+4>>2];c[e+8>>2]=c[k+8>>2];if(!(tb[c[g>>2]&63](d,b)|0)){f=j+2|0;i=h;return f|0}c[k+0>>2]=c[b+0>>2];c[k+4>>2]=c[b+4>>2];c[k+8>>2]=c[b+8>>2];c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[d+0>>2]=c[k+0>>2];c[d+4>>2]=c[k+4>>2];c[d+8>>2]=c[k+8>>2];if(!(tb[c[g>>2]&63](b,a)|0)){f=j+3|0;i=h;return f|0}c[k+0>>2]=c[a+0>>2];c[k+4>>2]=c[a+4>>2];c[k+8>>2]=c[a+8>>2];c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[b+0>>2]=c[k+0>>2];c[b+4>>2]=c[k+4>>2];c[b+8>>2]=c[k+8>>2];f=j+4|0;i=h;return f|0}function Tw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;i=i+32|0;h=e+12|0;g=e;switch((b-a|0)/12|0|0){case 4:{Rw(a,a+12|0,a+24|0,b+ -12|0,d)|0;l=1;i=e;return l|0};case 3:{Qw(a,a+12|0,b+ -12|0,d)|0;l=1;i=e;return l|0};case 2:{f=b+ -12|0;if(!(tb[c[d>>2]&63](f,a)|0)){l=1;i=e;return l|0}c[h+0>>2]=c[a+0>>2];c[h+4>>2]=c[a+4>>2];c[h+8>>2]=c[a+8>>2];c[a+0>>2]=c[f+0>>2];c[a+4>>2]=c[f+4>>2];c[a+8>>2]=c[f+8>>2];c[f+0>>2]=c[h+0>>2];c[f+4>>2]=c[h+4>>2];c[f+8>>2]=c[h+8>>2];l=1;i=e;return l|0};case 1:case 0:{l=1;i=e;return l|0};case 5:{Sw(a,a+12|0,a+24|0,a+36|0,b+ -12|0,d)|0;l=1;i=e;return l|0};default:{k=a+24|0;Qw(a,a+12|0,k,d)|0;h=a+36|0;if((h|0)==(b|0)){l=1;i=e;return l|0}j=0;while(1){if(tb[c[d>>2]&63](h,k)|0){c[g+0>>2]=c[h+0>>2];c[g+4>>2]=c[h+4>>2];c[g+8>>2]=c[h+8>>2];l=h;while(1){c[l+0>>2]=c[k+0>>2];c[l+4>>2]=c[k+4>>2];c[l+8>>2]=c[k+8>>2];if((k|0)==(a|0))break;l=k+ -12|0;if(tb[c[d>>2]&63](g,l)|0){m=k;k=l;l=m}else break}c[k+0>>2]=c[g+0>>2];c[k+4>>2]=c[g+4>>2];c[k+8>>2]=c[g+8>>2];j=j+1|0;if((j|0)==8)break}k=h+12|0;if((k|0)==(b|0)){a=1;f=16;break}else{m=h;h=k;k=m}}if((f|0)==16){i=e;return a|0}m=(h+12|0)==(b|0);i=e;return m|0}}return 0}function Uw(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;e=i;d=a+1028|0;f=c[d>>2]|0;g=a+1032|0;if((f|0)==(c[g>>2]|0)?(h=c[a>>2]|0,c[g>>2]=f<<1,g=CA(f<<3)|0,c[a>>2]=g,HA(g|0,h|0,c[d>>2]<<2|0)|0,(h|0)!=(a+4|0)):0)DA(h);c[(c[a>>2]|0)+(c[d>>2]<<2)>>2]=c[b>>2];c[d>>2]=(c[d>>2]|0)+1;i=e;return}function Vw(a){a=a|0;var b=0,d=0;b=a+1028|0;d=c[b>>2]|0;if((d|0)>0){d=d+ -1|0;c[b>>2]=d;return c[(c[a>>2]|0)+(d<<2)>>2]|0}else Aa(9632,9648,67,9696);return 0}function Ww(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Xw(a,b){a=a|0;b=b|0;return}function Yw(a,b){a=a|0;b=b|0;return}function Zw(a,b,c){a=a|0;b=b|0;c=c|0;return}function _w(a,b,c){a=a|0;b=b|0;c=c|0;return}function $w(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function ax(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;if((c[a+28>>2]|0)!=0)Aa(9736,9760,72,15256);e=a+12|0;f=c[e>>2]|0;f=nb[c[(c[f>>2]|0)+12>>2]&63](f)|0;a=a+24|0;yw(b,c[a>>2]|0,f*28|0);c[a>>2]=0;a=c[e>>2]|0;f=c[a+4>>2]|0;if((f|0)==2){jb[c[c[a>>2]>>2]&127](a);yw(b,a,152);c[e>>2]=0;i=d;return}else if((f|0)==3){jb[c[c[a>>2]>>2]&127](a);yw(b,a,40);c[e>>2]=0;i=d;return}else if((f|0)==1){jb[c[c[a>>2]>>2]&127](a);yw(b,a,48);c[e>>2]=0;i=d;return}else if((f|0)==0){jb[c[c[a>>2]>>2]&127](a);yw(b,a,20);c[e>>2]=0;i=d;return}else Aa(15192,9760,115,15256)}function bx(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0;e=i;f=a+28|0;if((c[f>>2]|0)!=0)Aa(9736,9760,124,9808);h=a+12|0;m=c[h>>2]|0;m=nb[c[(c[m>>2]|0)+12>>2]&63](m)|0;c[f>>2]=m;if((m|0)<=0){i=e;return}j=a+24|0;k=b+4|0;l=b+28|0;m=0;do{n=c[j>>2]|0;p=n+(m*28|0)|0;o=c[h>>2]|0;vb[c[(c[o>>2]|0)+24>>2]&63](o,p,d,m);o=Rv(b)|0;r=+(+g[p>>2]+-.10000000149011612);s=+(+g[n+(m*28|0)+4>>2]+-.10000000149011612);q=(c[k>>2]|0)+(o*36|0)|0;g[q>>2]=r;g[q+4>>2]=s;s=+(+g[n+(m*28|0)+8>>2]+.10000000149011612);r=+(+g[n+(m*28|0)+12>>2]+.10000000149011612);q=(c[k>>2]|0)+(o*36|0)+8|0;g[q>>2]=s;g[q+4>>2]=r;c[(c[k>>2]|0)+(o*36|0)+16>>2]=p;c[(c[k>>2]|0)+(o*36|0)+32>>2]=0;Tv(b,o);c[l>>2]=(c[l>>2]|0)+1;Hv(b,o);c[n+(m*28|0)+24>>2]=o;c[n+(m*28|0)+16>>2]=a;c[n+(m*28|0)+20>>2]=m;m=m+1|0}while((m|0)<(c[f>>2]|0));i=e;return}function cx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;d=a+28|0;if((c[d>>2]|0)<=0){c[d>>2]=0;i=e;return}k=a+24|0;a=b+40|0;j=b+32|0;h=b+28|0;g=b+12|0;f=b+4|0;m=0;while(1){o=(c[k>>2]|0)+(m*28|0)+24|0;n=c[o>>2]|0;p=c[a>>2]|0;a:do if((p|0)>0){r=c[j>>2]|0;q=0;while(1){l=r+(q<<2)|0;q=q+1|0;if((c[l>>2]|0)==(n|0))break;if((q|0)>=(p|0))break a}c[l>>2]=-1}while(0);c[h>>2]=(c[h>>2]|0)+ -1;if(!((n|0)>-1)){b=10;break}if((c[g>>2]|0)<=(n|0)){b=10;break}if(!((c[(c[f>>2]|0)+(n*36|0)+24>>2]|0)==-1)){b=12;break}Uv(b,n);Sv(b,n);c[o>>2]=-1;m=m+1|0;if((m|0)>=(c[d>>2]|0)){b=14;break}}if((b|0)==10)Aa(11760,5696,126,5832);else if((b|0)==12)Aa(5848,5696,127,5832);else if((b|0)==14){c[d>>2]=0;i=e;return}}function dx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0.0,H=0.0,I=0;f=i;i=i+32|0;j=f+16|0;k=f;h=a+28|0;if((c[h>>2]|0)<=0){i=f;return}l=a+24|0;o=a+12|0;p=j+4|0;q=k+4|0;r=j+8|0;s=k+8|0;t=j+12|0;u=k+12|0;v=e+4|0;w=d+4|0;m=b+12|0;a=b+4|0;n=0;while(1){F=c[l>>2]|0;D=c[o>>2]|0;E=F+(n*28|0)+20|0;vb[c[(c[D>>2]|0)+24>>2]&63](D,j,d,c[E>>2]|0);D=c[o>>2]|0;vb[c[(c[D>>2]|0)+24>>2]&63](D,k,e,c[E>>2]|0);E=F+(n*28|0)|0;z=+g[j>>2];B=+g[k>>2];B=z<B?z:B;z=+g[p>>2];H=+g[q>>2];A=+B;H=+(z<H?z:H);D=E;g[D>>2]=A;g[D+4>>2]=H;D=F+(n*28|0)+8|0;H=+g[r>>2];A=+g[s>>2];A=H>A?H:A;H=+g[t>>2];z=+g[u>>2];y=+A;z=+(H>z?H:z);x=D;g[x>>2]=y;g[x+4>>2]=z;z=+g[e>>2]- +g[d>>2];y=+g[v>>2]- +g[w>>2];x=c[F+(n*28|0)+24>>2]|0;if(!((x|0)>-1)){b=5;break}if((c[m>>2]|0)<=(x|0)){b=5;break}I=c[a>>2]|0;if(!((c[I+(x*36|0)+24>>2]|0)==-1)){b=7;break}if(!(((+g[I+(x*36|0)>>2]<=B?+g[I+(x*36|0)+4>>2]<=+g[F+(n*28|0)+4>>2]:0)?A<=+g[I+(x*36|0)+8>>2]:0)?+g[F+(n*28|0)+12>>2]<=+g[I+(x*36|0)+12>>2]:0)){Uv(b,x);I=E;H=+g[I>>2];B=+g[I+4>>2];I=D;C=+g[I>>2];H=H+-.10000000149011612;B=B+-.10000000149011612;C=C+.10000000149011612;A=+g[I+4>>2]+.10000000149011612;G=z*2.0;z=y*2.0;if(G<0.0)y=H+G;else{y=H;C=G+C}if(z<0.0)B=B+z;else A=z+A;I=c[a>>2]|0;H=+y;G=+B;F=I+(x*36|0)|0;g[F>>2]=H;g[F+4>>2]=G;G=+C;H=+A;I=I+(x*36|0)+8|0;g[I>>2]=G;g[I+4>>2]=H;Tv(b,x);Hv(b,x)}n=n+1|0;if((n|0)>=(c[h>>2]|0)){b=20;break}}if((b|0)==5)Aa(11760,5696,135,5880);else if((b|0)==7)Aa(5848,5696,137,5880);else if((b|0)==20){i=f;return}}function ex(a,f){a=a|0;f=f|0;var j=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0;j=i;i=i+32|0;l=j;Cw(9824,l);h[k>>3]=+g[a+16>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];Cw(9848,l);h[k>>3]=+g[a+20>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];Cw(9880,l);h[k>>3]=+g[a>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];Cw(9912,l);c[l>>2]=d[a+38>>0];Cw(9944,l);c[l>>2]=e[a+32>>1];Cw(9976,l);c[l>>2]=e[a+34>>1];Cw(10024,l);c[l>>2]=b[a+36>>1];Cw(10064,l);a=c[a+12>>2]|0;m=c[a+4>>2]|0;if((m|0)==3){Cw(10624,l);m=a+16|0;c[l>>2]=c[m>>2];Cw(10536,l);o=c[m>>2]|0;if((o|0)>0){p=a+12|0;n=0;do{o=c[p>>2]|0;r=+g[o+(n<<3)>>2];q=+g[o+(n<<3)+4>>2];c[l>>2]=n;o=l+4|0;h[k>>3]=r;c[o>>2]=c[k>>2];c[o+4>>2]=c[k+4>>2];o=l+12|0;h[k>>3]=q;c[o>>2]=c[k>>2];c[o+4>>2]=c[k+4>>2];Cw(10560,l);n=n+1|0;o=c[m>>2]|0}while((n|0)<(o|0))}c[l>>2]=o;Cw(10656,l);p=a+20|0;r=+g[p+4>>2];h[k>>3]=+g[p>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];p=l+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Cw(10688,l);p=a+28|0;r=+g[p+4>>2];h[k>>3]=+g[p>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];p=l+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Cw(10736,l);c[l>>2]=d[a+36>>0];Cw(10784,l);c[l>>2]=d[a+37>>0];Cw(10824,l)}else if((m|0)==2){Cw(10504,l);c[l>>2]=8;Cw(10536,l);m=a+148|0;o=c[m>>2]|0;if((o|0)>0){a=a+20|0;n=0;do{q=+g[a+(n<<3)>>2];r=+g[a+(n<<3)+4>>2];c[l>>2]=n;o=l+4|0;h[k>>3]=q;c[o>>2]=c[k>>2];c[o+4>>2]=c[k+4>>2];o=l+12|0;h[k>>3]=r;c[o>>2]=c[k>>2];c[o+4>>2]=c[k+4>>2];Cw(10560,l);n=n+1|0;o=c[m>>2]|0}while((n|0)<(o|0))}c[l>>2]=o;Cw(10600,l)}else if((m|0)==0){Cw(10104,l);h[k>>3]=+g[a+8>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];Cw(10136,l);r=+g[a+16>>2];h[k>>3]=+g[a+12>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];p=l+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Cw(10168,l)}else if((m|0)==1){Cw(10208,l);h[k>>3]=+g[a+8>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];Cw(10136,l);p=a+28|0;r=+g[p+4>>2];h[k>>3]=+g[p>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];p=l+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Cw(10232,l);r=+g[a+16>>2];h[k>>3]=+g[a+12>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];p=l+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Cw(10280,l);p=a+20|0;r=+g[p+4>>2];h[k>>3]=+g[p>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];p=l+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Cw(10328,l);r=+g[a+40>>2];h[k>>3]=+g[a+36>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];p=l+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Cw(10376,l);c[l>>2]=d[a+44>>0];Cw(10424,l);c[l>>2]=d[a+45>>0];Cw(10464,l)}else{i=j;return}Cw(10864,l);Cw(10872,l);Cw(10864,l);c[l>>2]=f;Cw(10896,l);i=j;return}function fx(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0;h=i;j=a+40|0;c[j>>2]=b;c[a+44>>2]=d;c[a+48>>2]=e;c[a+28>>2]=0;c[a+36>>2]=0;c[a+32>>2]=0;c[a>>2]=f;c[a+4>>2]=g;c[a+8>>2]=Dw(f,b<<2)|0;c[a+12>>2]=Dw(c[a>>2]|0,d<<2)|0;c[a+16>>2]=Dw(c[a>>2]|0,e<<2)|0;c[a+24>>2]=Dw(c[a>>2]|0,(c[j>>2]|0)*12|0)|0;c[a+20>>2]=Dw(c[a>>2]|0,(c[j>>2]|0)*12|0)|0;i=h;return}function gx(a){a=a|0;var b=0;b=i;Ew(c[a>>2]|0,c[a+20>>2]|0);Ew(c[a>>2]|0,c[a+24>>2]|0);Ew(c[a>>2]|0,c[a+16>>2]|0);Ew(c[a>>2]|0,c[a+12>>2]|0);Ew(c[a>>2]|0,c[a+8>>2]|0);i=b;return}function hx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0;h=i;i=i+32|0;e=h;d=a+4|0;if((c[d>>2]|0)==0){i=h;return}f=a+36|0;if((c[f>>2]|0)<=0){i=h;return}n=a+12|0;k=e+16|0;l=0;do{m=c[(c[n>>2]|0)+(l<<2)>>2]|0;j=c[b+(l*152|0)+144>>2]|0;c[k>>2]=j;if((j|0)>0){a=0;do{g[e+(a<<2)>>2]=+g[b+(l*152|0)+(a*36|0)+16>>2];g[e+(a<<2)+8>>2]=+g[b+(l*152|0)+(a*36|0)+20>>2];a=a+1|0}while((a|0)<(j|0))}j=c[d>>2]|0;pb[c[(c[j>>2]|0)+20>>2]&63](j,m,e);l=l+1|0}while((l|0)<(c[f>>2]|0));i=h;return}function ix(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0;h=i;if((c[d+102868>>2]&2|0)!=0)Aa(11032,11056,274,11160);j=a[f+61>>0]|0;l=f+8|0;m=c[l>>2]|0;k=f+12|0;if((m|0)!=0)c[m+12>>2]=c[k>>2];m=c[k>>2]|0;if((m|0)!=0)c[m+8>>2]=c[l>>2];l=d+102956|0;if((c[l>>2]|0)==(f|0))c[l>>2]=c[k>>2];k=c[f+48>>2]|0;l=c[f+52>>2]|0;n=k+4|0;m=e[n>>1]|0;if((m&2|0)==0){b[n>>1]=m|2;g[k+144>>2]=0.0}m=l+4|0;n=e[m>>1]|0;if((n&2|0)==0){b[m>>1]=n|2;g[l+144>>2]=0.0}n=f+24|0;o=c[n>>2]|0;m=f+28|0;if((o|0)!=0)c[o+12>>2]=c[m>>2];o=c[m>>2]|0;if((o|0)!=0)c[o+8>>2]=c[n>>2];o=k+108|0;if((f+16|0)==(c[o>>2]|0))c[o>>2]=c[m>>2];c[n>>2]=0;c[m>>2]=0;n=f+40|0;o=c[n>>2]|0;m=f+44|0;if((o|0)!=0)c[o+12>>2]=c[m>>2];o=c[m>>2]|0;if((o|0)!=0)c[o+8>>2]=c[n>>2];o=l+108|0;if((f+32|0)==(c[o>>2]|0))c[o>>2]=c[m>>2];c[n>>2]=0;c[m>>2]=0;jb[c[(c[f>>2]|0)+20>>2]&127](f);do switch(c[f+4>>2]|0){case 10:{yw(d,f,168);break};case 3:{yw(d,f,176);break};case 5:{yw(d,f,168);break};case 2:{yw(d,f,256);break};case 1:{yw(d,f,228);break};case 4:{yw(d,f,196);break};case 6:{yw(d,f,276);break};case 7:{yw(d,f,224);break};case 8:{yw(d,f,208);break};case 9:{yw(d,f,180);break};default:Aa(15192,15200,166,15256)}while(0);f=d+102964|0;d=c[f>>2]|0;if((d|0)<=0)Aa(11176,11056,346,11160);c[f>>2]=d+ -1;if(!(j<<24>>24==0)){i=h;return}j=c[l+112>>2]|0;if((j|0)==0){i=h;return}do{if((c[j>>2]|0)==(k|0)){o=(c[j+4>>2]|0)+4|0;c[o>>2]=c[o>>2]|8}j=c[j+12>>2]|0}while((j|0)!=0);i=h;return}function jx(a,b){a=a|0;b=b|0;var d=0,e=0;d=a+28|0;e=c[d>>2]|0;if((e|0)<(c[a+40>>2]|0)){c[b+8>>2]=e;e=c[d>>2]|0;c[(c[a+8>>2]|0)+(e<<2)>>2]=b;c[d>>2]=e+1;return}else Aa(12008,11920,54,11960)}function kx(a,b){a=a|0;b=b|0;var d=0,e=0;e=a+36|0;d=c[e>>2]|0;if((d|0)<(c[a+44>>2]|0)){c[e>>2]=d+1;c[(c[a+12>>2]|0)+(d<<2)>>2]=b;return}else Aa(11968,11920,62,11960)}function lx(f,h,j,l){f=f|0;h=+h;j=j|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,N=0,P=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,hb=0,ib=0,jb=0,kb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0.0,Lb=0,Mb=0.0,Nb=0,Ob=0.0,Pb=0.0,Qb=0.0,Rb=0.0,Sb=0.0,Tb=0.0,Ub=0.0,Vb=0.0,Wb=0.0,Xb=0.0,Yb=0.0,Zb=0.0,_b=0.0,$b=0.0,ac=0.0,bc=0.0,cc=0.0,dc=0.0,ec=0.0,fc=0.0,gc=0.0,hc=0.0,ic=0,jc=0.0,kc=0.0,lc=0.0,mc=0.0,nc=0.0,oc=0.0,pc=0.0,qc=0.0,rc=0.0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0.0,Dc=0.0,Ec=0.0,Fc=0.0,Gc=0,Hc=0,Ic=0.0,Jc=0.0,Kc=0,Lc=0.0,Mc=0.0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0,Tc=0.0;m=i;i=i+608|0;p=m+120|0;q=m+24|0;r=m;x=m+460|0;y=m+408|0;o=m+308|0;z=m+256|0;t=m+220|0;u=m+184|0;s=m+176|0;v=m+136|0;w=m+595|0;I=m+592|0;n=f+102868|0;C=c[n>>2]|0;if((C&1|0)!=0){Nw(f+102872|0);C=c[n>>2]&-2;c[n>>2]=C}c[n>>2]=C|2;C=h>0.0;if(C)D=1.0/h;else D=0.0;G=f+102988|0;Kb=+g[G>>2]*h;K=a[f+102992>>0]|0;E=f+102872|0;F=f+102932|0;S=c[F>>2]|0;a:do if((S|0)!=0){H=f+102884|0;L=f+102876|0;P=f+102944|0;N=f+102940|0;b:while(1){W=c[S+48>>2]|0;U=c[S+52>>2]|0;V=c[S+56>>2]|0;T=c[S+60>>2]|0;Z=c[W+8>>2]|0;X=c[U+8>>2]|0;Y=S+4|0;$=c[Y>>2]|0;c:do if(($&8|0)==0)B=16;else{if(!(Iw(X,Z)|0)){Sc=c[S+12>>2]|0;Mw(E,S);S=Sc;break}_=c[N>>2]|0;do if((_|0)!=0)if(gb[c[(c[_>>2]|0)+8>>2]&63](_,W,U)|0){$=c[Y>>2]|0;break}else{Sc=c[S+12>>2]|0;Mw(E,S);S=Sc;break c}while(0);c[Y>>2]=$&-9;B=16}while(0);do if((B|0)==16){B=0;if((b[Z+4>>1]&2)==0)Y=0;else Y=(c[Z>>2]|0)!=0;if((b[X+4>>1]&2)==0)X=0;else X=(c[X>>2]|0)!=0;if(!(Y|X)){S=c[S+12>>2]|0;break}V=c[(c[W+24>>2]|0)+(V*28|0)+24>>2]|0;U=c[(c[U+24>>2]|0)+(T*28|0)+24>>2]|0;if(!((V|0)>-1)){B=24;break b}W=c[H>>2]|0;if((W|0)<=(V|0)){B=24;break b}T=c[L>>2]|0;if(!((U|0)>-1&(W|0)>(U|0))){B=26;break b}if((+g[T+(U*36|0)>>2]- +g[T+(V*36|0)+8>>2]>0.0?1:+g[T+(U*36|0)+4>>2]- +g[T+(V*36|0)+12>>2]>0.0)|+g[T+(V*36|0)>>2]- +g[T+(U*36|0)+8>>2]>0.0|+g[T+(V*36|0)+4>>2]- +g[T+(U*36|0)+12>>2]>0.0){Sc=c[S+12>>2]|0;Mw(E,S);S=Sc;break}else{Dx(S,c[P>>2]|0);S=c[S+12>>2]|0;break}}while(0);if((S|0)==0)break a}if((B|0)==24)Aa(11760,11704,159,11824);else if((B|0)==26)Aa(11760,11704,159,11824)}while(0);g[f+103e3>>2]=0.0;H=f+102995|0;if(!((a[H>>0]|0)==0|C^1)){L=f+103008|0;g[L>>2]=0.0;N=f+103012|0;g[N>>2]=0.0;P=f+103016|0;g[P>>2]=0.0;U=f+102960|0;S=f+68|0;fx(z,c[U>>2]|0,c[f+102936>>2]|0,c[f+102964>>2]|0,S,c[f+102944>>2]|0);T=f+102952|0;V=c[T>>2]|0;if((V|0)!=0)do{Sc=V+4|0;b[Sc>>1]=e[Sc>>1]&65534;V=c[V+96>>2]|0}while((V|0)!=0);V=c[F>>2]|0;if((V|0)!=0)do{Sc=V+4|0;c[Sc>>2]=c[Sc>>2]&-2;V=c[V+12>>2]|0}while((V|0)!=0);V=c[f+102956>>2]|0;if((V|0)!=0)do{a[V+60>>0]=0;V=c[V+12>>2]|0}while((V|0)!=0);Ca=c[U>>2]|0;Ea=Dw(S,Ca<<2)|0;Qa=c[T>>2]|0;d:do if((Qa|0)!=0){ta=z+28|0;Ka=z+36|0;ma=z+32|0;Ba=f+102976|0;Ga=z+8|0;ka=z+48|0;la=z+16|0;V=f+102968|0;W=f+102972|0;na=z+20|0;Pa=z+24|0;xa=x+4|0;ya=x+8|0;za=x+12|0;Da=x+16|0;Fa=x+20|0;oa=x+21|0;pa=x+24|0;qa=x+28|0;ra=y+4|0;sa=y+8|0;ua=y+12|0;va=y+16|0;wa=y+20|0;Ha=y+21|0;Ia=z+12|0;Ja=y+24|0;La=y+28|0;Ma=y+32|0;Na=y+36|0;Oa=y+40|0;U=K<<24>>24==0;_=(j|0)>0;X=o+48|0;Z=o+40|0;$=o+44|0;aa=(l|0)>0;ca=o+36|0;ba=o+24|0;da=p+8|0;ea=p+12|0;fa=q+8|0;ga=q+12|0;ha=r+8|0;ia=r+16|0;ja=o+32|0;Y=o+28|0;e:while(1){Ra=Qa+4|0;Sa=b[Ra>>1]|0;do if((Sa&35)==34?(c[Qa>>2]|0)!=0:0){c[ta>>2]=0;c[Ka>>2]=0;c[ma>>2]=0;c[Ea>>2]=Qa;b[Ra>>1]=Sa&65535|1;Ta=1;do{Ta=Ta+ -1|0;Ra=c[Ea+(Ta<<2)>>2]|0;Ua=Ra+4|0;if((b[Ua>>1]&32)==0){B=43;break e}jx(z,Ra);Sa=e[Ua>>1]|0;if((Sa&2|0)==0){b[Ua>>1]=Sa|2;g[Ra+144>>2]=0.0}do if((c[Ra>>2]|0)!=0){Sa=c[Ra+112>>2]|0;if((Sa|0)!=0)do{Ua=c[Sa+4>>2]|0;Va=Ua+4|0;do if((c[Va>>2]&7|0)==6){if((a[(c[Ua+48>>2]|0)+38>>0]|0)!=0)break;if((a[(c[Ua+52>>2]|0)+38>>0]|0)!=0)break;kx(z,Ua);c[Va>>2]=c[Va>>2]|1;Ua=c[Sa>>2]|0;Va=Ua+4|0;Wa=b[Va>>1]|0;if(!((Wa&1)==0))break;if((Ta|0)>=(Ca|0)){B=54;break e}c[Ea+(Ta<<2)>>2]=Ua;b[Va>>1]=Wa&65535|1;Ta=Ta+1|0}while(0);Sa=c[Sa+12>>2]|0}while((Sa|0)!=0);Ra=c[Ra+108>>2]|0;if((Ra|0)==0)break;do{Va=Ra+4|0;Sa=c[Va>>2]|0;do if((a[Sa+60>>0]|0)==0){Wa=c[Ra>>2]|0;Ya=Wa+4|0;Xa=b[Ya>>1]|0;if((Xa&32)==0)break;Ua=c[ma>>2]|0;if((Ua|0)>=(c[ka>>2]|0)){B=61;break e}c[ma>>2]=Ua+1;c[(c[la>>2]|0)+(Ua<<2)>>2]=Sa;a[(c[Va>>2]|0)+60>>0]=1;if(!((Xa&1)==0))break;if((Ta|0)>=(Ca|0)){B=64;break e}c[Ea+(Ta<<2)>>2]=Wa;b[Ya>>1]=Xa&65535|1;Ta=Ta+1|0}while(0);Ra=c[Ra+12>>2]|0}while((Ra|0)!=0)}while(0)}while((Ta|0)>0);Ra=(a[Ba>>0]|0)==0;Sa=c[ta>>2]|0;Va=(Sa|0)>0;if(Va){Xa=c[Ga>>2]|0;Wa=0;do{Ta=c[Xa+(Wa<<2)>>2]|0;Ya=Ta+44|0;Ua=c[Ya>>2]|0;Ya=c[Ya+4>>2]|0;Ob=+g[Ta+56>>2];Sc=Ta+64|0;Mb=+g[Sc>>2];Pb=+g[Sc+4>>2];Qb=+g[Ta+72>>2];Sc=Ta+36|0;c[Sc>>2]=Ua;c[Sc+4>>2]=Ya;g[Ta+52>>2]=Ob;if((c[Ta>>2]|0)==2){Ic=+g[Ta+140>>2];Jc=+g[Ta+120>>2];Lc=1.0- +g[Ta+132>>2]*h;Lc=Lc<1.0?Lc:1.0;Lc=Lc<0.0?0.0:Lc;Mc=1.0- +g[Ta+136>>2]*h;Mc=Mc<1.0?Mc:1.0;Mb=(Mb+(Ic*+g[V>>2]+Jc*+g[Ta+76>>2])*h)*Lc;Pb=(Pb+(Ic*+g[W>>2]+Jc*+g[Ta+80>>2])*h)*Lc;Qb=(Qb+ +g[Ta+128>>2]*h*+g[Ta+84>>2])*(Mc<0.0?0.0:Mc)}Ta=c[na>>2]|0;Sc=Ta+(Wa*12|0)|0;c[Sc>>2]=Ua;c[Sc+4>>2]=Ya;g[Ta+(Wa*12|0)+8>>2]=Ob;Ua=c[Pa>>2]|0;Lc=+Mb;Mc=+Pb;Sc=Ua+(Wa*12|0)|0;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;g[Ua+(Wa*12|0)+8>>2]=Qb;Wa=Wa+1|0}while((Wa|0)<(Sa|0))}else{Ua=c[Pa>>2]|0;Ta=c[na>>2]|0}g[x>>2]=h;g[xa>>2]=D;g[ya>>2]=Kb;c[za>>2]=j;c[Da>>2]=l;a[Fa>>0]=K;a[oa+0>>0]=a[I+0>>0]|0;a[oa+1>>0]=a[I+1>>0]|0;a[oa+2>>0]=a[I+2>>0]|0;c[pa>>2]=Ta;c[qa>>2]=Ua;g[y>>2]=h;g[ra>>2]=D;g[sa>>2]=Kb;c[ua>>2]=j;c[va>>2]=l;a[wa>>0]=K;a[Ha+0>>0]=a[I+0>>0]|0;a[Ha+1>>0]=a[I+1>>0]|0;a[Ha+2>>0]=a[I+2>>0]|0;c[Ja>>2]=c[Ia>>2];c[La>>2]=c[Ka>>2];c[Ma>>2]=Ta;c[Na>>2]=Ua;c[Oa>>2]=c[z>>2];Ex(o,y);Fx(o);if(!U?(J=c[X>>2]|0,(J|0)>0):0){Za=c[Y>>2]|0;ab=c[Z>>2]|0;Ya=0;do{Wa=c[ab+(Ya*152|0)+112>>2]|0;_a=c[ab+(Ya*152|0)+116>>2]|0;Mb=+g[ab+(Ya*152|0)+120>>2];Rb=+g[ab+(Ya*152|0)+128>>2];Ob=+g[ab+(Ya*152|0)+124>>2];Pb=+g[ab+(Ya*152|0)+132>>2];bb=c[ab+(Ya*152|0)+144>>2]|0;Xa=Za+(Wa*12|0)|0;$a=Xa;Ub=+g[$a>>2];Wb=+g[$a+4>>2];Wa=Za+(Wa*12|0)+8|0;Vb=+g[Wa>>2];$a=Za+(_a*12|0)|0;Sc=$a;Xb=+g[Sc>>2];Yb=+g[Sc+4>>2];_a=Za+(_a*12|0)+8|0;Tb=+g[_a>>2];Sc=ab+(Ya*152|0)+72|0;Sb=+g[Sc>>2];Qb=+g[Sc+4>>2];if((bb|0)>0){cb=0;do{Jc=+g[ab+(Ya*152|0)+(cb*36|0)+16>>2];Mc=+g[ab+(Ya*152|0)+(cb*36|0)+20>>2];Lc=Sb*Jc+Qb*Mc;Mc=Qb*Jc-Sb*Mc;Vb=Vb-Rb*(+g[ab+(Ya*152|0)+(cb*36|0)>>2]*Mc- +g[ab+(Ya*152|0)+(cb*36|0)+4>>2]*Lc);Ub=Ub-Mb*Lc;Wb=Wb-Mb*Mc;Tb=Tb+Pb*(Mc*+g[ab+(Ya*152|0)+(cb*36|0)+8>>2]-Lc*+g[ab+(Ya*152|0)+(cb*36|0)+12>>2]);Xb=Xb+Ob*Lc;Yb=Yb+Ob*Mc;cb=cb+1|0}while((cb|0)!=(bb|0))}Mc=+Ub;Lc=+Wb;Sc=Xa;g[Sc>>2]=Mc;g[Sc+4>>2]=Lc;g[Wa>>2]=Vb;Lc=+Xb;Mc=+Yb;Sc=$a;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;g[_a>>2]=Tb;Ya=Ya+1|0}while((Ya|0)<(J|0))}Wa=c[ma>>2]|0;Xa=(Wa|0)>0;if(Xa){Za=c[la>>2]|0;Ya=0;do{Sc=c[Za+(Ya<<2)>>2]|0;lb[c[(c[Sc>>2]|0)+28>>2]&127](Sc,x);Ya=Ya+1|0}while((Ya|0)<(Wa|0))}if(_){_a=0;do{if(Xa){Ya=c[la>>2]|0;Za=0;do{Sc=c[Ya+(Za<<2)>>2]|0;lb[c[(c[Sc>>2]|0)+32>>2]&127](Sc,x);Za=Za+1|0}while((Za|0)<(Wa|0))}Gx(o);_a=_a+1|0}while((_a|0)<(j|0))}$a=c[X>>2]|0;if(($a|0)>0){_a=c[Z>>2]|0;Za=c[$>>2]|0;Ya=0;do{ab=c[Za+(c[_a+(Ya*152|0)+148>>2]<<2)>>2]|0;Xa=c[_a+(Ya*152|0)+144>>2]|0;if((Xa|0)>0){Wa=0;do{g[ab+(Wa*20|0)+72>>2]=+g[_a+(Ya*152|0)+(Wa*36|0)+16>>2];g[ab+(Wa*20|0)+76>>2]=+g[_a+(Ya*152|0)+(Wa*36|0)+20>>2];Wa=Wa+1|0}while((Wa|0)<(Xa|0))}Ya=Ya+1|0}while((Ya|0)<($a|0))}if(Va){Va=0;do{Sa=Ta+(Va*12|0)|0;Sc=Sa;Mb=+g[Sc>>2];Ob=+g[Sc+4>>2];Pb=+g[Ta+(Va*12|0)+8>>2];Sc=Ua+(Va*12|0)|0;Qb=+g[Sc>>2];Sb=+g[Sc+4>>2];Rb=+g[Ua+(Va*12|0)+8>>2];Mc=Qb*h;Tb=Sb*h;Tb=Mc*Mc+Tb*Tb;if(Tb>4.0){Mc=2.0/+O(+Tb);Qb=Qb*Mc;Sb=Sb*Mc}Tb=Rb*h;if(Tb*Tb>2.4674012660980225){if(!(Tb>0.0))Tb=-Tb;Rb=Rb*(1.5707963705062866/Tb)}Mc=+(Mb+Qb*h);Lc=+(Ob+Sb*h);Ta=Sa;g[Ta>>2]=Mc;g[Ta+4>>2]=Lc;Ta=c[na>>2]|0;g[Ta+(Va*12|0)+8>>2]=Pb+Rb*h;Ua=c[Pa>>2]|0;Lc=+Qb;Mc=+Sb;Sa=Ua+(Va*12|0)|0;g[Sa>>2]=Lc;g[Sa+4>>2]=Mc;g[Ua+(Va*12|0)+8>>2]=Rb;Va=Va+1|0;Sa=c[ta>>2]|0}while((Va|0)<(Sa|0))}f:do if(aa){Va=c[X>>2]|0;Wa=0;while(1){if((Va|0)>0){_a=c[ba>>2]|0;Za=c[ca>>2]|0;Ya=0;Xb=0.0;do{cb=Za+(Ya*88|0)|0;bb=c[Za+(Ya*88|0)+32>>2]|0;$a=c[Za+(Ya*88|0)+36>>2]|0;db=Za+(Ya*88|0)+48|0;Tb=+g[db>>2];Ub=+g[db+4>>2];Pb=+g[Za+(Ya*88|0)+40>>2];Qb=+g[Za+(Ya*88|0)+64>>2];db=Za+(Ya*88|0)+56|0;Vb=+g[db>>2];Ob=+g[db+4>>2];Rb=+g[Za+(Ya*88|0)+44>>2];Sb=+g[Za+(Ya*88|0)+68>>2];db=c[Za+(Ya*88|0)+84>>2]|0;Xa=_a+(bb*12|0)|0;ab=Xa;Wb=+g[ab>>2];Yb=+g[ab+4>>2];bb=_a+(bb*12|0)+8|0;ac=+g[bb>>2];ab=_a+($a*12|0)|0;Sc=ab;Zb=+g[Sc>>2];_b=+g[Sc+4>>2];$a=_a+($a*12|0)+8|0;$b=+g[$a>>2];if((db|0)>0){Mb=Pb+Rb;eb=0;do{gc=+R(+ac);g[da>>2]=gc;hc=+Q(+ac);g[ea>>2]=hc;fc=+R(+$b);g[fa>>2]=fc;cc=+Q(+$b);g[ga>>2]=cc;bc=+(Wb-(Tb*hc-Ub*gc));gc=+(Yb-(Ub*hc+Tb*gc));Sc=p;g[Sc>>2]=bc;g[Sc+4>>2]=gc;gc=+(Zb-(Vb*cc-Ob*fc));fc=+(_b-(Ob*cc+Vb*fc));Sc=q;g[Sc>>2]=gc;g[Sc+4>>2]=fc;Hx(r,cb,p,q,eb);Sc=r;fc=+g[Sc>>2];gc=+g[Sc+4>>2];Sc=ha;cc=+g[Sc>>2];bc=+g[Sc+4>>2];hc=+g[ia>>2];dc=cc-Wb;ec=bc-Yb;cc=cc-Zb;bc=bc-_b;Xb=Xb<hc?Xb:hc;hc=(hc+.004999999888241291)*.20000000298023224;hc=hc<0.0?hc:0.0;jc=gc*dc-fc*ec;Mc=gc*cc-fc*bc;jc=Mc*Sb*Mc+(Mb+jc*Qb*jc);if(jc>0.0)hc=-(hc<-.20000000298023224?-.20000000298023224:hc)/jc;else hc=0.0;Mc=fc*hc;Lc=gc*hc;Wb=Wb-Pb*Mc;Yb=Yb-Pb*Lc;ac=ac-Qb*(dc*Lc-ec*Mc);Zb=Zb+Rb*Mc;_b=_b+Rb*Lc;$b=$b+Sb*(cc*Lc-bc*Mc);eb=eb+1|0}while((eb|0)!=(db|0))}Mc=+Wb;Lc=+Yb;Sc=Xa;g[Sc>>2]=Mc;g[Sc+4>>2]=Lc;g[bb>>2]=ac;Lc=+Zb;Mc=+_b;Sc=ab;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;g[$a>>2]=$b;Ya=Ya+1|0}while((Ya|0)<(Va|0))}else Xb=0.0;Xa=Xb>=-.014999999664723873;Za=c[ma>>2]|0;if((Za|0)>0){_a=c[la>>2]|0;Ya=0;$a=1;do{Sc=c[_a+(Ya<<2)>>2]|0;$a=$a&(tb[c[(c[Sc>>2]|0)+36>>2]&63](Sc,x)|0);Ya=Ya+1|0}while((Ya|0)<(Za|0))}else $a=1;Wa=Wa+1|0;if(Xa&$a){Va=0;break f}if((Wa|0)>=(l|0)){Va=1;break}}}else Va=1;while(0);if((Sa|0)>0){Xa=c[Ga>>2]|0;Wa=0;do{Sc=c[Xa+(Wa<<2)>>2]|0;Rc=Ta+(Wa*12|0)|0;Qc=c[Rc>>2]|0;Rc=c[Rc+4>>2]|0;Nc=Sc+44|0;c[Nc>>2]=Qc;c[Nc+4>>2]=Rc;Jc=+g[Ta+(Wa*12|0)+8>>2];g[Sc+56>>2]=Jc;Nc=Ua+(Wa*12|0)|0;Oc=c[Nc+4>>2]|0;Pc=Sc+64|0;c[Pc>>2]=c[Nc>>2];c[Pc+4>>2]=Oc;g[Sc+72>>2]=+g[Ua+(Wa*12|0)+8>>2];Fc=+R(+Jc);g[Sc+20>>2]=Fc;Jc=+Q(+Jc);g[Sc+24>>2]=Jc;Ic=+g[Sc+28>>2];Mc=+g[Sc+32>>2];Lc=(c[k>>2]=Qc,+g[k>>2])-(Jc*Ic-Fc*Mc);Mc=(c[k>>2]=Rc,+g[k>>2])-(Fc*Ic+Jc*Mc);Lc=+Lc;Mc=+Mc;Sc=Sc+12|0;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;Wa=Wa+1|0}while((Wa|0)<(Sa|0))}Sa=c[Z>>2]|0;hx(z,Sa);do if(!Ra){Ra=c[ta>>2]|0;if((Ra|0)<=0)break;Ta=c[Ga>>2]|0;Ua=0;Mb=3.4028234663852886e+38;do{Wa=c[Ta+(Ua<<2)>>2]|0;g:do if((c[Wa>>2]|0)!=0){do if(!((b[Wa+4>>1]&4)==0)){Mc=+g[Wa+72>>2];if(Mc*Mc>.001218469929881394)break;Lc=+g[Wa+64>>2];Mc=+g[Wa+68>>2];if(Lc*Lc+Mc*Mc>9999999747378752.0e-20)break;Sc=Wa+144|0;Mc=+g[Sc>>2]+h;g[Sc>>2]=Mc;Mb=Mb<Mc?Mb:Mc;break g}while(0);g[Wa+144>>2]=0.0;Mb=0.0}while(0);Ua=Ua+1|0}while((Ua|0)<(Ra|0));if(!(Mb>=.5)|Va)break;else Ua=0;do{Sc=c[Ta+(Ua<<2)>>2]|0;Rc=Sc+4|0;b[Rc>>1]=e[Rc>>1]&65533;g[Sc+144>>2]=0.0;Sc=Sc+64|0;c[Sc+0>>2]=0;c[Sc+4>>2]=0;c[Sc+8>>2]=0;c[Sc+12>>2]=0;c[Sc+16>>2]=0;c[Sc+20>>2]=0;Ua=Ua+1|0}while((Ua|0)<(Ra|0))}while(0);Ra=c[ja>>2]|0;Ew(Ra,Sa);Ew(Ra,c[ca>>2]|0);g[L>>2]=+g[L>>2]+0.0;g[N>>2]=+g[N>>2]+0.0;g[P>>2]=+g[P>>2]+0.0;Ra=c[ta>>2]|0;if((Ra|0)<=0)break;Sa=c[Ga>>2]|0;Ta=0;do{Ua=c[Sa+(Ta<<2)>>2]|0;if((c[Ua>>2]|0)==0){Sc=Ua+4|0;b[Sc>>1]=e[Sc>>1]&65534}Ta=Ta+1|0}while((Ta|0)<(Ra|0))}while(0);Qa=c[Qa+96>>2]|0;if((Qa|0)==0)break d}if((B|0)==43)Aa(11200,11056,445,11224);else if((B|0)==54)Aa(11232,11056,495,11224);else if((B|0)==61)Aa(11888,11920,68,11960);else if((B|0)==64)Aa(11232,11056,524,11224)}while(0);Ew(S,Ea);l=c[T>>2]|0;if((l|0)!=0)do{if(!((b[l+4>>1]&1)==0)?(c[l>>2]|0)!=0:0)Gw(l);l=c[l+96>>2]|0}while((l|0)!=0);Nw(E);g[f+103020>>2]=0.0;gx(z);g[f+103004>>2]=0.0}if((a[f+102993>>0]|0)!=0){if(C){l=f+102944|0;fx(z,64,32,0,f+68|0,c[l>>2]|0);if((a[H>>0]|0)!=0){I=c[f+102952>>2]|0;if((I|0)!=0)do{Sc=I+4|0;b[Sc>>1]=e[Sc>>1]&65534;g[I+60>>2]=0.0;I=c[I+96>>2]|0}while((I|0)!=0);I=c[F>>2]|0;if((I|0)!=0)do{Sc=I+4|0;c[Sc>>2]=c[Sc>>2]&-34;c[I+128>>2]=0;g[I+132>>2]=1.0;I=c[I+12>>2]|0}while((I|0)!=0)}qa=z+28|0;pa=z+36|0;oa=z+32|0;na=s+4|0;ma=z+40|0;la=z+44|0;K=f+102994|0;ka=z+8|0;va=x+16|0;Ea=x+20|0;kb=x+24|0;Ba=x+44|0;Ca=x+48|0;jb=x+52|0;hb=x+28|0;ra=x+56|0;Gb=x+92|0;Fb=x+128|0;Eb=x+56|0;Db=x+60|0;Cb=x+64|0;Bb=x+68|0;Ab=x+72|0;zb=x+76|0;yb=x+80|0;nb=x+84|0;xb=x+88|0;wb=x+92|0;vb=x+96|0;ub=x+100|0;sb=x+104|0;rb=x+108|0;qb=x+112|0;pb=x+116|0;mb=x+120|0;ob=x+124|0;ib=p+4|0;fb=q+28|0;eb=q+88|0;db=q+56|0;cb=q+64|0;bb=q+68|0;ab=q+72|0;$a=q+80|0;_a=q+84|0;Za=r+16|0;Ya=o+4|0;Xa=o+8|0;Wa=o+12|0;Va=o+16|0;Ua=o+20|0;Ta=o+24|0;Sa=o+28|0;Ra=o+32|0;Qa=o+36|0;Pa=o+40|0;Oa=o+44|0;Na=o+48|0;Ma=o+52|0;La=o+56|0;Ka=o+60|0;Ja=o+64|0;Ia=o+68|0;Ha=o+72|0;Ga=o+76|0;Fa=o+80|0;Da=p+9|0;ya=o+92|0;xa=o+96|0;za=p+10|0;wa=o+84|0;ua=o+92|0;ta=o+84|0;N=o+88|0;ja=z+20|0;ia=z+24|0;ha=z+12|0;ga=x+24|0;fa=x+28|0;ea=x+40|0;da=x+4|0;ca=x+8|0;ba=x+12|0;aa=x+16|0;$=x+20|0;_=x+21|0;Z=x+32|0;Y=x+36|0;Hb=(j|0)>0;sa=y+40|0;L=y+32|0;W=y+36|0;X=y+48|0;V=y+24|0;U=p+8|0;T=p+12|0;P=q+8|0;J=q+12|0;I=r+8|0;S=r+16|0;h:while(1){Ib=c[F>>2]|0;if((Ib|0)==0){B=255;break}else{Kb=1.0;Jb=0}do{Lb=Ib+4|0;Nb=c[Lb>>2]|0;do if((Nb&4|0)!=0?(c[Ib+128>>2]|0)<=8:0){if((Nb&32|0)==0){Nb=c[Ib+48>>2]|0;ic=c[Ib+52>>2]|0;if((a[Nb+38>>0]|0)!=0)break;if((a[ic+38>>0]|0)!=0)break;sc=c[Nb+8>>2]|0;uc=c[ic+8>>2]|0;wc=c[sc>>2]|0;tc=c[uc>>2]|0;if(!((wc|0)==2|(tc|0)==2)){B=158;break h}xc=b[sc+4>>1]|0;vc=b[uc+4>>1]|0;if(!((xc&2)!=0&(wc|0)!=0|(vc&2)!=0&(tc|0)!=0))break;if(!((xc&8)!=0|(wc|0)!=2|((vc&8)!=0|(tc|0)!=2)))break;vc=sc+28|0;xc=sc+60|0;Ob=+g[xc>>2];tc=uc+28|0;wc=uc+60|0;Mb=+g[wc>>2];do if(Ob<Mb){if(!(Ob<1.0)){B=163;break h}Mc=(Mb-Ob)/(1.0-Ob);Sc=sc+36|0;Lc=1.0-Mc;Ic=+(+g[Sc>>2]*Lc+Mc*+g[sc+44>>2]);Jc=+(Lc*+g[sc+40>>2]+Mc*+g[sc+48>>2]);g[Sc>>2]=Ic;g[Sc+4>>2]=Jc;Sc=sc+52|0;g[Sc>>2]=Lc*+g[Sc>>2]+Mc*+g[sc+56>>2];g[xc>>2]=Mb}else{if(!(Mb<Ob)){Mb=Ob;break}if(!(Mb<1.0)){B=167;break h}Mb=(Ob-Mb)/(1.0-Mb);Sc=uc+36|0;Mc=1.0-Mb;Jc=+(+g[Sc>>2]*Mc+Mb*+g[uc+44>>2]);Lc=+(Mc*+g[uc+40>>2]+Mb*+g[uc+48>>2]);g[Sc>>2]=Jc;g[Sc+4>>2]=Lc;Sc=uc+52|0;g[Sc>>2]=Mc*+g[Sc>>2]+Mb*+g[uc+56>>2];g[wc>>2]=Ob;Mb=Ob}while(0);if(!(Mb<1.0)){B=170;break h}Sc=c[Ib+56>>2]|0;sc=c[Ib+60>>2]|0;c[va>>2]=0;c[Ea>>2]=0;g[kb>>2]=0.0;c[Ba>>2]=0;c[Ca>>2]=0;g[jb>>2]=0.0;Nv(x,c[Nb+12>>2]|0,Sc);Nv(hb,c[ic+12>>2]|0,sc);Nb=ra+0|0;ic=vc+0|0;sc=Nb+36|0;do{c[Nb>>2]=c[ic>>2];Nb=Nb+4|0;ic=ic+4|0}while((Nb|0)<(sc|0));Nb=Gb+0|0;ic=tc+0|0;sc=Nb+36|0;do{c[Nb>>2]=c[ic>>2];Nb=Nb+4|0;ic=ic+4|0}while((Nb|0)<(sc|0));g[Fb>>2]=1.0;c[1566]=(c[1566]|0)+1;Rb=+g[Eb>>2];Ub=+g[Db>>2];Wb=+g[Cb>>2];Pb=+g[Bb>>2];Qb=+g[Ab>>2];Sb=+g[zb>>2];Tb=+g[yb>>2];bc=+g[xb>>2];$b=+g[wb>>2];ac=+g[vb>>2];Vb=+g[ub>>2];hc=+g[sb>>2];Xb=+g[rb>>2];Yb=+g[qb>>2];Zb=+g[pb>>2];cc=+g[ob>>2];dc=+M(+(Tb/6.2831854820251465))*6.2831854820251465;Tb=Tb-dc;dc=+g[nb>>2]-dc;_b=+M(+(Zb/6.2831854820251465))*6.2831854820251465;Zb=Zb-_b;_b=+g[mb>>2]-_b;fc=+g[kb>>2]+ +g[jb>>2]+-.014999999664723873;fc=fc<.004999999888241291?.004999999888241291:fc;if(!(fc>.0012499999720603228)){B=172;break h}b[ib>>1]=0;c[q+0>>2]=c[x+0>>2];c[q+4>>2]=c[x+4>>2];c[q+8>>2]=c[x+8>>2];c[q+12>>2]=c[x+12>>2];c[q+16>>2]=c[x+16>>2];c[q+20>>2]=c[x+20>>2];c[q+24>>2]=c[x+24>>2];c[fb+0>>2]=c[hb+0>>2];c[fb+4>>2]=c[hb+4>>2];c[fb+8>>2]=c[hb+8>>2];c[fb+12>>2]=c[hb+12>>2];c[fb+16>>2]=c[hb+16>>2];c[fb+20>>2]=c[hb+20>>2];c[fb+24>>2]=c[hb+24>>2];a[eb>>0]=0;ec=fc+.0012499999720603228;gc=fc+-.0012499999720603228;Nb=0;Ob=0.0;i:while(1){lc=1.0-Ob;jc=lc*Tb+Ob*dc;kc=+R(+jc);jc=+Q(+jc);qc=lc*Wb+Ob*Qb-(jc*Rb-kc*Ub);oc=lc*Pb+Ob*Sb-(kc*Rb+jc*Ub);mc=lc*Zb+Ob*_b;nc=+R(+mc);mc=+Q(+mc);pc=lc*Vb+Ob*Xb-(mc*$b-nc*ac);lc=lc*hc+Ob*Yb-(nc*$b+mc*ac);rc=+qc;Mc=+oc;Sc=db;g[Sc>>2]=rc;g[Sc+4>>2]=Mc;g[cb>>2]=kc;g[bb>>2]=jc;Mc=+pc;rc=+lc;Sc=ab;g[Sc>>2]=Mc;g[Sc+4>>2]=rc;g[$a>>2]=nc;g[_a>>2]=mc;Ov(r,p,q);rc=+g[Za>>2];if(rc<=0.0){ic=2;Ob=0.0;break}if(rc<ec){ic=3;break}c[o>>2]=x;c[Ya>>2]=hb;sc=c[ib>>2]|0;uc=sc&65535;ic=sc>>>16;tc=ic&255;sc=sc>>>24;vc=sc&255;if(!(uc<<16>>16!=0&(uc&65535)<3)){B=177;break h}g[Xa>>2]=Rb;g[Wa>>2]=Ub;g[Va>>2]=Wb;g[Ua>>2]=Pb;g[Ta>>2]=Qb;g[Sa>>2]=Sb;g[Ra>>2]=Tb;g[Qa>>2]=dc;g[Pa>>2]=bc;g[Oa>>2]=$b;g[Na>>2]=ac;g[Ma>>2]=Vb;g[La>>2]=hc;g[Ka>>2]=Xb;g[Ja>>2]=Yb;g[Ia>>2]=Zb;g[Ha>>2]=_b;g[Ga>>2]=cc;do if(!(uc<<16>>16==1))if(tc<<24>>24==vc<<24>>24){c[Fa>>2]=2;uc=d[Da>>0]|0;tc=c[Ca>>2]|0;if((tc|0)<=(uc|0)){B=187;break h}sc=c[Ba>>2]|0;uc=sc+(uc<<3)|0;Cc=+g[uc>>2];rc=+g[uc+4>>2];uc=d[za>>0]|0;if((tc|0)<=(uc|0)){B=189;break h}Sc=sc+(uc<<3)|0;Fc=+g[Sc>>2];Ec=+g[Sc+4>>2];Jc=Fc-Cc;Ic=Ec-rc;Dc=-Jc;Lc=+Ic;Mc=+Dc;Sc=ya;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;Jc=+O(+(Ic*Ic+Jc*Jc));if(!(Jc<1.1920928955078125e-7)){Mc=1.0/Jc;Ic=Ic*Mc;g[ya>>2]=Ic;Dc=Mc*Dc;g[xa>>2]=Dc}Cc=(Cc+Fc)*.5;rc=(rc+Ec)*.5;Lc=+Cc;Mc=+rc;Sc=wa;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;ic=ic&255;if((c[Ea>>2]|0)<=(ic|0)){B=193;break h}Sc=(c[va>>2]|0)+(ic<<3)|0;Lc=+g[Sc>>2];Mc=+g[Sc+4>>2];if(!((mc*Ic-nc*Dc)*(qc+(jc*Lc-kc*Mc)-(pc+(mc*Cc-nc*rc)))+(nc*Ic+mc*Dc)*(oc+(kc*Lc+jc*Mc)-(lc+(nc*Cc+mc*rc)))<0.0)){mc=Wb;Jc=Pb;Mc=Qb;Lc=Sb;lc=Tb;kc=dc;nc=Rb;Ic=Ub;Fc=Vb;Dc=hc;qc=Xb;Ec=Yb;pc=Zb;oc=_b;rc=$b;Cc=ac;sc=2;ic=1;jc=1.0;break}Jc=+-Ic;mc=+-Dc;sc=ya;g[sc>>2]=Jc;g[sc+4>>2]=mc;mc=Wb;Jc=Pb;Mc=Qb;Lc=Sb;lc=Tb;kc=dc;nc=Rb;Ic=Ub;Fc=Vb;Dc=hc;qc=Xb;Ec=Yb;pc=Zb;oc=_b;rc=$b;Cc=ac;sc=2;ic=1;jc=1.0;break}else{c[Fa>>2]=1;uc=ic&255;tc=c[Ea>>2]|0;if((tc|0)<=(uc|0)){B=197;break h}ic=c[va>>2]|0;Sc=ic+(uc<<3)|0;Cc=+g[Sc>>2];rc=+g[Sc+4>>2];if((tc|0)<=(sc|0)){B=199;break h}Sc=ic+(sc<<3)|0;Fc=+g[Sc>>2];Dc=+g[Sc+4>>2];Jc=Fc-Cc;Ic=Dc-rc;Ec=-Jc;Lc=+Ic;Mc=+Ec;Sc=ya;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;Jc=+O(+(Ic*Ic+Jc*Jc));if(!(Jc<1.1920928955078125e-7)){Mc=1.0/Jc;Ic=Ic*Mc;g[ya>>2]=Ic;Ec=Mc*Ec;g[xa>>2]=Ec}Cc=(Cc+Fc)*.5;rc=(rc+Dc)*.5;Lc=+Cc;Mc=+rc;ic=wa;g[ic>>2]=Lc;g[ic+4>>2]=Mc;ic=d[Da>>0]|0;if((c[Ca>>2]|0)<=(ic|0)){B=203;break h}Sc=(c[Ba>>2]|0)+(ic<<3)|0;Lc=+g[Sc>>2];Mc=+g[Sc+4>>2];if(!((jc*Ic-kc*Ec)*(pc+(mc*Lc-nc*Mc)-(qc+(jc*Cc-kc*rc)))+(kc*Ic+jc*Ec)*(lc+(nc*Lc+mc*Mc)-(oc+(kc*Cc+jc*rc)))<0.0)){mc=Wb;Jc=Pb;Mc=Qb;Lc=Sb;lc=Tb;kc=dc;nc=Rb;Ic=Ub;Fc=Vb;Dc=hc;qc=Xb;Ec=Yb;pc=Zb;oc=_b;rc=$b;Cc=ac;sc=1;ic=1;jc=1.0;break}Jc=+-Ic;mc=+-Ec;sc=ya;g[sc>>2]=Jc;g[sc+4>>2]=mc;mc=Wb;Jc=Pb;Mc=Qb;Lc=Sb;lc=Tb;kc=dc;nc=Rb;Ic=Ub;Fc=Vb;Dc=hc;qc=Xb;Ec=Yb;pc=Zb;oc=_b;rc=$b;Cc=ac;sc=1;ic=1;jc=1.0;break}else{c[Fa>>2]=0;ic=ic&255;if((c[Ea>>2]|0)<=(ic|0)){B=180;break h}ic=(c[va>>2]|0)+(ic<<3)|0;rc=+g[ic>>2];Cc=+g[ic+4>>2];ic=d[Da>>0]|0;if((c[Ca>>2]|0)<=(ic|0)){B=182;break h}Sc=(c[Ba>>2]|0)+(ic<<3)|0;Lc=+g[Sc>>2];Mc=+g[Sc+4>>2];pc=pc+(mc*Lc-nc*Mc)-(qc+(jc*rc-kc*Cc));jc=lc+(nc*Lc+mc*Mc)-(oc+(kc*rc+jc*Cc));Mc=+pc;kc=+jc;Sc=ya;g[Sc>>2]=Mc;g[Sc+4>>2]=kc;kc=+O(+(pc*pc+jc*jc));if(kc<1.1920928955078125e-7){mc=Wb;Jc=Pb;Mc=Qb;Lc=Sb;lc=Tb;kc=dc;nc=Rb;Ic=Ub;Fc=Vb;Dc=hc;qc=Xb;Ec=Yb;pc=Zb;oc=_b;rc=$b;Cc=ac;sc=0;ic=1;jc=1.0;break}mc=1.0/kc;g[ya>>2]=pc*mc;g[xa>>2]=jc*mc;mc=Wb;Jc=Pb;Mc=Qb;Lc=Sb;lc=Tb;kc=dc;nc=Rb;Ic=Ub;Fc=Vb;Dc=hc;qc=Xb;Ec=Yb;pc=Zb;oc=_b;rc=$b;Cc=ac;sc=0;ic=1;jc=1.0}while(0);while(1){Tc=1.0-jc;kc=Tc*lc+kc*jc;lc=+R(+kc);kc=+Q(+kc);mc=Tc*mc+Mc*jc-(kc*nc-lc*Ic);nc=Tc*Jc+Lc*jc-(lc*nc+kc*Ic);oc=Tc*pc+oc*jc;pc=+R(+oc);oc=+Q(+oc);qc=Tc*Fc+qc*jc-(oc*rc-pc*Cc);rc=Tc*Dc+Ec*jc-(pc*rc+oc*Cc);if((sc|0)==0){Cc=+g[ua>>2];Dc=+g[xa>>2];Mc=kc*Cc+lc*Dc;Lc=kc*Dc-lc*Cc;Ec=-Cc;Tc=-Dc;Fc=oc*Ec+pc*Tc;Ec=oc*Tc-pc*Ec;sc=c[o>>2]|0;tc=c[sc+16>>2]|0;sc=c[sc+20>>2]|0;if((sc|0)>1){uc=0;Ic=Lc*+g[tc+4>>2]+Mc*+g[tc>>2];vc=1;while(1){Jc=Mc*+g[tc+(vc<<3)>>2]+Lc*+g[tc+(vc<<3)+4>>2];wc=Jc>Ic;uc=wc?vc:uc;vc=vc+1|0;if((vc|0)==(sc|0))break;else Ic=wc?Jc:Ic}}else uc=0;wc=c[Ya>>2]|0;vc=c[wc+16>>2]|0;wc=c[wc+20>>2]|0;if((wc|0)>1){zc=0;Jc=Ec*+g[vc+4>>2]+Fc*+g[vc>>2];xc=1;while(1){Ic=Fc*+g[vc+(xc<<3)>>2]+Ec*+g[vc+(xc<<3)+4>>2];yc=Ic>Jc;zc=yc?xc:zc;xc=xc+1|0;if((xc|0)==(wc|0))break;else Jc=yc?Ic:Jc}}else zc=0;if(!((uc|0)>-1&(sc|0)>(uc|0))){B=214;break h}Sc=tc+(uc<<3)|0;Ec=+g[Sc>>2];Fc=+g[Sc+4>>2];if(!((zc|0)>-1&(wc|0)>(zc|0))){B=216;break h}Sc=vc+(zc<<3)|0;Mc=+g[Sc>>2];Tc=+g[Sc+4>>2];nc=Cc*(qc+(oc*Mc-pc*Tc)-(mc+(kc*Ec-lc*Fc)))+Dc*(rc+(pc*Mc+oc*Tc)-(nc+(lc*Ec+kc*Fc)))}else if((sc|0)==1){Ec=+g[ua>>2];Cc=+g[xa>>2];Dc=kc*Ec-lc*Cc;Cc=lc*Ec+kc*Cc;Ec=+g[ta>>2];Tc=+g[N>>2];mc=mc+(kc*Ec-lc*Tc);kc=nc+(lc*Ec+kc*Tc);nc=-Dc;Tc=-Cc;Ec=oc*nc+pc*Tc;nc=oc*Tc-pc*nc;tc=c[Ya>>2]|0;sc=c[tc+16>>2]|0;tc=c[tc+20>>2]|0;if((tc|0)>1){zc=0;lc=nc*+g[sc+4>>2]+Ec*+g[sc>>2];uc=1;while(1){Fc=Ec*+g[sc+(uc<<3)>>2]+nc*+g[sc+(uc<<3)+4>>2];vc=Fc>lc;zc=vc?uc:zc;uc=uc+1|0;if((uc|0)==(tc|0))break;else lc=vc?Fc:lc}if(!((zc|0)>-1)){B=223;break h}}else zc=0;if((tc|0)<=(zc|0)){B=223;break h}uc=sc+(zc<<3)|0;Tc=+g[uc>>2];nc=+g[uc+4>>2];nc=Dc*(qc+(oc*Tc-pc*nc)-mc)+Cc*(rc+(pc*Tc+oc*nc)-kc);uc=-1}else if((sc|0)==2){Tc=+g[ua>>2];Dc=+g[xa>>2];Cc=oc*Tc-pc*Dc;Dc=pc*Tc+oc*Dc;Tc=+g[ta>>2];Ec=+g[N>>2];qc=qc+(oc*Tc-pc*Ec);oc=rc+(pc*Tc+oc*Ec);Ec=-Cc;Tc=-Dc;rc=kc*Ec+lc*Tc;Ec=kc*Tc-lc*Ec;sc=c[o>>2]|0;tc=c[sc+16>>2]|0;sc=c[sc+20>>2]|0;if((sc|0)>1){uc=0;Fc=Ec*+g[tc+4>>2]+rc*+g[tc>>2];vc=1;while(1){pc=rc*+g[tc+(vc<<3)>>2]+Ec*+g[tc+(vc<<3)+4>>2];wc=pc>Fc;uc=wc?vc:uc;vc=vc+1|0;if((vc|0)==(sc|0))break;else Fc=wc?pc:Fc}if(!((uc|0)>-1)){B=230;break h}}else uc=0;if((sc|0)<=(uc|0)){B=230;break h}zc=tc+(uc<<3)|0;Mc=+g[zc>>2];Tc=+g[zc+4>>2];nc=Cc*(mc+(kc*Mc-lc*Tc)-qc)+Dc*(nc+(lc*Mc+kc*Tc)-oc);zc=-1}else{B=232;break h}if(nc>ec){ic=4;Ob=1.0;B=246;break i}if(nc>gc){Ob=jc;break}mc=+Xv(o,uc,zc,Ob);if(mc<gc){ic=1;B=246;break i}if(!(mc<=ec)){lc=Ob;kc=jc;sc=0;pc=nc}else{ic=3;B=246;break i}while(1){if((sc&1|0)==0)nc=(lc+kc)*.5;else nc=lc+(fc-mc)*(kc-lc)/(pc-mc);oc=+Xv(o,uc,zc,nc);qc=oc-fc;if(!(qc>0.0))qc=-qc;if(qc<.0012499999720603228){jc=nc;break}tc=oc>fc;sc=sc+1|0;c[1572]=(c[1572]|0)+1;if((sc|0)==50){sc=50;break}else{lc=tc?nc:lc;kc=tc?kc:nc;mc=tc?oc:mc;pc=tc?pc:oc}}Sc=c[1574]|0;c[1574]=(Sc|0)>(sc|0)?Sc:sc;if((ic|0)==8)break;mc=+g[Va>>2];Jc=+g[Ua>>2];Mc=+g[Ta>>2];Lc=+g[Sa>>2];lc=+g[Ra>>2];kc=+g[Qa>>2];nc=+g[Xa>>2];Ic=+g[Wa>>2];Fc=+g[Ma>>2];Dc=+g[La>>2];qc=+g[Ka>>2];Ec=+g[Ja>>2];pc=+g[Ia>>2];oc=+g[Ha>>2];rc=+g[Oa>>2];Cc=+g[Na>>2];sc=c[Fa>>2]|0;ic=ic+1|0}Nb=Nb+1|0;c[1568]=(c[1568]|0)+1;if((Nb|0)==20){Nb=20;ic=1;break}}if((B|0)==246){B=0;c[1568]=(c[1568]|0)+1;Nb=Nb+1|0}Sc=c[1570]|0;c[1570]=(Sc|0)>(Nb|0)?Sc:Nb;if((ic|0)==3){Mb=Mb+(1.0-Mb)*Ob;Mb=Mb<1.0?Mb:1.0}else Mb=1.0;g[Ib+132>>2]=Mb;c[Lb>>2]=c[Lb>>2]|32}else Mb=+g[Ib+132>>2];if(Mb<Kb){Kb=Mb;Jb=Ib}}while(0);Ib=c[Ib+12>>2]|0}while((Ib|0)!=0);if((Jb|0)==0|Kb>.9999988079071045){B=255;break}Lb=c[(c[Jb+48>>2]|0)+8>>2]|0;Ib=c[(c[Jb+52>>2]|0)+8>>2]|0;tc=Lb+28|0;Nb=t+0|0;ic=tc+0|0;sc=Nb+36|0;do{c[Nb>>2]=c[ic>>2];Nb=Nb+4|0;ic=ic+4|0}while((Nb|0)<(sc|0));uc=Ib+28|0;Nb=u+0|0;ic=uc+0|0;sc=Nb+36|0;do{c[Nb>>2]=c[ic>>2];Nb=Nb+4|0;ic=ic+4|0}while((Nb|0)<(sc|0));Nb=Lb+60|0;Mb=+g[Nb>>2];if(!(Mb<1.0)){B=257;break}Mc=(Kb-Mb)/(1.0-Mb);Bc=Lb+36|0;Mb=1.0-Mc;vc=Lb+44|0;wc=Lb+48|0;Tc=+g[Bc>>2]*Mb+Mc*+g[vc>>2];Ic=Mb*+g[Lb+40>>2]+Mc*+g[wc>>2];Lc=+Tc;Jc=+Ic;g[Bc>>2]=Lc;g[Bc+4>>2]=Jc;Bc=Lb+52|0;xc=Lb+56|0;Mc=Mb*+g[Bc>>2]+Mc*+g[xc>>2];g[Bc>>2]=Mc;g[Nb>>2]=Kb;Bc=Lb+44|0;g[Bc>>2]=Lc;g[Bc+4>>2]=Jc;g[xc>>2]=Mc;Jc=+R(+Mc);Bc=Lb+20|0;g[Bc>>2]=Jc;Mc=+Q(+Mc);Ac=Lb+24|0;g[Ac>>2]=Mc;yc=Lb+12|0;Gc=Lb+28|0;Lc=+g[Gc>>2];zc=Lb+32|0;Mb=+g[zc>>2];Tc=+(Tc-(Mc*Lc-Jc*Mb));Mb=+(Ic-(Jc*Lc+Mc*Mb));Nb=yc;g[Nb>>2]=Tc;g[Nb+4>>2]=Mb;Nb=Ib+60|0;Mb=+g[Nb>>2];if(!(Mb<1.0)){B=259;break}Lc=(Kb-Mb)/(1.0-Mb);Sc=Ib+36|0;Tc=1.0-Lc;Hc=Ib+44|0;Nc=Ib+48|0;Mc=+g[Sc>>2]*Tc+Lc*+g[Hc>>2];Fc=Tc*+g[Ib+40>>2]+Lc*+g[Nc>>2];Jc=+Mc;Ic=+Fc;g[Sc>>2]=Jc;g[Sc+4>>2]=Ic;Sc=Ib+52|0;Kc=Ib+56|0;Lc=Tc*+g[Sc>>2]+Lc*+g[Kc>>2];g[Sc>>2]=Lc;g[Nb>>2]=Kb;Sc=Ib+44|0;g[Sc>>2]=Jc;g[Sc+4>>2]=Ic;g[Kc>>2]=Lc;Ic=+R(+Lc);Sc=Ib+20|0;g[Sc>>2]=Ic;Lc=+Q(+Lc);Rc=Ib+24|0;g[Rc>>2]=Lc;Qc=Ib+12|0;Pc=Ib+28|0;Jc=+g[Pc>>2];Oc=Ib+32|0;Tc=+g[Oc>>2];Mc=+(Mc-(Lc*Jc-Ic*Tc));Tc=+(Fc-(Ic*Jc+Lc*Tc));Nb=Qc;g[Nb>>2]=Mc;g[Nb+4>>2]=Tc;Dx(Jb,c[l>>2]|0);Nb=Jb+4|0;ic=c[Nb>>2]|0;c[Nb>>2]=ic&-33;sc=Jb+128|0;c[sc>>2]=(c[sc>>2]|0)+1;if((ic&6|0)!=6){c[Nb>>2]=ic&-37;Nb=tc+0|0;ic=t+0|0;sc=Nb+36|0;do{c[Nb>>2]=c[ic>>2];Nb=Nb+4|0;ic=ic+4|0}while((Nb|0)<(sc|0));Nb=uc+0|0;ic=u+0|0;sc=Nb+36|0;do{c[Nb>>2]=c[ic>>2];Nb=Nb+4|0;ic=ic+4|0}while((Nb|0)<(sc|0));Jc=+g[xc>>2];Mc=+R(+Jc);g[Bc>>2]=Mc;Jc=+Q(+Jc);g[Ac>>2]=Jc;Tc=+g[Gc>>2];Lc=+g[zc>>2];Ic=+(+g[vc>>2]-(Jc*Tc-Mc*Lc));Lc=+(+g[wc>>2]-(Mc*Tc+Jc*Lc));Gc=yc;g[Gc>>2]=Ic;g[Gc+4>>2]=Lc;Lc=+g[Kc>>2];Ic=+R(+Lc);g[Sc>>2]=Ic;Lc=+Q(+Lc);g[Rc>>2]=Lc;Jc=+g[Pc>>2];Tc=+g[Oc>>2];Mc=+(+g[Hc>>2]-(Lc*Jc-Ic*Tc));Tc=+(+g[Nc>>2]-(Ic*Jc+Lc*Tc));Sc=Qc;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;continue}ic=Lb+4|0;sc=e[ic>>1]|0;if((sc&2|0)==0){b[ic>>1]=sc|2;g[Lb+144>>2]=0.0}tc=Ib+4|0;sc=e[tc>>1]|0;if((sc&2|0)==0){b[tc>>1]=sc|2;g[Ib+144>>2]=0.0}c[qa>>2]=0;c[pa>>2]=0;c[oa>>2]=0;jx(z,Lb);jx(z,Ib);kx(z,Jb);b[ic>>1]=e[ic>>1]|1;b[tc>>1]=e[tc>>1]|1;c[Nb>>2]=c[Nb>>2]|1;c[s>>2]=Lb;c[na>>2]=Ib;Nb=Lb;Jb=1;while(1){j:do if((c[Nb>>2]|0)==2?(A=c[Nb+112>>2]|0,(A|0)!=0):0){tc=Nb+4|0;uc=A;do{if((c[qa>>2]|0)==(c[ma>>2]|0))break j;if((c[pa>>2]|0)==(c[la>>2]|0))break j;yc=c[uc+4>>2]|0;xc=yc+4|0;k:do if((c[xc>>2]&1|0)==0){vc=c[uc>>2]|0;do if((c[vc>>2]|0)==2){if(!((b[tc>>1]&8)==0))break;if((b[vc+4>>1]&8)==0)break k}while(0);if((a[(c[yc+48>>2]|0)+38>>0]|0)!=0)break;if((a[(c[yc+52>>2]|0)+38>>0]|0)!=0)break;wc=vc+28|0;Nb=v+0|0;ic=wc+0|0;sc=Nb+36|0;do{c[Nb>>2]=c[ic>>2];Nb=Nb+4|0;ic=ic+4|0}while((Nb|0)<(sc|0));Nb=vc+4|0;if((b[Nb>>1]&1)==0){ic=vc+60|0;Mb=+g[ic>>2];if(!(Mb<1.0)){B=280;break h}Lc=(Kb-Mb)/(1.0-Mb);Rc=vc+36|0;Tc=1.0-Lc;Mc=+g[Rc>>2]*Tc+Lc*+g[vc+44>>2];Fc=Tc*+g[vc+40>>2]+Lc*+g[vc+48>>2];Jc=+Mc;Ic=+Fc;g[Rc>>2]=Jc;g[Rc+4>>2]=Ic;Rc=vc+52|0;Sc=vc+56|0;Lc=Tc*+g[Rc>>2]+Lc*+g[Sc>>2];g[Rc>>2]=Lc;g[ic>>2]=Kb;Rc=vc+44|0;g[Rc>>2]=Jc;g[Rc+4>>2]=Ic;g[Sc>>2]=Lc;Ic=+R(+Lc);g[vc+20>>2]=Ic;Lc=+Q(+Lc);g[vc+24>>2]=Lc;Jc=+g[vc+28>>2];Tc=+g[vc+32>>2];Mc=+(Mc-(Lc*Jc-Ic*Tc));Tc=+(Fc-(Ic*Jc+Lc*Tc));Sc=vc+12|0;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc}Dx(yc,c[l>>2]|0);ic=c[xc>>2]|0;if((ic&4|0)==0){Nb=wc+0|0;ic=v+0|0;sc=Nb+36|0;do{c[Nb>>2]=c[ic>>2];Nb=Nb+4|0;ic=ic+4|0}while((Nb|0)<(sc|0));Lc=+g[vc+56>>2];Ic=+R(+Lc);g[vc+20>>2]=Ic;Lc=+Q(+Lc);g[vc+24>>2]=Lc;Jc=+g[vc+28>>2];Tc=+g[vc+32>>2];Mc=+(+g[vc+44>>2]-(Lc*Jc-Ic*Tc));Tc=+(+g[vc+48>>2]-(Ic*Jc+Lc*Tc));Sc=vc+12|0;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;break}if((ic&2|0)==0){Nb=wc+0|0;ic=v+0|0;sc=Nb+36|0;do{c[Nb>>2]=c[ic>>2];Nb=Nb+4|0;ic=ic+4|0}while((Nb|0)<(sc|0));Lc=+g[vc+56>>2];Ic=+R(+Lc);g[vc+20>>2]=Ic;Lc=+Q(+Lc);g[vc+24>>2]=Lc;Jc=+g[vc+28>>2];Tc=+g[vc+32>>2];Mc=+(+g[vc+44>>2]-(Lc*Jc-Ic*Tc));Tc=+(+g[vc+48>>2]-(Ic*Jc+Lc*Tc));Sc=vc+12|0;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;break}c[xc>>2]=ic|1;kx(z,yc);ic=e[Nb>>1]|0;if((ic&1|0)!=0)break;b[Nb>>1]=ic|1;do if((c[vc>>2]|0)!=0){if((ic&2|0)!=0)break;b[Nb>>1]=ic|3;g[vc+144>>2]=0.0}while(0);jx(z,vc)}while(0);uc=c[uc+12>>2]|0}while((uc|0)!=0)}while(0);if((Jb|0)>=2)break;Nb=c[s+(Jb<<2)>>2]|0;Jb=Jb+1|0}Kb=(1.0-Kb)*h;Mb=1.0/Kb;Jb=c[Lb+8>>2]|0;Lb=c[Ib+8>>2]|0;sc=c[qa>>2]|0;if((sc|0)<=(Jb|0)){B=295;break}if((sc|0)<=(Lb|0)){B=300;break}Ib=(sc|0)>0;if(Ib){uc=c[ka>>2]|0;ic=c[ja>>2]|0;Nb=c[ia>>2]|0;tc=0;do{Sc=c[uc+(tc<<2)>>2]|0;Rc=Sc+44|0;Qc=c[Rc+4>>2]|0;Pc=ic+(tc*12|0)|0;c[Pc>>2]=c[Rc>>2];c[Pc+4>>2]=Qc;g[ic+(tc*12|0)+8>>2]=+g[Sc+56>>2];Pc=Sc+64|0;Qc=c[Pc+4>>2]|0;Rc=Nb+(tc*12|0)|0;c[Rc>>2]=c[Pc>>2];c[Rc+4>>2]=Qc;g[Nb+(tc*12|0)+8>>2]=+g[Sc+72>>2];tc=tc+1|0}while((tc|0)<(sc|0))}else{ic=c[ja>>2]|0;Nb=c[ia>>2]|0}c[ga>>2]=c[ha>>2];c[fa>>2]=c[pa>>2];c[ea>>2]=c[z>>2];g[x>>2]=Kb;g[da>>2]=Mb;g[ca>>2]=1.0;c[ba>>2]=j;c[aa>>2]=20;a[$>>0]=0;a[_+0>>0]=a[w+0>>0]|0;a[_+1>>0]=a[w+1>>0]|0;a[_+2>>0]=a[w+2>>0]|0;c[Z>>2]=ic;c[Y>>2]=Nb;Ex(y,x);uc=c[X>>2]|0;sc=(uc|0)>0;tc=c[W>>2]|0;vc=c[V>>2]|0;wc=0;do{if(sc){xc=0;Xb=0.0;do{Gc=tc+(xc*88|0)|0;zc=c[tc+(xc*88|0)+32>>2]|0;Bc=c[tc+(xc*88|0)+36>>2]|0;Hc=tc+(xc*88|0)+48|0;Ub=+g[Hc>>2];Tb=+g[Hc+4>>2];Hc=tc+(xc*88|0)+56|0;Rb=+g[Hc>>2];Mb=+g[Hc+4>>2];Hc=c[tc+(xc*88|0)+84>>2]|0;if((zc|0)==(Jb|0)|(zc|0)==(Lb|0)){Ob=+g[tc+(xc*88|0)+64>>2];Sb=+g[tc+(xc*88|0)+40>>2]}else{Ob=0.0;Sb=0.0}Qb=+g[tc+(xc*88|0)+44>>2];Pb=+g[tc+(xc*88|0)+68>>2];yc=vc+(zc*12|0)|0;Ac=yc;Wb=+g[Ac>>2];Yb=+g[Ac+4>>2];zc=vc+(zc*12|0)+8|0;ac=+g[zc>>2];Ac=vc+(Bc*12|0)|0;Sc=Ac;Zb=+g[Sc>>2];_b=+g[Sc+4>>2];Bc=vc+(Bc*12|0)+8|0;$b=+g[Bc>>2];if((Hc|0)>0){Vb=Sb+Qb;Kc=0;do{fc=+R(+ac);g[U>>2]=fc;jc=+Q(+ac);g[T>>2]=jc;gc=+R(+$b);g[P>>2]=gc;cc=+Q(+$b);g[J>>2]=cc;bc=+(Wb-(Ub*jc-Tb*fc));fc=+(Yb-(Tb*jc+Ub*fc));Sc=p;g[Sc>>2]=bc;g[Sc+4>>2]=fc;fc=+(Zb-(Rb*cc-Mb*gc));gc=+(_b-(Mb*cc+Rb*gc));Sc=q;g[Sc>>2]=fc;g[Sc+4>>2]=gc;Hx(r,Gc,p,q,Kc);Sc=r;gc=+g[Sc>>2];fc=+g[Sc+4>>2];Sc=I;cc=+g[Sc>>2];bc=+g[Sc+4>>2];jc=+g[S>>2];ec=cc-Wb;dc=bc-Yb;cc=cc-Zb;bc=bc-_b;Xb=Xb<jc?Xb:jc;jc=(jc+.004999999888241291)*.75;jc=jc<0.0?jc:0.0;hc=fc*ec-gc*dc;Tc=fc*cc-gc*bc;hc=Tc*Pb*Tc+(Vb+hc*Ob*hc);if(hc>0.0)hc=-(jc<-.20000000298023224?-.20000000298023224:jc)/hc;else hc=0.0;Tc=gc*hc;Mc=fc*hc;Wb=Wb-Sb*Tc;Yb=Yb-Sb*Mc;ac=ac-Ob*(ec*Mc-dc*Tc);Zb=Zb+Qb*Tc;_b=_b+Qb*Mc;$b=$b+Pb*(cc*Mc-bc*Tc);Kc=Kc+1|0}while((Kc|0)!=(Hc|0))}Tc=+Wb;Mc=+Yb;Sc=yc;g[Sc>>2]=Tc;g[Sc+4>>2]=Mc;g[zc>>2]=ac;Mc=+Zb;Tc=+_b;Sc=Ac;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;g[Bc>>2]=$b;xc=xc+1|0}while((xc|0)<(uc|0))}else Xb=0.0;wc=wc+1|0}while(!(Xb>=-.007499999832361937)&(wc|0)<20);Sc=c[ka>>2]|0;Pc=Sc+(Jb<<2)|0;Oc=ic+(Jb*12|0)|0;Rc=c[Oc+4>>2]|0;Qc=(c[Pc>>2]|0)+36|0;c[Qc>>2]=c[Oc>>2];c[Qc+4>>2]=Rc;g[(c[Pc>>2]|0)+52>>2]=+g[ic+(Jb*12|0)+8>>2];Sc=Sc+(Lb<<2)|0;Pc=ic+(Lb*12|0)|0;Qc=c[Pc+4>>2]|0;Rc=(c[Sc>>2]|0)+36|0;c[Rc>>2]=c[Pc>>2];c[Rc+4>>2]=Qc;g[(c[Sc>>2]|0)+52>>2]=+g[ic+(Lb*12|0)+8>>2];Fx(y);if(Hb){Jb=0;do{Gx(y);Jb=Jb+1|0}while((Jb|0)<(j|0))}if(Ib){Ib=0;do{Jb=ic+(Ib*12|0)|0;Sc=Jb;Ob=+g[Sc>>2];Mb=+g[Sc+4>>2];Pb=+g[ic+(Ib*12|0)+8>>2];Sc=Nb+(Ib*12|0)|0;Qb=+g[Sc>>2];Sb=+g[Sc+4>>2];Rb=+g[Nb+(Ib*12|0)+8>>2];Tc=Kb*Qb;Tb=Kb*Sb;Tb=Tc*Tc+Tb*Tb;if(Tb>4.0){Tc=2.0/+O(+Tb);Qb=Qb*Tc;Sb=Sb*Tc}Tb=Kb*Rb;if(Tb*Tb>2.4674012660980225){if(!(Tb>0.0))Tb=-Tb;Rb=Rb*(1.5707963705062866/Tb)}Mc=Ob+Kb*Qb;Fc=Mb+Kb*Sb;Lc=Pb+Kb*Rb;Ec=+Mc;Tc=+Fc;ic=Jb;g[ic>>2]=Ec;g[ic+4>>2]=Tc;ic=c[ja>>2]|0;g[ic+(Ib*12|0)+8>>2]=Lc;Nb=c[ia>>2]|0;Jc=+Qb;Ic=+Sb;Sc=Nb+(Ib*12|0)|0;g[Sc>>2]=Jc;g[Sc+4>>2]=Ic;g[Nb+(Ib*12|0)+8>>2]=Rb;Sc=c[(c[ka>>2]|0)+(Ib<<2)>>2]|0;Rc=Sc+44|0;g[Rc>>2]=Ec;g[Rc+4>>2]=Tc;g[Sc+56>>2]=Lc;Rc=Sc+64|0;g[Rc>>2]=Jc;g[Rc+4>>2]=Ic;g[Sc+72>>2]=Rb;Ic=+R(+Lc);g[Sc+20>>2]=Ic;Lc=+Q(+Lc);g[Sc+24>>2]=Lc;Jc=+g[Sc+28>>2];Tc=+g[Sc+32>>2];Mc=+(Mc-(Lc*Jc-Ic*Tc));Tc=+(Fc-(Ic*Jc+Lc*Tc));Sc=Sc+12|0;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;Ib=Ib+1|0}while((Ib|0)<(c[qa>>2]|0))}Sc=c[sa>>2]|0;hx(z,Sc);Lb=c[L>>2]|0;Ew(Lb,Sc);Ew(Lb,c[W>>2]|0);Lb=c[qa>>2]|0;if((Lb|0)>0){Ib=c[ka>>2]|0;Jb=0;do{Nb=c[Ib+(Jb<<2)>>2]|0;Sc=Nb+4|0;b[Sc>>1]=e[Sc>>1]&65534;do if((c[Nb>>2]|0)==2){Gw(Nb);Nb=c[Nb+112>>2]|0;if((Nb|0)==0)break;do{Sc=(c[Nb+4>>2]|0)+4|0;c[Sc>>2]=c[Sc>>2]&-34;Nb=c[Nb+12>>2]|0}while((Nb|0)!=0)}while(0);Jb=Jb+1|0}while((Jb|0)<(Lb|0))}Nw(E);if((a[K>>0]|0)!=0){B=330;break}}switch(B|0){case 158:{Aa(11256,11056,641,11312);break};case 163:{Aa(11328,11840,715,11880);break};case 167:{Aa(11328,11840,715,11880);break};case 170:{Aa(11328,11056,676,11312);break};case 172:{Aa(6304,6328,280,6376);break};case 177:{Aa(6528,6328,50,16232);break};case 180:{Aa(6408,6440,103,6488);break};case 182:{Aa(6408,6440,103,6488);break};case 187:{Aa(6408,6440,103,6488);break};case 189:{Aa(6408,6440,103,6488);break};case 193:{Aa(6408,6440,103,6488);break};case 197:{Aa(6408,6440,103,6488);break};case 199:{Aa(6408,6440,103,6488);break};case 203:{Aa(6408,6440,103,6488);break};case 214:{Aa(6408,6440,103,6488);break};case 216:{Aa(6408,6440,103,6488);break};case 223:{Aa(6408,6440,103,6488);break};case 230:{Aa(6408,6440,103,6488);break};case 232:{Aa(15192,6328,183,6504);break};case 255:{a[H>>0]=1;break};case 257:{Aa(11328,11840,715,11880);break};case 259:{Aa(11328,11840,715,11880);break};case 280:{Aa(11328,11840,715,11880);break};case 295:{Aa(10936,10960,386,11312);break};case 300:{Aa(11008,10960,387,11312);break};case 330:{a[H>>0]=0;break}}gx(z);g[f+103024>>2]=0.0;B=332}}else B=332;if((B|0)==332?C:0)g[G>>2]=D;o=c[n>>2]|0;if((o&4|0)==0){Sc=o&-3;c[n>>2]=Sc;Sc=f+102996|0;g[Sc>>2]=0.0;i=m;return}p=c[f+102952>>2]|0;if((p|0)==0){Sc=o&-3;c[n>>2]=Sc;Sc=f+102996|0;g[Sc>>2]=0.0;i=m;return}do{g[p+76>>2]=0.0;g[p+80>>2]=0.0;g[p+84>>2]=0.0;p=c[p+96>>2]|0}while((p|0)!=0);Sc=o&-3;c[n>>2]=Sc;Sc=f+102996|0;g[Sc>>2]=0.0;i=m;return}function mx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0,x=0,y=0,z=0.0;f=i;i=i+112|0;m=f+104|0;l=f+96|0;n=f+88|0;o=f+80|0;j=f+8|0;h=f;k=f+16|0;t=c[b+4>>2]|0;if((t|0)==1){q=+g[d+12>>2];r=+g[b+12>>2];p=+g[d+8>>2];u=+g[b+16>>2];v=+g[d>>2];s=+g[d+4>>2];g[n>>2]=v+(q*r-p*u);g[n+4>>2]=r*p+q*u+s;t=b+20|0;u=+g[t>>2];r=+g[t+4>>2];g[o>>2]=v+(q*u-p*r);g[o+4>>2]=u*p+q*r+s;t=c[a+102984>>2]|0;vb[c[(c[t>>2]|0)+24>>2]&63](t,n,o,e);i=f;return}else if((t|0)==3){k=c[b+16>>2]|0;m=c[b+12>>2]|0;n=d+12|0;p=+g[n>>2];u=+g[m>>2];b=d+8|0;r=+g[b>>2];v=+g[m+4>>2];s=+g[d>>2];o=d+4|0;q=+g[o>>2];g[j>>2]=s+(p*u-r*v);g[j+4>>2]=u*r+p*v+q;if((k|0)<=1){i=f;return}l=h+4|0;a=a+102984|0;t=1;while(1){u=+g[m+(t<<3)>>2];v=+g[m+(t<<3)+4>>2];g[h>>2]=s+(p*u-r*v);g[l>>2]=u*r+p*v+q;y=c[a>>2]|0;vb[c[(c[y>>2]|0)+24>>2]&63](y,j,h,e);y=c[a>>2]|0;ob[c[(c[y>>2]|0)+16>>2]&63](y,j,.05000000074505806,e);y=h;x=c[y+4>>2]|0;w=j;c[w>>2]=c[y>>2];c[w+4>>2]=x;t=t+1|0;if((t|0)==(k|0))break;p=+g[n>>2];r=+g[b>>2];s=+g[d>>2];q=+g[o>>2]}i=f;return}else if((t|0)==0){u=+g[d+12>>2];q=+g[b+12>>2];s=+g[d+8>>2];r=+g[b+16>>2];v=q*s+u*r+ +g[d+4>>2];g[m>>2]=+g[d>>2]+(u*q-s*r);g[m+4>>2]=v;v=+g[b+8>>2];g[l>>2]=u-s*0.0;g[l+4>>2]=s+u*0.0;y=c[a+102984>>2]|0;mb[c[(c[y>>2]|0)+20>>2]&63](y,m,v,l,e);i=f;return}else if((t|0)==2){h=c[b+148>>2]|0;if((h|0)>=9)Aa(11344,11056,1077,11368);if((h|0)>0){j=b+20|0;q=+g[d+12>>2];r=+g[d+8>>2];p=+g[d>>2];s=+g[d+4>>2];d=0;do{z=+g[j+(d<<3)>>2];v=+g[j+(d<<3)+4>>2];u=+(p+(q*z-r*v));v=+(z*r+q*v+s);y=k+(d<<3)|0;g[y>>2]=u;g[y+4>>2]=v;d=d+1|0}while((d|0)!=(h|0))}y=c[a+102984>>2]|0;vb[c[(c[y>>2]|0)+12>>2]&63](y,k,h,e);i=f;return}else{i=f;return}}function nx(a,c,d){a=a|0;c=c|0;d=d|0;var e=0;a=i;e=b[c+36>>1]|0;if(!(e<<16>>16==0?1:e<<16>>16!=(b[d+36>>1]|0))){e=e<<16>>16>0;i=a;return e|0}if((b[d+32>>1]&b[c+34>>1])<<16>>16==0){e=0;i=a;return e|0}e=(b[d+34>>1]&b[c+32>>1])<<16>>16!=0;i=a;return e|0}function ox(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;h=i;f=xw(f,144)|0;if((f|0)==0){j=0;i=h;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=b;c[f+60>>2]=e;c[f+124>>2]=0;c[f+128>>2]=0;e=a+16|0;j=f+8|0;b=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(b|0));g[f+136>>2]=+O(+(+g[e>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;c[f>>2]=12104;if((c[(c[a+12>>2]|0)+4>>2]|0)!=3)Aa(12312,12120,43,12192);if((c[(c[d+12>>2]|0)+4>>2]|0)==0){j=f;i=h;return j|0}else Aa(13920,12120,44,12192);return 0}function px(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);yw(b,a,144);i=d;return}function qx(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;i=i+48|0;j=h;k=c[(c[a+48>>2]|0)+12>>2]|0;c[j>>2]=6968;c[j+4>>2]=1;g[j+8>>2]=.009999999776482582;l=j+28|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;b[l+16>>1]=0;aw(k,j,c[a+56>>2]|0);Iv(d,j,e,c[(c[a+52>>2]|0)+12>>2]|0,f);i=h;return}function rx(a){a=a|0;return}function sx(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function tx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;h=i;f=xw(f,144)|0;if((f|0)==0){j=0;i=h;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=b;c[f+60>>2]=e;c[f+124>>2]=0;c[f+128>>2]=0;e=a+16|0;j=f+8|0;b=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(b|0));g[f+136>>2]=+O(+(+g[e>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;c[f>>2]=12296;if((c[(c[a+12>>2]|0)+4>>2]|0)!=3)Aa(12312,12360,43,12432);if((c[(c[d+12>>2]|0)+4>>2]|0)==2){j=f;i=h;return j|0}else Aa(14176,12360,44,12432);return 0}function ux(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);yw(b,a,144);i=d;return}function vx(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;i=i+48|0;j=h;k=c[(c[a+48>>2]|0)+12>>2]|0;c[j>>2]=6968;c[j+4>>2]=1;g[j+8>>2]=.009999999776482582;l=j+28|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;b[l+16>>1]=0;aw(k,j,c[a+56>>2]|0);Jv(d,j,e,c[(c[a+52>>2]|0)+12>>2]|0,f);i=h;return}function wx(a){a=a|0;return}function xx(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function yx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=xw(f,144)|0;if((f|0)==0){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;c[f>>2]=12520;if((c[(c[a+12>>2]|0)+4>>2]|0)!=0)Aa(12536,12584,44,12648);if((c[(c[d+12>>2]|0)+4>>2]|0)==0){j=f;i=b;return j|0}else Aa(13920,12584,45,12648);return 0}function zx(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);yw(b,a,144);i=d;return}function Ax(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0;f=i;o=c[(c[a+48>>2]|0)+12>>2]|0;n=c[(c[a+52>>2]|0)+12>>2]|0;h=b+60|0;c[h>>2]=0;a=o+12|0;k=+g[d+12>>2];q=+g[a>>2];p=+g[d+8>>2];l=+g[o+16>>2];j=n+12|0;s=+g[e+12>>2];u=+g[j>>2];t=+g[e+8>>2];r=+g[n+16>>2];m=+g[e>>2]+(s*u-t*r)-(+g[d>>2]+(k*q-p*l));l=u*t+s*r+ +g[e+4>>2]-(q*p+k*l+ +g[d+4>>2]);k=+g[o+8>>2]+ +g[n+8>>2];if(m*m+l*l>k*k){i=f;return}c[b+56>>2]=0;o=c[a+4>>2]|0;n=b+48|0;c[n>>2]=c[a>>2];c[n+4>>2]=o;g[b+40>>2]=0.0;g[b+44>>2]=0.0;c[h>>2]=1;n=c[j+4>>2]|0;o=b;c[o>>2]=c[j>>2];c[o+4>>2]=n;c[b+16>>2]=0;i=f;return}function Bx(a){a=a|0;return}function Cx(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Dx(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;j=i;i=i+192|0;q=j+100|0;s=j+88|0;p=j+64|0;h=j;r=d+64|0;k=h+0|0;m=r+0|0;l=k+64|0;do{c[k>>2]=c[m>>2];k=k+4|0;m=m+4|0}while((k|0)<(l|0));l=d+4|0;o=c[l>>2]|0;c[l>>2]=o|4;o=o>>>1;t=c[d+48>>2]|0;u=c[d+52>>2]|0;k=(a[u+38>>0]|a[t+38>>0])<<24>>24!=0;n=c[t+8>>2]|0;m=c[u+8>>2]|0;v=n+12|0;w=m+12|0;if(!k){vb[c[c[d>>2]>>2]&63](d,r,v,w);u=d+124|0;p=(c[u>>2]|0)>0;if(p){w=c[h+60>>2]|0;x=(w|0)>0;t=0;do{s=d+(t*20|0)+72|0;g[s>>2]=0.0;r=d+(t*20|0)+76|0;g[r>>2]=0.0;q=c[d+(t*20|0)+80>>2]|0;a:do if(x){y=0;while(1){v=y+1|0;if((c[h+(y*20|0)+16>>2]|0)==(q|0))break;if((v|0)<(w|0))y=v;else break a}g[s>>2]=+g[h+(y*20|0)+8>>2];g[r>>2]=+g[h+(y*20|0)+12>>2]}while(0);t=t+1|0}while((t|0)<(c[u>>2]|0))}o=o&1;if(p^(o|0)!=0){r=n+4|0;q=e[r>>1]|0;if((q&2|0)==0){b[r>>1]=q|2;g[n+144>>2]=0.0}q=m+4|0;n=e[q>>1]|0;if((n&2|0)==0){b[q>>1]=n|2;g[m+144>>2]=0.0}}}else{t=c[t+12>>2]|0;x=c[u+12>>2]|0;u=c[d+56>>2]|0;y=c[d+60>>2]|0;c[q+16>>2]=0;c[q+20>>2]=0;g[q+24>>2]=0.0;c[q+44>>2]=0;c[q+48>>2]=0;g[q+52>>2]=0.0;Nv(q,t,u);Nv(q+28|0,x,y);y=q+56|0;c[y+0>>2]=c[v+0>>2];c[y+4>>2]=c[v+4>>2];c[y+8>>2]=c[v+8>>2];c[y+12>>2]=c[v+12>>2];y=q+72|0;c[y+0>>2]=c[w+0>>2];c[y+4>>2]=c[w+4>>2];c[y+8>>2]=c[w+8>>2];c[y+12>>2]=c[w+12>>2];a[q+88>>0]=1;b[s+4>>1]=0;Ov(p,s,q);p=+g[p+16>>2]<11920928955078125.0e-22;c[d+124>>2]=0;o=o&1}m=c[l>>2]|0;c[l>>2]=p?m|2:m&-3;l=(o|0)==0;m=p^1;n=(f|0)==0;if(!(l^1|m|n))lb[c[(c[f>>2]|0)+8>>2]&127](f,d);if(!(l|p|n))lb[c[(c[f>>2]|0)+12>>2]&127](f,d);if(k|m|n){i=j;return}pb[c[(c[f>>2]|0)+16>>2]&63](f,d,h);i=j;return}function Ex(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0;e=i;c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[b+12>>2]=c[d+12>>2];c[b+16>>2]=c[d+16>>2];c[b+20>>2]=c[d+20>>2];r=c[d+40>>2]|0;m=b+32|0;c[m>>2]=r;f=c[d+28>>2]|0;j=b+48|0;c[j>>2]=f;h=b+36|0;c[h>>2]=Dw(r,f*88|0)|0;f=b+40|0;c[f>>2]=Dw(c[m>>2]|0,(c[j>>2]|0)*152|0)|0;c[b+24>>2]=c[d+32>>2];c[b+28>>2]=c[d+36>>2];m=c[d+24>>2]|0;d=b+44|0;c[d>>2]=m;if((c[j>>2]|0)<=0){i=e;return}k=b+20|0;b=b+8|0;l=0;while(1){n=c[m+(l<<2)>>2]|0;o=c[n+48>>2]|0;p=c[n+52>>2]|0;r=c[o+8>>2]|0;q=c[p+8>>2]|0;m=c[n+124>>2]|0;if((m|0)<=0){f=4;break}s=+g[(c[p+12>>2]|0)+8>>2];t=+g[(c[o+12>>2]|0)+8>>2];p=c[f>>2]|0;g[p+(l*152|0)+136>>2]=+g[n+136>>2];g[p+(l*152|0)+140>>2]=+g[n+140>>2];z=r+8|0;c[p+(l*152|0)+112>>2]=c[z>>2];y=q+8|0;c[p+(l*152|0)+116>>2]=c[y>>2];w=r+120|0;g[p+(l*152|0)+120>>2]=+g[w>>2];x=q+120|0;g[p+(l*152|0)+124>>2]=+g[x>>2];v=r+128|0;g[p+(l*152|0)+128>>2]=+g[v>>2];u=q+128|0;g[p+(l*152|0)+132>>2]=+g[u>>2];c[p+(l*152|0)+148>>2]=l;c[p+(l*152|0)+144>>2]=m;o=p+(l*152|0)+80|0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;c[o+16>>2]=0;c[o+20>>2]=0;c[o+24>>2]=0;c[o+28>>2]=0;o=c[h>>2]|0;c[o+(l*88|0)+32>>2]=c[z>>2];c[o+(l*88|0)+36>>2]=c[y>>2];g[o+(l*88|0)+40>>2]=+g[w>>2];g[o+(l*88|0)+44>>2]=+g[x>>2];x=r+28|0;r=c[x+4>>2]|0;w=o+(l*88|0)+48|0;c[w>>2]=c[x>>2];c[w+4>>2]=r;w=q+28|0;r=c[w+4>>2]|0;q=o+(l*88|0)+56|0;c[q>>2]=c[w>>2];c[q+4>>2]=r;g[o+(l*88|0)+64>>2]=+g[v>>2];g[o+(l*88|0)+68>>2]=+g[u>>2];q=n+104|0;r=c[q+4>>2]|0;u=o+(l*88|0)+16|0;c[u>>2]=c[q>>2];c[u+4>>2]=r;u=n+112|0;r=c[u+4>>2]|0;q=o+(l*88|0)+24|0;c[q>>2]=c[u>>2];c[q+4>>2]=r;c[o+(l*88|0)+84>>2]=m;g[o+(l*88|0)+76>>2]=t;g[o+(l*88|0)+80>>2]=s;c[o+(l*88|0)+72>>2]=c[n+120>>2];q=0;do{r=n+(q*20|0)+64|0;if((a[k>>0]|0)==0){g[p+(l*152|0)+(q*36|0)+16>>2]=0.0;g[p+(l*152|0)+(q*36|0)+20>>2]=0.0}else{g[p+(l*152|0)+(q*36|0)+16>>2]=+g[b>>2]*+g[n+(q*20|0)+72>>2];g[p+(l*152|0)+(q*36|0)+20>>2]=+g[b>>2]*+g[n+(q*20|0)+76>>2]}x=p+(l*152|0)+(q*36|0)|0;g[p+(l*152|0)+(q*36|0)+24>>2]=0.0;g[p+(l*152|0)+(q*36|0)+28>>2]=0.0;g[p+(l*152|0)+(q*36|0)+32>>2]=0.0;z=o+(l*88|0)+(q<<3)|0;c[x+0>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;c[x+12>>2]=0;x=r;y=c[x+4>>2]|0;c[z>>2]=c[x>>2];c[z+4>>2]=y;q=q+1|0}while((q|0)!=(m|0));l=l+1|0;if((l|0)>=(c[j>>2]|0)){f=12;break}m=c[d>>2]|0}if((f|0)==4)Aa(13128,13144,71,13208);else if((f|0)==12){i=e;return}}function Fx(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,P=0.0,S=0.0,T=0,U=0,V=0,W=0,X=0,Y=0.0,Z=0.0,_=0.0;b=i;i=i+32|0;d=b;e=a+48|0;if((c[e>>2]|0)<=0){i=b;return}f=a+40|0;h=a+36|0;j=a+44|0;k=a+24|0;o=a+28|0;a=d+4|0;n=d+8|0;m=0;while(1){l=c[f>>2]|0;T=c[h>>2]|0;F=c[(c[j>>2]|0)+(c[l+(m*152|0)+148>>2]<<2)>>2]|0;V=c[l+(m*152|0)+112>>2]|0;G=c[l+(m*152|0)+116>>2]|0;C=+g[l+(m*152|0)+120>>2];B=+g[l+(m*152|0)+124>>2];p=+g[l+(m*152|0)+128>>2];q=+g[l+(m*152|0)+132>>2];W=T+(m*88|0)+48|0;M=+g[W>>2];N=+g[W+4>>2];W=T+(m*88|0)+56|0;S=+g[W>>2];L=+g[W+4>>2];W=c[k>>2]|0;X=W+(V*12|0)|0;v=+g[X>>2];w=+g[X+4>>2];H=+g[W+(V*12|0)+8>>2];X=c[o>>2]|0;U=X+(V*12|0)|0;r=+g[U>>2];u=+g[U+4>>2];s=+g[X+(V*12|0)+8>>2];V=W+(G*12|0)|0;x=+g[V>>2];y=+g[V+4>>2];I=+g[W+(G*12|0)+8>>2];W=X+(G*12|0)|0;z=+g[W>>2];t=+g[W+4>>2];A=+g[X+(G*12|0)+8>>2];G=c[F+124>>2]|0;if((G|0)<=0){d=4;break}D=+g[T+(m*88|0)+80>>2];E=+g[T+(m*88|0)+76>>2];J=+R(+H);K=+Q(+H);H=+R(+I);I=+Q(+I);P=v-(M*K-N*J);N=w-(N*K+M*J);M=x-(S*I-L*H);L=y-(L*I+S*H);T=c[F+120>>2]|0;a:do if((T|0)==1){Z=+g[F+104>>2];S=+g[F+108>>2];Y=K*Z-J*S;S=Z*J+K*S;Z=+Y;_=+S;T=d;g[T>>2]=Z;g[T+4>>2]=_;_=+g[F+112>>2];Z=+g[F+116>>2];P=P+(K*_-J*Z);J=_*J+K*Z+N;N=Y;K=S;T=0;while(1){_=+g[F+(T*20|0)+64>>2];Y=+g[F+(T*20|0)+68>>2];Z=M+(I*_-H*Y);Y=_*H+I*Y+L;_=E-(N*(Z-P)+(Y-J)*K);Z=+((Z-N*D+(Z+N*_))*.5);_=+((Y-K*D+(Y+K*_))*.5);X=d+(T<<3)+8|0;g[X>>2]=Z;g[X+4>>2]=_;T=T+1|0;if((T|0)>=(G|0))break a;N=+g[d>>2];K=+g[a>>2]}}else if((T|0)==2){Y=+g[F+104>>2];_=+g[F+108>>2];Z=I*Y-H*_;_=Y*H+I*_;Y=+Z;S=+_;T=d;g[T>>2]=Y;g[T+4>>2]=S;S=+g[F+112>>2];Y=+g[F+116>>2];M=M+(I*S-H*Y);H=S*H+I*Y+L;L=Z;I=_;T=0;do{_=+g[F+(T*20|0)+64>>2];Y=+g[F+(T*20|0)+68>>2];Z=P+(K*_-J*Y);Y=_*J+K*Y+N;_=D-(L*(Z-M)+(Y-H)*I);Z=+((Z-L*E+(Z+L*_))*.5);_=+((Y-I*E+(Y+I*_))*.5);X=d+(T<<3)+8|0;g[X>>2]=Z;g[X+4>>2]=_;T=T+1|0;L=+g[d>>2];I=+g[a>>2]}while((T|0)<(G|0));Z=+-L;_=+-I;X=d;g[X>>2]=Z;g[X+4>>2]=_}else if((T|0)==0){g[d>>2]=1.0;g[a>>2]=0.0;Z=+g[F+112>>2];_=+g[F+116>>2];P=P+(K*Z-J*_);J=Z*J+K*_+N;_=+g[F+64>>2];Z=+g[F+68>>2];K=M+(I*_-H*Z);H=_*H+I*Z+L;Z=P-K;_=J-H;if(Z*Z+_*_>1.4210854715202004e-14){L=K-P;I=H-J;_=+L;M=+I;X=d;g[X>>2]=_;g[X+4>>2]=M;M=+O(+(L*L+I*I));if(!(M<1.1920928955078125e-7)){_=1.0/M;L=L*_;g[d>>2]=L;I=I*_;g[a>>2]=I}}else{L=1.0;I=0.0}Z=+((P+L*E+(K-L*D))*.5);_=+((J+I*E+(H-I*D))*.5);X=n;g[X>>2]=Z;g[X+4>>2]=_}while(0);T=l+(m*152|0)+72|0;X=d;G=c[X+4>>2]|0;F=T;c[F>>2]=c[X>>2];c[F+4>>2]=G;F=l+(m*152|0)+144|0;G=c[F>>2]|0;do if((G|0)>0){U=l+(m*152|0)+76|0;B=C+B;W=l+(m*152|0)+140|0;V=0;do{H=+g[d+(V<<3)+8>>2];C=H-v;Z=+g[d+(V<<3)+12>>2];I=+C;E=+(Z-w);X=l+(m*152|0)+(V*36|0)|0;g[X>>2]=I;g[X+4>>2]=E;H=H-x;E=+H;Z=+(Z-y);X=l+(m*152|0)+(V*36|0)+8|0;g[X>>2]=E;g[X+4>>2]=Z;Z=+g[U>>2];E=+g[l+(m*152|0)+(V*36|0)+4>>2];I=+g[T>>2];_=C*Z-E*I;D=+g[l+(m*152|0)+(V*36|0)+12>>2];I=Z*H-I*D;I=B+_*p*_+I*q*I;if(I>0.0)I=1.0/I;else I=0.0;g[l+(m*152|0)+(V*36|0)+24>>2]=I;I=+g[U>>2];Z=-+g[T>>2];_=C*Z-I*E;I=H*Z-I*D;I=B+_*p*_+I*q*I;if(I>0.0)I=1.0/I;else I=0.0;g[l+(m*152|0)+(V*36|0)+28>>2]=I;X=l+(m*152|0)+(V*36|0)+32|0;g[X>>2]=0.0;C=+g[T>>2]*(z-A*D-r+s*E)+ +g[U>>2]*(t+A*H-u-s*C);if(C<-1.0)g[X>>2]=-(C*+g[W>>2]);V=V+1|0}while((V|0)!=(G|0));if((c[F>>2]|0)==2){Y=+g[U>>2];s=+g[T>>2];S=+g[l+(m*152|0)>>2]*Y- +g[l+(m*152|0)+4>>2]*s;r=Y*+g[l+(m*152|0)+8>>2]-s*+g[l+(m*152|0)+12>>2];Z=Y*+g[l+(m*152|0)+36>>2]-s*+g[l+(m*152|0)+40>>2];s=Y*+g[l+(m*152|0)+44>>2]-s*+g[l+(m*152|0)+48>>2];Y=p*S;_=q*r;r=B+S*Y+r*_;p=B+Z*p*Z+s*q*s;q=B+Y*Z+_*s;s=r*p-q*q;if(!(r*r<s*1.0e3)){c[F>>2]=1;break}g[l+(m*152|0)+96>>2]=r;g[l+(m*152|0)+100>>2]=q;g[l+(m*152|0)+104>>2]=q;g[l+(m*152|0)+108>>2]=p;if(s!=0.0)s=1.0/s;_=-(s*q);g[l+(m*152|0)+80>>2]=p*s;g[l+(m*152|0)+84>>2]=_;g[l+(m*152|0)+88>>2]=_;g[l+(m*152|0)+92>>2]=r*s}}while(0);m=m+1|0;if((m|0)>=(c[e>>2]|0)){d=32;break}}if((d|0)==4)Aa(13224,13144,168,13256);else if((d|0)==32){i=b;return}}



function Gx(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0,I=0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0,R=0,S=0,T=0,U=0,V=0.0,W=0.0;b=i;d=a+48|0;if((c[d>>2]|0)<=0){i=b;return}e=a+40|0;j=a+28|0;H=c[j>>2]|0;h=0;a:while(1){v=c[e>>2]|0;Q=v+(h*152|0)|0;a=c[v+(h*152|0)+112>>2]|0;f=c[v+(h*152|0)+116>>2]|0;r=+g[v+(h*152|0)+120>>2];m=+g[v+(h*152|0)+128>>2];n=+g[v+(h*152|0)+124>>2];l=+g[v+(h*152|0)+132>>2];I=v+(h*152|0)+144|0;R=c[I>>2]|0;k=H+(a*12|0)|0;S=k;T=H+(f*12|0)|0;U=v+(h*152|0)+72|0;u=+g[U>>2];t=+g[U+4>>2];z=-u;y=+g[v+(h*152|0)+136>>2];if(!((R+ -1|0)>>>0<2)){d=5;break}q=+g[T+4>>2];s=+g[T>>2];w=+g[S+4>>2];x=+g[S>>2];S=0;p=+g[H+(a*12|0)+8>>2];o=+g[H+(f*12|0)+8>>2];do{O=+g[v+(h*152|0)+(S*36|0)+12>>2];M=+g[v+(h*152|0)+(S*36|0)+8>>2];L=+g[v+(h*152|0)+(S*36|0)+4>>2];K=+g[v+(h*152|0)+(S*36|0)>>2];P=y*+g[v+(h*152|0)+(S*36|0)+16>>2];U=v+(h*152|0)+(S*36|0)+20|0;N=+g[U>>2];G=N- +g[v+(h*152|0)+(S*36|0)+28>>2]*(t*(s-o*O-x+p*L)+(q+o*M-w-p*K)*z);J=-P;P=G<P?G:P;P=P<J?J:P;N=P-N;g[U>>2]=P;P=t*N;N=N*z;x=x-r*P;w=w-r*N;p=p-m*(K*N-L*P);s=s+n*P;q=q+n*N;o=o+l*(M*N-O*P);S=S+1|0}while((S|0)!=(R|0));do if((c[I>>2]|0)!=1){I=v+(h*152|0)+16|0;G=+g[I>>2];H=v+(h*152|0)+52|0;J=+g[H>>2];if(!(G>=0.0)|!(J>=0.0)){d=10;break a}y=+g[v+(h*152|0)+12>>2];z=+g[v+(h*152|0)+8>>2];A=+g[v+(h*152|0)+4>>2];D=+g[Q>>2];B=+g[v+(h*152|0)+48>>2];C=+g[v+(h*152|0)+44>>2];F=+g[v+(h*152|0)+40>>2];E=+g[v+(h*152|0)+36>>2];L=+g[v+(h*152|0)+104>>2];N=+g[v+(h*152|0)+100>>2];M=u*(s-o*y-x+p*A)+t*(q+o*z-w-p*D)- +g[v+(h*152|0)+32>>2]-(G*+g[v+(h*152|0)+96>>2]+J*L);K=u*(s-o*B-x+p*F)+t*(q+o*C-w-p*E)- +g[v+(h*152|0)+68>>2]-(G*N+J*+g[v+(h*152|0)+108>>2]);W=+g[v+(h*152|0)+80>>2]*M+ +g[v+(h*152|0)+88>>2]*K;V=M*+g[v+(h*152|0)+84>>2]+K*+g[v+(h*152|0)+92>>2];P=-W;O=-V;if(!(!(W<=-0.0)|!(V<=-0.0))){M=P-G;V=O-J;N=u*M;M=t*M;W=u*V;V=t*V;K=N+W;L=M+V;g[I>>2]=P;g[H>>2]=O;x=x-r*K;w=w-r*L;s=s+n*K;q=q+n*L;p=p-m*(D*M-A*N+(E*V-F*W));o=o+l*(z*M-y*N+(C*V-B*W));break}W=M*+g[v+(h*152|0)+24>>2];O=-W;if(W<=-0.0?K+N*O>=0.0:0){N=O-G;V=0.0-J;P=u*N;N=t*N;W=u*V;V=t*V;L=W+P;M=V+N;g[I>>2]=O;g[H>>2]=0.0;x=x-r*L;w=w-r*M;s=s+n*L;q=q+n*M;p=p-m*(N*D-P*A+(V*E-W*F));o=o+l*(N*z-P*y+(V*C-W*B));break}W=K*+g[v+(h*152|0)+60>>2];N=-W;if(W<=-0.0?M+L*N>=0.0:0){O=0.0-G;V=N-J;P=u*O;O=t*O;W=u*V;V=t*V;L=P+W;M=O+V;g[I>>2]=0.0;g[H>>2]=N;x=x-r*L;w=w-r*M;s=s+n*L;q=q+n*M;p=p-m*(O*D-P*A+(V*E-W*F));o=o+l*(O*z-P*y+(V*C-W*B));break}if(!(!(M>=0.0)|!(K>=0.0))){O=0.0-G;V=0.0-J;P=u*O;O=t*O;W=u*V;V=t*V;M=P+W;N=O+V;g[I>>2]=0.0;g[H>>2]=0.0;x=x-r*M;w=w-r*N;s=s+n*M;q=q+n*N;p=p-m*(O*D-P*A+(V*E-W*F));o=o+l*(O*z-P*y+(V*C-W*B))}}else{V=+g[v+(h*152|0)+12>>2];O=+g[v+(h*152|0)+8>>2];N=+g[v+(h*152|0)+4>>2];M=+g[Q>>2];U=v+(h*152|0)+16|0;P=+g[U>>2];W=P- +g[v+(h*152|0)+24>>2]*(u*(s-o*V-x+p*N)+t*(q+o*O-w-p*M)- +g[v+(h*152|0)+32>>2]);W=W>0.0?W:0.0;P=W-P;g[U>>2]=W;W=u*P;P=t*P;x=x-r*W;w=w-r*P;s=s+n*W;q=q+n*P;p=p-m*(M*P-N*W);o=o+l*(O*P-V*W)}while(0);W=+x;V=+w;H=k;g[H>>2]=W;g[H+4>>2]=V;H=c[j>>2]|0;g[H+(a*12|0)+8>>2]=p;V=+s;W=+q;H=H+(f*12|0)|0;g[H>>2]=V;g[H+4>>2]=W;H=c[j>>2]|0;g[H+(f*12|0)+8>>2]=o;h=h+1|0;if((h|0)>=(c[d>>2]|0)){d=22;break}}if((d|0)==5)Aa(13288,13144,311,13328);else if((d|0)==10)Aa(13360,13144,406,13328);else if((d|0)==22){i=b;return}}function Hx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0,w=0;h=i;if((c[b+84>>2]|0)<=0)Aa(13392,13144,617,16232);r=c[b+72>>2]|0;if((r|0)==2){v=e+12|0;j=+g[v>>2];k=+g[b+16>>2];r=e+8|0;l=+g[r>>2];q=+g[b+20>>2];p=j*k-l*q;q=k*l+j*q;j=+p;l=+q;w=a;g[w>>2]=j;g[w+4>>2]=l;l=+g[v>>2];j=+g[b+24>>2];k=+g[r>>2];m=+g[b+28>>2];s=+g[d+12>>2];u=+g[b+(f<<3)>>2];t=+g[d+8>>2];o=+g[b+(f<<3)+4>>2];n=+g[d>>2]+(s*u-t*o);o=u*t+s*o+ +g[d+4>>2];g[a+16>>2]=p*(n-(+g[e>>2]+(l*j-k*m)))+(o-(j*k+l*m+ +g[e+4>>2]))*q- +g[b+76>>2]- +g[b+80>>2];n=+n;o=+o;f=a+8|0;g[f>>2]=n;g[f+4>>2]=o;p=+-p;q=+-q;f=a;g[f>>2]=p;g[f+4>>2]=q;i=h;return}else if((r|0)==0){m=+g[d+12>>2];n=+g[b+24>>2];u=+g[d+8>>2];l=+g[b+28>>2];j=+g[d>>2]+(m*n-u*l);l=n*u+m*l+ +g[d+4>>2];m=+g[e+12>>2];u=+g[b>>2];n=+g[e+8>>2];o=+g[b+4>>2];k=+g[e>>2]+(m*u-n*o);o=u*n+m*o+ +g[e+4>>2];m=k-j;n=o-l;u=+m;p=+n;w=a;g[w>>2]=u;g[w+4>>2]=p;p=+O(+(m*m+n*n));if(p<1.1920928955078125e-7){p=m;q=n}else{q=1.0/p;p=m*q;g[a>>2]=p;q=n*q;g[a+4>>2]=q}t=+((j+k)*.5);u=+((l+o)*.5);w=a+8|0;g[w>>2]=t;g[w+4>>2]=u;g[a+16>>2]=m*p+n*q- +g[b+76>>2]- +g[b+80>>2];i=h;return}else if((r|0)==1){v=d+12|0;n=+g[v>>2];o=+g[b+16>>2];w=d+8|0;p=+g[w>>2];s=+g[b+20>>2];m=n*o-p*s;s=o*p+n*s;n=+m;p=+s;r=a;g[r>>2]=n;g[r+4>>2]=p;p=+g[v>>2];n=+g[b+24>>2];o=+g[w>>2];q=+g[b+28>>2];l=+g[e+12>>2];j=+g[b+(f<<3)>>2];k=+g[e+8>>2];u=+g[b+(f<<3)+4>>2];t=+g[e>>2]+(l*j-k*u);u=j*k+l*u+ +g[e+4>>2];g[a+16>>2]=m*(t-(+g[d>>2]+(p*n-o*q)))+(u-(n*o+p*q+ +g[d+4>>2]))*s- +g[b+76>>2]- +g[b+80>>2];t=+t;u=+u;w=a+8|0;g[w>>2]=t;g[w+4>>2]=u;i=h;return}else{i=h;return}}function Ix(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=xw(f,144)|0;if((f|0)==0){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;c[f>>2]=13424;if((c[(c[a+12>>2]|0)+4>>2]|0)!=1)Aa(13600,13440,41,13504);if((c[(c[d+12>>2]|0)+4>>2]|0)==0){j=f;i=b;return j|0}else Aa(13920,13440,42,13504);return 0}function Jx(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);yw(b,a,144);i=d;return}function Kx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;Iv(b,c[(c[a+48>>2]|0)+12>>2]|0,d,c[(c[a+52>>2]|0)+12>>2]|0,e);i=f;return}function Lx(a){a=a|0;return}function Mx(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Nx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=xw(f,144)|0;if((f|0)==0){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;c[f>>2]=13584;if((c[(c[a+12>>2]|0)+4>>2]|0)!=1)Aa(13600,13648,41,13720);if((c[(c[d+12>>2]|0)+4>>2]|0)==2){j=f;i=b;return j|0}else Aa(14176,13648,42,13720);return 0}function Ox(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);yw(b,a,144);i=d;return}function Px(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;Jv(b,c[(c[a+48>>2]|0)+12>>2]|0,d,c[(c[a+52>>2]|0)+12>>2]|0,e);i=f;return}function Qx(a){a=a|0;return}function Rx(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Sx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=xw(f,144)|0;if((f|0)==0){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;c[f>>2]=13800;if((c[(c[a+12>>2]|0)+4>>2]|0)!=2)Aa(14040,13816,41,13888);if((c[(c[d+12>>2]|0)+4>>2]|0)==0){j=f;i=b;return j|0}else Aa(13920,13816,42,13888);return 0}function Tx(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);yw(b,a,144);i=d;return}function Ux(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0;f=i;j=c[(c[a+48>>2]|0)+12>>2]|0;p=c[(c[a+52>>2]|0)+12>>2]|0;h=b+60|0;c[h>>2]=0;a=p+12|0;x=+g[e+12>>2];m=+g[a>>2];n=+g[e+8>>2];y=+g[p+16>>2];l=+g[e>>2]+(x*m-n*y)- +g[d>>2];y=m*n+x*y+ +g[e+4>>2]- +g[d+4>>2];x=+g[d+12>>2];n=+g[d+8>>2];m=l*x+y*n;n=x*y-l*n;l=+g[j+8>>2]+ +g[p+8>>2];p=c[j+148>>2]|0;do if((p|0)>0){d=0;e=0;r=-3.4028234663852886e+38;while(1){s=(m- +g[j+(d<<3)+20>>2])*+g[j+(d<<3)+84>>2]+(n- +g[j+(d<<3)+24>>2])*+g[j+(d<<3)+88>>2];if(s>l){d=19;break}z=s>r;r=z?s:r;e=z?d:e;d=d+1|0;if((d|0)>=(p|0)){d=4;break}}if((d|0)==4){z=r<1.1920928955078125e-7;break}else if((d|0)==19){i=f;return}}else{e=0;z=1}while(0);q=e+1|0;o=j+(e<<3)+20|0;d=c[o>>2]|0;o=c[o+4>>2]|0;x=(c[k>>2]=d,+g[k>>2]);t=(c[k>>2]=o,+g[k>>2]);q=j+(((q|0)<(p|0)?q:0)<<3)+20|0;p=c[q>>2]|0;q=c[q+4>>2]|0;y=(c[k>>2]=p,+g[k>>2]);w=(c[k>>2]=q,+g[k>>2]);if(z){c[h>>2]=1;c[b+56>>2]=1;z=j+(e<<3)+84|0;q=c[z+4>>2]|0;p=b+40|0;c[p>>2]=c[z>>2];c[p+4>>2]=q;x=+((x+y)*.5);y=+((t+w)*.5);p=b+48|0;g[p>>2]=x;g[p+4>>2]=y;p=a;q=c[p+4>>2]|0;z=b;c[z>>2]=c[p>>2];c[z+4>>2]=q;c[b+16>>2]=0;i=f;return}s=m-x;u=n-t;r=m-y;v=n-w;if(s*(y-x)+u*(w-t)<=0.0){m=s*s+u*u;if(m>l*l){i=f;return}c[h>>2]=1;c[b+56>>2]=1;h=b+40|0;y=+s;l=+u;z=h;g[z>>2]=y;g[z+4>>2]=l;l=+O(+m);if(!(l<1.1920928955078125e-7)){y=1.0/l;g[h>>2]=s*y;g[b+44>>2]=u*y}p=b+48|0;c[p>>2]=d;c[p+4>>2]=o;p=a;q=c[p+4>>2]|0;z=b;c[z>>2]=c[p>>2];c[z+4>>2]=q;c[b+16>>2]=0;i=f;return}if(!(r*(x-y)+v*(t-w)<=0.0)){r=(x+y)*.5;s=(t+w)*.5;d=j+(e<<3)+84|0;if((m-r)*+g[d>>2]+(n-s)*+g[j+(e<<3)+88>>2]>l){i=f;return}c[h>>2]=1;c[b+56>>2]=1;z=d;q=c[z+4>>2]|0;p=b+40|0;c[p>>2]=c[z>>2];c[p+4>>2]=q;x=+r;y=+s;p=b+48|0;g[p>>2]=x;g[p+4>>2]=y;p=a;q=c[p+4>>2]|0;z=b;c[z>>2]=c[p>>2];c[z+4>>2]=q;c[b+16>>2]=0;i=f;return}m=r*r+v*v;if(m>l*l){i=f;return}c[h>>2]=1;c[b+56>>2]=1;h=b+40|0;y=+r;l=+v;z=h;g[z>>2]=y;g[z+4>>2]=l;l=+O(+m);if(!(l<1.1920928955078125e-7)){y=1.0/l;g[h>>2]=r*y;g[b+44>>2]=v*y}z=b+48|0;c[z>>2]=p;c[z+4>>2]=q;p=a;q=c[p+4>>2]|0;z=b;c[z>>2]=c[p>>2];c[z+4>>2]=q;c[b+16>>2]=0;i=f;return}function Vx(a){a=a|0;return}function Wx(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Xx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=xw(f,144)|0;if((f|0)==0){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;c[f>>2]=14024;if((c[(c[a+12>>2]|0)+4>>2]|0)!=2)Aa(14040,14088,44,14152);if((c[(c[d+12>>2]|0)+4>>2]|0)==2){j=f;i=b;return j|0}else Aa(14176,14088,45,14152);return 0}function Yx(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);yw(b,a,144);i=d;return}function Zx(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0,B=0.0,C=0.0,D=0.0,E=0,F=0,G=0.0,H=0,I=0,J=0.0,K=0,L=0.0,M=0.0,N=0.0;h=i;i=i+80|0;F=h+76|0;r=h+72|0;p=h;q=h+48|0;j=h+24|0;A=c[(c[b+48>>2]|0)+12>>2]|0;E=c[(c[b+52>>2]|0)+12>>2]|0;b=d+60|0;c[b>>2]=0;k=+g[A+8>>2]+ +g[E+8>>2];c[F>>2]=0;l=+Kv(F,A,e,E,f);if(l>k){i=h;return}c[r>>2]=0;m=+Kv(r,E,f,A,e);if(m>k){i=h;return}if(m>l*.9800000190734863+.0010000000474974513){s=+g[f>>2];v=+g[f+4>>2];u=+g[f+8>>2];t=+g[f+12>>2];o=+g[e>>2];l=+g[e+4>>2];m=+g[e+8>>2];n=+g[e+12>>2];r=c[r>>2]|0;c[d+56>>2]=2;f=1;e=E}else{s=+g[e>>2];v=+g[e+4>>2];u=+g[e+8>>2];t=+g[e+12>>2];o=+g[f>>2];l=+g[f+4>>2];m=+g[f+8>>2];n=+g[f+12>>2];r=c[F>>2]|0;c[d+56>>2]=1;f=0;e=A;A=E}E=c[A+148>>2]|0;if(!((r|0)>-1))Aa(5264,5312,151,5368);F=c[e+148>>2]|0;if((F|0)<=(r|0))Aa(5264,5312,151,5368);w=+g[e+(r<<3)+84>>2];L=+g[e+(r<<3)+88>>2];x=t*w-u*L;L=u*w+t*L;w=n*x+m*L;x=n*L-m*x;if((E|0)>0){H=0;K=0;y=3.4028234663852886e+38;while(1){z=w*+g[A+(H<<3)+84>>2]+x*+g[A+(H<<3)+88>>2];I=z<y;K=I?H:K;H=H+1|0;if((H|0)==(E|0))break;else y=I?z:y}}else K=0;I=K+1|0;I=(I|0)<(E|0)?I:0;z=+g[A+(K<<3)+20>>2];D=+g[A+(K<<3)+24>>2];B=+(o+(n*z-m*D));D=+(l+(m*z+n*D));H=p;g[H>>2]=B;g[H+4>>2]=D;H=r&255;E=p+8|0;a[E>>0]=H;a[E+1>>0]=K;a[E+2>>0]=1;a[E+3>>0]=0;D=+g[A+(I<<3)+20>>2];B=+g[A+(I<<3)+24>>2];z=+(o+(n*D-m*B));B=+(l+(m*D+n*B));A=p+12|0;g[A>>2]=z;g[A+4>>2]=B;A=p+20|0;a[A>>0]=H;a[A+1>>0]=I;a[A+2>>0]=1;a[A+3>>0]=0;A=r+1|0;A=(A|0)<(F|0)?A:0;K=e+(r<<3)+20|0;B=+g[K>>2];z=+g[K+4>>2];K=e+(A<<3)+20|0;D=+g[K>>2];C=+g[K+4>>2];G=D-B;L=C-z;w=+O(+(G*G+L*L));if(!(w<1.1920928955078125e-7)){J=1.0/w;G=G*J;L=L*J}J=t*G-u*L;x=t*L+u*G;y=-J;N=s+(t*B-u*z);M=v+(u*B+t*z);w=N*x+M*y;if((Mv(q,p,y,-x,k-(N*J+M*x),r)|0)<2){i=h;return}if((Mv(j,q,J,x,k+((s+(t*D-u*C))*J+(v+(u*D+t*C))*x),A)|0)<2){i=h;return}N=+L;M=+-G;p=d+40|0;g[p>>2]=N;g[p+4>>2]=M;M=+((B+D)*.5);N=+((z+C)*.5);p=d+48|0;g[p>>2]=M;g[p+4>>2]=N;p=f<<24>>24==0;q=0;r=0;do{s=+g[j+(q*12|0)>>2];t=+g[j+(q*12|0)+4>>2];if(x*s+t*y-w<=k){N=s-o;L=t-l;M=+(n*N+m*L);N=+(n*L-m*N);e=d+(r*20|0)|0;g[e>>2]=M;g[e+4>>2]=N;e=d+(r*20|0)+16|0;f=c[j+(q*12|0)+8>>2]|0;c[e>>2]=f;if(!p){a[e>>0]=f>>>8;a[e+1>>0]=f;a[e+2>>0]=f>>>24;a[e+3>>0]=f>>>16}r=r+1|0}q=q+1|0}while((q|0)!=2);c[b>>2]=r;i=h;return}function _x(a){a=a|0;return}function $x(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function ay(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,P=0,S=0,T=0,U=0,V=0.0;o=i;A=c[b+48>>2]|0;T=c[A+8>>2]|0;l=b+108|0;c[l>>2]=T;S=c[b+52>>2]|0;N=c[S+8>>2]|0;n=b+112|0;c[n>>2]=N;L=A+28|0;M=c[L>>2]|0;L=c[L+4>>2]|0;H=b+140|0;c[H>>2]=M;c[H+4>>2]=L;H=S+28|0;K=c[H>>2]|0;H=c[H+4>>2]|0;J=b+148|0;c[J>>2]=K;c[J+4>>2]=H;J=b+156|0;g[J>>2]=+g[A+120>>2];H=b+160|0;g[H>>2]=+g[S+120>>2];I=b+164|0;g[I>>2]=+g[A+128>>2];A=b+168|0;g[A>>2]=+g[S+128>>2];S=c[d+24>>2]|0;m=S+(T*12|0)|0;v=+g[m>>2];w=+g[m+4>>2];e=+g[S+(T*12|0)+8>>2];m=d+28|0;P=c[m>>2]|0;U=P+(T*12|0)|0;u=+g[U>>2];t=+g[U+4>>2];h=+g[P+(T*12|0)+8>>2];T=S+(N*12|0)|0;C=+g[T>>2];G=+g[T+4>>2];E=+g[S+(N*12|0)+8>>2];S=P+(N*12|0)|0;s=+g[S>>2];f=+g[S+4>>2];j=+g[P+(N*12|0)+8>>2];r=+R(+e);e=+Q(+e);D=+R(+E);E=+Q(+E);F=+g[b+80>>2]-(c[k>>2]=M,+g[k>>2]);q=+g[b+84>>2]-(c[k>>2]=L,+g[k>>2]);p=e*F-r*q;q=r*F+e*q;e=+p;F=+q;L=b+124|0;g[L>>2]=e;g[L+4>>2]=F;F=+g[b+88>>2]-(c[k>>2]=K,+g[k>>2]);e=+g[b+92>>2]- +g[b+152>>2];r=E*F-D*e;e=D*F+E*e;E=+r;F=+e;K=b+132|0;g[K>>2]=E;g[K+4>>2]=F;K=b+116|0;v=C+r-v-p;w=G+e-w-q;G=+v;C=+w;L=K;g[L>>2]=G;g[L+4>>2]=C;C=+O(+(v*v+w*w));if(C>.004999999888241291){G=1.0/C;v=v*G;g[K>>2]=v;w=G*w}else{g[K>>2]=0.0;w=0.0;v=0.0}g[b+120>>2]=w;G=w*p-q*v;D=w*r-v*e;x=+g[J>>2];y=+g[I>>2];z=+g[H>>2];B=+g[A>>2];D=z+(x+G*G*y)+D*D*B;if(D!=0.0)G=1.0/D;else G=0.0;A=b+172|0;g[A>>2]=G;E=+g[b+68>>2];if(E>0.0){C=C- +g[b+104>>2];V=E*6.2831854820251465;F=V*G*V;E=+g[d>>2];G=E*(V*G*2.0*+g[b+72>>2]+F*E);H=b+96|0;g[H>>2]=G;if(G!=0.0)G=1.0/G;else G=0.0;g[H>>2]=G;g[b+76>>2]=F*C*E*G;C=D+G;if(C!=0.0)C=1.0/C;else C=0.0;g[A>>2]=C}else{g[b+96>>2]=0.0;g[b+76>>2]=0.0}if((a[d+20>>0]|0)==0){g[b+100>>2]=0.0;C=u;D=t;F=s;G=f;E=h;V=j;U=c[l>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)|0;C=+C;D=+D;T=U;g[T>>2]=C;U=U+4|0;g[U>>2]=D;U=c[l>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)+8|0;g[U>>2]=E;U=c[n>>2]|0;U=T+(U*12|0)|0;F=+F;G=+G;T=U;g[T>>2]=F;U=U+4|0;g[U>>2]=G;U=c[n>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)+8|0;g[U>>2]=V;i=o;return}else{U=b+100|0;C=+g[d+8>>2]*+g[U>>2];g[U>>2]=C;V=v*C;w=C*w;C=u-V*x;D=t-w*x;F=s+V*z;G=f+w*z;E=h-y*(w*p-V*q);V=j+B*(w*r-V*e);U=c[l>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)|0;C=+C;D=+D;T=U;g[T>>2]=C;U=U+4|0;g[U>>2]=D;U=c[l>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)+8|0;g[U>>2]=E;U=c[n>>2]|0;U=T+(U*12|0)|0;F=+F;G=+G;T=U;g[T>>2]=F;U=U+4|0;g[U>>2]=G;U=c[n>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)+8|0;g[U>>2]=V;i=o;return}}function by(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0.0,z=0,A=0;d=i;n=a+108|0;w=c[n>>2]|0;e=b+28|0;z=c[e>>2]|0;r=z+(w*12|0)|0;b=r;q=+g[b>>2];s=+g[b+4>>2];v=+g[z+(w*12|0)+8>>2];b=a+112|0;w=c[b>>2]|0;A=z+(w*12|0)|0;m=+g[A>>2];l=+g[A+4>>2];u=+g[z+(w*12|0)+8>>2];o=+g[a+128>>2];h=+g[a+124>>2];f=+g[a+136>>2];t=+g[a+132>>2];j=+g[a+116>>2];p=+g[a+120>>2];w=a+100|0;y=+g[w>>2];x=+g[a+172>>2]*(+g[a+76>>2]+(j*(m-u*f-(q-v*o))+p*(l+u*t-(s+v*h)))+ +g[a+96>>2]*y);k=-x;g[w>>2]=y-x;j=j*k;k=p*k;p=+g[a+156>>2];o=v- +g[a+164>>2]*(h*k-j*o);h=+g[a+160>>2];f=u+ +g[a+168>>2]*(k*t-j*f);q=+(q-p*j);p=+(s-p*k);a=r;g[a>>2]=q;g[a+4>>2]=p;a=c[e>>2]|0;g[a+((c[n>>2]|0)*12|0)+8>>2]=o;j=+(m+j*h);h=+(l+k*h);a=a+((c[b>>2]|0)*12|0)|0;g[a>>2]=j;g[a+4>>2]=h;g[(c[e>>2]|0)+((c[b>>2]|0)*12|0)+8>>2]=f;i=d;return}function cy(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0;d=i;if(+g[a+68>>2]>0.0){q=1;i=d;return q|0}e=a+108|0;q=c[e>>2]|0;p=b+24|0;x=c[p>>2]|0;b=x+(q*12|0)|0;w=b;n=+g[w>>2];o=+g[w+4>>2];f=+g[x+(q*12|0)+8>>2];q=a+112|0;w=c[q>>2]|0;y=x+(w*12|0)|0;r=+g[y>>2];s=+g[y+4>>2];k=+g[x+(w*12|0)+8>>2];l=+R(+f);t=+Q(+f);v=+R(+k);u=+Q(+k);m=+g[a+80>>2]- +g[a+140>>2];j=+g[a+84>>2]- +g[a+144>>2];h=t*m-l*j;j=l*m+t*j;t=+g[a+88>>2]- +g[a+148>>2];m=+g[a+92>>2]- +g[a+152>>2];l=u*t-v*m;m=v*t+u*m;u=r+l-n-h;t=s+m-o-j;v=+O(+(u*u+t*t));if(v<1.1920928955078125e-7)v=0.0;else{z=1.0/v;u=u*z;t=t*z}v=v- +g[a+104>>2];v=v<.20000000298023224?v:.20000000298023224;v=v<-.20000000298023224?-.20000000298023224:v;B=-(+g[a+172>>2]*v);A=u*B;u=t*B;B=+g[a+156>>2];t=f- +g[a+164>>2]*(h*u-j*A);j=+g[a+160>>2];z=k+ +g[a+168>>2]*(l*u-m*A);n=+(n-B*A);o=+(o-B*u);y=b;g[y>>2]=n;g[y+4>>2]=o;y=c[p>>2]|0;g[y+((c[e>>2]|0)*12|0)+8>>2]=t;t=+(r+j*A);u=+(s+j*u);y=y+((c[q>>2]|0)*12|0)|0;g[y>>2]=t;g[y+4>>2]=u;g[(c[p>>2]|0)+((c[q>>2]|0)*12|0)+8>>2]=z;if(!(v>0.0))v=-v;y=v<.004999999888241291;i=d;return y|0}function dy(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+80>>2];f=+g[j+20>>2];e=+g[b+84>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function ey(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+88>>2];f=+g[j+20>>2];e=+g[b+92>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function fy(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+100>>2]*c;c=d*+g[b+120>>2];g[a>>2]=+g[b+116>>2]*d;g[a+4>>2]=c;return}function gy(a,b){a=a|0;b=+b;return 0.0}function hy(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Cw(14312,e);c[e>>2]=l;Cw(17224,e);c[e>>2]=f;Cw(17256,e);c[e>>2]=d[a+61>>0];Cw(17288,e);j=+g[a+84>>2];h[k>>3]=+g[a+80>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17328,e);j=+g[a+92>>2];h[k>>3]=+g[a+88>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17376,e);h[k>>3]=+g[a+104>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(14344,e);h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17560,e);h[k>>3]=+g[a+72>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17592,e);c[e>>2]=c[a+56>>2];Cw(17624,e);i=b;return}function iy(a){a=a|0;return}function jy(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function ky(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0.0,O=0.0;q=i;o=c[b+48>>2]|0;L=c[o+8>>2]|0;n=b+104|0;c[n>>2]=L;K=c[b+52>>2]|0;I=c[K+8>>2]|0;p=b+108|0;c[p>>2]=I;G=o+28|0;H=c[G>>2]|0;G=c[G+4>>2]|0;D=b+128|0;c[D>>2]=H;c[D+4>>2]=G;D=K+28|0;F=c[D>>2]|0;D=c[D+4>>2]|0;J=b+136|0;c[J>>2]=F;c[J+4>>2]=D;r=+g[o+120>>2];g[b+144>>2]=r;s=+g[K+120>>2];g[b+148>>2]=s;t=+g[o+128>>2];g[b+152>>2]=t;w=+g[K+128>>2];g[b+156>>2]=w;K=c[d+24>>2]|0;y=+g[K+(L*12|0)+8>>2];o=d+28|0;J=c[o>>2]|0;M=J+(L*12|0)|0;u=+g[M>>2];f=+g[M+4>>2];l=+g[J+(L*12|0)+8>>2];A=+g[K+(I*12|0)+8>>2];K=J+(I*12|0)|0;h=+g[K>>2];j=+g[K+4>>2];m=+g[J+(I*12|0)+8>>2];x=+R(+y);y=+Q(+y);C=+R(+A);A=+Q(+A);E=+g[b+68>>2]-(c[k>>2]=H,+g[k>>2]);v=+g[b+72>>2]-(c[k>>2]=G,+g[k>>2]);e=y*E-x*v;v=x*E+y*v;y=+e;E=+v;G=b+112|0;g[G>>2]=y;g[G+4>>2]=E;E=+g[b+76>>2]-(c[k>>2]=F,+g[k>>2]);y=+g[b+80>>2]-(c[k>>2]=D,+g[k>>2]);x=A*E-C*y;y=C*E+A*y;A=+x;E=+y;D=b+120|0;g[D>>2]=A;g[D+4>>2]=E;E=r+s;A=E+v*t*v+y*w*y;C=t*e;z=w*x;B=-(v*C)-y*z;z=E+e*C+x*z;C=A*z-B*B;if(C!=0.0)C=1.0/C;E=-(B*C);g[b+160>>2]=z*C;g[b+164>>2]=E;g[b+168>>2]=E;g[b+172>>2]=A*C;z=t+w;if(z>0.0)z=1.0/z;g[b+176>>2]=z;D=b+84|0;if((a[d+20>>0]|0)==0){g[D>>2]=0.0;g[b+88>>2]=0.0;g[b+92>>2]=0.0;y=u;z=f;B=h;C=j;A=l;E=m;M=c[n>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)|0;y=+y;z=+z;L=M;g[L>>2]=y;M=M+4|0;g[M>>2]=z;M=c[n>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)+8|0;g[M>>2]=A;M=c[p>>2]|0;M=L+(M*12|0)|0;B=+B;C=+C;L=M;g[L>>2]=B;M=M+4|0;g[M>>2]=C;M=c[p>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)+8|0;g[M>>2]=E;i=q;return}else{L=d+8|0;N=+g[L>>2];E=N*+g[D>>2];g[D>>2]=E;M=b+88|0;N=N*+g[M>>2];g[M>>2]=N;M=b+92|0;O=+g[L>>2]*+g[M>>2];g[M>>2]=O;u=u-r*E;z=f-r*N;B=h+s*E;C=j+s*N;A=l-t*(O+(N*e-E*v));E=m+w*(O+(N*x-E*y));M=c[n>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)|0;y=+u;z=+z;L=M;g[L>>2]=y;M=M+4|0;g[M>>2]=z;M=c[n>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)+8|0;g[M>>2]=A;M=c[p>>2]|0;M=L+(M*12|0)|0;B=+B;C=+C;L=M;g[L>>2]=B;M=M+4|0;g[M>>2]=C;M=c[p>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)+8|0;g[M>>2]=E;i=q;return}}function ly(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0;q=i;k=a+104|0;o=c[k>>2]|0;j=b+28|0;E=c[j>>2]|0;z=E+(o*12|0)|0;l=+g[z>>2];h=+g[z+4>>2];y=+g[E+(o*12|0)+8>>2];o=a+108|0;z=c[o>>2]|0;F=E+(z*12|0)|0;m=+g[F>>2];n=+g[F+4>>2];x=+g[E+(z*12|0)+8>>2];f=+g[a+144>>2];e=+g[a+148>>2];d=+g[a+152>>2];p=+g[a+156>>2];B=+g[b>>2];b=a+92|0;s=+g[b>>2];w=B*+g[a+100>>2];t=s-(x-y)*+g[a+176>>2];v=-w;w=t<w?t:w;w=w<v?v:w;g[b>>2]=w;s=w-s;y=y-d*s;s=x+p*s;x=+g[a+124>>2];w=+g[a+120>>2];v=+g[a+116>>2];t=+g[a+112>>2];D=v*y+(m-x*s-l);C=n+w*s-h-t*y;A=+g[a+164>>2]*D+ +g[a+172>>2]*C;b=a+84|0;z=b;u=+g[z>>2];r=+g[z+4>>2];C=u-(+g[a+160>>2]*D+ +g[a+168>>2]*C);g[b>>2]=C;z=a+88|0;A=+g[z>>2]-A;g[z>>2]=A;B=B*+g[a+96>>2];D=C*C+A*A;if(D>B*B){D=+O(+D);if(!(D<1.1920928955078125e-7)){D=1.0/D;C=C*D;g[b>>2]=C;A=A*D;g[z>>2]=A}C=B*C;g[b>>2]=C;A=B*A;g[z>>2]=A}D=C-u;C=A-r;B=+(l-f*D);A=+(h-f*C);F=(c[j>>2]|0)+((c[k>>2]|0)*12|0)|0;g[F>>2]=B;g[F+4>>2]=A;F=c[j>>2]|0;g[F+((c[k>>2]|0)*12|0)+8>>2]=y-d*(t*C-D*v);A=+(m+e*D);B=+(n+e*C);F=F+((c[o>>2]|0)*12|0)|0;g[F>>2]=A;g[F+4>>2]=B;g[(c[j>>2]|0)+((c[o>>2]|0)*12|0)+8>>2]=s+p*(C*w-D*x);i=q;return}function my(a,b){a=a|0;b=b|0;return 1}function ny(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function oy(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function py(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+88>>2]*c;g[a>>2]=+g[b+84>>2]*c;g[a+4>>2]=d;return}function qy(a,b){a=a|0;b=+b;return+(+g[a+92>>2]*b)}function ry(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Cw(14648,e);c[e>>2]=l;Cw(17224,e);c[e>>2]=f;Cw(17256,e);c[e>>2]=d[a+61>>0];Cw(17288,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17328,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17376,e);h[k>>3]=+g[a+96>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(14680,e);h[k>>3]=+g[a+100>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(14712,e);c[e>>2]=c[a+56>>2];Cw(17624,e);i=b;return}function sy(a){a=a|0;return}function ty(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function uy(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0,t=0,u=0.0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0,P=0.0,S=0.0,T=0.0,U=0.0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0;x=i;ba=c[b+48>>2]|0;aa=c[ba+8>>2]|0;s=b+160|0;c[s>>2]=aa;Y=c[b+52>>2]|0;$=c[Y+8>>2]|0;e=b+164|0;c[e>>2]=$;t=c[b+84>>2]|0;_=c[t+8>>2]|0;v=b+168|0;c[v>>2]=_;Z=c[b+88>>2]|0;H=c[Z+8>>2]|0;w=b+172|0;c[w>>2]=H;W=b+176|0;ca=ba+28|0;X=c[ca+4>>2]|0;O=W;c[O>>2]=c[ca>>2];c[O+4>>2]=X;O=b+184|0;X=Y+28|0;ca=c[X+4>>2]|0;V=O;c[V>>2]=c[X>>2];c[V+4>>2]=ca;V=b+192|0;ca=t+28|0;X=c[ca+4>>2]|0;da=V;c[da>>2]=c[ca>>2];c[da+4>>2]=X;da=Z+28|0;X=c[da>>2]|0;da=c[da+4>>2]|0;ca=b+200|0;c[ca>>2]=X;c[ca+4>>2]=da;y=+g[ba+120>>2];g[b+208>>2]=y;z=+g[Y+120>>2];g[b+212>>2]=z;A=+g[t+120>>2];g[b+216>>2]=A;B=+g[Z+120>>2];g[b+220>>2]=B;C=+g[ba+128>>2];g[b+224>>2]=C;D=+g[Y+128>>2];g[b+228>>2]=D;E=+g[t+128>>2];g[b+232>>2]=E;F=+g[Z+128>>2];g[b+236>>2]=F;Z=c[d+24>>2]|0;I=+g[Z+(aa*12|0)+8>>2];t=d+28|0;Y=c[t>>2]|0;ba=Y+(aa*12|0)|0;G=+g[ba>>2];u=+g[ba+4>>2];o=+g[Y+(aa*12|0)+8>>2];S=+g[Z+($*12|0)+8>>2];aa=Y+($*12|0)|0;f=+g[aa>>2];h=+g[aa+4>>2];p=+g[Y+($*12|0)+8>>2];K=+g[Z+(_*12|0)+8>>2];$=Y+(_*12|0)|0;j=+g[$>>2];l=+g[$+4>>2];q=+g[Y+(_*12|0)+8>>2];T=+g[Z+(H*12|0)+8>>2];Z=Y+(H*12|0)|0;m=+g[Z>>2];n=+g[Z+4>>2];r=+g[Y+(H*12|0)+8>>2];L=+R(+I);I=+Q(+I);M=+R(+S);S=+Q(+S);J=+R(+K);K=+Q(+K);N=+R(+T);T=+Q(+T);H=b+272|0;g[H>>2]=0.0;P=(c[k>>2]=X,+g[k>>2]);if((c[b+76>>2]|0)==1){g[b+240>>2]=0.0;g[b+244>>2]=0.0;g[b+256>>2]=1.0;g[b+264>>2]=1.0;U=C+E;L=0.0;I=0.0;K=1.0;J=1.0}else{ia=+g[b+124>>2];ea=+g[b+128>>2];fa=K*ia-J*ea;ea=J*ia+K*ea;ia=+g[b+108>>2]- +g[V>>2];ha=+g[b+112>>2]- +g[b+196>>2];ga=+g[b+92>>2]- +g[W>>2];U=+g[b+96>>2]- +g[b+180>>2];ka=+fa;ja=+ea;da=b+240|0;g[da>>2]=ka;g[da+4>>2]=ja;J=ea*(K*ia-J*ha)-fa*(J*ia+K*ha);g[b+264>>2]=J;K=ea*(I*ga-L*U)-fa*(L*ga+I*U);g[b+256>>2]=K;U=A+y+J*E*J+K*C*K;L=fa;I=ea}U=U+0.0;g[H>>2]=U;if((c[b+80>>2]|0)==1){g[b+248>>2]=0.0;g[b+252>>2]=0.0;N=+g[b+152>>2];g[b+260>>2]=N;g[b+268>>2]=N;T=N*N*(D+F);M=0.0;P=0.0;S=N}else{la=+g[b+132>>2];fa=+g[b+136>>2];ga=T*la-N*fa;fa=N*la+T*fa;la=+g[b+116>>2]-P;ea=+g[b+120>>2]- +g[b+204>>2];ha=+g[b+100>>2]- +g[O>>2];ia=+g[b+104>>2]- +g[b+188>>2];ja=+g[b+152>>2];ka=ga*ja;P=fa*ja;na=+ka;ma=+P;da=b+248|0;g[da>>2]=na;g[da+4>>2]=ma;N=(fa*(T*la-N*ea)-ga*(N*la+T*ea))*ja;g[b+268>>2]=N;S=ja*(fa*(S*ha-M*ia)-ga*(M*ha+S*ia));g[b+260>>2]=S;T=ja*ja*(B+z)+N*F*N+S*S*D;M=ka}T=U+T;g[H>>2]=T;if(T>0.0)T=1.0/T;else T=0.0;g[H>>2]=T;H=b+156|0;if((a[d+20>>0]|0)==0){g[H>>2]=0.0;T=G;U=u;fa=f;ga=h;ia=j;ja=l;la=m;ma=n;ea=o;ha=p;ka=q;na=r;da=c[s>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)|0;T=+T;U=+U;ca=da;g[ca>>2]=T;da=da+4|0;g[da>>2]=U;da=c[s>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ea;da=c[e>>2]|0;da=ca+(da*12|0)|0;fa=+fa;ga=+ga;ca=da;g[ca>>2]=fa;da=da+4|0;g[da>>2]=ga;da=c[e>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ha;da=c[v>>2]|0;da=ca+(da*12|0)|0;ia=+ia;ja=+ja;ca=da;g[ca>>2]=ia;da=da+4|0;g[da>>2]=ja;da=c[v>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ka;da=c[w>>2]|0;da=ca+(da*12|0)|0;la=+la;ma=+ma;ca=da;g[ca>>2]=la;da=da+4|0;g[da>>2]=ma;da=c[w>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=na;i=x;return}else{na=+g[H>>2];U=y*na;ga=na*z;ja=na*A;ma=na*B;T=G+L*U;U=u+U*I;fa=f+M*ga;ga=h+ga*P;ia=j-L*ja;ja=l-I*ja;la=m-M*ma;ma=n-P*ma;ea=o+na*C*K;ha=p+na*D*S;ka=q-na*E*J;na=r-na*F*N;da=c[s>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)|0;T=+T;U=+U;ca=da;g[ca>>2]=T;da=da+4|0;g[da>>2]=U;da=c[s>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ea;da=c[e>>2]|0;da=ca+(da*12|0)|0;fa=+fa;ga=+ga;ca=da;g[ca>>2]=fa;da=da+4|0;g[da>>2]=ga;da=c[e>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ha;da=c[v>>2]|0;da=ca+(da*12|0)|0;ia=+ia;ja=+ja;ca=da;g[ca>>2]=ia;da=da+4|0;g[da>>2]=ja;da=c[v>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ka;da=c[w>>2]|0;da=ca+(da*12|0)|0;la=+la;ma=+ma;ca=da;g[ca>>2]=la;da=da+4|0;g[da>>2]=ma;da=c[w>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=na;i=x;return}}function vy(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0,I=0;d=i;z=a+160|0;u=c[z>>2]|0;e=b+28|0;H=c[e>>2]|0;n=H+(u*12|0)|0;C=+g[n>>2];D=+g[n+4>>2];w=+g[H+(u*12|0)+8>>2];u=a+164|0;n=c[u>>2]|0;b=H+(n*12|0)|0;x=+g[b>>2];y=+g[b+4>>2];p=+g[H+(n*12|0)+8>>2];n=a+168|0;b=c[n>>2]|0;G=H+(b*12|0)|0;t=+g[G>>2];s=+g[G+4>>2];h=+g[H+(b*12|0)+8>>2];b=a+172|0;G=c[b>>2]|0;I=H+(G*12|0)|0;m=+g[I>>2];l=+g[I+4>>2];F=+g[H+(G*12|0)+8>>2];q=+g[a+240>>2];r=+g[a+244>>2];j=+g[a+248>>2];k=+g[a+252>>2];A=+g[a+256>>2];o=+g[a+264>>2];v=+g[a+260>>2];f=+g[a+268>>2];B=+g[a+272>>2]*((C-t)*q+(D-s)*r+((x-m)*j+(y-l)*k)+(w*A-h*o+(p*v-F*f)));E=-B;G=a+156|0;g[G>>2]=+g[G>>2]-B;B=+g[a+208>>2]*E;A=w+ +g[a+224>>2]*E*A;w=+g[a+212>>2]*E;v=p+ +g[a+228>>2]*E*v;p=+g[a+216>>2]*E;o=h- +g[a+232>>2]*E*o;h=+g[a+220>>2]*E;f=F- +g[a+236>>2]*E*f;C=+(C+q*B);B=+(D+r*B);a=(c[e>>2]|0)+((c[z>>2]|0)*12|0)|0;g[a>>2]=C;g[a+4>>2]=B;a=c[e>>2]|0;g[a+((c[z>>2]|0)*12|0)+8>>2]=A;x=+(x+j*w);w=+(y+w*k);a=a+((c[u>>2]|0)*12|0)|0;g[a>>2]=x;g[a+4>>2]=w;a=c[e>>2]|0;g[a+((c[u>>2]|0)*12|0)+8>>2]=v;q=+(t-q*p);p=+(s-r*p);a=a+((c[n>>2]|0)*12|0)|0;g[a>>2]=q;g[a+4>>2]=p;a=c[e>>2]|0;g[a+((c[n>>2]|0)*12|0)+8>>2]=o;j=+(m-j*h);h=+(l-k*h);a=a+((c[b>>2]|0)*12|0)|0;g[a>>2]=j;g[a+4>>2]=h;g[(c[e>>2]|0)+((c[b>>2]|0)*12|0)+8>>2]=f;i=d;return}function wy(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0,r=0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0,S=0,T=0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0;e=i;d=a+160|0;n=c[d>>2]|0;q=b+24|0;S=c[q>>2]|0;u=S+(n*12|0)|0;b=u;w=+g[b>>2];v=+g[b+4>>2];t=+g[S+(n*12|0)+8>>2];b=a+164|0;n=c[b>>2]|0;r=S+(n*12|0)|0;h=+g[r>>2];j=+g[r+4>>2];k=+g[S+(n*12|0)+8>>2];n=a+168|0;r=c[n>>2]|0;P=S+(r*12|0)|0;l=+g[P>>2];m=+g[P+4>>2];o=+g[S+(r*12|0)+8>>2];r=a+172|0;P=c[r>>2]|0;T=S+(P*12|0)|0;p=+g[T>>2];f=+g[T+4>>2];s=+g[S+(P*12|0)+8>>2];x=+R(+t);y=+Q(+t);G=+R(+k);H=+Q(+k);F=+R(+o);I=+Q(+o);E=+R(+s);D=+Q(+s);if((c[a+76>>2]|0)==1){O=+g[a+224>>2];I=+g[a+232>>2];B=0.0;C=0.0;z=O;x=I;A=1.0;y=1.0;F=t-o- +g[a+140>>2];I=O+I}else{X=+g[a+124>>2];V=+g[a+128>>2];B=I*X-F*V;C=F*X+I*V;W=+g[a+108>>2]- +g[a+192>>2];K=+g[a+112>>2]- +g[a+196>>2];L=+g[a+92>>2]- +g[a+176>>2];U=+g[a+96>>2]- +g[a+180>>2];J=y*L-x*U;U=x*L+y*U;L=C*(I*W-F*K)-B*(F*W+I*K);O=C*J-B*U;M=+g[a+232>>2];N=+g[a+224>>2];J=w-l+J;U=v-m+U;z=N;x=M;A=O;y=L;F=X*(I*J+F*U-W)+V*(I*U-F*J-K);I=+g[a+216>>2]+ +g[a+208>>2]+L*L*M+O*N*O}if((c[a+80>>2]|0)==1){G=+g[a+152>>2];M=+g[a+228>>2];H=+g[a+236>>2];O=G*G*(M+H);N=G;J=0.0;K=0.0;L=G;D=k-s- +g[a+144>>2]}else{Z=+g[a+132>>2];U=+g[a+136>>2];J=D*Z-E*U;_=E*Z+D*U;Y=+g[a+116>>2]- +g[a+200>>2];X=+g[a+120>>2]- +g[a+204>>2];K=+g[a+100>>2]- +g[a+184>>2];V=+g[a+104>>2]- +g[a+188>>2];W=H*K-G*V;V=G*K+H*V;K=+g[a+152>>2];G=K*(_*(D*Y-E*X)-J*(E*Y+D*X));L=K*(_*W-J*V);H=+g[a+236>>2];M=+g[a+228>>2];W=h-p+W;V=j-f+V;O=K*K*(+g[a+220>>2]+ +g[a+212>>2])+G*G*H+L*M*L;N=K;J=J*K;K=_*K;D=Z*(D*W+E*V-Y)+U*(D*V-E*W-X)}E=I+0.0+O;if(E>0.0)D=-(F+D*N- +g[a+148>>2])/E;else D=0.0;X=D*+g[a+208>>2];Y=D*+g[a+212>>2];Z=D*+g[a+216>>2];_=D*+g[a+220>>2];W=+(w+B*X);X=+(v+C*X);T=u;g[T>>2]=W;g[T+4>>2]=X;T=c[q>>2]|0;g[T+((c[d>>2]|0)*12|0)+8>>2]=t+A*D*z;X=+(h+J*Y);Y=+(j+K*Y);T=T+((c[b>>2]|0)*12|0)|0;g[T>>2]=X;g[T+4>>2]=Y;T=c[q>>2]|0;g[T+((c[b>>2]|0)*12|0)+8>>2]=k+L*D*M;Y=+(l-B*Z);Z=+(m-C*Z);T=T+((c[n>>2]|0)*12|0)|0;g[T>>2]=Y;g[T+4>>2]=Z;T=c[q>>2]|0;g[T+((c[n>>2]|0)*12|0)+8>>2]=o-y*D*x;Z=+(p-J*_);_=+(f-K*_);T=T+((c[r>>2]|0)*12|0)|0;g[T>>2]=Z;g[T+4>>2]=_;g[(c[q>>2]|0)+((c[r>>2]|0)*12|0)+8>>2]=s-G*D*H;i=e;return 1}function xy(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+92>>2];f=+g[j+20>>2];e=+g[b+96>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function yy(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+100>>2];f=+g[j+20>>2];e=+g[b+104>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function zy(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0;e=+g[b+156>>2];d=e*+g[b+244>>2]*c;g[a>>2]=e*+g[b+240>>2]*c;g[a+4>>2]=d;return}function Ay(a,b){a=a|0;b=+b;return+(+g[a+156>>2]*+g[a+256>>2]*b)}function By(a){a=a|0;var b=0,e=0,f=0,j=0,l=0,m=0;b=i;i=i+16|0;e=b;m=c[(c[a+48>>2]|0)+8>>2]|0;l=c[(c[a+52>>2]|0)+8>>2]|0;j=c[(c[a+68>>2]|0)+56>>2]|0;f=c[(c[a+72>>2]|0)+56>>2]|0;Cw(15072,e);c[e>>2]=m;Cw(17224,e);c[e>>2]=l;Cw(17256,e);c[e>>2]=d[a+61>>0];Cw(17288,e);c[e>>2]=j;Cw(15096,e);c[e>>2]=f;Cw(15128,e);h[k>>3]=+g[a+152>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(16520,e);c[e>>2]=c[a+56>>2];Cw(17624,e);i=b;return}function Cy(a){a=a|0;return}function Dy(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Ey(a){a=a|0;a=i;i=i+16|0;Cw(15352,a);i=a;return}function Fy(a){a=a|0;return}function Gy(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Hy(b,d){b=b|0;d=d|0;var e=0.0,f=0,h=0,j=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0,C=0,D=0;l=i;B=c[b+52>>2]|0;h=c[B+8>>2]|0;j=b+116|0;c[j>>2]=h;z=B+28|0;A=c[z>>2]|0;z=c[z+4>>2]|0;f=b+128|0;c[f>>2]=A;c[f+4>>2]=z;m=+g[B+120>>2];g[b+136>>2]=m;e=+g[B+128>>2];g[b+140>>2]=e;f=c[d+24>>2]|0;C=f+(h*12|0)|0;r=+g[C>>2];p=+g[C+4>>2];u=+g[f+(h*12|0)+8>>2];f=d+28|0;C=c[f>>2]|0;D=C+(h*12|0)|0;o=+g[D>>2];n=+g[D+4>>2];q=+g[C+(h*12|0)+8>>2];w=+R(+u);u=+Q(+u);y=+g[B+116>>2];x=+g[b+84>>2]*6.2831854820251465;v=+g[d>>2];s=v*y*x*x;y=x*y*2.0*+g[b+88>>2]+s;x=(c[k>>2]=A,+g[k>>2]);t=(c[k>>2]=z,+g[k>>2]);if(!(y>1.1920928955078125e-7))Aa(15720,15472,125,15760);v=v*y;if(v!=0.0)v=1.0/v;g[b+108>>2]=v;s=s*v;g[b+92>>2]=s;x=+g[b+68>>2]-x;y=+g[b+72>>2]-t;t=u*x-w*y;u=w*x+u*y;y=+t;x=+u;D=b+120|0;g[D>>2]=y;g[D+4>>2]=x;x=v+(m+u*e*u);y=e*t;w=u*y;v=v+(m+t*y);y=x*v-w*w;if(y!=0.0)y=1.0/y;w=w*y;g[b+144>>2]=v*y;g[b+148>>2]=w;g[b+152>>2]=w;g[b+156>>2]=x*y;z=b+160|0;y=r+t- +g[b+76>>2];p=p+u- +g[b+80>>2];w=+y;x=+p;D=z;g[D>>2]=w;g[D+4>>2]=x;g[z>>2]=s*y;g[b+164>>2]=s*p;p=q*.9800000190734863;z=b+96|0;if((a[d+20>>0]|0)==0){g[z>>2]=0.0;g[b+100>>2]=0.0;w=o;x=n;y=p;D=c[f>>2]|0;D=D+(h*12|0)|0;w=+w;x=+x;C=D;g[C>>2]=w;D=D+4|0;g[D>>2]=x;D=c[j>>2]|0;C=c[f>>2]|0;D=C+(D*12|0)+8|0;g[D>>2]=y;i=l;return}else{v=+g[d+8>>2];y=v*+g[z>>2];g[z>>2]=y;D=b+100|0;v=v*+g[D>>2];g[D>>2]=v;w=o+m*y;x=n+v*m;y=p+e*(v*t-y*u);D=c[f>>2]|0;D=D+(h*12|0)|0;w=+w;x=+x;C=D;g[C>>2]=w;D=D+4|0;g[D>>2]=x;D=c[j>>2]|0;C=c[f>>2]|0;D=C+(D*12|0)+8|0;g[D>>2]=y;i=l;return}}function Iy(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0;o=i;e=a+116|0;s=c[e>>2]|0;f=b+28|0;r=c[f>>2]|0;h=r+(s*12|0)|0;x=h;k=+g[x>>2];j=+g[x+4>>2];n=+g[r+(s*12|0)+8>>2];l=+g[a+124>>2];m=+g[a+120>>2];t=+g[a+108>>2];s=a+96|0;w=+g[s>>2];r=a+100|0;q=+g[r>>2];u=-(k-n*l+ +g[a+160>>2]+t*w);t=-(j+n*m+ +g[a+164>>2]+t*q);v=+g[a+148>>2]*u+ +g[a+156>>2]*t;x=s;p=+g[x>>2];d=+g[x+4>>2];t=w+(+g[a+144>>2]*u+ +g[a+152>>2]*t);g[s>>2]=t;q=v+q;g[r>>2]=q;v=+g[b>>2]*+g[a+104>>2];u=q*q+t*t;if(u>v*v){w=v/+O(+u);t=t*w;g[s>>2]=t;q=w*q;g[r>>2]=q}u=t-p;t=q-d;v=+g[a+136>>2];w=n+ +g[a+140>>2]*(t*m-u*l);u=+(k+u*v);v=+(j+t*v);x=h;g[x>>2]=u;g[x+4>>2]=v;g[(c[f>>2]|0)+((c[e>>2]|0)*12|0)+8>>2]=w;i=o;return}function Jy(a,b){a=a|0;b=b|0;return 1}function Ky(a,b){a=a|0;b=b|0;var d=0,e=0;e=b+76|0;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Ly(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function My(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+100>>2]*c;g[a>>2]=+g[b+96>>2]*c;g[a+4>>2]=d;return}function Ny(a,b){a=a|0;b=+b;return+(b*0.0)}function Oy(a){a=a|0;a=i;i=i+16|0;Cw(15816,a);i=a;return}function Py(a){a=a|0;return}function Qy(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Ry(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0,N=0,O=0,P=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0.0,Z=0.0,_=0.0;s=i;q=c[b+48>>2]|0;W=c[q+8>>2]|0;p=b+144|0;c[p>>2]=W;V=c[b+52>>2]|0;T=c[V+8>>2]|0;r=b+148|0;c[r>>2]=T;P=q+28|0;S=c[P>>2]|0;P=c[P+4>>2]|0;N=b+152|0;c[N>>2]=S;c[N+4>>2]=P;N=V+28|0;O=c[N>>2]|0;N=c[N+4>>2]|0;M=b+160|0;c[M>>2]=O;c[M+4>>2]=N;M=b+168|0;g[M>>2]=+g[q+120>>2];u=+g[V+120>>2];g[b+172>>2]=u;v=+g[q+128>>2];g[b+176>>2]=v;x=+g[V+128>>2];g[b+180>>2]=x;V=c[d+24>>2]|0;q=V+(W*12|0)|0;D=+g[q>>2];G=+g[q+4>>2];L=+g[V+(W*12|0)+8>>2];q=d+28|0;U=c[q>>2]|0;X=U+(W*12|0)|0;h=+g[X>>2];j=+g[X+4>>2];n=+g[U+(W*12|0)+8>>2];W=V+(T*12|0)|0;y=+g[W>>2];t=+g[W+4>>2];f=+g[V+(T*12|0)+8>>2];V=U+(T*12|0)|0;l=+g[V>>2];m=+g[V+4>>2];o=+g[U+(T*12|0)+8>>2];A=+R(+L);L=+Q(+L);e=+R(+f);f=+Q(+f);w=+g[b+68>>2]-(c[k>>2]=S,+g[k>>2]);K=+g[b+72>>2]-(c[k>>2]=P,+g[k>>2]);B=L*w-A*K;K=A*w+L*K;w=+g[b+76>>2]-(c[k>>2]=O,+g[k>>2]);C=+g[b+80>>2]-(c[k>>2]=N,+g[k>>2]);J=f*w-e*C;C=e*w+f*C;D=y-D+J-B;G=t-G+C-K;t=+g[M>>2];y=+g[b+84>>2];f=+g[b+88>>2];w=L*y-A*f;f=A*y+L*f;y=+w;e=+f;M=b+184|0;g[M>>2]=y;g[M+4>>2]=e;B=B+D;K=K+G;e=B*f-K*w;g[b+208>>2]=e;y=J*f-C*w;g[b+212>>2]=y;I=t+u;E=v*e;F=x*y;H=I+e*E+y*F;if(H>0.0)z=1.0/H;else z=H;g[b+252>>2]=z;_=+g[b+92>>2];Z=+g[b+96>>2];z=L*_-A*Z;A=A*_+L*Z;Z=+z;_=+A;X=b+192|0;g[X>>2]=Z;g[X+4>>2]=_;B=B*A-K*z;g[b+200>>2]=B;C=J*A-C*z;g[b+204>>2]=C;_=v*B;Z=x*C;Y=_+Z;K=_*e+Z*y;J=x+v;L=E+F;g[b+216>>2]=I+B*_+C*Z;g[b+220>>2]=Y;g[b+224>>2]=K;g[b+228>>2]=Y;g[b+232>>2]=J==0.0?1.0:J;g[b+236>>2]=L;g[b+240>>2]=K;g[b+244>>2]=L;g[b+248>>2]=H;do if((a[b+136>>0]|0)!=0){D=D*w+G*f;E=+g[b+124>>2];F=+g[b+120>>2];G=E-F;if(!(G>0.0))G=-G;if(G<.009999999776482582){c[b+140>>2]=3;break}if(D<=F){M=b+140|0;if((c[M>>2]|0)==1)break;c[M>>2]=1;g[b+112>>2]=0.0;break}M=b+140|0;if(!(D>=E)){c[M>>2]=0;g[b+112>>2]=0.0;break}if((c[M>>2]|0)!=2){c[M>>2]=2;g[b+112>>2]=0.0}}else{c[b+140>>2]=0;g[b+112>>2]=0.0}while(0);if((a[b+137>>0]|0)==0)g[b+116>>2]=0.0;M=b+104|0;if((a[d+20>>0]|0)==0){c[M+0>>2]=0;c[M+4>>2]=0;c[M+8>>2]=0;c[M+12>>2]=0;J=h;K=j;Y=l;Z=m;L=n;_=o;X=c[p>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)|0;J=+J;K=+K;W=X;g[W>>2]=J;X=X+4|0;g[X>>2]=K;X=c[p>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)+8|0;g[X>>2]=L;X=c[r>>2]|0;X=W+(X*12|0)|0;Y=+Y;Z=+Z;W=X;g[W>>2]=Y;X=X+4|0;g[X>>2]=Z;X=c[r>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)+8|0;g[X>>2]=_;i=s;return}else{W=d+8|0;_=+g[W>>2];I=_*+g[M>>2];g[M>>2]=I;X=b+108|0;H=_*+g[X>>2];g[X>>2]=H;X=b+112|0;_=_*+g[X>>2];g[X>>2]=_;X=b+116|0;Y=+g[W>>2]*+g[X>>2];g[X>>2]=Y;_=Y+_;Y=I*z+w*_;Z=I*A+_*f;J=h-t*Y;K=j-t*Z;Y=l+u*Y;Z=m+u*Z;L=n-v*(I*B+H+_*e);_=o+x*(H+I*C+_*y);X=c[p>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)|0;J=+J;K=+K;W=X;g[W>>2]=J;X=X+4|0;g[X>>2]=K;X=c[p>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)+8|0;g[X>>2]=L;X=c[r>>2]|0;X=W+(X*12|0)|0;Y=+Y;Z=+Z;W=X;g[W>>2]=Y;X=X+4|0;g[X>>2]=Z;X=c[r>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)+8|0;g[X>>2]=_;i=s;return}}function Sy(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0,B=0,C=0.0,D=0.0,E=0,F=0,G=0.0,H=0,I=0,J=0,K=0,L=0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0,R=0.0;e=i;i=i+48|0;o=e+28|0;u=e+16|0;p=e+8|0;B=e;l=b+144|0;n=c[l>>2]|0;m=d+28|0;L=c[m>>2]|0;Q=L+(n*12|0)|0;t=+g[Q>>2];r=+g[Q+4>>2];w=+g[L+(n*12|0)+8>>2];n=b+148|0;Q=c[n>>2]|0;K=L+(Q*12|0)|0;v=+g[K>>2];s=+g[K+4>>2];z=+g[L+(Q*12|0)+8>>2];f=+g[b+168>>2];j=+g[b+172>>2];h=+g[b+176>>2];k=+g[b+180>>2];if((a[b+137>>0]|0)!=0?(c[b+140>>2]|0)!=3:0){M=+g[b+184>>2];G=+g[b+188>>2];O=+g[b+212>>2];N=+g[b+208>>2];Q=b+116|0;P=+g[Q>>2];D=+g[d>>2]*+g[b+128>>2];R=P+ +g[b+252>>2]*(+g[b+132>>2]-((v-t)*M+(s-r)*G+z*O-w*N));C=-D;D=R<D?R:D;D=D<C?C:D;g[Q>>2]=D;P=D-P;M=M*P;G=G*P;r=r-f*G;s=s+j*G;t=t-f*M;v=v+j*M;w=w-h*N*P;z=z+k*O*P}O=v-t;P=s-r;y=b+192|0;x=b+196|0;d=b+204|0;A=b+200|0;M=O*+g[y>>2]+P*+g[x>>2]+z*+g[d>>2]-w*+g[A>>2];N=z-w;if((a[b+136>>0]|0)!=0?(q=b+140|0,(c[q>>2]|0)!=0):0){B=b+184|0;J=b+188|0;K=b+212|0;L=b+208|0;H=b+104|0;C=+g[H>>2];I=b+108|0;D=+g[I>>2];F=b+112|0;G=+g[F>>2];E=b+216|0;M=-M;N=-N;O=-(O*+g[B>>2]+P*+g[J>>2]+z*+g[K>>2]-w*+g[L>>2]);g[u>>2]=M;g[u+4>>2]=N;g[u+8>>2]=O;zw(o,E,u);g[H>>2]=+g[o>>2]+ +g[H>>2];Q=o+4|0;g[I>>2]=+g[Q>>2]+ +g[I>>2];u=o+8|0;O=+g[u>>2]+ +g[F>>2];g[F>>2]=O;q=c[q>>2]|0;if((q|0)==2){O=O<0.0?O:0.0;g[F>>2]=O}else if((q|0)==1){O=O>0.0?O:0.0;g[F>>2]=O}O=O-G;Aw(p,E,M- +g[b+240>>2]*O,N-O*+g[b+244>>2]);N=C+ +g[p>>2];M=D+ +g[p+4>>2];g[H>>2]=N;g[I>>2]=M;C=N-C;M=M-D;N=+g[F>>2]-G;g[o>>2]=C;g[Q>>2]=M;g[u>>2]=N;O=C*+g[y>>2]+N*+g[B>>2];P=C*+g[x>>2]+N*+g[J>>2];R=M+C*+g[d>>2]+N*+g[K>>2];N=C*+g[A>>2]+M+N*+g[L>>2];M=f*P;G=f*O;G=t-G;M=r-M;N=h*N;N=w-N;O=j*O;P=j*P;O=v+O;P=s+P;R=k*R;R=z+R;Q=c[l>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)|0;G=+G;M=+M;L=Q;g[L>>2]=G;Q=Q+4|0;g[Q>>2]=M;Q=c[l>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)+8|0;g[Q>>2]=N;Q=c[n>>2]|0;Q=L+(Q*12|0)|0;O=+O;P=+P;L=Q;g[L>>2]=O;Q=Q+4|0;g[Q>>2]=P;Q=c[n>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)+8|0;g[Q>>2]=R;i=e;return}Aw(B,b+216|0,-M,-N);M=+g[B>>2];Q=b+104|0;g[Q>>2]=M+ +g[Q>>2];N=+g[B+4>>2];Q=b+108|0;g[Q>>2]=N+ +g[Q>>2];O=M*+g[y>>2];P=M*+g[x>>2];R=N+M*+g[d>>2];N=M*+g[A>>2]+N;M=f*P;G=f*O;G=t-G;M=r-M;N=h*N;N=w-N;O=j*O;P=j*P;O=v+O;P=s+P;R=k*R;R=z+R;Q=c[l>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)|0;G=+G;M=+M;L=Q;g[L>>2]=G;Q=Q+4|0;g[Q>>2]=M;Q=c[l>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)+8|0;g[Q>>2]=N;Q=c[n>>2]|0;Q=L+(Q*12|0)|0;O=+O;P=+P;L=Q;g[L>>2]=O;Q=Q+4|0;g[Q>>2]=P;Q=c[n>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)+8|0;g[Q>>2]=R;i=e;return}function Ty(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0.0,E=0,F=0.0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0,P=0,S=0,T=0.0,U=0.0,V=0.0;f=i;i=i+64|0;G=f+24|0;C=f+12|0;E=f;e=b+144|0;O=c[e>>2]|0;x=d+24|0;P=c[x>>2]|0;d=P+(O*12|0)|0;v=+g[d>>2];w=+g[d+4>>2];z=+g[P+(O*12|0)+8>>2];d=b+148|0;O=c[d>>2]|0;S=P+(O*12|0)|0;A=+g[S>>2];B=+g[S+4>>2];l=+g[P+(O*12|0)+8>>2];L=+R(+z);N=+Q(+z);m=+R(+l);I=+Q(+l);n=+g[b+168>>2];o=+g[b+172>>2];y=+g[b+176>>2];h=+g[b+180>>2];J=+g[b+68>>2]- +g[b+152>>2];p=+g[b+72>>2]- +g[b+156>>2];D=N*J-L*p;p=L*J+N*p;J=+g[b+76>>2]- +g[b+160>>2];q=+g[b+80>>2]- +g[b+164>>2];F=I*J-m*q;q=m*J+I*q;I=A+F-v-D;J=B+q-w-p;m=+g[b+84>>2];t=+g[b+88>>2];r=N*m-L*t;t=L*m+N*t;D=D+I;p=p+J;m=t*D-r*p;k=F*t-q*r;M=+g[b+92>>2];u=+g[b+96>>2];s=N*M-L*u;u=L*M+N*u;p=u*D-s*p;q=F*u-q*s;F=s*I+u*J;D=l-z- +g[b+100>>2];if(F>0.0)H=F;else H=-F;if(D>0.0)j=D;else j=-D;do if((a[b+136>>0]|0)!=0){I=r*I+t*J;J=+g[b+124>>2];K=+g[b+120>>2];L=J-K;if(!(L>0.0))L=-L;if(L<.009999999776482582){J=I<.20000000298023224?I:.20000000298023224;if(!(I>0.0))I=-I;K=J<-.20000000298023224?-.20000000298023224:J;b=1;H=H>I?H:I;break}if(I<=K){M=I-K+.004999999888241291;M=M<0.0?M:0.0;N=K-I;K=M<-.20000000298023224?-.20000000298023224:M;b=1;H=H>N?H:N;break}if(I>=J){N=I-J;K=N+-.004999999888241291;K=K<.20000000298023224?K:.20000000298023224;K=K<0.0?0.0:K;b=1;H=H>N?H:N}else{K=0.0;b=0}}else{K=0.0;b=0}while(0);L=n+o;M=y*p;N=h*q;I=q*N+(L+p*M);J=N+M;if(b){U=k*N+m*M;V=y+h;N=y*m;M=h*k;T=M+N;g[G>>2]=I;g[G+4>>2]=J;g[G+8>>2]=U;g[G+12>>2]=J;g[G+16>>2]=V==0.0?1.0:V;g[G+20>>2]=T;g[G+24>>2]=U;g[G+28>>2]=T;g[G+32>>2]=k*M+(L+m*N);g[E>>2]=-F;g[E+4>>2]=-D;g[E+8>>2]=-K;zw(C,G,E);D=+g[C>>2];K=+g[C+8>>2];F=+g[C+4>>2]}else{K=y+h;K=K==0.0?1.0:K;F=-F;L=-D;M=K*I-J*J;if(M!=0.0)M=1.0/M;D=(K*F-J*L)*M;K=0.0;F=(I*L-J*F)*M}U=r*K+s*D;V=t*K+u*D;N=+(v-n*U);T=+(w-n*V);S=(c[x>>2]|0)+((c[e>>2]|0)*12|0)|0;g[S>>2]=N;g[S+4>>2]=T;S=c[x>>2]|0;g[S+((c[e>>2]|0)*12|0)+8>>2]=z-y*(m*K+(F+p*D));U=+(A+o*U);V=+(B+o*V);S=S+((c[d>>2]|0)*12|0)|0;g[S>>2]=U;g[S+4>>2]=V;g[(c[x>>2]|0)+((c[d>>2]|0)*12|0)+8>>2]=l+h*(k*K+(F+q*D));if(!(H<=.004999999888241291)){S=0;i=f;return S|0}S=j<=.03490658849477768;i=f;return S|0}function Uy(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Vy(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Wy(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0,f=0.0;f=+g[b+104>>2];e=+g[b+116>>2]+ +g[b+112>>2];d=(f*+g[b+196>>2]+e*+g[b+188>>2])*c;g[a>>2]=(f*+g[b+192>>2]+ +g[b+184>>2]*e)*c;g[a+4>>2]=d;return}function Xy(a,b){a=a|0;b=+b;return+(+g[a+108>>2]*b)}function Yy(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Cw(15960,e);c[e>>2]=l;Cw(17224,e);c[e>>2]=f;Cw(17256,e);c[e>>2]=d[a+61>>0];Cw(17288,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17328,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17376,e);j=+g[a+88>>2];h[k>>3]=+g[a+84>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17424,e);h[k>>3]=+g[a+100>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17088,e);c[e>>2]=d[a+136>>0];Cw(16744,e);h[k>>3]=+g[a+120>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(15992,e);h[k>>3]=+g[a+124>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(16032,e);c[e>>2]=d[a+137>>0];Cw(17464,e);h[k>>3]=+g[a+132>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17496,e);h[k>>3]=+g[a+128>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(16072,e);c[e>>2]=c[a+56>>2];Cw(17624,e);i=b;return}function Zy(a){a=a|0;return}function _y(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function $y(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0.0,x=0.0,y=0,z=0,A=0,B=0.0,C=0.0,D=0,E=0.0,F=0.0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0,N=0,P=0,S=0,T=0,U=0.0;p=i;v=c[b+48>>2]|0;S=c[v+8>>2]|0;m=b+120|0;c[m>>2]=S;P=c[b+52>>2]|0;M=c[P+8>>2]|0;o=b+124|0;c[o>>2]=M;D=v+28|0;L=c[D>>2]|0;D=c[D+4>>2]|0;y=b+160|0;c[y>>2]=L;c[y+4>>2]=D;y=P+28|0;G=c[y>>2]|0;y=c[y+4>>2]|0;A=b+168|0;c[A>>2]=G;c[A+4>>2]=y;A=b+176|0;g[A>>2]=+g[v+120>>2];y=b+180|0;g[y>>2]=+g[P+120>>2];z=b+184|0;g[z>>2]=+g[v+128>>2];v=b+188|0;g[v>>2]=+g[P+128>>2];P=c[d+24>>2]|0;n=P+(S*12|0)|0;x=+g[n>>2];F=+g[n+4>>2];t=+g[P+(S*12|0)+8>>2];n=d+28|0;N=c[n>>2]|0;T=N+(S*12|0)|0;u=+g[T>>2];s=+g[T+4>>2];j=+g[N+(S*12|0)+8>>2];S=P+(M*12|0)|0;C=+g[S>>2];E=+g[S+4>>2];B=+g[P+(M*12|0)+8>>2];P=N+(M*12|0)|0;f=+g[P>>2];h=+g[P+4>>2];l=+g[N+(M*12|0)+8>>2];e=+R(+t);t=+Q(+t);K=+R(+B);B=+Q(+B);w=+g[b+92>>2]-(c[k>>2]=L,+g[k>>2]);r=+g[b+96>>2]-(c[k>>2]=D,+g[k>>2]);q=t*w-e*r;r=e*w+t*r;t=+q;w=+r;D=b+144|0;g[D>>2]=t;g[D+4>>2]=w;w=+g[b+100>>2]-(c[k>>2]=G,+g[k>>2]);t=+g[b+104>>2]- +g[b+172>>2];e=B*w-K*t;t=K*w+B*t;B=+e;w=+t;G=b+152|0;g[G>>2]=B;g[G+4>>2]=w;G=b+128|0;x=x+q- +g[b+68>>2];F=F+r- +g[b+72>>2];w=+x;B=+F;D=G;g[D>>2]=w;g[D+4>>2]=B;D=b+136|0;C=C+e- +g[b+76>>2];E=E+t- +g[b+80>>2];B=+C;w=+E;L=D;g[L>>2]=B;g[L+4>>2]=w;w=+O(+(x*x+F*F));B=+O(+(C*C+E*E));if(w>.04999999701976776){w=1.0/w;x=x*w;g[G>>2]=x;w=w*F}else{g[G>>2]=0.0;w=0.0;x=0.0}g[b+132>>2]=w;if(B>.04999999701976776){B=1.0/B;C=B*C;g[D>>2]=C;B=B*E}else{g[D>>2]=0.0;B=0.0;C=0.0}g[b+140>>2]=B;U=q*w-r*x;K=e*B-t*C;E=+g[A>>2];F=+g[z>>2];H=+g[y>>2];J=+g[v>>2];I=+g[b+112>>2];K=E+U*U*F+I*I*(H+K*K*J);if(K>0.0)K=1.0/K;g[b+192>>2]=K;if((a[d+20>>0]|0)==0){g[b+116>>2]=0.0;F=u;H=s;J=f;K=h;I=j;U=l;T=c[m>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)|0;F=+F;H=+H;S=T;g[S>>2]=F;T=T+4|0;g[T>>2]=H;T=c[m>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)+8|0;g[T>>2]=I;T=c[o>>2]|0;T=S+(T*12|0)|0;J=+J;K=+K;S=T;g[S>>2]=J;T=T+4|0;g[T>>2]=K;T=c[o>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)+8|0;g[T>>2]=U;i=p;return}else{T=b+116|0;U=+g[d+8>>2]*+g[T>>2];g[T>>2]=U;K=-U;x=x*K;w=w*K;I=-(U*I);U=C*I;B=B*I;C=u+x*E;E=s+w*E;I=f+U*H;K=h+B*H;H=j+F*(w*q-x*r);U=l+J*(B*e-U*t);T=c[m>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)|0;F=+C;J=+E;S=T;g[S>>2]=F;T=T+4|0;g[T>>2]=J;T=c[m>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)+8|0;g[T>>2]=H;T=c[o>>2]|0;T=S+(T*12|0)|0;J=+I;K=+K;S=T;g[S>>2]=J;T=T+4|0;g[T>>2]=K;T=c[o>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)+8|0;g[T>>2]=U;i=p;return}}function az(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0;d=i;n=a+120|0;z=c[n>>2]|0;e=b+28|0;A=c[e>>2]|0;r=A+(z*12|0)|0;b=r;u=+g[b>>2];t=+g[b+4>>2];x=+g[A+(z*12|0)+8>>2];b=a+124|0;z=c[b>>2]|0;B=A+(z*12|0)|0;m=+g[B>>2];l=+g[B+4>>2];w=+g[A+(z*12|0)+8>>2];o=+g[a+148>>2];h=+g[a+144>>2];f=+g[a+156>>2];v=+g[a+152>>2];q=+g[a+128>>2];s=+g[a+132>>2];y=+g[a+112>>2];j=+g[a+136>>2];k=+g[a+140>>2];p=+g[a+192>>2]*(-((u-x*o)*q+(t+x*h)*s)-y*((m-w*f)*j+(l+w*v)*k));z=a+116|0;g[z>>2]=+g[z>>2]-p;q=q*p;s=s*p;p=y*p;j=j*p;k=p*k;p=+g[a+176>>2];o=x+ +g[a+184>>2]*(s*h-q*o);h=+g[a+180>>2];f=w+ +g[a+188>>2]*(k*v-j*f);q=+(u+q*p);p=+(t+s*p);a=r;g[a>>2]=q;g[a+4>>2]=p;a=c[e>>2]|0;g[a+((c[n>>2]|0)*12|0)+8>>2]=o;j=+(m+j*h);h=+(l+k*h);a=a+((c[b>>2]|0)*12|0)|0;g[a>>2]=j;g[a+4>>2]=h;g[(c[e>>2]|0)+((c[b>>2]|0)*12|0)+8>>2]=f;i=d;return}function bz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0,H=0,I=0.0;d=i;e=a+120|0;n=c[e>>2]|0;b=b+24|0;G=c[b>>2]|0;l=G+(n*12|0)|0;F=l;k=+g[F>>2];r=+g[F+4>>2];f=+g[G+(n*12|0)+8>>2];n=a+124|0;F=c[n>>2]|0;H=G+(F*12|0)|0;s=+g[H>>2];m=+g[H+4>>2];o=+g[G+(F*12|0)+8>>2];p=+R(+f);t=+Q(+f);y=+R(+o);v=+Q(+o);q=+g[a+92>>2]- +g[a+160>>2];j=+g[a+96>>2]- +g[a+164>>2];h=t*q-p*j;j=p*q+t*j;t=+g[a+100>>2]- +g[a+168>>2];q=+g[a+104>>2]- +g[a+172>>2];p=v*t-y*q;q=y*t+v*q;v=k+h- +g[a+68>>2];t=r+j- +g[a+72>>2];y=s+p- +g[a+76>>2];x=m+q- +g[a+80>>2];w=+O(+(v*v+t*t));u=+O(+(y*y+x*x));if(w>.04999999701976776){E=1.0/w;t=t*E;v=v*E}else{t=0.0;v=0.0}if(u>.04999999701976776){D=1.0/u;x=x*D;D=y*D}else{x=0.0;D=0.0}I=h*t-j*v;E=p*x-q*D;A=+g[a+176>>2];z=+g[a+184>>2];y=+g[a+180>>2];B=+g[a+188>>2];C=+g[a+112>>2];E=A+I*I*z+C*C*(y+E*E*B);if(E>0.0)E=1.0/E;u=+g[a+108>>2]-w-u*C;if(u>0.0)w=u;else w=-u;E=E*u;v=v*E;u=t*E;E=E*C;I=D*E;E=x*E;D=+(k+v*A);C=+(r+u*A);H=l;g[H>>2]=D;g[H+4>>2]=C;H=c[b>>2]|0;g[H+((c[e>>2]|0)*12|0)+8>>2]=f+(h*u-j*v)*z;C=+(s+I*y);D=+(m+E*y);H=H+((c[n>>2]|0)*12|0)|0;g[H>>2]=C;g[H+4>>2]=D;g[(c[b>>2]|0)+((c[n>>2]|0)*12|0)+8>>2]=o+B*(p*E-q*I);i=d;return w<.004999999888241291|0}function cz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+92>>2];f=+g[j+20>>2];e=+g[b+96>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function dz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+100>>2];f=+g[j+20>>2];e=+g[b+104>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function ez(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0;e=+g[b+116>>2];d=e*+g[b+140>>2]*c;g[a>>2]=e*+g[b+136>>2]*c;g[a+4>>2]=d;return}function fz(a,b){a=a|0;b=+b;return 0.0}function gz(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Cw(16336,e);c[e>>2]=l;Cw(17224,e);c[e>>2]=f;Cw(17256,e);c[e>>2]=d[a+61>>0];Cw(17288,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(16360,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(16408,e);j=+g[a+96>>2];h[k>>3]=+g[a+92>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17328,e);j=+g[a+104>>2];h[k>>3]=+g[a+100>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17376,e);h[k>>3]=+g[a+84>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(16456,e);h[k>>3]=+g[a+88>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(16488,e);h[k>>3]=+g[a+112>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(16520,e);c[e>>2]=c[a+56>>2];Cw(17624,e);i=b;return}function hz(a){a=a|0;return}function iz(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function jz(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0.0,E=0.0,F=0.0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0.0,P=0.0,S=0.0;q=i;o=c[b+48>>2]|0;M=c[o+8>>2]|0;n=b+128|0;c[n>>2]=M;L=c[b+52>>2]|0;J=c[L+8>>2]|0;p=b+132|0;c[p>>2]=J;H=o+28|0;I=c[H>>2]|0;H=c[H+4>>2]|0;C=b+152|0;c[C>>2]=I;c[C+4>>2]=H;C=L+28|0;G=c[C>>2]|0;C=c[C+4>>2]|0;K=b+160|0;c[K>>2]=G;c[K+4>>2]=C;r=+g[o+120>>2];g[b+168>>2]=r;s=+g[L+120>>2];g[b+172>>2]=s;t=+g[o+128>>2];g[b+176>>2]=t;e=+g[L+128>>2];g[b+180>>2]=e;L=c[d+24>>2]|0;A=+g[L+(M*12|0)+8>>2];o=d+28|0;K=c[o>>2]|0;N=K+(M*12|0)|0;w=+g[N>>2];f=+g[N+4>>2];l=+g[K+(M*12|0)+8>>2];z=+g[L+(J*12|0)+8>>2];L=K+(J*12|0)|0;h=+g[L>>2];j=+g[L+4>>2];m=+g[K+(J*12|0)+8>>2];x=+R(+A);y=+Q(+A);F=+R(+z);D=+Q(+z);B=+g[b+68>>2]-(c[k>>2]=I,+g[k>>2]);v=+g[b+72>>2]-(c[k>>2]=H,+g[k>>2]);u=y*B-x*v;v=x*B+y*v;y=+u;B=+v;H=b+136|0;g[H>>2]=y;g[H+4>>2]=B;B=+g[b+76>>2]-(c[k>>2]=G,+g[k>>2]);y=+g[b+80>>2]-(c[k>>2]=C,+g[k>>2]);x=D*B-F*y;y=F*B+D*y;D=+x;B=+y;C=b+144|0;g[C>>2]=D;g[C+4>>2]=B;B=t+e;C=B==0.0;D=r+s;g[b+184>>2]=D+t*v*v+e*y*y;F=-(t*v*u)-e*y*x;g[b+196>>2]=F;E=-(t*v)-e*y;g[b+208>>2]=E;g[b+188>>2]=F;g[b+200>>2]=D+t*u*u+e*x*x;D=t*u+e*x;g[b+212>>2]=D;g[b+192>>2]=E;g[b+204>>2]=D;g[b+216>>2]=B;if(B>0.0)B=1.0/B;g[b+220>>2]=B;if((a[b+100>>0]|0)==0|C)g[b+96>>2]=0.0;do if((a[b+112>>0]|0)==0|C)c[b+224>>2]=0;else{z=z-A- +g[b+116>>2];A=+g[b+124>>2];B=+g[b+120>>2];D=A-B;if(!(D>0.0))D=-D;if(D<.06981317698955536){c[b+224>>2]=3;break}if(z<=B){C=b+224|0;if((c[C>>2]|0)!=1)g[b+92>>2]=0.0;c[C>>2]=1;break}C=b+224|0;if(!(z>=A)){c[C>>2]=0;g[b+92>>2]=0.0;break}if((c[C>>2]|0)!=2)g[b+92>>2]=0.0;c[C>>2]=2}while(0);C=b+84|0;if((a[d+20>>0]|0)==0){c[C+0>>2]=0;c[C+4>>2]=0;c[C+8>>2]=0;c[C+12>>2]=0;z=w;A=f;D=h;E=j;B=l;F=m;N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)|0;z=+z;A=+A;M=N;g[M>>2]=z;N=N+4|0;g[N>>2]=A;N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=B;N=c[p>>2]|0;N=M+(N*12|0)|0;D=+D;E=+E;M=N;g[M>>2]=D;N=N+4|0;g[N>>2]=E;N=c[p>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=F;i=q;return}else{M=d+8|0;S=+g[M>>2];F=S*+g[C>>2];g[C>>2]=F;N=b+88|0;O=S*+g[N>>2];g[N>>2]=O;N=b+92|0;S=S*+g[N>>2];g[N>>2]=S;N=b+96|0;P=+g[M>>2]*+g[N>>2];g[N>>2]=P;z=w-r*F;A=f-r*O;D=h+s*F;E=j+s*O;B=l-t*(S+(P+(O*u-F*v)));F=m+e*(S+(P+(O*x-F*y)));N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)|0;z=+z;A=+A;M=N;g[M>>2]=z;N=N+4|0;g[N>>2]=A;N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=B;N=c[p>>2]|0;N=M+(N*12|0)|0;D=+D;E=+E;M=N;g[M>>2]=D;N=N+4|0;g[N>>2]=E;N=c[p>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=F;i=q;return}}function kz(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,F=0.0,G=0.0,H=0,I=0.0,J=0,K=0.0,L=0;q=i;i=i+48|0;L=q+36|0;J=q+24|0;y=q+16|0;x=q+8|0;u=q;n=b+128|0;p=c[n>>2]|0;o=d+28|0;D=c[o>>2]|0;v=D+(p*12|0)|0;j=+g[v>>2];k=+g[v+4>>2];s=+g[D+(p*12|0)+8>>2];p=b+132|0;v=c[p>>2]|0;w=D+(v*12|0)|0;m=+g[w>>2];h=+g[w+4>>2];t=+g[D+(v*12|0)+8>>2];e=+g[b+168>>2];r=+g[b+172>>2];l=+g[b+176>>2];f=+g[b+180>>2];v=l+f==0.0;if((a[b+100>>0]|0)!=0?!((c[b+224>>2]|0)==3|v):0){D=b+96|0;K=+g[D>>2];I=+g[d>>2]*+g[b+104>>2];F=K- +g[b+220>>2]*(t-s- +g[b+108>>2]);G=-I;I=F<I?F:I;I=I<G?G:I;g[D>>2]=I;K=I-K;s=s-l*K;t=t+f*K}if((a[b+112>>0]|0)!=0?(H=b+224|0,!((c[H>>2]|0)==0|v)):0){w=b+148|0;d=b+144|0;v=b+140|0;u=b+136|0;z=m-t*+g[w>>2]-j+s*+g[v>>2];C=h+t*+g[d>>2]-k-s*+g[u>>2];g[L>>2]=z;g[L+4>>2]=C;g[L+8>>2]=t-s;D=b+184|0;zw(J,D,L);F=+g[J>>2];A=-F;G=+g[J+4>>2];E=-G;I=+g[J+8>>2];B=-I;H=c[H>>2]|0;do if((H|0)==1){x=b+84|0;H=b+92|0;K=+g[H>>2];I=K-I;if(I<0.0){Aw(y,D,K*+g[b+208>>2]-z,K*+g[b+212>>2]-C);A=+g[y>>2];E=+g[y+4>>2];B=-+g[H>>2];g[x>>2]=A+ +g[x>>2];L=b+88|0;g[L>>2]=E+ +g[L>>2];g[H>>2]=0.0;break}else{g[x>>2]=+g[x>>2]-F;L=b+88|0;g[L>>2]=+g[L>>2]-G;g[H>>2]=I;break}}else if((H|0)==3){L=b+84|0;g[L>>2]=+g[L>>2]-F;L=b+88|0;g[L>>2]=+g[L>>2]-G;L=b+92|0;g[L>>2]=+g[L>>2]-I}else if((H|0)==2){H=b+84|0;y=b+92|0;K=+g[y>>2];I=K-I;if(I>0.0){Aw(x,D,K*+g[b+208>>2]-z,K*+g[b+212>>2]-C);A=+g[x>>2];E=+g[x+4>>2];B=-+g[y>>2];g[H>>2]=A+ +g[H>>2];L=b+88|0;g[L>>2]=E+ +g[L>>2];g[y>>2]=0.0;break}else{g[H>>2]=+g[H>>2]-F;L=b+88|0;g[L>>2]=+g[L>>2]-G;g[y>>2]=I;break}}while(0);K=B+(E*+g[d>>2]-A*+g[w>>2]);F=B+(E*+g[u>>2]-A*+g[v>>2]);C=A;G=r*C;I=r*E;C=e*C;E=e*E;G=m+G;I=h+I;C=j-C;E=k-E;F=l*F;K=f*K;F=s-F;K=t+K;L=c[n>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)|0;C=+C;E=+E;J=L;g[J>>2]=C;L=L+4|0;g[L>>2]=E;L=c[n>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)+8|0;g[L>>2]=F;L=c[p>>2]|0;L=J+(L*12|0)|0;G=+G;I=+I;J=L;g[J>>2]=G;L=L+4|0;g[L>>2]=I;L=c[p>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)+8|0;g[L>>2]=K;i=q;return}H=b+148|0;D=b+144|0;L=b+140|0;J=b+136|0;Aw(u,b+184|0,-(m-t*+g[H>>2]-j+s*+g[L>>2]),-(h+t*+g[D>>2]-k-s*+g[J>>2]));C=+g[u>>2];y=b+84|0;g[y>>2]=C+ +g[y>>2];E=+g[u+4>>2];y=b+88|0;g[y>>2]=E+ +g[y>>2];K=E*+g[D>>2]-C*+g[H>>2];F=E*+g[J>>2]-C*+g[L>>2];G=r*C;I=r*E;C=e*C;E=e*E;G=m+G;I=h+I;C=j-C;E=k-E;F=l*F;K=f*K;F=s-F;K=t+K;L=c[n>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)|0;C=+C;E=+E;J=L;g[J>>2]=C;L=L+4|0;g[L>>2]=E;L=c[n>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)+8|0;g[L>>2]=F;L=c[p>>2]|0;L=J+(L*12|0)|0;G=+G;I=+I;J=L;g[J>>2]=G;L=L+4|0;g[L>>2]=I;L=c[p>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)+8|0;g[L>>2]=K;i=q;return}function lz(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0,I=0,J=0.0;f=i;e=b+128|0;n=c[e>>2]|0;k=d+24|0;G=c[k>>2]|0;d=G+(n*12|0)|0;H=d;l=+g[H>>2];j=+g[H+4>>2];q=+g[G+(n*12|0)+8>>2];n=b+132|0;H=c[n>>2]|0;I=G+(H*12|0)|0;h=+g[I>>2];m=+g[I+4>>2];r=+g[G+(H*12|0)+8>>2];H=b+176|0;G=b+180|0;if((a[b+112>>0]|0)!=0){s=+g[G>>2];t=+g[H>>2];G=c[b+224>>2]|0;if((G|0)==0|s+t==0.0){o=t;p=s;u=0.0}else{o=r-q- +g[b+116>>2];if((G|0)==2){u=o- +g[b+124>>2];v=u+-.03490658849477768;v=v<.13962635397911072?v:.13962635397911072;v=-(+g[b+220>>2]*(v<0.0?0.0:v))}else if((G|0)==3){u=o- +g[b+120>>2];u=u<.13962635397911072?u:.13962635397911072;u=u<-.13962635397911072?-.13962635397911072:u;v=-(+g[b+220>>2]*u);if(!(u>0.0))u=-u}else if((G|0)==1){u=o- +g[b+120>>2];v=u+.03490658849477768;v=v<0.0?v:0.0;u=-u;v=-(+g[b+220>>2]*(v<-.13962635397911072?-.13962635397911072:v))}else{u=0.0;v=0.0}o=t;p=s;q=q-v*t;r=r+v*s}}else{o=+g[H>>2];p=+g[G>>2];u=0.0}w=+R(+q);x=+Q(+q);y=+R(+r);z=+Q(+r);v=+g[b+68>>2]- +g[b+152>>2];s=+g[b+72>>2]- +g[b+156>>2];A=x*v-w*s;s=w*v+x*s;x=+g[b+76>>2]- +g[b+160>>2];v=+g[b+80>>2]- +g[b+164>>2];w=z*x-y*v;v=y*x+z*v;z=h+w-l-A;x=m+v-j-s;y=+O(+(z*z+x*x));t=+g[b+168>>2];C=+g[b+172>>2];J=t+C;E=J+s*s*o+v*v*p;F=A*o;B=w*p;D=-(s*F)-v*B;B=J+A*F+w*B;F=E*B-D*D;if(F!=0.0)F=1.0/F;J=-((z*B-x*D)*F);F=-((x*E-z*D)*F);E=+(l-t*J);D=+(j-t*F);I=d;g[I>>2]=E;g[I+4>>2]=D;I=c[k>>2]|0;g[I+((c[e>>2]|0)*12|0)+8>>2]=q-o*(A*F-s*J);D=+(h+C*J);E=+(m+C*F);I=I+((c[n>>2]|0)*12|0)|0;g[I>>2]=D;g[I+4>>2]=E;g[(c[k>>2]|0)+((c[n>>2]|0)*12|0)+8>>2]=r+p*(w*F-v*J);if(!(y<=.004999999888241291)){I=0;i=f;return I|0}I=u<=.03490658849477768;i=f;return I|0}function mz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function nz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function oz(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+88>>2]*c;g[a>>2]=+g[b+84>>2]*c;g[a+4>>2]=d;return}function pz(a,b){a=a|0;b=+b;return+(+g[a+92>>2]*b)}function qz(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Cw(16712,e);c[e>>2]=l;Cw(17224,e);c[e>>2]=f;Cw(17256,e);c[e>>2]=d[a+61>>0];Cw(17288,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17328,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17376,e);h[k>>3]=+g[a+116>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17088,e);c[e>>2]=d[a+112>>0];Cw(16744,e);h[k>>3]=+g[a+120>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(16776,e);h[k>>3]=+g[a+124>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(16808,e);c[e>>2]=d[a+100>>0];Cw(17464,e);h[k>>3]=+g[a+108>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17496,e);h[k>>3]=+g[a+104>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17528,e);c[e>>2]=c[a+56>>2];Cw(17624,e);i=b;return}function rz(a){a=a|0;return}function sz(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function tz(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0,z=0.0,A=0.0,B=0,C=0.0,D=0.0,E=0,F=0,G=0,H=0.0,I=0,J=0,K=0,L=0,M=0,N=0,P=0.0;e=i;w=c[b+48>>2]|0;M=c[w+8>>2]|0;f=b+96|0;c[f>>2]=M;L=c[b+52>>2]|0;J=c[L+8>>2]|0;h=b+100|0;c[h>>2]=J;E=w+28|0;I=c[E>>2]|0;E=c[E+4>>2]|0;y=b+128|0;c[y>>2]=I;c[y+4>>2]=E;y=L+28|0;G=c[y>>2]|0;y=c[y+4>>2]|0;F=b+136|0;c[F>>2]=G;c[F+4>>2]=y;F=b+144|0;g[F>>2]=+g[w+120>>2];y=b+148|0;g[y>>2]=+g[L+120>>2];B=b+152|0;g[B>>2]=+g[w+128>>2];w=b+156|0;g[w>>2]=+g[L+128>>2];L=c[d+24>>2]|0;j=L+(M*12|0)|0;v=+g[j>>2];x=+g[j+4>>2];l=+g[L+(M*12|0)+8>>2];j=d+28|0;K=c[j>>2]|0;N=K+(M*12|0)|0;u=+g[N>>2];t=+g[N+4>>2];o=+g[K+(M*12|0)+8>>2];M=L+(J*12|0)|0;z=+g[M>>2];H=+g[M+4>>2];C=+g[L+(J*12|0)+8>>2];L=K+(J*12|0)|0;s=+g[L>>2];r=+g[L+4>>2];m=+g[K+(J*12|0)+8>>2];n=+R(+l);l=+Q(+l);A=+R(+C);C=+Q(+C);D=+g[b+68>>2]-(c[k>>2]=I,+g[k>>2]);q=+g[b+72>>2]-(c[k>>2]=E,+g[k>>2]);p=l*D-n*q;q=n*D+l*q;l=+p;D=+q;E=b+112|0;g[E>>2]=l;g[E+4>>2]=D;D=+g[b+76>>2]-(c[k>>2]=G,+g[k>>2]);l=+g[b+80>>2]- +g[b+140>>2];n=C*D-A*l;l=A*D+C*l;C=+n;D=+l;G=b+120|0;g[G>>2]=C;g[G+4>>2]=D;G=b+104|0;v=z+n-v-p;x=H+l-x-q;H=+v;z=+x;E=G;g[E>>2]=H;g[E+4>>2]=z;E=b+108|0;z=+O(+(v*v+x*x));g[b+88>>2]=z;c[b+164>>2]=z- +g[b+84>>2]>0.0?2:0;if(!(z>.004999999888241291)){g[G>>2]=0.0;g[E>>2]=0.0;g[b+160>>2]=0.0;g[b+92>>2]=0.0;i=e;return}A=1.0/z;v=A*v;g[G>>2]=v;A=A*x;g[E>>2]=A;P=p*A-q*v;H=A*n-v*l;C=+g[F>>2];x=+g[B>>2];D=+g[y>>2];z=+g[w>>2];H=D+(C+P*P*x)+H*H*z;if(H!=0.0)H=1.0/H;else H=0.0;g[b+160>>2]=H;if((a[d+20>>0]|0)==0)g[b+92>>2]=0.0;else{N=b+92|0;H=+g[d+8>>2]*+g[N>>2];g[N>>2]=H;P=v*H;H=H*A;u=u-P*C;t=t-H*C;s=s+P*D;r=r+H*D;o=o-x*(H*p-P*q);m=m+z*(H*n-P*l)}P=+u;H=+t;N=(c[j>>2]|0)+((c[f>>2]|0)*12|0)|0;g[N>>2]=P;g[N+4>>2]=H;N=c[j>>2]|0;g[N+((c[f>>2]|0)*12|0)+8>>2]=o;H=+s;P=+r;N=N+((c[h>>2]|0)*12|0)|0;g[N>>2]=H;g[N+4>>2]=P;g[(c[j>>2]|0)+((c[h>>2]|0)*12|0)+8>>2]=m;i=e;return}function uz(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0,h=0.0,j=0.0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0,A=0,B=0.0;p=i;k=a+96|0;e=c[k>>2]|0;f=b+28|0;z=c[f>>2]|0;l=z+(e*12|0)|0;y=l;n=+g[y>>2];m=+g[y+4>>2];t=+g[z+(e*12|0)+8>>2];e=a+100|0;y=c[e>>2]|0;A=z+(y*12|0)|0;j=+g[A>>2];h=+g[A+4>>2];q=+g[z+(y*12|0)+8>>2];r=+g[a+116>>2];s=+g[a+112>>2];o=+g[a+124>>2];d=+g[a+120>>2];w=+g[a+88>>2]- +g[a+84>>2];v=+g[a+104>>2];u=+g[a+108>>2];x=(j-q*o-(n-t*r))*v+(h+q*d-(m+t*s))*u;if(w<0.0)x=x+w*+g[b+4>>2];A=a+92|0;B=+g[A>>2];w=B-x*+g[a+160>>2];w=w>0.0?0.0:w;g[A>>2]=w;B=w-B;v=v*B;u=u*B;B=+g[a+144>>2];t=t- +g[a+152>>2]*(s*u-v*r);w=+g[a+148>>2];x=q+ +g[a+156>>2]*(u*d-v*o);r=+(n-B*v);s=+(m-B*u);A=l;g[A>>2]=r;g[A+4>>2]=s;A=c[f>>2]|0;g[A+((c[k>>2]|0)*12|0)+8>>2]=t;v=+(j+v*w);w=+(h+u*w);A=A+((c[e>>2]|0)*12|0)|0;g[A>>2]=v;g[A+4>>2]=w;g[(c[f>>2]|0)+((c[e>>2]|0)*12|0)+8>>2]=x;i=p;return}function vz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0;e=i;d=a+96|0;o=c[d>>2]|0;b=b+24|0;x=c[b>>2]|0;k=x+(o*12|0)|0;w=k;m=+g[w>>2];l=+g[w+4>>2];s=+g[x+(o*12|0)+8>>2];o=a+100|0;w=c[o>>2]|0;y=x+(w*12|0)|0;h=+g[y>>2];f=+g[y+4>>2];p=+g[x+(w*12|0)+8>>2];j=+R(+s);t=+Q(+s);u=+R(+p);v=+Q(+p);n=+g[a+68>>2]- +g[a+128>>2];q=+g[a+72>>2]- +g[a+132>>2];r=t*n-j*q;q=j*n+t*q;t=+g[a+76>>2]- +g[a+136>>2];n=+g[a+80>>2]- +g[a+140>>2];j=v*t-u*n;n=u*t+v*n;v=h+j-m-r;t=f+n-l-q;u=+O(+(v*v+t*t));if(u<1.1920928955078125e-7)u=0.0;else{z=1.0/u;v=v*z;t=t*z}y=a+84|0;B=u- +g[y>>2];B=B<.20000000298023224?B:.20000000298023224;B=-(+g[a+160>>2]*(B<0.0?0.0:B));A=v*B;v=t*B;B=+g[a+144>>2];t=s- +g[a+152>>2]*(r*v-q*A);s=+g[a+148>>2];z=p+ +g[a+156>>2]*(j*v-n*A);q=+(m-B*A);r=+(l-B*v);x=k;g[x>>2]=q;g[x+4>>2]=r;x=c[b>>2]|0;g[x+((c[d>>2]|0)*12|0)+8>>2]=t;t=+(h+s*A);v=+(f+s*v);x=x+((c[o>>2]|0)*12|0)|0;g[x>>2]=t;g[x+4>>2]=v;g[(c[b>>2]|0)+((c[o>>2]|0)*12|0)+8>>2]=z;i=e;return u- +g[y>>2]<.004999999888241291|0}function wz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function xz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function yz(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+92>>2]*c;c=d*+g[b+108>>2];g[a>>2]=+g[b+104>>2]*d;g[a+4>>2]=c;return}function zz(a,b){a=a|0;b=+b;return 0.0}function Az(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Cw(16928,e);c[e>>2]=l;Cw(17224,e);c[e>>2]=f;Cw(17256,e);c[e>>2]=d[a+61>>0];Cw(17288,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17328,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17376,e);h[k>>3]=+g[a+84>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(16952,e);c[e>>2]=c[a+56>>2];Cw(17624,e);i=b;return}function Bz(a){a=a|0;return}function Cz(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Dz(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0.0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,F=0.0,G=0.0,H=0,I=0.0,J=0.0,K=0,L=0,M=0,N=0;p=i;i=i+48|0;H=p;n=c[b+48>>2]|0;M=c[n+8>>2]|0;m=b+116|0;c[m>>2]=M;L=c[b+52>>2]|0;t=c[L+8>>2]|0;o=b+120|0;c[o>>2]=t;w=n+28|0;D=c[w>>2]|0;w=c[w+4>>2]|0;u=b+140|0;c[u>>2]=D;c[u+4>>2]=w;u=L+28|0;x=c[u>>2]|0;u=c[u+4>>2]|0;K=b+148|0;c[K>>2]=x;c[K+4>>2]=u;q=+g[n+120>>2];g[b+156>>2]=q;e=+g[L+120>>2];g[b+160>>2]=e;s=+g[n+128>>2];g[b+164>>2]=s;v=+g[L+128>>2];g[b+168>>2]=v;L=c[d+24>>2]|0;C=+g[L+(M*12|0)+8>>2];n=d+28|0;K=c[n>>2]|0;N=K+(M*12|0)|0;y=+g[N>>2];r=+g[N+4>>2];j=+g[K+(M*12|0)+8>>2];B=+g[L+(t*12|0)+8>>2];L=K+(t*12|0)|0;f=+g[L>>2];h=+g[L+4>>2];l=+g[K+(t*12|0)+8>>2];z=+R(+C);A=+Q(+C);G=+R(+B);E=+Q(+B);t=b+124|0;F=+g[b+80>>2]-(c[k>>2]=D,+g[k>>2]);J=+g[b+84>>2]-(c[k>>2]=w,+g[k>>2]);I=A*F-z*J;J=z*F+A*J;A=+I;F=+J;w=t;g[w>>2]=A;g[w+4>>2]=F;w=b+132|0;F=+g[b+88>>2]-(c[k>>2]=x,+g[k>>2]);A=+g[b+92>>2]-(c[k>>2]=u,+g[k>>2]);z=E*F-G*A;A=G*F+E*A;E=+z;F=+A;u=w;g[u>>2]=E;g[u+4>>2]=F;F=q+e;u=b+128|0;x=b+136|0;E=F+s*J*J+v*A*A;g[H>>2]=E;G=-(s*J*I)-v*A*z;g[H+12>>2]=G;A=-(s*J)-v*A;g[H+24>>2]=A;g[H+4>>2]=G;F=F+s*I*I+v*z*z;g[H+16>>2]=F;z=s*I+v*z;g[H+28>>2]=z;g[H+8>>2]=A;g[H+20>>2]=z;z=s+v;g[H+32>>2]=z;A=+g[b+68>>2];D=b+172|0;if(A>0.0){I=E*F-G*G;if(I!=0.0)I=1.0/I;g[D>>2]=F*I;J=-(I*G);g[b+184>>2]=J;g[b+180>>2]=0.0;g[b+176>>2]=J;g[b+188>>2]=E*I;N=b+192|0;c[N+0>>2]=0;c[N+4>>2]=0;c[N+8>>2]=0;c[N+12>>2]=0;if(z>0.0)E=1.0/z;else E=0.0;B=B-C- +g[b+96>>2];J=A*6.2831854820251465;A=J*E*J;C=+g[d>>2];E=C*(J*E*2.0*+g[b+72>>2]+C*A);D=b+100|0;g[D>>2]=E;if(E!=0.0)E=1.0/E;else E=0.0;g[D>>2]=E;g[b+76>>2]=B*C*A*E;z=z+E;if(z!=0.0)z=1.0/z;else z=0.0;g[b+204>>2]=z}else{Bw(H,D);g[b+100>>2]=0.0;g[b+76>>2]=0.0}D=b+104|0;if((a[d+20>>0]|0)==0){g[D>>2]=0.0;g[b+108>>2]=0.0;g[b+112>>2]=0.0;C=y;E=r;G=f;I=h;F=j;J=l;N=c[m>>2]|0;M=c[n>>2]|0;N=M+(N*12|0)|0;C=+C;E=+E;M=N;g[M>>2]=C;N=N+4|0;g[N>>2]=E;N=c[m>>2]|0;M=c[n>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=F;N=c[o>>2]|0;N=M+(N*12|0)|0;G=+G;I=+I;M=N;g[M>>2]=G;N=N+4|0;g[N>>2]=I;N=c[o>>2]|0;M=c[n>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=J;i=p;return}else{A=+g[d+8>>2];J=A*+g[D>>2];g[D>>2]=J;N=b+108|0;B=A*+g[N>>2];g[N>>2]=B;N=b+112|0;A=A*+g[N>>2];g[N>>2]=A;C=y-q*J;E=r-q*B;G=f+e*J;I=h+e*B;F=j-s*(A+(B*+g[t>>2]-J*+g[u>>2]));J=l+v*(A+(B*+g[w>>2]-J*+g[x>>2]));N=c[m>>2]|0;M=c[n>>2]|0;N=M+(N*12|0)|0;C=+C;E=+E;M=N;g[M>>2]=C;N=N+4|0;g[N>>2]=E;N=c[m>>2]|0;M=c[n>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=F;N=c[o>>2]|0;N=M+(N*12|0)|0;G=+G;I=+I;M=N;g[M>>2]=G;N=N+4|0;g[N>>2]=I;N=c[o>>2]|0;M=c[n>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=J;i=p;return}}function Ez(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0;e=i;d=a+116|0;t=c[d>>2]|0;l=b+28|0;u=c[l>>2]|0;h=u+(t*12|0)|0;b=h;k=+g[b>>2];j=+g[b+4>>2];s=+g[u+(t*12|0)+8>>2];b=a+120|0;t=c[b>>2]|0;v=u+(t*12|0)|0;m=+g[v>>2];f=+g[v+4>>2];r=+g[u+(t*12|0)+8>>2];n=+g[a+156>>2];o=+g[a+160>>2];q=+g[a+164>>2];p=+g[a+168>>2];if(+g[a+68>>2]>0.0){v=a+112|0;A=+g[v>>2];D=+g[a+204>>2]*(r-s+ +g[a+76>>2]+ +g[a+100>>2]*A);B=-D;g[v>>2]=A-D;D=s-q*B;B=r+p*B;r=+g[a+136>>2];A=+g[a+132>>2];w=+g[a+128>>2];C=+g[a+124>>2];s=w*D+(m-r*B-k);x=f+A*B-j-C*D;y=+g[a+172>>2]*s+ +g[a+184>>2]*x;x=+g[a+176>>2]*s+ +g[a+188>>2]*x;s=-y;z=-x;v=a+104|0;g[v>>2]=+g[v>>2]-y;v=a+108|0;g[v>>2]=+g[v>>2]-x;x=z;y=s;w=D-q*(C*z-w*s);s=B+p*(A*z-r*s);q=o*y;r=o*x;o=n*y;p=n*x;q=m+q;r=f+r;o=k-o;p=j-p;o=+o;p=+p;v=h;u=v;g[u>>2]=o;v=v+4|0;g[v>>2]=p;v=c[d>>2]|0;u=c[l>>2]|0;v=u+(v*12|0)+8|0;g[v>>2]=w;v=c[b>>2]|0;v=u+(v*12|0)|0;q=+q;r=+r;u=v;g[u>>2]=q;v=v+4|0;g[v>>2]=r;v=c[b>>2]|0;u=c[l>>2]|0;v=u+(v*12|0)+8|0;g[v>>2]=s;i=e;return}else{C=+g[a+136>>2];w=+g[a+132>>2];A=+g[a+128>>2];E=+g[a+124>>2];x=m-r*C-k+s*A;B=f+r*w-j-s*E;D=r-s;y=x*+g[a+172>>2]+B*+g[a+184>>2]+D*+g[a+196>>2];z=x*+g[a+176>>2]+B*+g[a+188>>2]+D*+g[a+200>>2];D=x*+g[a+180>>2]+B*+g[a+192>>2]+D*+g[a+204>>2];B=-y;x=-z;v=a+104|0;g[v>>2]=+g[v>>2]-y;v=a+108|0;g[v>>2]=+g[v>>2]-z;v=a+112|0;g[v>>2]=+g[v>>2]-D;z=x;y=B;A=s-q*(E*x-A*B-D);D=r+p*(w*x-C*B-D);B=o*y;C=o*z;y=n*y;z=n*z;B=m+B;C=f+C;y=k-y;z=j-z;y=+y;z=+z;v=h;u=v;g[u>>2]=y;v=v+4|0;g[v>>2]=z;v=c[d>>2]|0;u=c[l>>2]|0;v=u+(v*12|0)+8|0;g[v>>2]=A;v=c[b>>2]|0;v=u+(v*12|0)|0;B=+B;C=+C;u=v;g[u>>2]=B;v=v+4|0;g[v>>2]=C;v=c[b>>2]|0;u=c[l>>2]|0;v=u+(v*12|0)+8|0;g[v>>2]=D;i=e;return}}function Fz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0,I=0;e=i;i=i+64|0;B=e+24|0;z=e+12|0;A=e;d=a+116|0;G=c[d>>2]|0;f=b+24|0;H=c[f>>2]|0;b=H+(G*12|0)|0;q=+g[b>>2];r=+g[b+4>>2];j=+g[H+(G*12|0)+8>>2];b=a+120|0;G=c[b>>2]|0;I=H+(G*12|0)|0;l=+g[I>>2];n=+g[I+4>>2];p=+g[H+(G*12|0)+8>>2];v=+R(+j);E=+Q(+j);C=+R(+p);D=+Q(+p);o=+g[a+156>>2];m=+g[a+160>>2];k=+g[a+164>>2];h=+g[a+168>>2];u=+g[a+80>>2]- +g[a+140>>2];t=+g[a+84>>2]- +g[a+144>>2];s=E*u-v*t;t=v*u+E*t;E=+g[a+88>>2]- +g[a+148>>2];u=+g[a+92>>2]- +g[a+152>>2];v=D*E-C*u;u=C*E+D*u;D=o+m;E=D+k*t*t+h*u*u;g[B>>2]=E;C=-(k*t*s)-h*u*v;g[B+12>>2]=C;x=-(k*t)-h*u;g[B+24>>2]=x;g[B+4>>2]=C;D=D+k*s*s+h*v*v;g[B+16>>2]=D;w=k*s+h*v;g[B+28>>2]=w;g[B+8>>2]=x;g[B+20>>2]=w;g[B+32>>2]=k+h;w=l+v-q-s;x=n+u-r-t;if(+g[a+68>>2]>0.0){y=+O(+(x*x+w*w));F=E*D-C*C;if(F!=0.0)F=1.0/F;D=-(F*(D*w-C*x));C=-(F*(E*x-C*w));x=C;w=D;u=v*C-u*D;s=s*C-t*D;C=0.0}else{D=p-j- +g[a+96>>2];y=+O(+(w*w+x*x));if(D>0.0)C=D;else C=-D;g[z>>2]=w;g[z+4>>2]=x;g[z+8>>2]=D;zw(A,B,z);E=-+g[A>>2];D=-+g[A+4>>2];F=+g[A+8>>2];x=D;w=E;u=v*D-u*E-F;s=s*D-t*E-F}F=+(q-o*w);E=+(r-o*x);I=(c[f>>2]|0)+((c[d>>2]|0)*12|0)|0;g[I>>2]=F;g[I+4>>2]=E;I=c[f>>2]|0;g[I+((c[d>>2]|0)*12|0)+8>>2]=j-k*s;E=+(l+m*w);F=+(n+m*x);I=I+((c[b>>2]|0)*12|0)|0;g[I>>2]=E;g[I+4>>2]=F;g[(c[f>>2]|0)+((c[b>>2]|0)*12|0)+8>>2]=p+h*u;if(!(y<=.004999999888241291)){I=0;i=e;return I|0}I=C<=.03490658849477768;i=e;return I|0}function Gz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+80>>2];f=+g[j+20>>2];e=+g[b+84>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Hz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+88>>2];f=+g[j+20>>2];e=+g[b+92>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Iz(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+108>>2]*c;g[a>>2]=+g[b+104>>2]*c;g[a+4>>2]=d;return}function Jz(a,b){a=a|0;b=+b;return+(+g[a+112>>2]*b)}function Kz(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Cw(17064,e);c[e>>2]=l;Cw(17224,e);c[e>>2]=f;Cw(17256,e);c[e>>2]=d[a+61>>0];Cw(17288,e);j=+g[a+84>>2];h[k>>3]=+g[a+80>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17328,e);j=+g[a+92>>2];h[k>>3]=+g[a+88>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17376,e);h[k>>3]=+g[a+96>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17088,e);h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17560,e);h[k>>3]=+g[a+72>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17592,e);c[e>>2]=c[a+56>>2];Cw(17624,e);i=b;return}function Lz(a){a=a|0;return}function Mz(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Nz(b,d){b=b|0;d=d|0;var e=0.0,f=0,h=0.0,j=0,l=0.0,m=0,n=0,o=0.0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,F=0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0,S=0,T=0,U=0,V=0,W=0,X=0.0,Y=0.0;p=i;j=c[b+48>>2]|0;V=c[j+8>>2]|0;x=b+132|0;c[x>>2]=V;f=c[b+52>>2]|0;S=c[f+8>>2]|0;q=b+136|0;c[q>>2]=S;D=j+28|0;P=c[D>>2]|0;D=c[D+4>>2]|0;G=b+140|0;c[G>>2]=P;c[G+4>>2]=D;G=f+28|0;F=c[G>>2]|0;G=c[G+4>>2]|0;n=b+148|0;c[n>>2]=F;c[n+4>>2]=G;E=+g[j+120>>2];n=b+156|0;g[n>>2]=E;K=+g[f+120>>2];m=b+160|0;g[m>>2]=K;A=+g[j+128>>2];j=b+164|0;g[j>>2]=A;z=+g[f+128>>2];f=b+168|0;g[f>>2]=z;U=c[d+24>>2]|0;y=U+(V*12|0)|0;C=+g[y>>2];B=+g[y+4>>2];H=+g[U+(V*12|0)+8>>2];y=d+28|0;T=c[y>>2]|0;W=T+(V*12|0)|0;r=+g[W>>2];s=+g[W+4>>2];v=+g[T+(V*12|0)+8>>2];V=U+(S*12|0)|0;e=+g[V>>2];h=+g[V+4>>2];o=+g[U+(S*12|0)+8>>2];U=T+(S*12|0)|0;t=+g[U>>2];u=+g[U+4>>2];w=+g[T+(S*12|0)+8>>2];O=+R(+H);H=+Q(+H);N=+R(+o);o=+Q(+o);l=+g[b+76>>2]-(c[k>>2]=P,+g[k>>2]);L=+g[b+80>>2]-(c[k>>2]=D,+g[k>>2]);I=H*l-O*L;L=O*l+H*L;l=+g[b+84>>2]-(c[k>>2]=F,+g[k>>2]);M=+g[b+88>>2]-(c[k>>2]=G,+g[k>>2]);J=o*l-N*M;M=N*l+o*M;C=e+J-C-I;B=h+M-B-L;h=+g[b+100>>2];e=+g[b+104>>2];o=H*h-O*e;e=O*h+H*e;h=+o;l=+e;G=b+180|0;g[G>>2]=h;g[G+4>>2]=l;I=I+C;L=L+B;l=e*I-o*L;g[b+196>>2]=l;h=J*e-M*o;g[b+200>>2]=h;K=E+K;E=K+l*A*l+h*z*h;if(E>0.0)E=1.0/E;g[b+204>>2]=E;D=b+212|0;g[D>>2]=0.0;F=b+216|0;g[F>>2]=0.0;G=b+220|0;g[G>>2]=0.0;N=+g[b+68>>2];if(N>0.0){Y=+g[b+92>>2];X=+g[b+96>>2];E=H*Y-O*X;H=O*Y+H*X;X=+E;O=+H;W=b+172|0;g[W>>2]=X;g[W+4>>2]=O;O=I*H-L*E;g[b+188>>2]=O;I=J*H-M*E;g[b+192>>2]=I;I=K+O*A*O+I*z*I;if(I>0.0){L=1.0/I;g[D>>2]=L;Y=N*6.2831854820251465;K=Y*L*Y;J=+g[d>>2];L=J*(Y*L*2.0*+g[b+72>>2]+J*K);if(L>0.0)L=1.0/L;g[G>>2]=L;g[F>>2]=(C*E+B*H)*J*K*L;B=I+L;g[D>>2]=B;if(B>0.0)g[D>>2]=1.0/B}}else g[b+116>>2]=0.0;if((a[b+128>>0]|0)!=0){z=z+A;D=b+208|0;g[D>>2]=z;if(z>0.0)g[D>>2]=1.0/z}else{g[b+208>>2]=0.0;g[b+112>>2]=0.0}if((a[d+20>>0]|0)==0){g[b+108>>2]=0.0;g[b+116>>2]=0.0;g[b+112>>2]=0.0;L=r;M=s;O=t;X=u;N=v;Y=w;W=c[x>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)|0;L=+L;M=+M;V=W;g[V>>2]=L;W=W+4|0;g[W>>2]=M;W=c[x>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)+8|0;g[W>>2]=N;W=c[q>>2]|0;W=V+(W*12|0)|0;O=+O;X=+X;V=W;g[V>>2]=O;W=W+4|0;g[W>>2]=X;W=c[q>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)+8|0;g[W>>2]=Y;i=p;return}else{V=d+8|0;W=b+108|0;K=+g[V>>2]*+g[W>>2];g[W>>2]=K;W=b+116|0;Y=+g[V>>2]*+g[W>>2];g[W>>2]=Y;W=b+112|0;J=+g[V>>2]*+g[W>>2];g[W>>2]=J;O=K*o+Y*+g[b+172>>2];N=K*e+Y*+g[b+176>>2];M=+g[n>>2];X=+g[m>>2];L=r-O*M;M=s-N*M;O=t+O*X;X=u+N*X;N=v-(J+(K*l+Y*+g[b+188>>2]))*+g[j>>2];Y=w+(J+(K*h+Y*+g[b+192>>2]))*+g[f>>2];W=c[x>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)|0;L=+L;M=+M;V=W;g[V>>2]=L;W=W+4|0;g[W>>2]=M;W=c[x>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)+8|0;g[W>>2]=N;W=c[q>>2]|0;W=V+(W*12|0)|0;O=+O;X=+X;V=W;g[V>>2]=O;W=W+4|0;g[W>>2]=X;W=c[q>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)+8|0;g[W>>2]=Y;i=p;return}}function Oz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0,C=0;d=i;v=+g[a+156>>2];o=+g[a+160>>2];t=+g[a+164>>2];k=+g[a+168>>2];r=a+132|0;e=c[r>>2]|0;f=b+28|0;B=c[f>>2]|0;z=B+(e*12|0)|0;w=+g[z>>2];x=+g[z+4>>2];y=+g[B+(e*12|0)+8>>2];e=a+136|0;z=c[e>>2]|0;C=B+(z*12|0)|0;j=+g[C>>2];s=+g[C+4>>2];m=+g[B+(z*12|0)+8>>2];q=+g[a+172>>2];p=+g[a+176>>2];l=+g[a+192>>2];u=+g[a+188>>2];z=a+116|0;A=+g[z>>2];h=+g[a+212>>2]*(+g[a+216>>2]+(m*l+(q*(j-w)+p*(s-x))-y*u)+ +g[a+220>>2]*A);n=-h;g[z>>2]=A-h;q=q*n;p=p*n;w=w-v*q;x=x-v*p;u=y-t*u*n;q=j+o*q;p=s+o*p;n=m+k*l*n;z=a+112|0;l=+g[z>>2];m=+g[b>>2]*+g[a+120>>2];s=l- +g[a+208>>2]*(n-u- +g[a+124>>2]);j=-m;m=s<m?s:m;m=m<j?j:m;g[z>>2]=m;l=m-l;u=u-t*l;l=n+k*l;n=+g[a+180>>2];m=+g[a+184>>2];j=+g[a+200>>2];s=+g[a+196>>2];y=+g[a+204>>2]*((q-w)*n+(p-x)*m+j*l-s*u);h=-y;b=a+108|0;g[b>>2]=+g[b>>2]-y;n=n*h;m=m*h;w=+(w-v*n);v=+(x-v*m);b=(c[f>>2]|0)+((c[r>>2]|0)*12|0)|0;g[b>>2]=w;g[b+4>>2]=v;b=c[f>>2]|0;g[b+((c[r>>2]|0)*12|0)+8>>2]=u-t*s*h;n=+(q+o*n);m=+(p+o*m);b=b+((c[e>>2]|0)*12|0)|0;g[b>>2]=n;g[b+4>>2]=m;g[(c[f>>2]|0)+((c[e>>2]|0)*12|0)+8>>2]=l+k*j*h;i=d;return}function Pz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0.0;e=i;d=a+132|0;w=c[d>>2]|0;b=b+24|0;E=c[b>>2]|0;D=E+(w*12|0)|0;j=+g[D>>2];l=+g[D+4>>2];n=+g[E+(w*12|0)+8>>2];w=a+136|0;D=c[w>>2]|0;F=E+(D*12|0)|0;t=+g[F>>2];v=+g[F+4>>2];x=+g[E+(D*12|0)+8>>2];u=+R(+n);q=+Q(+n);k=+R(+x);f=+Q(+x);r=+g[a+76>>2]- +g[a+140>>2];m=+g[a+80>>2]- +g[a+144>>2];o=q*r-u*m;m=u*r+q*m;r=+g[a+84>>2]- +g[a+148>>2];z=+g[a+88>>2]- +g[a+152>>2];y=f*r-k*z;z=k*r+f*z;f=t-j+y-o;r=v-l+z-m;k=+g[a+100>>2];h=+g[a+104>>2];p=q*k-u*h;h=u*k+q*h;q=p*f+h*r;k=+g[a+156>>2];u=+g[a+160>>2];s=+g[a+164>>2];C=+g[a+196>>2];A=+g[a+168>>2];B=+g[a+200>>2];B=k+u+C*s*C+B*A*B;if(B!=0.0)B=-q/B;else B=0.0;G=p*B;C=h*B;j=+(j-G*k);l=+(l-C*k);F=(c[b>>2]|0)+((c[d>>2]|0)*12|0)|0;g[F>>2]=j;g[F+4>>2]=l;F=c[b>>2]|0;g[F+((c[d>>2]|0)*12|0)+8>>2]=n-(h*(o+f)-p*(m+r))*B*s;t=+(t+G*u);C=+(v+C*u);F=F+((c[w>>2]|0)*12|0)|0;g[F>>2]=t;g[F+4>>2]=C;g[(c[b>>2]|0)+((c[w>>2]|0)*12|0)+8>>2]=x+(y*h-z*p)*B*A;if(q>0.0){G=q;F=G<=.004999999888241291;i=e;return F|0}G=-q;F=G<=.004999999888241291;i=e;return F|0}function Qz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Rz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+84>>2];f=+g[j+20>>2];e=+g[b+88>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Sz(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0,f=0.0;f=+g[b+108>>2];e=+g[b+116>>2];d=(f*+g[b+184>>2]+e*+g[b+176>>2])*c;g[a>>2]=(f*+g[b+180>>2]+e*+g[b+172>>2])*c;g[a+4>>2]=d;return}function Tz(a,b){a=a|0;b=+b;return+(+g[a+112>>2]*b)}function Uz(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Cw(17200,e);c[e>>2]=l;Cw(17224,e);c[e>>2]=f;Cw(17256,e);c[e>>2]=d[a+61>>0];Cw(17288,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17328,e);j=+g[a+88>>2];h[k>>3]=+g[a+84>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17376,e);j=+g[a+96>>2];h[k>>3]=+g[a+92>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Cw(17424,e);c[e>>2]=d[a+128>>0];Cw(17464,e);h[k>>3]=+g[a+124>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17496,e);h[k>>3]=+g[a+120>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17528,e);h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17560,e);h[k>>3]=+g[a+72>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Cw(17592,e);c[e>>2]=c[a+56>>2];Cw(17624,e);i=b;return}function Vz(a){a=a|0;return}function Wz(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function Xz(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+16|0;c[d>>2]=b;b=c[m>>2]|0;ya(b|0,a|0,d|0)|0;Za(10,b|0)|0;$a()}function Yz(){var a=0,b=0,d=0,e=0,f=0;a=i;i=i+16|0;b=a;a=a+12|0;if((Sa(17888,44)|0)!=0)Xz(17896,b);d=Pa(c[4470]|0)|0;if((d|0)==0)Xz(17864,b);d=c[d>>2]|0;if((d|0)==0)Xz(17864,b);f=d+48|0;e=c[f>>2]|0;f=c[f+4>>2]|0;if(!((e&-256|0)==1126902528&(f|0)==1129074247)){c[b>>2]=17712;Xz(17824,b)}if((e|0)==1126902529&(f|0)==1129074247)e=c[d+44>>2]|0;else e=d+80|0;c[a>>2]=e;f=c[d>>2]|0;d=c[f+4>>2]|0;if(kA(18256,f,a)|0){f=c[a>>2]|0;f=nb[c[(c[f>>2]|0)+8>>2]&63](f)|0;c[b>>2]=17712;c[b+4>>2]=d;c[b+8>>2]=f;Xz(17728,b)}else{c[b>>2]=17712;c[b+4>>2]=d;Xz(17776,b)}}function Zz(){var a=0;a=i;i=i+16|0;if((va(17880,119)|0)==0){i=a;return}else Xz(17952,a)}function _z(a){a=a|0;var b=0;b=i;i=i+16|0;DA(a);if((Ya(c[4470]|0,0)|0)==0){i=b;return}else Xz(18008,b)}function $z(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function aA(a){a=a|0;return}function bA(a){a=a|0;return 18088}function cA(a){a=a|0;var b=0;b=i;i=i+16|0;qb[a&63]();Xz(18136,b)}function dA(){var a=0,b=0;b=i;i=i+16|0;if((Sa(17888,44)|0)!=0)Xz(17896,b);b=Pa(c[4470]|0)|0;if(((b|0)!=0?(a=c[b>>2]|0,(a|0)!=0):0)?(b=a+48|0,(c[b>>2]&-256|0)==1126902528?(c[b+4>>2]|0)==1129074247:0):0)cA(c[a+12>>2]|0);b=c[4426]|0;c[4426]=b+0;cA(b)}function eA(a){a=a|0;return}function fA(a){a=a|0;return}function gA(a){a=a|0;return}function hA(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function iA(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function jA(a){a=a|0;var b=0;b=i;DA(a);i=b;return}function kA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;i=i+64|0;f=e;if((a|0)==(b|0)){h=1;i=e;return h|0}if((b|0)==0){h=0;i=e;return h|0}b=qA(b,18384)|0;if((b|0)==0){h=0;i=e;return h|0}h=f+0|0;g=h+56|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(g|0));c[f>>2]=b;c[f+8>>2]=a;c[f+12>>2]=-1;c[f+48>>2]=1;vb[c[(c[b>>2]|0)+28>>2]&63](b,f,c[d>>2]|0,1);if((c[f+24>>2]|0)!=1){h=0;i=e;return h|0}c[d>>2]=c[f+16>>2];h=1;i=e;return h|0}function lA(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;g=b+16|0;h=c[g>>2]|0;if((h|0)==0){c[g>>2]=d;c[b+24>>2]=e;c[b+36>>2]=1;i=f;return}if((h|0)!=(d|0)){h=b+36|0;c[h>>2]=(c[h>>2]|0)+1;c[b+24>>2]=2;a[b+54>>0]=1;i=f;return}d=b+24|0;if((c[d>>2]|0)!=2){i=f;return}c[d>>2]=e;i=f;return}function mA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((c[b+8>>2]|0)!=(a|0)){i=f;return}lA(b,d,e);i=f;return}function nA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==(c[b+8>>2]|0)){lA(b,d,e);i=f;return}else{a=c[a+8>>2]|0;vb[c[(c[a>>2]|0)+28>>2]&63](a,b,d,e);i=f;return}}function oA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;g=c[a+4>>2]|0;h=g>>8;if((g&1|0)!=0)h=c[(c[d>>2]|0)+h>>2]|0;a=c[a>>2]|0;vb[c[(c[a>>2]|0)+28>>2]&63](a,b,d+h|0,(g&2|0)!=0?e:2);i=f;return}function pA(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;if((b|0)==(c[d+8>>2]|0)){lA(d,e,f);i=g;return}j=c[b+12>>2]|0;h=b+(j<<3)+16|0;oA(b+16|0,d,e,f);if((j|0)<=1){i=g;return}j=d+54|0;b=b+24|0;while(1){oA(b,d,e,f);if((a[j>>0]|0)!=0){f=7;break}b=b+8|0;if(!(b>>>0<h>>>0)){f=7;break}}if((f|0)==7){i=g;return}}function qA(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;i=i+64|0;m=f;g=c[d>>2]|0;h=d+(c[g+ -8>>2]|0)|0;g=c[g+ -4>>2]|0;c[m>>2]=e;c[m+4>>2]=d;c[m+8>>2]=18328;p=m+12|0;n=m+16|0;o=m+20|0;j=m+24|0;d=m+28|0;k=m+32|0;l=m+40|0;r=(g|0)==(e|0);e=p+0|0;q=e+40|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(q|0));b[p+40>>1]=0;a[p+42>>0]=0;do if(r){c[m+48>>2]=1;sb[c[(c[g>>2]|0)+20>>2]&63](g,m,h,h,1,0);d=(c[j>>2]|0)==1?h:0}else{hb[c[(c[g>>2]|0)+24>>2]&63](g,m,h,1,0);g=c[m+36>>2]|0;if((g|0)==0){if((c[l>>2]|0)!=1){d=0;break}if((c[d>>2]|0)!=1){d=0;break}d=(c[k>>2]|0)==1?c[o>>2]|0:0;break}else if((g|0)!=1){d=0;break}if((c[j>>2]|0)!=1){if((c[l>>2]|0)!=0){d=0;break}if((c[d>>2]|0)!=1){d=0;break}if((c[k>>2]|0)!=1){d=0;break}}d=c[n>>2]|0}while(0);i=f;return d|0}function rA(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;a[b+53>>0]=1;if((c[b+4>>2]|0)!=(e|0)){i=g;return}a[b+52>>0]=1;e=b+16|0;h=c[e>>2]|0;if((h|0)==0){c[e>>2]=d;c[b+24>>2]=f;c[b+36>>2]=1;if(!((f|0)==1?(c[b+48>>2]|0)==1:0)){i=g;return}a[b+54>>0]=1;i=g;return}if((h|0)!=(d|0)){h=b+36|0;c[h>>2]=(c[h>>2]|0)+1;a[b+54>>0]=1;i=g;return}d=b+24|0;e=c[d>>2]|0;if((e|0)==2)c[d>>2]=f;else f=e;if(!((f|0)==1?(c[b+48>>2]|0)==1:0)){i=g;return}a[b+54>>0]=1;i=g;return}function sA(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}e=d+28|0;if((c[e>>2]|0)==1){i=h;return}c[e>>2]=f;i=h;return}if((b|0)!=(c[d>>2]|0)){u=c[b+12>>2]|0;m=b+(u<<3)+16|0;uA(b+16|0,d,e,f,g);n=b+24|0;if((u|0)<=1){i=h;return}p=c[b+8>>2]|0;if((p&2|0)==0?(o=d+36|0,(c[o>>2]|0)!=1):0){if((p&1|0)==0){q=d+54|0;p=n;while(1){if((a[q>>0]|0)!=0){p=43;break}if((c[o>>2]|0)==1){p=43;break}uA(p,d,e,f,g);p=p+8|0;if(!(p>>>0<m>>>0)){p=43;break}}if((p|0)==43){i=h;return}}p=d+24|0;q=d+54|0;r=n;while(1){if((a[q>>0]|0)!=0){p=43;break}if((c[o>>2]|0)==1?(c[p>>2]|0)==1:0){p=43;break}uA(r,d,e,f,g);r=r+8|0;if(!(r>>>0<m>>>0)){p=43;break}}if((p|0)==43){i=h;return}}o=d+54|0;while(1){if((a[o>>0]|0)!=0){p=43;break}uA(n,d,e,f,g);n=n+8|0;if(!(n>>>0<m>>>0)){p=43;break}}if((p|0)==43){i=h;return}}if((c[d+16>>2]|0)!=(e|0)?(j=d+20|0,(c[j>>2]|0)!=(e|0)):0){c[d+32>>2]=f;m=d+44|0;if((c[m>>2]|0)==4){i=h;return}u=c[b+12>>2]|0;t=b+(u<<3)+16|0;a:do if((u|0)>0){o=d+52|0;n=d+53|0;r=d+54|0;q=b+8|0;p=d+24|0;u=0;s=0;b=b+16|0;b:do{a[o>>0]=0;a[n>>0]=0;tA(b,d,e,e,1,g);if((a[r>>0]|0)!=0)break;do if((a[n>>0]|0)!=0){if((a[o>>0]|0)==0)if((c[q>>2]&1|0)==0){s=1;break b}else{s=1;break}if((c[p>>2]|0)==1){p=25;break a}if((c[q>>2]&2|0)==0){p=25;break a}else{u=1;s=1}}while(0);b=b+8|0}while(b>>>0<t>>>0);if(u){l=s;p=24}else{k=s;p=21}}else{k=0;p=21}while(0);if((p|0)==21){c[j>>2]=e;u=d+40|0;c[u>>2]=(c[u>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(k)p=25;else p=26}else{l=k;p=24}}if((p|0)==24)if(l)p=25;else p=26;if((p|0)==25){c[m>>2]=3;i=h;return}else if((p|0)==26){c[m>>2]=4;i=h;return}}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}function tA(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;j=c[a+4>>2]|0;k=j>>8;if((j&1|0)!=0)k=c[(c[e>>2]|0)+k>>2]|0;a=c[a>>2]|0;sb[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e+k|0,(j&2|0)!=0?f:2,g);i=h;return}function uA(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;h=c[a+4>>2]|0;j=h>>8;if((h&1|0)!=0)j=c[(c[d>>2]|0)+j>>2]|0;a=c[a>>2]|0;hb[c[(c[a>>2]|0)+24>>2]&63](a,b,d+j|0,(h&2|0)!=0?e:2,f);i=g;return}function vA(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}j=d+28|0;if((c[j>>2]|0)==1){i=h;return}c[j>>2]=f;i=h;return}if((b|0)!=(c[d>>2]|0)){l=c[b+8>>2]|0;hb[c[(c[l>>2]|0)+24>>2]&63](l,d,e,f,g);i=h;return}if((c[d+16>>2]|0)!=(e|0)?(k=d+20|0,(c[k>>2]|0)!=(e|0)):0){c[d+32>>2]=f;f=d+44|0;if((c[f>>2]|0)==4){i=h;return}l=d+52|0;a[l>>0]=0;m=d+53|0;a[m>>0]=0;b=c[b+8>>2]|0;sb[c[(c[b>>2]|0)+20>>2]&63](b,d,e,e,1,g);if((a[m>>0]|0)!=0){if((a[l>>0]|0)==0){b=1;j=13}}else{b=0;j=13}do if((j|0)==13){c[k>>2]=e;m=d+40|0;c[m>>2]=(c[m>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(b)break}else j=16;if((j|0)==16?b:0)break;c[f>>2]=4;i=h;return}while(0);c[f>>2]=3;i=h;return}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}function wA(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;g=i;if((c[d+8>>2]|0)==(b|0)){if((c[d+4>>2]|0)!=(e|0)){i=g;return}d=d+28|0;if((c[d>>2]|0)==1){i=g;return}c[d>>2]=f;i=g;return}if((c[d>>2]|0)!=(b|0)){i=g;return}if((c[d+16>>2]|0)!=(e|0)?(h=d+20|0,(c[h>>2]|0)!=(e|0)):0){c[d+32>>2]=f;c[h>>2]=e;b=d+40|0;c[b>>2]=(c[b>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0)a[d+54>>0]=1;c[d+44>>2]=4;i=g;return}if((f|0)!=1){i=g;return}c[d+32>>2]=1;i=g;return}function xA(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;m=i;if((b|0)==(c[d+8>>2]|0)){rA(d,e,f,g);i=m;return}j=d+52|0;l=a[j>>0]|0;o=d+53|0;n=a[o>>0]|0;r=c[b+12>>2]|0;p=b+(r<<3)+16|0;a[j>>0]=0;a[o>>0]=0;tA(b+16|0,d,e,f,g,h);a:do if((r|0)>1){k=d+24|0;q=b+8|0;r=d+54|0;b=b+24|0;do{if((a[r>>0]|0)!=0)break a;if((a[j>>0]|0)==0){if((a[o>>0]|0)!=0?(c[q>>2]&1|0)==0:0)break a}else{if((c[k>>2]|0)==1)break a;if((c[q>>2]&2|0)==0)break a}a[j>>0]=0;a[o>>0]=0;tA(b,d,e,f,g,h);b=b+8|0}while(b>>>0<p>>>0)}while(0);a[j>>0]=l;a[o>>0]=n;i=m;return}function yA(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;if((a|0)==(c[b+8>>2]|0)){rA(b,d,e,f);i=h;return}else{a=c[a+8>>2]|0;sb[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f,g);i=h;return}}function zA(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;g=i;if((c[b+8>>2]|0)!=(a|0)){i=g;return}rA(b,d,e,f);i=g;return}function AA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=c[d>>2];a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,f)|0;b=a&1;if(!a){i=e;return b|0}c[d>>2]=c[f>>2];i=e;return b|0}function BA(a){a=a|0;var b=0;b=i;if((a|0)==0)a=0;else a=(qA(a,18496)|0)!=0;i=b;return a&1|0}function CA(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;b=i;do if(a>>>0<245){if(a>>>0<11)a=16;else a=a+11&-8;v=a>>>3;p=c[4686]|0;w=p>>>v;if((w&3|0)!=0){h=(w&1^1)+v|0;g=h<<1;e=18784+(g<<2)|0;g=18784+(g+2<<2)|0;j=c[g>>2]|0;d=j+8|0;f=c[d>>2]|0;do if((e|0)!=(f|0)){if(f>>>0<(c[4690]|0)>>>0)$a();k=f+12|0;if((c[k>>2]|0)==(j|0)){c[k>>2]=e;c[g>>2]=f;break}else $a()}else c[4686]=p&~(1<<h);while(0);H=h<<3;c[j+4>>2]=H|3;H=j+(H|4)|0;c[H>>2]=c[H>>2]|1;H=d;i=b;return H|0}if(a>>>0>(c[4688]|0)>>>0){if((w|0)!=0){h=2<<v;h=w<<v&(h|0-h);h=(h&0-h)+ -1|0;d=h>>>12&16;h=h>>>d;f=h>>>5&8;h=h>>>f;g=h>>>2&4;h=h>>>g;e=h>>>1&2;h=h>>>e;j=h>>>1&1;j=(f|d|g|e|j)+(h>>>j)|0;h=j<<1;e=18784+(h<<2)|0;h=18784+(h+2<<2)|0;g=c[h>>2]|0;d=g+8|0;f=c[d>>2]|0;do if((e|0)!=(f|0)){if(f>>>0<(c[4690]|0)>>>0)$a();k=f+12|0;if((c[k>>2]|0)==(g|0)){c[k>>2]=e;c[h>>2]=f;break}else $a()}else c[4686]=p&~(1<<j);while(0);h=j<<3;f=h-a|0;c[g+4>>2]=a|3;e=g+a|0;c[g+(a|4)>>2]=f|1;c[g+h>>2]=f;h=c[4688]|0;if((h|0)!=0){g=c[4691]|0;k=h>>>3;j=k<<1;h=18784+(j<<2)|0;l=c[4686]|0;k=1<<k;if((l&k|0)!=0){j=18784+(j+2<<2)|0;k=c[j>>2]|0;if(k>>>0<(c[4690]|0)>>>0)$a();else{D=j;C=k}}else{c[4686]=l|k;D=18784+(j+2<<2)|0;C=h}c[D>>2]=g;c[C+12>>2]=g;c[g+8>>2]=C;c[g+12>>2]=h}c[4688]=f;c[4691]=e;H=d;i=b;return H|0}p=c[4687]|0;if((p|0)!=0){e=(p&0-p)+ -1|0;G=e>>>12&16;e=e>>>G;F=e>>>5&8;e=e>>>F;H=e>>>2&4;e=e>>>H;f=e>>>1&2;e=e>>>f;d=e>>>1&1;d=c[19048+((F|G|H|f|d)+(e>>>d)<<2)>>2]|0;e=(c[d+4>>2]&-8)-a|0;f=d;while(1){g=c[f+16>>2]|0;if((g|0)==0){g=c[f+20>>2]|0;if((g|0)==0)break}f=(c[g+4>>2]&-8)-a|0;H=f>>>0<e>>>0;e=H?f:e;f=g;d=H?g:d}h=c[4690]|0;if(d>>>0<h>>>0)$a();f=d+a|0;if(!(d>>>0<f>>>0))$a();g=c[d+24>>2]|0;k=c[d+12>>2]|0;do if((k|0)==(d|0)){k=d+20|0;j=c[k>>2]|0;if((j|0)==0){k=d+16|0;j=c[k>>2]|0;if((j|0)==0){B=0;break}}while(1){l=j+20|0;m=c[l>>2]|0;if((m|0)!=0){j=m;k=l;continue}m=j+16|0;l=c[m>>2]|0;if((l|0)==0)break;else{j=l;k=m}}if(k>>>0<h>>>0)$a();else{c[k>>2]=0;B=j;break}}else{j=c[d+8>>2]|0;if(j>>>0<h>>>0)$a();h=j+12|0;if((c[h>>2]|0)!=(d|0))$a();l=k+8|0;if((c[l>>2]|0)==(d|0)){c[h>>2]=k;c[l>>2]=j;B=k;break}else $a()}while(0);do if((g|0)!=0){h=c[d+28>>2]|0;j=19048+(h<<2)|0;if((d|0)==(c[j>>2]|0)){c[j>>2]=B;if((B|0)==0){c[4687]=c[4687]&~(1<<h);break}}else{if(g>>>0<(c[4690]|0)>>>0)$a();h=g+16|0;if((c[h>>2]|0)==(d|0))c[h>>2]=B;else c[g+20>>2]=B;if((B|0)==0)break}if(B>>>0<(c[4690]|0)>>>0)$a();c[B+24>>2]=g;g=c[d+16>>2]|0;do if((g|0)!=0)if(g>>>0<(c[4690]|0)>>>0)$a();else{c[B+16>>2]=g;c[g+24>>2]=B;break}while(0);g=c[d+20>>2]|0;if((g|0)!=0)if(g>>>0<(c[4690]|0)>>>0)$a();else{c[B+20>>2]=g;c[g+24>>2]=B;break}}while(0);if(e>>>0<16){H=e+a|0;c[d+4>>2]=H|3;H=d+(H+4)|0;c[H>>2]=c[H>>2]|1}else{c[d+4>>2]=a|3;c[d+(a|4)>>2]=e|1;c[d+(e+a)>>2]=e;h=c[4688]|0;if((h|0)!=0){g=c[4691]|0;l=h>>>3;j=l<<1;h=18784+(j<<2)|0;k=c[4686]|0;l=1<<l;if((k&l|0)!=0){j=18784+(j+2<<2)|0;k=c[j>>2]|0;if(k>>>0<(c[4690]|0)>>>0)$a();else{A=j;z=k}}else{c[4686]=k|l;A=18784+(j+2<<2)|0;z=h}c[A>>2]=g;c[z+12>>2]=g;c[g+8>>2]=z;c[g+12>>2]=h}c[4688]=e;c[4691]=f}H=d+8|0;i=b;return H|0}}}else if(!(a>>>0>4294967231)){z=a+11|0;a=z&-8;B=c[4687]|0;if((B|0)!=0){A=0-a|0;z=z>>>8;if((z|0)!=0)if(a>>>0>16777215)C=31;else{G=(z+1048320|0)>>>16&8;H=z<<G;F=(H+520192|0)>>>16&4;H=H<<F;C=(H+245760|0)>>>16&2;C=14-(F|G|C)+(H<<C>>>15)|0;C=a>>>(C+7|0)&1|C<<1}else C=0;D=c[19048+(C<<2)>>2]|0;a:do if((D|0)==0){F=0;z=0}else{if((C|0)==31)z=0;else z=25-(C>>>1)|0;F=0;E=a<<z;z=0;while(1){H=c[D+4>>2]&-8;G=H-a|0;if(G>>>0<A>>>0)if((H|0)==(a|0)){A=G;F=D;z=D;break a}else{A=G;z=D}H=c[D+20>>2]|0;D=c[D+(E>>>31<<2)+16>>2]|0;F=(H|0)==0|(H|0)==(D|0)?F:H;if((D|0)==0)break;else E=E<<1}}while(0);if((F|0)==0&(z|0)==0){H=2<<C;B=B&(H|0-H);if((B|0)==0)break;H=(B&0-B)+ -1|0;D=H>>>12&16;H=H>>>D;C=H>>>5&8;H=H>>>C;E=H>>>2&4;H=H>>>E;G=H>>>1&2;H=H>>>G;F=H>>>1&1;F=c[19048+((C|D|E|G|F)+(H>>>F)<<2)>>2]|0}if((F|0)!=0)while(1){H=(c[F+4>>2]&-8)-a|0;B=H>>>0<A>>>0;A=B?H:A;z=B?F:z;B=c[F+16>>2]|0;if((B|0)!=0){F=B;continue}F=c[F+20>>2]|0;if((F|0)==0)break}if((z|0)!=0?A>>>0<((c[4688]|0)-a|0)>>>0:0){f=c[4690]|0;if(z>>>0<f>>>0)$a();d=z+a|0;if(!(z>>>0<d>>>0))$a();e=c[z+24>>2]|0;h=c[z+12>>2]|0;do if((h|0)==(z|0)){h=z+20|0;g=c[h>>2]|0;if((g|0)==0){h=z+16|0;g=c[h>>2]|0;if((g|0)==0){x=0;break}}while(1){j=g+20|0;k=c[j>>2]|0;if((k|0)!=0){g=k;h=j;continue}j=g+16|0;k=c[j>>2]|0;if((k|0)==0)break;else{g=k;h=j}}if(h>>>0<f>>>0)$a();else{c[h>>2]=0;x=g;break}}else{g=c[z+8>>2]|0;if(g>>>0<f>>>0)$a();f=g+12|0;if((c[f>>2]|0)!=(z|0))$a();j=h+8|0;if((c[j>>2]|0)==(z|0)){c[f>>2]=h;c[j>>2]=g;x=h;break}else $a()}while(0);do if((e|0)!=0){g=c[z+28>>2]|0;f=19048+(g<<2)|0;if((z|0)==(c[f>>2]|0)){c[f>>2]=x;if((x|0)==0){c[4687]=c[4687]&~(1<<g);break}}else{if(e>>>0<(c[4690]|0)>>>0)$a();f=e+16|0;if((c[f>>2]|0)==(z|0))c[f>>2]=x;else c[e+20>>2]=x;if((x|0)==0)break}if(x>>>0<(c[4690]|0)>>>0)$a();c[x+24>>2]=e;e=c[z+16>>2]|0;do if((e|0)!=0)if(e>>>0<(c[4690]|0)>>>0)$a();else{c[x+16>>2]=e;c[e+24>>2]=x;break}while(0);e=c[z+20>>2]|0;if((e|0)!=0)if(e>>>0<(c[4690]|0)>>>0)$a();else{c[x+20>>2]=e;c[e+24>>2]=x;break}}while(0);b:do if(!(A>>>0<16)){c[z+4>>2]=a|3;c[z+(a|4)>>2]=A|1;c[z+(A+a)>>2]=A;f=A>>>3;if(A>>>0<256){h=f<<1;e=18784+(h<<2)|0;g=c[4686]|0;f=1<<f;do if((g&f|0)==0){c[4686]=g|f;w=18784+(h+2<<2)|0;v=e}else{f=18784+(h+2<<2)|0;g=c[f>>2]|0;if(!(g>>>0<(c[4690]|0)>>>0)){w=f;v=g;break}$a()}while(0);c[w>>2]=d;c[v+12>>2]=d;c[z+(a+8)>>2]=v;c[z+(a+12)>>2]=e;break}e=A>>>8;if((e|0)!=0)if(A>>>0>16777215)e=31;else{G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=A>>>(e+7|0)&1|e<<1}else e=0;f=19048+(e<<2)|0;c[z+(a+28)>>2]=e;c[z+(a+20)>>2]=0;c[z+(a+16)>>2]=0;h=c[4687]|0;g=1<<e;if((h&g|0)==0){c[4687]=h|g;c[f>>2]=d;c[z+(a+24)>>2]=f;c[z+(a+12)>>2]=d;c[z+(a+8)>>2]=d;break}f=c[f>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;c:do if((c[f+4>>2]&-8|0)!=(A|0)){e=A<<e;while(1){g=f+(e>>>31<<2)+16|0;h=c[g>>2]|0;if((h|0)==0)break;if((c[h+4>>2]&-8|0)==(A|0)){p=h;break c}else{e=e<<1;f=h}}if(g>>>0<(c[4690]|0)>>>0)$a();else{c[g>>2]=d;c[z+(a+24)>>2]=f;c[z+(a+12)>>2]=d;c[z+(a+8)>>2]=d;break b}}else p=f;while(0);f=p+8|0;e=c[f>>2]|0;g=c[4690]|0;if(p>>>0<g>>>0)$a();if(e>>>0<g>>>0)$a();else{c[e+12>>2]=d;c[f>>2]=d;c[z+(a+8)>>2]=e;c[z+(a+12)>>2]=p;c[z+(a+24)>>2]=0;break}}else{H=A+a|0;c[z+4>>2]=H|3;H=z+(H+4)|0;c[H>>2]=c[H>>2]|1}while(0);H=z+8|0;i=b;return H|0}}}else a=-1;while(0);p=c[4688]|0;if(!(a>>>0>p>>>0)){e=p-a|0;d=c[4691]|0;if(e>>>0>15){c[4691]=d+a;c[4688]=e;c[d+(a+4)>>2]=e|1;c[d+p>>2]=e;c[d+4>>2]=a|3}else{c[4688]=0;c[4691]=0;c[d+4>>2]=p|3;H=d+(p+4)|0;c[H>>2]=c[H>>2]|1}H=d+8|0;i=b;return H|0}p=c[4689]|0;if(a>>>0<p>>>0){G=p-a|0;c[4689]=G;H=c[4692]|0;c[4692]=H+a;c[H+(a+4)>>2]=G|1;c[H+4>>2]=a|3;H=H+8|0;i=b;return H|0}do if((c[4804]|0)==0){p=Oa(30)|0;if((p+ -1&p|0)==0){c[4806]=p;c[4805]=p;c[4807]=-1;c[4808]=-1;c[4809]=0;c[4797]=0;c[4804]=(bb(0)|0)&-16^1431655768;break}else $a()}while(0);w=a+48|0;p=c[4806]|0;x=a+47|0;z=p+x|0;p=0-p|0;v=z&p;if(!(v>>>0>a>>>0)){H=0;i=b;return H|0}A=c[4796]|0;if((A|0)!=0?(G=c[4794]|0,H=G+v|0,H>>>0<=G>>>0|H>>>0>A>>>0):0){H=0;i=b;return H|0}d:do if((c[4797]&4|0)==0){B=c[4692]|0;e:do if((B|0)!=0){A=19192|0;while(1){C=c[A>>2]|0;if(!(C>>>0>B>>>0)?(y=A+4|0,(C+(c[y>>2]|0)|0)>>>0>B>>>0):0)break;A=c[A+8>>2]|0;if((A|0)==0){o=182;break e}}if((A|0)!=0){B=z-(c[4689]|0)&p;if(B>>>0<2147483647){p=Ia(B|0)|0;A=(p|0)==((c[A>>2]|0)+(c[y>>2]|0)|0);y=p;z=B;p=A?p:-1;A=A?B:0;o=191}else A=0}else o=182}else o=182;while(0);do if((o|0)==182){p=Ia(0)|0;if((p|0)!=(-1|0)){z=p;A=c[4805]|0;y=A+ -1|0;if((y&z|0)==0)A=v;else A=v-z+(y+z&0-A)|0;y=c[4794]|0;z=y+A|0;if(A>>>0>a>>>0&A>>>0<2147483647){H=c[4796]|0;if((H|0)!=0?z>>>0<=y>>>0|z>>>0>H>>>0:0){A=0;break}y=Ia(A|0)|0;o=(y|0)==(p|0);z=A;p=o?p:-1;A=o?A:0;o=191}else A=0}else A=0}while(0);f:do if((o|0)==191){o=0-z|0;if((p|0)!=(-1|0)){q=A;o=202;break d}do if((y|0)!=(-1|0)&z>>>0<2147483647&z>>>0<w>>>0?(u=c[4806]|0,u=x-z+u&0-u,u>>>0<2147483647):0)if((Ia(u|0)|0)==(-1|0)){Ia(o|0)|0;break f}else{z=u+z|0;break}while(0);if((y|0)!=(-1|0)){p=y;q=z;o=202;break d}}while(0);c[4797]=c[4797]|4;o=199}else{A=0;o=199}while(0);if((((o|0)==199?v>>>0<2147483647:0)?(t=Ia(v|0)|0,s=Ia(0)|0,(s|0)!=(-1|0)&(t|0)!=(-1|0)&t>>>0<s>>>0):0)?(r=s-t|0,q=r>>>0>(a+40|0)>>>0,q):0){p=t;q=q?r:A;o=202}if((o|0)==202){r=(c[4794]|0)+q|0;c[4794]=r;if(r>>>0>(c[4795]|0)>>>0)c[4795]=r;r=c[4692]|0;g:do if((r|0)!=0){v=19192|0;while(1){t=c[v>>2]|0;u=v+4|0;s=c[u>>2]|0;if((p|0)==(t+s|0)){o=214;break}w=c[v+8>>2]|0;if((w|0)==0)break;else v=w}if(((o|0)==214?(c[v+12>>2]&8|0)==0:0)?r>>>0>=t>>>0&r>>>0<p>>>0:0){c[u>>2]=s+q;d=(c[4689]|0)+q|0;e=r+8|0;if((e&7|0)==0)e=0;else e=0-e&7;H=d-e|0;c[4692]=r+e;c[4689]=H;c[r+(e+4)>>2]=H|1;c[r+(d+4)>>2]=40;c[4693]=c[4808];break}if(p>>>0<(c[4690]|0)>>>0)c[4690]=p;t=p+q|0;s=19192|0;while(1){if((c[s>>2]|0)==(t|0)){o=224;break}u=c[s+8>>2]|0;if((u|0)==0)break;else s=u}if((o|0)==224?(c[s+12>>2]&8|0)==0:0){c[s>>2]=p;h=s+4|0;c[h>>2]=(c[h>>2]|0)+q;h=p+8|0;if((h&7|0)==0)h=0;else h=0-h&7;j=p+(q+8)|0;if((j&7|0)==0)n=0;else n=0-j&7;o=p+(n+q)|0;j=h+a|0;k=p+j|0;m=o-(p+h)-a|0;c[p+(h+4)>>2]=a|3;h:do if((o|0)!=(c[4692]|0)){if((o|0)==(c[4691]|0)){H=(c[4688]|0)+m|0;c[4688]=H;c[4691]=k;c[p+(j+4)>>2]=H|1;c[p+(H+j)>>2]=H;break}r=q+4|0;t=c[p+(r+n)>>2]|0;if((t&3|0)==1){a=t&-8;s=t>>>3;i:do if(!(t>>>0<256)){l=c[p+((n|24)+q)>>2]|0;u=c[p+(q+12+n)>>2]|0;do if((u|0)==(o|0)){u=n|16;t=p+(r+u)|0;s=c[t>>2]|0;if((s|0)==0){t=p+(u+q)|0;s=c[t>>2]|0;if((s|0)==0){g=0;break}}while(1){u=s+20|0;v=c[u>>2]|0;if((v|0)!=0){s=v;t=u;continue}u=s+16|0;v=c[u>>2]|0;if((v|0)==0)break;else{s=v;t=u}}if(t>>>0<(c[4690]|0)>>>0)$a();else{c[t>>2]=0;g=s;break}}else{t=c[p+((n|8)+q)>>2]|0;if(t>>>0<(c[4690]|0)>>>0)$a();v=t+12|0;if((c[v>>2]|0)!=(o|0))$a();s=u+8|0;if((c[s>>2]|0)==(o|0)){c[v>>2]=u;c[s>>2]=t;g=u;break}else $a()}while(0);if((l|0)==0)break;t=c[p+(q+28+n)>>2]|0;s=19048+(t<<2)|0;do if((o|0)!=(c[s>>2]|0)){if(l>>>0<(c[4690]|0)>>>0)$a();s=l+16|0;if((c[s>>2]|0)==(o|0))c[s>>2]=g;else c[l+20>>2]=g;if((g|0)==0)break i}else{c[s>>2]=g;if((g|0)!=0)break;c[4687]=c[4687]&~(1<<t);break i}while(0);if(g>>>0<(c[4690]|0)>>>0)$a();c[g+24>>2]=l;l=n|16;o=c[p+(l+q)>>2]|0;do if((o|0)!=0)if(o>>>0<(c[4690]|0)>>>0)$a();else{c[g+16>>2]=o;c[o+24>>2]=g;break}while(0);l=c[p+(r+l)>>2]|0;if((l|0)==0)break;if(l>>>0<(c[4690]|0)>>>0)$a();else{c[g+20>>2]=l;c[l+24>>2]=g;break}}else{r=c[p+((n|8)+q)>>2]|0;g=c[p+(q+12+n)>>2]|0;t=18784+(s<<1<<2)|0;do if((r|0)!=(t|0)){if(r>>>0<(c[4690]|0)>>>0)$a();if((c[r+12>>2]|0)==(o|0))break;$a()}while(0);if((g|0)==(r|0)){c[4686]=c[4686]&~(1<<s);break}do if((g|0)==(t|0))l=g+8|0;else{if(g>>>0<(c[4690]|0)>>>0)$a();s=g+8|0;if((c[s>>2]|0)==(o|0)){l=s;break}$a()}while(0);c[r+12>>2]=g;c[l>>2]=r}while(0);o=p+((a|n)+q)|0;m=a+m|0}g=o+4|0;c[g>>2]=c[g>>2]&-2;c[p+(j+4)>>2]=m|1;c[p+(m+j)>>2]=m;g=m>>>3;if(m>>>0<256){m=g<<1;d=18784+(m<<2)|0;l=c[4686]|0;g=1<<g;do if((l&g|0)==0){c[4686]=l|g;f=18784+(m+2<<2)|0;e=d}else{l=18784+(m+2<<2)|0;g=c[l>>2]|0;if(!(g>>>0<(c[4690]|0)>>>0)){f=l;e=g;break}$a()}while(0);c[f>>2]=k;c[e+12>>2]=k;c[p+(j+8)>>2]=e;c[p+(j+12)>>2]=d;break}e=m>>>8;do if((e|0)==0)e=0;else{if(m>>>0>16777215){e=31;break}G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=m>>>(e+7|0)&1|e<<1}while(0);l=19048+(e<<2)|0;c[p+(j+28)>>2]=e;c[p+(j+20)>>2]=0;c[p+(j+16)>>2]=0;f=c[4687]|0;g=1<<e;if((f&g|0)==0){c[4687]=f|g;c[l>>2]=k;c[p+(j+24)>>2]=l;c[p+(j+12)>>2]=k;c[p+(j+8)>>2]=k;break}l=c[l>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;j:do if((c[l+4>>2]&-8|0)!=(m|0)){e=m<<e;while(1){g=l+(e>>>31<<2)+16|0;f=c[g>>2]|0;if((f|0)==0)break;if((c[f+4>>2]&-8|0)==(m|0)){d=f;break j}else{e=e<<1;l=f}}if(g>>>0<(c[4690]|0)>>>0)$a();else{c[g>>2]=k;c[p+(j+24)>>2]=l;c[p+(j+12)>>2]=k;c[p+(j+8)>>2]=k;break h}}else d=l;while(0);f=d+8|0;e=c[f>>2]|0;g=c[4690]|0;if(d>>>0<g>>>0)$a();if(e>>>0<g>>>0)$a();else{c[e+12>>2]=k;c[f>>2]=k;c[p+(j+8)>>2]=e;c[p+(j+12)>>2]=d;c[p+(j+24)>>2]=0;break}}else{H=(c[4689]|0)+m|0;c[4689]=H;c[4692]=k;c[p+(j+4)>>2]=H|1}while(0);H=p+(h|8)|0;i=b;return H|0}e=19192|0;while(1){d=c[e>>2]|0;if(!(d>>>0>r>>>0)?(n=c[e+4>>2]|0,m=d+n|0,m>>>0>r>>>0):0)break;e=c[e+8>>2]|0}e=d+(n+ -39)|0;if((e&7|0)==0)e=0;else e=0-e&7;d=d+(n+ -47+e)|0;d=d>>>0<(r+16|0)>>>0?r:d;e=d+8|0;f=p+8|0;if((f&7|0)==0)f=0;else f=0-f&7;H=q+ -40-f|0;c[4692]=p+f;c[4689]=H;c[p+(f+4)>>2]=H|1;c[p+(q+ -36)>>2]=40;c[4693]=c[4808];c[d+4>>2]=27;c[e+0>>2]=c[4798];c[e+4>>2]=c[4799];c[e+8>>2]=c[4800];c[e+12>>2]=c[4801];c[4798]=p;c[4799]=q;c[4801]=0;c[4800]=e;e=d+28|0;c[e>>2]=7;if((d+32|0)>>>0<m>>>0)do{H=e;e=e+4|0;c[e>>2]=7}while((H+8|0)>>>0<m>>>0);if((d|0)!=(r|0)){d=d-r|0;e=r+(d+4)|0;c[e>>2]=c[e>>2]&-2;c[r+4>>2]=d|1;c[r+d>>2]=d;e=d>>>3;if(d>>>0<256){g=e<<1;d=18784+(g<<2)|0;f=c[4686]|0;e=1<<e;do if((f&e|0)==0){c[4686]=f|e;k=18784+(g+2<<2)|0;j=d}else{f=18784+(g+2<<2)|0;e=c[f>>2]|0;if(!(e>>>0<(c[4690]|0)>>>0)){k=f;j=e;break}$a()}while(0);c[k>>2]=r;c[j+12>>2]=r;c[r+8>>2]=j;c[r+12>>2]=d;break}e=d>>>8;if((e|0)!=0)if(d>>>0>16777215)e=31;else{G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=d>>>(e+7|0)&1|e<<1}else e=0;j=19048+(e<<2)|0;c[r+28>>2]=e;c[r+20>>2]=0;c[r+16>>2]=0;f=c[4687]|0;g=1<<e;if((f&g|0)==0){c[4687]=f|g;c[j>>2]=r;c[r+24>>2]=j;c[r+12>>2]=r;c[r+8>>2]=r;break}f=c[j>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;k:do if((c[f+4>>2]&-8|0)!=(d|0)){e=d<<e;while(1){j=f+(e>>>31<<2)+16|0;g=c[j>>2]|0;if((g|0)==0)break;if((c[g+4>>2]&-8|0)==(d|0)){h=g;break k}else{e=e<<1;f=g}}if(j>>>0<(c[4690]|0)>>>0)$a();else{c[j>>2]=r;c[r+24>>2]=f;c[r+12>>2]=r;c[r+8>>2]=r;break g}}else h=f;while(0);f=h+8|0;e=c[f>>2]|0;d=c[4690]|0;if(h>>>0<d>>>0)$a();if(e>>>0<d>>>0)$a();else{c[e+12>>2]=r;c[f>>2]=r;c[r+8>>2]=e;c[r+12>>2]=h;c[r+24>>2]=0;break}}}else{H=c[4690]|0;if((H|0)==0|p>>>0<H>>>0)c[4690]=p;c[4798]=p;c[4799]=q;c[4801]=0;c[4695]=c[4804];c[4694]=-1;d=0;do{H=d<<1;G=18784+(H<<2)|0;c[18784+(H+3<<2)>>2]=G;c[18784+(H+2<<2)>>2]=G;d=d+1|0}while((d|0)!=32);d=p+8|0;if((d&7|0)==0)d=0;else d=0-d&7;H=q+ -40-d|0;c[4692]=p+d;c[4689]=H;c[p+(d+4)>>2]=H|1;c[p+(q+ -36)>>2]=40;c[4693]=c[4808]}while(0);d=c[4689]|0;if(d>>>0>a>>>0){G=d-a|0;c[4689]=G;H=c[4692]|0;c[4692]=H+a;c[H+(a+4)>>2]=G|1;c[H+4>>2]=a|3;H=H+8|0;i=b;return H|0}}c[(Xa()|0)>>2]=12;H=0;i=b;return H|0}function DA(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;b=i;if((a|0)==0){i=b;return}q=a+ -8|0;r=c[4690]|0;if(q>>>0<r>>>0)$a();o=c[a+ -4>>2]|0;n=o&3;if((n|0)==1)$a();j=o&-8;h=a+(j+ -8)|0;do if((o&1|0)==0){u=c[q>>2]|0;if((n|0)==0){i=b;return}q=-8-u|0;o=a+q|0;n=u+j|0;if(o>>>0<r>>>0)$a();if((o|0)==(c[4691]|0)){d=a+(j+ -4)|0;if((c[d>>2]&3|0)!=3){d=o;m=n;break}c[4688]=n;c[d>>2]=c[d>>2]&-2;c[a+(q+4)>>2]=n|1;c[h>>2]=n;i=b;return}t=u>>>3;if(u>>>0<256){d=c[a+(q+8)>>2]|0;m=c[a+(q+12)>>2]|0;p=18784+(t<<1<<2)|0;if((d|0)!=(p|0)){if(d>>>0<r>>>0)$a();if((c[d+12>>2]|0)!=(o|0))$a()}if((m|0)==(d|0)){c[4686]=c[4686]&~(1<<t);d=o;m=n;break}if((m|0)!=(p|0)){if(m>>>0<r>>>0)$a();p=m+8|0;if((c[p>>2]|0)==(o|0))s=p;else $a()}else s=m+8|0;c[d+12>>2]=m;c[s>>2]=d;d=o;m=n;break}s=c[a+(q+24)>>2]|0;t=c[a+(q+12)>>2]|0;do if((t|0)==(o|0)){u=a+(q+20)|0;t=c[u>>2]|0;if((t|0)==0){u=a+(q+16)|0;t=c[u>>2]|0;if((t|0)==0){p=0;break}}while(1){w=t+20|0;v=c[w>>2]|0;if((v|0)!=0){t=v;u=w;continue}v=t+16|0;w=c[v>>2]|0;if((w|0)==0)break;else{t=w;u=v}}if(u>>>0<r>>>0)$a();else{c[u>>2]=0;p=t;break}}else{u=c[a+(q+8)>>2]|0;if(u>>>0<r>>>0)$a();r=u+12|0;if((c[r>>2]|0)!=(o|0))$a();v=t+8|0;if((c[v>>2]|0)==(o|0)){c[r>>2]=t;c[v>>2]=u;p=t;break}else $a()}while(0);if((s|0)!=0){t=c[a+(q+28)>>2]|0;r=19048+(t<<2)|0;if((o|0)==(c[r>>2]|0)){c[r>>2]=p;if((p|0)==0){c[4687]=c[4687]&~(1<<t);d=o;m=n;break}}else{if(s>>>0<(c[4690]|0)>>>0)$a();r=s+16|0;if((c[r>>2]|0)==(o|0))c[r>>2]=p;else c[s+20>>2]=p;if((p|0)==0){d=o;m=n;break}}if(p>>>0<(c[4690]|0)>>>0)$a();c[p+24>>2]=s;r=c[a+(q+16)>>2]|0;do if((r|0)!=0)if(r>>>0<(c[4690]|0)>>>0)$a();else{c[p+16>>2]=r;c[r+24>>2]=p;break}while(0);q=c[a+(q+20)>>2]|0;if((q|0)!=0)if(q>>>0<(c[4690]|0)>>>0)$a();else{c[p+20>>2]=q;c[q+24>>2]=p;d=o;m=n;break}else{d=o;m=n}}else{d=o;m=n}}else{d=q;m=j}while(0);if(!(d>>>0<h>>>0))$a();n=a+(j+ -4)|0;o=c[n>>2]|0;if((o&1|0)==0)$a();if((o&2|0)==0){if((h|0)==(c[4692]|0)){w=(c[4689]|0)+m|0;c[4689]=w;c[4692]=d;c[d+4>>2]=w|1;if((d|0)!=(c[4691]|0)){i=b;return}c[4691]=0;c[4688]=0;i=b;return}if((h|0)==(c[4691]|0)){w=(c[4688]|0)+m|0;c[4688]=w;c[4691]=d;c[d+4>>2]=w|1;c[d+w>>2]=w;i=b;return}m=(o&-8)+m|0;n=o>>>3;do if(!(o>>>0<256)){l=c[a+(j+16)>>2]|0;q=c[a+(j|4)>>2]|0;do if((q|0)==(h|0)){o=a+(j+12)|0;n=c[o>>2]|0;if((n|0)==0){o=a+(j+8)|0;n=c[o>>2]|0;if((n|0)==0){k=0;break}}while(1){p=n+20|0;q=c[p>>2]|0;if((q|0)!=0){n=q;o=p;continue}p=n+16|0;q=c[p>>2]|0;if((q|0)==0)break;else{n=q;o=p}}if(o>>>0<(c[4690]|0)>>>0)$a();else{c[o>>2]=0;k=n;break}}else{o=c[a+j>>2]|0;if(o>>>0<(c[4690]|0)>>>0)$a();p=o+12|0;if((c[p>>2]|0)!=(h|0))$a();n=q+8|0;if((c[n>>2]|0)==(h|0)){c[p>>2]=q;c[n>>2]=o;k=q;break}else $a()}while(0);if((l|0)!=0){n=c[a+(j+20)>>2]|0;o=19048+(n<<2)|0;if((h|0)==(c[o>>2]|0)){c[o>>2]=k;if((k|0)==0){c[4687]=c[4687]&~(1<<n);break}}else{if(l>>>0<(c[4690]|0)>>>0)$a();n=l+16|0;if((c[n>>2]|0)==(h|0))c[n>>2]=k;else c[l+20>>2]=k;if((k|0)==0)break}if(k>>>0<(c[4690]|0)>>>0)$a();c[k+24>>2]=l;h=c[a+(j+8)>>2]|0;do if((h|0)!=0)if(h>>>0<(c[4690]|0)>>>0)$a();else{c[k+16>>2]=h;c[h+24>>2]=k;break}while(0);h=c[a+(j+12)>>2]|0;if((h|0)!=0)if(h>>>0<(c[4690]|0)>>>0)$a();else{c[k+20>>2]=h;c[h+24>>2]=k;break}}}else{k=c[a+j>>2]|0;a=c[a+(j|4)>>2]|0;j=18784+(n<<1<<2)|0;if((k|0)!=(j|0)){if(k>>>0<(c[4690]|0)>>>0)$a();if((c[k+12>>2]|0)!=(h|0))$a()}if((a|0)==(k|0)){c[4686]=c[4686]&~(1<<n);break}if((a|0)!=(j|0)){if(a>>>0<(c[4690]|0)>>>0)$a();j=a+8|0;if((c[j>>2]|0)==(h|0))l=j;else $a()}else l=a+8|0;c[k+12>>2]=a;c[l>>2]=k}while(0);c[d+4>>2]=m|1;c[d+m>>2]=m;if((d|0)==(c[4691]|0)){c[4688]=m;i=b;return}}else{c[n>>2]=o&-2;c[d+4>>2]=m|1;c[d+m>>2]=m}h=m>>>3;if(m>>>0<256){a=h<<1;e=18784+(a<<2)|0;j=c[4686]|0;h=1<<h;if((j&h|0)!=0){h=18784+(a+2<<2)|0;a=c[h>>2]|0;if(a>>>0<(c[4690]|0)>>>0)$a();else{f=h;g=a}}else{c[4686]=j|h;f=18784+(a+2<<2)|0;g=e}c[f>>2]=d;c[g+12>>2]=d;c[d+8>>2]=g;c[d+12>>2]=e;i=b;return}f=m>>>8;if((f|0)!=0)if(m>>>0>16777215)f=31;else{v=(f+1048320|0)>>>16&8;w=f<<v;u=(w+520192|0)>>>16&4;w=w<<u;f=(w+245760|0)>>>16&2;f=14-(u|v|f)+(w<<f>>>15)|0;f=m>>>(f+7|0)&1|f<<1}else f=0;g=19048+(f<<2)|0;c[d+28>>2]=f;c[d+20>>2]=0;c[d+16>>2]=0;a=c[4687]|0;h=1<<f;a:do if((a&h|0)!=0){g=c[g>>2]|0;if((f|0)==31)f=0;else f=25-(f>>>1)|0;b:do if((c[g+4>>2]&-8|0)!=(m|0)){f=m<<f;a=g;while(1){h=a+(f>>>31<<2)+16|0;g=c[h>>2]|0;if((g|0)==0)break;if((c[g+4>>2]&-8|0)==(m|0)){e=g;break b}else{f=f<<1;a=g}}if(h>>>0<(c[4690]|0)>>>0)$a();else{c[h>>2]=d;c[d+24>>2]=a;c[d+12>>2]=d;c[d+8>>2]=d;break a}}else e=g;while(0);g=e+8|0;f=c[g>>2]|0;h=c[4690]|0;if(e>>>0<h>>>0)$a();if(f>>>0<h>>>0)$a();else{c[f+12>>2]=d;c[g>>2]=d;c[d+8>>2]=f;c[d+12>>2]=e;c[d+24>>2]=0;break}}else{c[4687]=a|h;c[g>>2]=d;c[d+24>>2]=g;c[d+12>>2]=d;c[d+8>>2]=d}while(0);w=(c[4694]|0)+ -1|0;c[4694]=w;if((w|0)==0)d=19200|0;else{i=b;return}while(1){d=c[d>>2]|0;if((d|0)==0)break;else d=d+8|0}c[4694]=-1;i=b;return}function EA(){}function FA(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;i=b&3;h=d|d<<8|d<<16|d<<24;g=f&~3;if(i){i=b+4-i|0;while((b|0)<(i|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(g|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function GA(b){b=b|0;var c=0;c=b;while(a[c>>0]|0)c=c+1|0;return c-b|0}function HA(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return Ra(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if((e|0)==0)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}



function IA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return gb[a&63](b|0,c|0,d|0)|0}function JA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(0,a|0,b|0,c|0)|0}function KA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(1,a|0,b|0,c|0)|0}function LA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(2,a|0,b|0,c|0)|0}function MA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(3,a|0,b|0,c|0)|0}function NA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(4,a|0,b|0,c|0)|0}function OA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(5,a|0,b|0,c|0)|0}function PA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(6,a|0,b|0,c|0)|0}function QA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(7,a|0,b|0,c|0)|0}function RA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(8,a|0,b|0,c|0)|0}function SA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(9,a|0,b|0,c|0)|0}function TA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(10,a|0,b|0,c|0)|0}function UA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(11,a|0,b|0,c|0)|0}function VA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(12,a|0,b|0,c|0)|0}function WA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(13,a|0,b|0,c|0)|0}function XA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(14,a|0,b|0,c|0)|0}function YA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(15,a|0,b|0,c|0)|0}function ZA(a,b,c){a=a|0;b=b|0;c=c|0;return ca(16,a|0,b|0,c|0)|0}function _A(a,b,c){a=a|0;b=b|0;c=c|0;return ca(17,a|0,b|0,c|0)|0}function $A(a,b,c){a=a|0;b=b|0;c=c|0;return ca(18,a|0,b|0,c|0)|0}function aB(a,b,c){a=a|0;b=b|0;c=c|0;return ca(19,a|0,b|0,c|0)|0}function bB(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;hb[a&63](b|0,c|0,d|0,e|0,f|0)}function cB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(0,a|0,b|0,c|0,d|0,e|0)}function dB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(1,a|0,b|0,c|0,d|0,e|0)}function eB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(2,a|0,b|0,c|0,d|0,e|0)}function fB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(3,a|0,b|0,c|0,d|0,e|0)}function gB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(4,a|0,b|0,c|0,d|0,e|0)}function hB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(5,a|0,b|0,c|0,d|0,e|0)}function iB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(6,a|0,b|0,c|0,d|0,e|0)}function jB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(7,a|0,b|0,c|0,d|0,e|0)}function kB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(8,a|0,b|0,c|0,d|0,e|0)}function lB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(9,a|0,b|0,c|0,d|0,e|0)}function mB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(10,a|0,b|0,c|0,d|0,e|0)}function nB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(11,a|0,b|0,c|0,d|0,e|0)}function oB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(12,a|0,b|0,c|0,d|0,e|0)}function pB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(13,a|0,b|0,c|0,d|0,e|0)}function qB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(14,a|0,b|0,c|0,d|0,e|0)}function rB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(15,a|0,b|0,c|0,d|0,e|0)}function sB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(16,a|0,b|0,c|0,d|0,e|0)}function tB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(17,a|0,b|0,c|0,d|0,e|0)}function uB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(18,a|0,b|0,c|0,d|0,e|0)}function vB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(19,a|0,b|0,c|0,d|0,e|0)}function wB(a,b,c){a=a|0;b=b|0;c=+c;return+ib[a&63](b|0,+c)}function xB(a,b){a=a|0;b=+b;return+ca(0,a|0,+b)}function yB(a,b){a=a|0;b=+b;return+ca(1,a|0,+b)}function zB(a,b){a=a|0;b=+b;return+ca(2,a|0,+b)}function AB(a,b){a=a|0;b=+b;return+ca(3,a|0,+b)}function BB(a,b){a=a|0;b=+b;return+ca(4,a|0,+b)}function CB(a,b){a=a|0;b=+b;return+ca(5,a|0,+b)}function DB(a,b){a=a|0;b=+b;return+ca(6,a|0,+b)}function EB(a,b){a=a|0;b=+b;return+ca(7,a|0,+b)}function FB(a,b){a=a|0;b=+b;return+ca(8,a|0,+b)}function GB(a,b){a=a|0;b=+b;return+ca(9,a|0,+b)}function HB(a,b){a=a|0;b=+b;return+ca(10,a|0,+b)}function IB(a,b){a=a|0;b=+b;return+ca(11,a|0,+b)}function JB(a,b){a=a|0;b=+b;return+ca(12,a|0,+b)}function KB(a,b){a=a|0;b=+b;return+ca(13,a|0,+b)}function LB(a,b){a=a|0;b=+b;return+ca(14,a|0,+b)}function MB(a,b){a=a|0;b=+b;return+ca(15,a|0,+b)}function NB(a,b){a=a|0;b=+b;return+ca(16,a|0,+b)}function OB(a,b){a=a|0;b=+b;return+ca(17,a|0,+b)}function PB(a,b){a=a|0;b=+b;return+ca(18,a|0,+b)}function QB(a,b){a=a|0;b=+b;return+ca(19,a|0,+b)}function RB(a,b){a=a|0;b=b|0;jb[a&127](b|0)}function SB(a){a=a|0;ca(0,a|0)}function TB(a){a=a|0;ca(1,a|0)}function UB(a){a=a|0;ca(2,a|0)}function VB(a){a=a|0;ca(3,a|0)}function WB(a){a=a|0;ca(4,a|0)}function XB(a){a=a|0;ca(5,a|0)}function YB(a){a=a|0;ca(6,a|0)}function ZB(a){a=a|0;ca(7,a|0)}function _B(a){a=a|0;ca(8,a|0)}function $B(a){a=a|0;ca(9,a|0)}function aC(a){a=a|0;ca(10,a|0)}function bC(a){a=a|0;ca(11,a|0)}function cC(a){a=a|0;ca(12,a|0)}function dC(a){a=a|0;ca(13,a|0)}function eC(a){a=a|0;ca(14,a|0)}function fC(a){a=a|0;ca(15,a|0)}function gC(a){a=a|0;ca(16,a|0)}function hC(a){a=a|0;ca(17,a|0)}function iC(a){a=a|0;ca(18,a|0)}function jC(a){a=a|0;ca(19,a|0)}function kC(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;return+kb[a&63](b|0,c|0,d|0,e|0,+f)}function lC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(0,a|0,b|0,c|0,d|0,+e)}function mC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(1,a|0,b|0,c|0,d|0,+e)}function nC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(2,a|0,b|0,c|0,d|0,+e)}function oC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(3,a|0,b|0,c|0,d|0,+e)}function pC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(4,a|0,b|0,c|0,d|0,+e)}function qC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(5,a|0,b|0,c|0,d|0,+e)}function rC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(6,a|0,b|0,c|0,d|0,+e)}function sC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(7,a|0,b|0,c|0,d|0,+e)}function tC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(8,a|0,b|0,c|0,d|0,+e)}function uC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(9,a|0,b|0,c|0,d|0,+e)}function vC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(10,a|0,b|0,c|0,d|0,+e)}function wC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(11,a|0,b|0,c|0,d|0,+e)}function xC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(12,a|0,b|0,c|0,d|0,+e)}function yC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(13,a|0,b|0,c|0,d|0,+e)}function zC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(14,a|0,b|0,c|0,d|0,+e)}function AC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(15,a|0,b|0,c|0,d|0,+e)}function BC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(16,a|0,b|0,c|0,d|0,+e)}function CC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(17,a|0,b|0,c|0,d|0,+e)}function DC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(18,a|0,b|0,c|0,d|0,+e)}function EC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(19,a|0,b|0,c|0,d|0,+e)}function FC(a,b,c){a=a|0;b=b|0;c=c|0;lb[a&127](b|0,c|0)}function GC(a,b){a=a|0;b=b|0;ca(0,a|0,b|0)}function HC(a,b){a=a|0;b=b|0;ca(1,a|0,b|0)}function IC(a,b){a=a|0;b=b|0;ca(2,a|0,b|0)}function JC(a,b){a=a|0;b=b|0;ca(3,a|0,b|0)}function KC(a,b){a=a|0;b=b|0;ca(4,a|0,b|0)}function LC(a,b){a=a|0;b=b|0;ca(5,a|0,b|0)}function MC(a,b){a=a|0;b=b|0;ca(6,a|0,b|0)}function NC(a,b){a=a|0;b=b|0;ca(7,a|0,b|0)}function OC(a,b){a=a|0;b=b|0;ca(8,a|0,b|0)}function PC(a,b){a=a|0;b=b|0;ca(9,a|0,b|0)}function QC(a,b){a=a|0;b=b|0;ca(10,a|0,b|0)}function RC(a,b){a=a|0;b=b|0;ca(11,a|0,b|0)}function SC(a,b){a=a|0;b=b|0;ca(12,a|0,b|0)}function TC(a,b){a=a|0;b=b|0;ca(13,a|0,b|0)}function UC(a,b){a=a|0;b=b|0;ca(14,a|0,b|0)}function VC(a,b){a=a|0;b=b|0;ca(15,a|0,b|0)}function WC(a,b){a=a|0;b=b|0;ca(16,a|0,b|0)}function XC(a,b){a=a|0;b=b|0;ca(17,a|0,b|0)}function YC(a,b){a=a|0;b=b|0;ca(18,a|0,b|0)}function ZC(a,b){a=a|0;b=b|0;ca(19,a|0,b|0)}function _C(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;mb[a&63](b|0,c|0,+d,e|0,f|0)}function $C(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(0,a|0,b|0,+c,d|0,e|0)}function aD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(1,a|0,b|0,+c,d|0,e|0)}function bD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(2,a|0,b|0,+c,d|0,e|0)}function cD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(3,a|0,b|0,+c,d|0,e|0)}function dD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(4,a|0,b|0,+c,d|0,e|0)}function eD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(5,a|0,b|0,+c,d|0,e|0)}function fD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(6,a|0,b|0,+c,d|0,e|0)}function gD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(7,a|0,b|0,+c,d|0,e|0)}function hD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(8,a|0,b|0,+c,d|0,e|0)}function iD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(9,a|0,b|0,+c,d|0,e|0)}function jD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(10,a|0,b|0,+c,d|0,e|0)}function kD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(11,a|0,b|0,+c,d|0,e|0)}function lD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(12,a|0,b|0,+c,d|0,e|0)}function mD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(13,a|0,b|0,+c,d|0,e|0)}function nD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(14,a|0,b|0,+c,d|0,e|0)}function oD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(15,a|0,b|0,+c,d|0,e|0)}function pD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(16,a|0,b|0,+c,d|0,e|0)}function qD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(17,a|0,b|0,+c,d|0,e|0)}function rD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(18,a|0,b|0,+c,d|0,e|0)}function sD(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(19,a|0,b|0,+c,d|0,e|0)}function tD(a,b){a=a|0;b=b|0;return nb[a&63](b|0)|0}function uD(a){a=a|0;return ca(0,a|0)|0}function vD(a){a=a|0;return ca(1,a|0)|0}function wD(a){a=a|0;return ca(2,a|0)|0}function xD(a){a=a|0;return ca(3,a|0)|0}function yD(a){a=a|0;return ca(4,a|0)|0}function zD(a){a=a|0;return ca(5,a|0)|0}function AD(a){a=a|0;return ca(6,a|0)|0}function BD(a){a=a|0;return ca(7,a|0)|0}function CD(a){a=a|0;return ca(8,a|0)|0}function DD(a){a=a|0;return ca(9,a|0)|0}function ED(a){a=a|0;return ca(10,a|0)|0}function FD(a){a=a|0;return ca(11,a|0)|0}function GD(a){a=a|0;return ca(12,a|0)|0}function HD(a){a=a|0;return ca(13,a|0)|0}function ID(a){a=a|0;return ca(14,a|0)|0}function JD(a){a=a|0;return ca(15,a|0)|0}function KD(a){a=a|0;return ca(16,a|0)|0}function LD(a){a=a|0;return ca(17,a|0)|0}function MD(a){a=a|0;return ca(18,a|0)|0}function ND(a){a=a|0;return ca(19,a|0)|0}function OD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;ob[a&63](b|0,c|0,+d,e|0)}function PD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(0,a|0,b|0,+c,d|0)}function QD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(1,a|0,b|0,+c,d|0)}function RD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(2,a|0,b|0,+c,d|0)}function SD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(3,a|0,b|0,+c,d|0)}function TD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(4,a|0,b|0,+c,d|0)}function UD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(5,a|0,b|0,+c,d|0)}function VD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(6,a|0,b|0,+c,d|0)}function WD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(7,a|0,b|0,+c,d|0)}function XD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(8,a|0,b|0,+c,d|0)}function YD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(9,a|0,b|0,+c,d|0)}function ZD(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(10,a|0,b|0,+c,d|0)}function _D(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(11,a|0,b|0,+c,d|0)}function $D(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(12,a|0,b|0,+c,d|0)}function aE(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(13,a|0,b|0,+c,d|0)}function bE(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(14,a|0,b|0,+c,d|0)}function cE(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(15,a|0,b|0,+c,d|0)}function dE(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(16,a|0,b|0,+c,d|0)}function eE(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(17,a|0,b|0,+c,d|0)}function fE(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(18,a|0,b|0,+c,d|0)}function gE(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(19,a|0,b|0,+c,d|0)}function hE(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;pb[a&63](b|0,c|0,d|0)}function iE(a,b,c){a=a|0;b=b|0;c=c|0;ca(0,a|0,b|0,c|0)}function jE(a,b,c){a=a|0;b=b|0;c=c|0;ca(1,a|0,b|0,c|0)}function kE(a,b,c){a=a|0;b=b|0;c=c|0;ca(2,a|0,b|0,c|0)}function lE(a,b,c){a=a|0;b=b|0;c=c|0;ca(3,a|0,b|0,c|0)}function mE(a,b,c){a=a|0;b=b|0;c=c|0;ca(4,a|0,b|0,c|0)}function nE(a,b,c){a=a|0;b=b|0;c=c|0;ca(5,a|0,b|0,c|0)}function oE(a,b,c){a=a|0;b=b|0;c=c|0;ca(6,a|0,b|0,c|0)}function pE(a,b,c){a=a|0;b=b|0;c=c|0;ca(7,a|0,b|0,c|0)}function qE(a,b,c){a=a|0;b=b|0;c=c|0;ca(8,a|0,b|0,c|0)}function rE(a,b,c){a=a|0;b=b|0;c=c|0;ca(9,a|0,b|0,c|0)}function sE(a,b,c){a=a|0;b=b|0;c=c|0;ca(10,a|0,b|0,c|0)}function tE(a,b,c){a=a|0;b=b|0;c=c|0;ca(11,a|0,b|0,c|0)}function uE(a,b,c){a=a|0;b=b|0;c=c|0;ca(12,a|0,b|0,c|0)}function vE(a,b,c){a=a|0;b=b|0;c=c|0;ca(13,a|0,b|0,c|0)}function wE(a,b,c){a=a|0;b=b|0;c=c|0;ca(14,a|0,b|0,c|0)}function xE(a,b,c){a=a|0;b=b|0;c=c|0;ca(15,a|0,b|0,c|0)}function yE(a,b,c){a=a|0;b=b|0;c=c|0;ca(16,a|0,b|0,c|0)}function zE(a,b,c){a=a|0;b=b|0;c=c|0;ca(17,a|0,b|0,c|0)}function AE(a,b,c){a=a|0;b=b|0;c=c|0;ca(18,a|0,b|0,c|0)}function BE(a,b,c){a=a|0;b=b|0;c=c|0;ca(19,a|0,b|0,c|0)}function CE(a){a=a|0;qb[a&63]()}function DE(){ca(0)}function EE(){ca(1)}function FE(){ca(2)}function GE(){ca(3)}function HE(){ca(4)}function IE(){ca(5)}function JE(){ca(6)}function KE(){ca(7)}function LE(){ca(8)}function ME(){ca(9)}function NE(){ca(10)}function OE(){ca(11)}function PE(){ca(12)}function QE(){ca(13)}function RE(){ca(14)}function SE(){ca(15)}function TE(){ca(16)}function UE(){ca(17)}function VE(){ca(18)}function WE(){ca(19)}function XE(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;rb[a&63](b|0,c|0,+d)}function YE(a,b,c){a=a|0;b=b|0;c=+c;ca(0,a|0,b|0,+c)}function ZE(a,b,c){a=a|0;b=b|0;c=+c;ca(1,a|0,b|0,+c)}function _E(a,b,c){a=a|0;b=b|0;c=+c;ca(2,a|0,b|0,+c)}function $E(a,b,c){a=a|0;b=b|0;c=+c;ca(3,a|0,b|0,+c)}function aF(a,b,c){a=a|0;b=b|0;c=+c;ca(4,a|0,b|0,+c)}function bF(a,b,c){a=a|0;b=b|0;c=+c;ca(5,a|0,b|0,+c)}function cF(a,b,c){a=a|0;b=b|0;c=+c;ca(6,a|0,b|0,+c)}function dF(a,b,c){a=a|0;b=b|0;c=+c;ca(7,a|0,b|0,+c)}function eF(a,b,c){a=a|0;b=b|0;c=+c;ca(8,a|0,b|0,+c)}function fF(a,b,c){a=a|0;b=b|0;c=+c;ca(9,a|0,b|0,+c)}function gF(a,b,c){a=a|0;b=b|0;c=+c;ca(10,a|0,b|0,+c)}function hF(a,b,c){a=a|0;b=b|0;c=+c;ca(11,a|0,b|0,+c)}function iF(a,b,c){a=a|0;b=b|0;c=+c;ca(12,a|0,b|0,+c)}function jF(a,b,c){a=a|0;b=b|0;c=+c;ca(13,a|0,b|0,+c)}function kF(a,b,c){a=a|0;b=b|0;c=+c;ca(14,a|0,b|0,+c)}function lF(a,b,c){a=a|0;b=b|0;c=+c;ca(15,a|0,b|0,+c)}function mF(a,b,c){a=a|0;b=b|0;c=+c;ca(16,a|0,b|0,+c)}function nF(a,b,c){a=a|0;b=b|0;c=+c;ca(17,a|0,b|0,+c)}function oF(a,b,c){a=a|0;b=b|0;c=+c;ca(18,a|0,b|0,+c)}function pF(a,b,c){a=a|0;b=b|0;c=+c;ca(19,a|0,b|0,+c)}function qF(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;sb[a&63](b|0,c|0,d|0,e|0,f|0,g|0)}function rF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(0,a|0,b|0,c|0,d|0,e|0,f|0)}function sF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(1,a|0,b|0,c|0,d|0,e|0,f|0)}function tF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(2,a|0,b|0,c|0,d|0,e|0,f|0)}function uF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(3,a|0,b|0,c|0,d|0,e|0,f|0)}function vF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(4,a|0,b|0,c|0,d|0,e|0,f|0)}function wF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(5,a|0,b|0,c|0,d|0,e|0,f|0)}function xF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(6,a|0,b|0,c|0,d|0,e|0,f|0)}function yF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(7,a|0,b|0,c|0,d|0,e|0,f|0)}function zF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(8,a|0,b|0,c|0,d|0,e|0,f|0)}function AF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(9,a|0,b|0,c|0,d|0,e|0,f|0)}function BF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(10,a|0,b|0,c|0,d|0,e|0,f|0)}function CF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(11,a|0,b|0,c|0,d|0,e|0,f|0)}function DF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(12,a|0,b|0,c|0,d|0,e|0,f|0)}function EF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(13,a|0,b|0,c|0,d|0,e|0,f|0)}function FF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(14,a|0,b|0,c|0,d|0,e|0,f|0)}function GF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(15,a|0,b|0,c|0,d|0,e|0,f|0)}function HF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(16,a|0,b|0,c|0,d|0,e|0,f|0)}function IF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(17,a|0,b|0,c|0,d|0,e|0,f|0)}function JF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(18,a|0,b|0,c|0,d|0,e|0,f|0)}function KF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(19,a|0,b|0,c|0,d|0,e|0,f|0)}function LF(a,b,c){a=a|0;b=b|0;c=c|0;return tb[a&63](b|0,c|0)|0}function MF(a,b){a=a|0;b=b|0;return ca(0,a|0,b|0)|0}function NF(a,b){a=a|0;b=b|0;return ca(1,a|0,b|0)|0}function OF(a,b){a=a|0;b=b|0;return ca(2,a|0,b|0)|0}function PF(a,b){a=a|0;b=b|0;return ca(3,a|0,b|0)|0}function QF(a,b){a=a|0;b=b|0;return ca(4,a|0,b|0)|0}function RF(a,b){a=a|0;b=b|0;return ca(5,a|0,b|0)|0}function SF(a,b){a=a|0;b=b|0;return ca(6,a|0,b|0)|0}function TF(a,b){a=a|0;b=b|0;return ca(7,a|0,b|0)|0}function UF(a,b){a=a|0;b=b|0;return ca(8,a|0,b|0)|0}function VF(a,b){a=a|0;b=b|0;return ca(9,a|0,b|0)|0}function WF(a,b){a=a|0;b=b|0;return ca(10,a|0,b|0)|0}function XF(a,b){a=a|0;b=b|0;return ca(11,a|0,b|0)|0}function YF(a,b){a=a|0;b=b|0;return ca(12,a|0,b|0)|0}function ZF(a,b){a=a|0;b=b|0;return ca(13,a|0,b|0)|0}function _F(a,b){a=a|0;b=b|0;return ca(14,a|0,b|0)|0}function $F(a,b){a=a|0;b=b|0;return ca(15,a|0,b|0)|0}function aG(a,b){a=a|0;b=b|0;return ca(16,a|0,b|0)|0}function bG(a,b){a=a|0;b=b|0;return ca(17,a|0,b|0)|0}function cG(a,b){a=a|0;b=b|0;return ca(18,a|0,b|0)|0}function dG(a,b){a=a|0;b=b|0;return ca(19,a|0,b|0)|0}function eG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return ub[a&63](b|0,c|0,d|0,e|0,f|0)|0}function fG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(0,a|0,b|0,c|0,d|0,e|0)|0}function gG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(1,a|0,b|0,c|0,d|0,e|0)|0}function hG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(2,a|0,b|0,c|0,d|0,e|0)|0}function iG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(3,a|0,b|0,c|0,d|0,e|0)|0}function jG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(4,a|0,b|0,c|0,d|0,e|0)|0}function kG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(5,a|0,b|0,c|0,d|0,e|0)|0}function lG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(6,a|0,b|0,c|0,d|0,e|0)|0}function mG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(7,a|0,b|0,c|0,d|0,e|0)|0}function nG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(8,a|0,b|0,c|0,d|0,e|0)|0}function oG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(9,a|0,b|0,c|0,d|0,e|0)|0}function pG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(10,a|0,b|0,c|0,d|0,e|0)|0}function qG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(11,a|0,b|0,c|0,d|0,e|0)|0}function rG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(12,a|0,b|0,c|0,d|0,e|0)|0}function sG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(13,a|0,b|0,c|0,d|0,e|0)|0}function tG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(14,a|0,b|0,c|0,d|0,e|0)|0}function uG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(15,a|0,b|0,c|0,d|0,e|0)|0}function vG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(16,a|0,b|0,c|0,d|0,e|0)|0}function wG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(17,a|0,b|0,c|0,d|0,e|0)|0}function xG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(18,a|0,b|0,c|0,d|0,e|0)|0}function yG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(19,a|0,b|0,c|0,d|0,e|0)|0}function zG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;vb[a&63](b|0,c|0,d|0,e|0)}function AG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(0,a|0,b|0,c|0,d|0)}function BG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(1,a|0,b|0,c|0,d|0)}function CG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(2,a|0,b|0,c|0,d|0)}function DG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(3,a|0,b|0,c|0,d|0)}function EG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(4,a|0,b|0,c|0,d|0)}function FG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(5,a|0,b|0,c|0,d|0)}function GG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(6,a|0,b|0,c|0,d|0)}function HG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(7,a|0,b|0,c|0,d|0)}function IG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(8,a|0,b|0,c|0,d|0)}function JG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(9,a|0,b|0,c|0,d|0)}function KG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(10,a|0,b|0,c|0,d|0)}function LG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(11,a|0,b|0,c|0,d|0)}function MG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(12,a|0,b|0,c|0,d|0)}function NG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(13,a|0,b|0,c|0,d|0)}function OG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(14,a|0,b|0,c|0,d|0)}function PG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(15,a|0,b|0,c|0,d|0)}function QG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(16,a|0,b|0,c|0,d|0)}function RG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(17,a|0,b|0,c|0,d|0)}function SG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(18,a|0,b|0,c|0,d|0)}function TG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(19,a|0,b|0,c|0,d|0)}function UG(a,b,c){a=a|0;b=b|0;c=c|0;$(0);return 0}function VG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;$(1)}function WG(a,b){a=a|0;b=+b;$(2);return 0.0}function XG(a){a=a|0;$(3)}function YG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;$(4);return 0.0}function ZG(a,b){a=a|0;b=b|0;$(5)}function _G(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;$(6)}function $G(a){a=a|0;$(7);return 0}function aH(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;$(8)}function bH(a,b,c){a=a|0;b=b|0;c=c|0;$(9)}function cH(){$(10)}function dH(){eb()}function eH(a,b,c){a=a|0;b=b|0;c=+c;$(11)}function fH(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;$(12)}function gH(a,b){a=a|0;b=b|0;$(13);return 0}function hH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;$(14);return 0}function iH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;$(15)}




// EMSCRIPTEN_END_FUNCS
var gb=[UG,UG,JA,UG,KA,UG,LA,UG,MA,UG,NA,UG,OA,UG,PA,UG,QA,UG,RA,UG,SA,UG,TA,UG,UA,UG,VA,UG,WA,UG,XA,UG,YA,UG,ZA,UG,_A,UG,$A,UG,aB,UG,bw,hw,nw,tw,nx,kA,UG,UG,UG,UG,UG,UG,UG,UG,UG,UG,UG,UG,UG,UG,UG,UG];var hb=[VG,VG,cB,VG,dB,VG,eB,VG,fB,VG,gB,VG,hB,VG,iB,VG,jB,VG,kB,VG,lB,VG,mB,VG,nB,VG,oB,VG,pB,VG,qB,VG,rB,VG,sB,VG,tB,VG,uB,VG,vB,VG,wA,vA,sA,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG,VG];var ib=[WG,WG,xB,WG,yB,WG,zB,WG,AB,WG,BB,WG,CB,WG,DB,WG,EB,WG,FB,WG,GB,WG,HB,WG,IB,WG,JB,WG,KB,WG,LB,WG,MB,WG,NB,WG,OB,WG,PB,WG,QB,WG,gy,qy,Ay,Ny,Xy,fz,pz,zz,Jz,Tz,WG,WG,WG,WG,WG,WG,WG,WG,WG,WG,WG,WG];var jb=[XG,XG,SB,XG,TB,XG,UB,XG,VB,XG,WB,XG,XB,XG,YB,XG,ZB,XG,_B,XG,$B,XG,aC,XG,bC,XG,cC,XG,dC,XG,eC,XG,fC,XG,gC,XG,hC,XG,iC,XG,jC,XG,av,bv,ov,pv,uv,vv,xv,yv,Av,Bv,Zv,Yv,mv,nv,iv,jv,kv,lv,Lw,Ww,Kw,$w,rx,sx,wx,xx,Bx,Cx,Lx,Mx,Qx,Rx,Vx,Wx,_x,$x,hy,iy,jy,ry,sy,ty,By,Cy,Dy,Ey,Fy,Gy,Oy,Py,Qy,Yy,Zy,_y,gz,hz,iz,qz,rz,sz,Az,Bz,Cz,Kz,Lz,Mz,Uz,Vz,Wz,aA,$z,eA,hA,fA,gA,iA,jA,_z,XG,XG,XG,XG,XG,XG,XG,XG];var kb=[YG,YG,lC,YG,mC,YG,nC,YG,oC,YG,pC,YG,qC,YG,rC,YG,sC,YG,tC,YG,uC,YG,vC,YG,wC,YG,xC,YG,yC,YG,zC,YG,AC,YG,BC,YG,CC,YG,DC,YG,EC,YG,wv,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG];var lb=[ZG,ZG,GC,ZG,HC,ZG,IC,ZG,JC,ZG,KC,ZG,LC,ZG,MC,ZG,NC,ZG,OC,ZG,PC,ZG,QC,ZG,RC,ZG,SC,ZG,TC,ZG,UC,ZG,VC,ZG,WC,ZG,XC,ZG,YC,ZG,ZC,ZG,hv,qv,rv,Cv,Dv,Ev,Fv,Xw,Yw,dy,ey,ay,by,ny,oy,ky,ly,xy,yy,uy,vy,Ky,Ly,Hy,Iy,Uy,Vy,Ry,Sy,cz,dz,$y,az,mz,nz,jz,kz,wz,xz,tz,uz,Gz,Hz,Dz,Ez,Qz,Rz,Nz,Oz,zx,Tx,Yx,Jx,Ox,px,ux,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG,ZG];var mb=[_G,_G,$C,_G,aD,_G,bD,_G,cD,_G,dD,_G,eD,_G,fD,_G,gD,_G,hD,_G,iD,_G,jD,_G,kD,_G,lD,_G,mD,_G,nD,_G,oD,_G,pD,_G,qD,_G,rD,_G,sD,_G,fv,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G,_G];var nb=[$G,$G,uD,$G,vD,$G,wD,$G,xD,$G,yD,$G,zD,$G,AD,$G,BD,$G,CD,$G,DD,$G,ED,$G,FD,$G,GD,$G,HD,$G,ID,$G,JD,$G,KD,$G,LD,$G,MD,$G,ND,$G,$v,gw,mw,sw,bA,$G,$G,$G,$G,$G,$G,$G,$G,$G,$G,$G,$G,$G,$G,$G,$G,$G];var ob=[aH,aH,PD,aH,QD,aH,RD,aH,SD,aH,TD,aH,UD,aH,VD,aH,WD,aH,XD,aH,YD,aH,ZD,aH,_D,aH,$D,aH,aE,aH,bE,aH,cE,aH,dE,aH,eE,aH,fE,aH,gE,aH,ev,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH,aH];var pb=[bH,bH,iE,bH,jE,bH,kE,bH,lE,bH,mE,bH,nE,bH,oE,bH,pE,bH,qE,bH,rE,bH,sE,bH,tE,bH,uE,bH,vE,bH,wE,bH,xE,bH,yE,bH,zE,bH,AE,bH,BE,bH,sv,tv,Zw,_w,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH];var qb=[cH,cH,DE,cH,EE,cH,FE,cH,GE,cH,HE,cH,IE,cH,JE,cH,KE,cH,LE,cH,ME,cH,NE,cH,OE,cH,PE,cH,QE,cH,RE,cH,SE,cH,TE,cH,UE,cH,VE,cH,WE,cH,dH,Yz,Zz,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH,cH];var rb=[eH,eH,YE,eH,ZE,eH,_E,eH,$E,eH,aF,eH,bF,eH,cF,eH,dF,eH,eF,eH,fF,eH,gF,eH,hF,eH,iF,eH,jF,eH,kF,eH,lF,eH,mF,eH,nF,eH,oF,eH,pF,eH,ew,kw,qw,ww,fy,py,zy,My,Wy,ez,oz,yz,Iz,Sz,eH,eH,eH,eH,eH,eH,eH,eH];var sb=[fH,fH,rF,fH,sF,fH,tF,fH,uF,fH,vF,fH,wF,fH,xF,fH,yF,fH,zF,fH,AF,fH,BF,fH,CF,fH,DF,fH,EF,fH,FF,fH,GF,fH,HF,fH,IF,fH,JF,fH,KF,fH,zA,yA,xA,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH,fH];var tb=[gH,gH,MF,gH,NF,gH,OF,gH,PF,gH,QF,gH,RF,gH,SF,gH,TF,gH,UF,gH,VF,gH,WF,gH,XF,gH,YF,gH,ZF,gH,_F,gH,$F,gH,aG,gH,bG,gH,cG,gH,dG,gH,zv,_v,fw,lw,rw,cy,my,wy,Jy,Ty,bz,lz,vz,Fz,Pz,Ow,gH,gH,gH,gH,gH,gH];var ub=[hH,hH,fG,hH,gG,hH,hG,hH,iG,hH,jG,hH,kG,hH,lG,hH,mG,hH,nG,hH,oG,hH,pG,hH,qG,hH,rG,hH,sG,hH,tG,hH,uG,hH,vG,hH,wG,hH,xG,hH,yG,hH,cw,iw,ow,uw,yx,Sx,Xx,Ix,Nx,ox,tx,hH,hH,hH,hH,hH,hH,hH,hH,hH,hH,hH];var vb=[iH,iH,AG,iH,BG,iH,CG,iH,DG,iH,EG,iH,FG,iH,GG,iH,HG,iH,IG,iH,JG,iH,KG,iH,LG,iH,MG,iH,NG,iH,OG,iH,PG,iH,QG,iH,RG,iH,SG,iH,TG,iH,cv,dv,gv,dw,jw,pw,vw,qx,vx,Ax,Kx,Px,Ux,Zx,mA,nA,pA,iH,iH,iH,iH,iH];return{_emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0:Mp,_emscripten_bind_b2ContactEdge_set_next_1:bu,_emscripten_bind_b2ChainShape_get_m_count_0:Tm,_emscripten_bind_b2Fixture_SetFriction_1:Jc,_emscripten_bind_b2Shape_ComputeAABB_3:br,_emscripten_bind_b2FrictionJointDef_set_userData_1:eg,_emscripten_bind_b2Vec3_get_z_0:mf,_emscripten_bind_b2World_IsLocked_0:Ih,_emscripten_bind_b2Draw_GetFlags_0:gk,_emscripten_bind_b2FrictionJoint_IsActive_0:Ws,_emscripten_bind_b2Color_set_g_1:nn,_emscripten_bind_b2WheelJointDef_get_frequencyHz_0:hj,_emscripten_bind_b2RopeJointDef_set_localAnchorA_1:fu,_emscripten_bind_b2PolygonShape_RayCast_4:Zn,_emscripten_bind_b2World_GetTreeBalance_0:Eh,_emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0:Kg,_emscripten_bind_JSDraw_DrawSolidCircle_4:tp,_emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0:qt,_emscripten_bind_b2FixtureDef_get_filter_0:Qf,_emscripten_bind_b2FrictionJointDef_get_type_0:bg,_emscripten_bind_b2RevoluteJoint_GetMotorTorque_1:Gt,_emscripten_bind_b2RayCastInput_get_p1_0:Jn,_emscripten_bind_b2EdgeShape_set_m_hasVertex3_1:Do,_emscripten_bind_b2JointEdge_set_joint_1:tl,_emscripten_enum_b2ShapeType_e_polygon:xu,_emscripten_bind_b2Fixture___destroy___0:Oc,_emscripten_bind_b2PulleyJoint_SetUserData_1:mq,_emscripten_bind_b2World_SetWarmStarting_1:th,_emscripten_bind_JSDraw_DrawCircle_3:sp,_emscripten_bind_b2WeldJoint_IsActive_0:ml,_emscripten_bind_b2DestructionListener___destroy___0:Zs,_emscripten_bind_b2BodyDef_set_type_1:Zd,_emscripten_bind_b2ChainShape_ComputeAABB_3:Pm,_emscripten_bind_b2MouseJointDef_set_type_1:Aq,_emscripten_bind_b2JointEdge_get_prev_0:ul,_emscripten_bind_b2WeldJoint_GetReactionTorque_1:il,_emscripten_bind_b2DistanceJointDef_get_userData_0:wr,_emscripten_bind_b2BodyDef_get_position_0:_d,_emscripten_bind_b2RevoluteJointDef_set_userData_1:hp,_emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0:Oo,_emscripten_bind_b2WheelJointDef_get_collideConnected_0:tj,_emscripten_bind_b2MouseJointDef_set_userData_1:Cq,_emscripten_bind_JSDraw_DrawSegment_3:up,_emscripten_bind_b2FixtureDef_set_restitution_1:Lf,_emscripten_bind_b2EdgeShape_GetChildCount_0:no,_emscripten_bind_b2Mat33_get_ey_0:nc,_emscripten_bind_b2MouseJoint_IsActive_0:qd,_emscripten_bind_b2World_GetGravity_0:Hh,_emscripten_bind_b2World_DrawDebugData_0:lh,_emscripten_bind_b2Profile_get_broadphase_0:Rd,_emscripten_bind_b2PulleyJointDef_get_bodyA_0:Tl,_emscripten_bind_b2PrismaticJoint_SetLimits_2:Yh,_emscripten_bind_b2PulleyJointDef_get_localAnchorA_0:Fl,_emscripten_bind_b2DistanceJoint_GetAnchorA_0:Wb,_emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1:fm,_emscripten_bind_b2DistanceJointDef_set_dampingRatio_1:tr,_emscripten_bind_b2RopeJointDef_set_collideConnected_1:tu,_emscripten_bind_b2CircleShape_set_m_p_1:Ej,_emscripten_bind_JSContactListener_EndContact_1:Ei,_emscripten_bind_b2MassData_set_mass_1:mk,_emscripten_bind_b2Vec3_get_x_0:hf,_emscripten_bind_b2ChainShape_CreateChain_2:Hm,_emscripten_bind_b2Color_get_r_0:kn,_emscripten_bind_b2World_DestroyBody_1:gh,_emscripten_bind_b2Profile_get_solvePosition_0:Pd,_emscripten_bind_b2Shape_RayCast_4:ar,_emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0:_p,_emscripten_bind_b2Mat33___destroy___0:rc,_emscripten_bind_b2GearJoint_GetReactionTorque_1:Pk,_emscripten_bind_b2WeldJointDef_set_collideConnected_1:dk,_emscripten_bind_b2Manifold_get_type_0:rg,_emscripten_bind_b2RevoluteJoint___destroy___0:Tt,_emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0:zl,_emscripten_bind_b2World_SetAutoClearForces_1:Jh,_emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1:Jg,_emscripten_bind_b2BodyDef_set_position_1:$d,_emscripten_bind_b2Transform_get_q_0:Cm,_emscripten_bind_b2FrictionJoint_GetMaxForce_0:Js,_emscripten_bind_b2RevoluteJoint_GetType_0:Ht,_emscripten_bind_b2Contact_GetNext_0:Oq,_emscripten_bind_b2EdgeShape_get_m_type_0:Eo,_emscripten_bind_b2GearJoint_GetJoint1_0:Fk,_emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0:Hp,_emscripten_enum_b2ContactFeatureType_e_face:$u,_emscripten_bind_b2GearJoint_GetAnchorA_0:Mk,_emscripten_enum_b2JointType_e_mouseJoint:Fu,_emscripten_bind_b2MouseJointDef_set_bodyA_1:Eq,_emscripten_enum_b2JointType_e_revoluteJoint:Bu,_emscripten_bind_b2World_SetContactListener_1:dh,_emscripten_bind_b2Body_IsAwake_0:ts,_emscripten_bind_b2JointEdge_set_other_1:rl,_emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0:At,_emscripten_bind_b2MouseJointDef_set_target_1:sq,_emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0:Hs,_emscripten_bind_b2FixtureDef_get_density_0:Mf,_emscripten_bind_b2ChainShape_set_m_vertices_1:Sm,_emscripten_bind_b2ChainShape_get_m_vertices_0:Rm,_emscripten_bind_b2Rot_set_s_1:Bd,_emscripten_bind_b2RevoluteJoint_GetUpperLimit_0:yt,_emscripten_bind_b2WheelJointDef_set_bodyB_1:sj,_emscripten_bind_b2WheelJointDef_set_enableMotor_1:cj,_emscripten_bind_b2FixtureDef_get_userData_0:Gf,_emscripten_bind_b2FrictionJointDef_set_collideConnected_1:kg,_emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0:Ig,_emscripten_bind_b2GearJoint_GetCollideConnected_0:Uk,_emscripten_bind_b2RevoluteJointDef_get_upperAngle_0:Yo,_emscripten_enum_b2JointType_e_frictionJoint:Ju,_emscripten_bind_b2RayCastOutput_set_fraction_1:ui,_emscripten_bind_b2Color_set_r_1:ln,_emscripten_bind_b2DistanceJointDef_get_length_0:or,_emscripten_bind_b2PulleyJoint_GetBodyB_0:fq,_emscripten_bind_b2WheelJointDef_set_type_1:mj,_emscripten_bind_b2World_GetTreeQuality_0:Fh,_emscripten_bind_b2BodyDef_set_gravityScale_1:xe,_emscripten_bind_b2RopeJointDef_set_bodyB_1:ru,_emscripten_bind_b2PrismaticJoint_GetLowerLimit_0:Wh,_emscripten_bind_b2AABB_get_lowerBound_0:yf,_emscripten_bind_b2WheelJoint_SetMotorSpeed_1:Ep,_emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0:Eg,_emscripten_bind_b2Body_SetMassData_1:_r,_emscripten_bind_b2BodyDef_get_angularVelocity_0:ee,_emscripten_bind_b2WeldJoint_SetDampingRatio_1:$k,_emscripten_bind_b2PrismaticJointDef___destroy___0:ah,_emscripten_bind_b2Contact_IsTouching_0:Lq,_emscripten_bind_b2Draw_SetFlags_1:fk,_emscripten_bind_b2AABB_Contains_1:wf,_emscripten_bind_b2DistanceJoint_GetNext_0:_b,_emscripten_bind_b2GearJoint_GetReactionForce_1:Ok,_emscripten_bind_b2PrismaticJoint_GetNext_0:li,_emscripten_bind_b2Filter_get_groupIndex_0:Uc,_emscripten_bind_b2PrismaticJoint_GetType_0:ei,_emscripten_bind_b2Fixture_GetRestitution_0:Kc,_emscripten_bind_b2Transform_set_q_1:Dm,_emscripten_bind_b2PolygonShape___destroy___0:jo,_emscripten_bind_b2AABB_get_upperBound_0:Af,_emscripten_bind_b2Transform___destroy___0:Em,_emscripten_bind_b2WeldJointDef_set_localAnchorB_1:Pj,_emscripten_bind_b2CircleShape_set_m_radius_1:Ij,_emscripten_bind_b2EdgeShape_set_m_hasVertex0_1:Bo,_emscripten_bind_b2RopeJoint_GetMaxLength_0:un,_emscripten_bind_b2GearJoint_GetUserData_0:Rk,_emscripten_bind_b2GearJointDef_set_type_1:gt,_emscripten_bind_b2DistanceJoint_SetDampingRatio_1:Rb,_emscripten_bind_b2Contact_GetFixtureA_0:Pq,_emscripten_bind_b2QueryCallback___destroy___0:jm,_emscripten_bind_b2PulleyJointDef_get_ratio_0:Nl,_emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0:Ag,_emscripten_bind_b2CircleShape_set_m_type_1:Gj,_emscripten_enum_b2ShapeType_e_typeCount:zu,_emscripten_bind_b2Body_SetTransform_2:Ir,_emscripten_bind_b2RopeJoint_GetAnchorB_0:An,_emscripten_bind_b2AABB_set_upperBound_1:Bf,_emscripten_bind_b2MouseJointDef_get_collideConnected_0:Hq,_emscripten_bind_b2ContactImpulse___destroy___0:Kb,_emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0:wg,_emscripten_bind_b2Vec2_set_x_1:Ye,_emscripten_bind_b2RayCastInput___destroy___0:Pn,_emscripten_bind_JSDestructionListener_JSDestructionListener_0:Eb,_emscripten_bind_b2WheelJointDef_set_localAnchorA_1:Yi,_emscripten_bind_b2FrictionJoint_GetBodyB_0:Os,_emscripten_bind_b2WeldJointDef_set_bodyA_1:$j,_emscripten_bind_b2World_SetDestructionListener_1:ch,_emscripten_bind_b2RevoluteJoint_GetJointSpeed_0:ut,_emscripten_bind_b2WheelJoint_GetLocalAnchorB_0:yp,_emscripten_bind_b2JointDef___destroy___0:vm,_emscripten_bind_b2PrismaticJointDef_Initialize_4:xg,_emscripten_bind_b2FrictionJointDef_get_localAnchorA_0:Vf,_emscripten_bind_b2CircleShape_GetChildCount_0:yj,_emscripten_bind_b2BodyDef_get_bullet_0:qe,_emscripten_bind_b2ManifoldPoint_get_localPoint_0:am,_emscripten_bind_b2PrismaticJointDef_get_type_0:Sg,_emscripten_bind_b2MassData_get_center_0:nk,_emscripten_bind_b2World_b2World_1:bh,_emscripten_bind_b2WheelJoint_GetReactionForce_1:Sp,_emscripten_bind_b2World_SetSubStepping_1:xh,_emscripten_bind_b2Vec2_op_add_1:Pe,_emscripten_bind_b2Joint_GetBodyA_0:tk,_emscripten_bind_b2Joint_GetCollideConnected_0:Dk,_emscripten_bind_b2WheelJoint_IsMotorEnabled_0:Cp,_emscripten_bind_b2WheelJointDef___destroy___0:vj,_emscripten_bind_b2Vec3_SetZero_0:cf,_emscripten_enum_b2JointType_e_pulleyJoint:Eu,_emscripten_bind_b2ChainShape_get_m_nextVertex_0:Xm,_emscripten_bind_b2Contact_SetEnabled_1:Mq,_emscripten_bind_b2Shape_set_m_radius_1:gr,_emscripten_bind_b2GearJointDef_get_joint2_0:bt,_emscripten_bind_b2World_SetDebugDraw_1:eh,_emscripten_bind_b2ContactID_set_key_1:zi,_emscripten_bind_b2RevoluteJointDef_set_collideConnected_1:np,_malloc:CA,_emscripten_bind_b2World_GetProxyCount_0:zh,_emscripten_bind_b2Vec2_Normalize_0:Ue,_emscripten_bind_b2WheelJoint_GetJointSpeed_0:Bp,_emscripten_bind_b2FrictionJointDef_set_localAnchorA_1:Wf,_emscripten_bind_b2GearJoint_GetRatio_0:Ik,_emscripten_bind_JSRayCastCallback_JSRayCastCallback_0:ze,_emscripten_bind_b2RayCastInput_set_p2_1:Mn,_emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0:ap,_emscripten_bind_b2RayCastOutput_get_normal_0:ri,_emscripten_bind_b2WeldJoint_GetBodyA_0:dl,_emscripten_enum_b2DrawFlag_e_jointBit:Wu,_emscripten_bind_b2FixtureDef_get_isSensor_0:Of,_emscripten_bind_b2PulleyJointDef_set_bodyB_1:Wl,_emscripten_bind_b2WheelJoint_EnableMotor_1:Dp,_emscripten_bind_b2WheelJoint_GetLocalAnchorA_0:xp,_emscripten_bind_JSDraw_DrawSolidPolygon_3:rp,_emscripten_bind_b2Rot_Set_1:vd,_emscripten_bind_b2RevoluteJoint_GetJointAngle_0:tt,_emscripten_bind_JSDraw___destroy___0:wp,_emscripten_bind_b2MouseJointDef___destroy___0:Jq,_emscripten_bind_b2Mat33_Solve22_1:ic,_emscripten_bind_b2Profile_set_solvePosition_1:Qd,_emscripten_bind_b2ContactFilter___destroy___0:Ut,_emscripten_bind_b2PulleyJointDef_get_localAnchorB_0:Hl,_emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1:_m,_emscripten_bind_b2PrismaticJoint___destroy___0:qi,_emscripten_bind_b2World_CreateJoint_1:hh,_emscripten_bind_b2Profile_get_solveTOI_0:Td,_emscripten_bind_b2ManifoldPoint_get_id_0:gm,_emscripten_bind_JSContactFilter_JSContactListener_0:Jo,_emscripten_bind_b2Manifold_set_pointCount_1:ug,_emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0:ai,_emscripten_bind_b2Body_SetSleepingAllowed_1:qs,_emscripten_bind_b2Rot_SetIdentity_0:wd,_emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0:$p,_emscripten_bind_b2Vec3_op_add_1:ef,_emscripten_bind_b2FrictionJoint_GetType_0:Ms,_emscripten_bind_b2MouseJoint_SetTarget_1:_c,_emscripten_bind_b2MouseJointDef_get_dampingRatio_0:xq,_emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0:Dt,_emscripten_bind_b2ChainShape_set_m_type_1:cn,_emscripten_bind_b2RevoluteJointDef_set_bodyB_1:lp,_emscripten_bind_b2Body_GetGravityScale_0:ks,_emscripten_bind_b2Mat33_b2Mat33_0:ec,_emscripten_bind_b2MouseJointDef_get_bodyB_0:Fq,_emscripten_bind_b2Shape_TestPoint_2:$q,_emscripten_bind_b2Body_GetWorldVector_1:bs,_emscripten_bind_b2WeldJointDef_get_frequencyHz_0:Sj,_emscripten_bind_b2PolygonShape_Set_2:Rn,_emscripten_bind_b2Manifold___destroy___0:vg,_emscripten_bind_b2PulleyJointDef_set_lengthA_1:Kl,_emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1:Po,_emscripten_bind_b2GearJoint___destroy___0:Vk,_emscripten_bind_b2PulleyJointDef_set_ratio_1:Ol,_emscripten_bind_b2JointEdge_set_prev_1:vl,_emscripten_bind_b2PrismaticJoint_GetReactionTorque_1:ki,_emscripten_bind_b2Body_GetLocalPoint_1:cs,_emscripten_bind_b2PrismaticJoint_GetCollideConnected_0:pi,_emscripten_bind_b2RopeJointDef_get_userData_0:mu,_emscripten_bind_b2DistanceJoint_IsActive_0:bc,_emscripten_bind_b2Vec2_b2Vec2_2:Me,_emscripten_bind_b2PrismaticJoint_GetJointTranslation_0:Sh,_emscripten_bind_b2Vec2_b2Vec2_0:Le,_emscripten_bind_b2DistanceJoint_GetAnchorB_0:Xb,_emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0:dj,_emscripten_bind_b2Vec2_op_sub_1:Qe,_emscripten_bind_b2CircleShape_get_m_p_0:Dj,_emscripten_bind_b2ContactFeature_get_indexA_0:Ce,_emscripten_bind_b2ChainShape_set_m_nextVertex_1:Ym,_emscripten_bind_b2PulleyJoint_GetCollideConnected_0:oq,_emscripten_bind_b2PulleyJoint_GetAnchorB_0:hq,_emscripten_bind_b2Mat33_get_ex_0:lc,_emscripten_bind_b2Body_GetPosition_0:Kr,_emscripten_bind_b2Profile___destroy___0:Vd,_emscripten_bind_b2ContactEdge_get_prev_0:_t,_emscripten_bind_b2DistanceJoint_SetFrequency_1:Pb,_emscripten_enum_b2ShapeType_e_chain:yu,_emscripten_enum_b2ContactFeatureType_e_vertex:_u,_emscripten_bind_b2Fixture_GetBody_0:zc,_emscripten_bind_b2Body_ApplyForceToCenter_1:Tr,_emscripten_bind_b2ContactImpulse_set_count_1:Jb,_emscripten_bind_b2PulleyJointDef_get_bodyB_0:Vl,_emscripten_bind_b2Rot_set_c_1:Dd,_emscripten_bind_b2RevoluteJoint_GetReactionTorque_1:Nt,_emscripten_bind_b2Fixture_SetDensity_1:Gc,_emscripten_bind_b2ChainShape_get_m_prevVertex_0:Vm,_emscripten_bind_b2World_ClearForces_0:kh,_emscripten_bind_b2Vec3___destroy___0:of,_emscripten_bind_b2WheelJointDef_set_userData_1:oj,_emscripten_bind_b2WeldJoint_SetFrequency_1:Zk,_emscripten_bind_JSContactListener_PreSolve_2:Fi,_emscripten_bind_b2Body_SetFixedRotation_1:ws,_emscripten_bind_b2RayCastOutput_set_normal_1:si,_emscripten_bind_b2DistanceJoint_GetDampingRatio_0:Sb,_emscripten_bind_b2WeldJointDef_set_userData_1:Zj,_emscripten_bind_b2Body_GetMassData_1:Zr,_emscripten_bind_b2Body_ApplyAngularImpulse_1:Wr,_emscripten_bind_b2MouseJointDef_set_bodyB_1:Gq,_emscripten_bind_b2CircleShape_GetType_0:xj,_emscripten_bind_b2PolygonShape_GetType_0:Wn,_emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1:Fg,_emscripten_bind_b2RopeJointDef_get_collideConnected_0:su,_emscripten_bind_b2FixtureDef_set_filter_1:Rf,_emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0:Bl,_emscripten_bind_b2Fixture_SetFilterData_1:wc,_emscripten_bind_b2FrictionJointDef_get_userData_0:dg,_emscripten_bind_b2RayCastCallback___destroy___0:Wk,_emscripten_bind_b2PulleyJointDef_set_localAnchorA_1:Gl,_emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0:Qh,_emscripten_bind_b2WheelJoint_GetAnchorA_0:Qp,_emscripten_bind_b2Transform_Set_2:zm,_emscripten_bind_b2RopeJointDef_get_localAnchorA_0:eu,_emscripten_bind_b2ContactEdge_set_contact_1:Zt,_emscripten_bind_b2RevoluteJointDef_get_enableLimit_0:Uo,_emscripten_bind_b2CircleShape_get_m_radius_0:Hj,_emscripten_bind_b2RevoluteJoint_GetUserData_0:Pt,_emscripten_bind_b2Profile_set_solveTOI_1:Ud,_emscripten_bind_b2PrismaticJointDef_set_type_1:Tg,_emscripten_bind_b2GearJointDef_get_userData_0:ht,_emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1:Jp,_emscripten_bind_b2FrictionJointDef___destroy___0:lg,_emscripten_bind_b2PrismaticJoint_GetReactionForce_1:ji,_emscripten_bind_b2Transform_b2Transform_0:wm,_emscripten_bind_b2MouseJoint_GetCollideConnected_0:rd,_emscripten_enum_b2LimitState_e_equalLimits:Ou,_emscripten_bind_b2ManifoldPoint_set_normalImpulse_1:dm,_emscripten_bind_b2Body_GetContactList_0:As,_emscripten_bind_b2Body_IsFixedRotation_0:xs,_emscripten_enum_b2DrawFlag_e_shapeBit:Vu,_emscripten_bind_b2Contact_GetFriction_0:Uq,_emscripten_bind_b2WheelJoint_GetAnchorB_0:Rp,_emscripten_bind_b2DistanceJointDef_set_length_1:pr,_emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0:Mb,_emscripten_bind_b2Mat33_set_ey_1:oc,_emscripten_bind_b2DistanceJointDef_get_type_0:ur,_emscripten_bind_b2Draw_ClearFlags_1:ik,_emscripten_bind_b2Body_IsActive_0:vs,_emscripten_bind_b2Contact_ResetRestitution_0:Yq,_emscripten_bind_b2World_GetAllowSleeping_0:sh,_emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0:$l,_emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1:Pg,_emscripten_bind_b2GearJointDef_set_bodyA_1:kt,_emscripten_bind_b2RevoluteJointDef_set_enableMotor_1:$o,_emscripten_bind_b2PulleyJoint_IsActive_0:nq,_emscripten_bind_b2MouseJoint_GetNext_0:nd,_emscripten_bind_b2Transform_set_p_1:Bm,_emscripten_bind_b2EdgeShape_set_m_vertex0_1:xo,_emscripten_bind_b2PulleyJointDef_get_lengthB_0:Ll,_emscripten_bind_b2WeldJoint_SetUserData_1:ll,_emscripten_bind_b2Fixture_SetSensor_1:uc,_emscripten_bind_b2GearJointDef_get_joint1_0:$s,_emscripten_bind_b2PrismaticJoint_GetMotorForce_1:di,_emscripten_bind_b2DistanceJoint_GetBodyA_0:Ub,_emscripten_bind_b2GearJoint_IsActive_0:Tk,_emscripten_bind_b2EdgeShape_get_m_vertex0_0:wo,_emscripten_bind_b2World_GetBodyCount_0:Ah,_emscripten_bind_b2Fixture_GetMassData_1:Fc,_emscripten_bind_b2WeldJointDef_get_collideConnected_0:ck,_emscripten_bind_b2FrictionJoint_GetMaxTorque_0:Ls,_emscripten_bind_b2EdgeShape_RayCast_4:po,_emscripten_bind_b2BodyDef_set_allowSleep_1:le,_emscripten_bind_b2PulleyJoint_GetType_0:dq,_emscripten_bind_b2WeldJointDef_set_localAnchorA_1:Nj,_emscripten_bind_b2Profile_set_step_1:Gd,_emscripten_bind_b2ContactEdge_set_other_1:Xt,_emscripten_enum_b2LimitState_e_atLowerLimit:Mu,_emscripten_bind_b2Vec2_op_mul_1:Re,_emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0:yg,_emscripten_bind_b2PrismaticJoint_SetUserData_1:ni,_emscripten_bind_b2RopeJoint_GetAnchorA_0:zn,_emscripten_bind_b2DistanceJointDef_get_bodyA_0:yr,_emscripten_bind_b2DistanceJointDef_set_userData_1:xr,_emscripten_bind_b2ContactEdge_get_other_0:Wt,_emscripten_bind_b2RopeJoint_GetLocalAnchorB_0:sn,_emscripten_bind_b2PulleyJointDef___destroy___0:Zl,_emscripten_bind_b2MouseJoint_GetBodyB_0:id,_emscripten_bind_b2PolygonShape_TestPoint_2:Yn,_emscripten_bind_b2EdgeShape_set_m_vertex3_1:zo,_emscripten_bind_b2PolygonShape_b2PolygonShape_0:Qn,_emscripten_bind_b2GearJointDef_set_ratio_1:et,_emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1:Gp,_emscripten_bind_b2WheelJointDef_get_localAxisA_0:$i,_emscripten_bind_b2DistanceJointDef_get_localAnchorA_0:kr,_emscripten_bind_b2MassData_set_center_1:ok,_emscripten_bind_b2FrictionJointDef_get_localAnchorB_0:Xf,_emscripten_bind_b2BodyDef_get_active_0:se,_emscripten_bind_b2Body_GetAngularVelocity_0:Rr,_emscripten_bind_b2WeldJoint_GetBodyB_0:el,_emscripten_bind_b2Draw___destroy___0:jk,_emscripten_bind_b2WheelJointDef_Initialize_4:Wi,_emscripten_bind_b2WeldJointDef_set_dampingRatio_1:Vj,_emscripten_bind_b2Contact_IsEnabled_0:Nq,_emscripten_bind_b2Joint_GetAnchorB_0:wk,_emscripten_bind_b2PrismaticJointDef_get_userData_0:Ug,_emscripten_bind_b2ContactFeature_set_typeB_1:Je,_emscripten_bind_b2RevoluteJoint_GetBodyA_0:It,_emscripten_bind_b2ContactID_set_cf_1:xi,_emscripten_bind_b2Rot_GetXAxis_0:yd,_emscripten_bind_b2ContactEdge_set_prev_1:$t,_emscripten_bind_b2Vec3_Set_3:df,_emscripten_bind_b2Fixture_GetNext_0:Ac,_emscripten_bind_b2FrictionJointDef_set_localAnchorB_1:Yf,_emscripten_bind_b2PulleyJoint_GetNext_0:kq,_emscripten_bind_b2ChainShape_get_m_type_0:bn,_emscripten_bind_b2GearJointDef_get_bodyA_0:jt,_emscripten_bind_b2DistanceJointDef_set_frequencyHz_1:rr,_emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0:Qo,_emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0:So,_emscripten_bind_JSContactFilter___destroy___0:Lo,_memset:FA,_emscripten_bind_b2PolygonShape_get_m_radius_0:ho,_emscripten_bind_b2RopeJoint_GetUserData_0:En,_emscripten_bind_b2RopeJointDef_get_bodyA_0:ou,_emscripten_bind_b2DistanceJointDef_get_dampingRatio_0:sr,_emscripten_enum_b2ManifoldType_e_faceA:Qu,_emscripten_enum_b2ManifoldType_e_faceB:Ru,_emscripten_bind_b2RevoluteJointDef_get_bodyB_0:kp,_emscripten_bind_b2FixtureDef_b2FixtureDef_0:Df,_emscripten_bind_b2BodyDef_get_awake_0:me,_emscripten_bind_b2EdgeShape_get_m_hasVertex3_0:Co,_emscripten_enum_b2ShapeType_e_edge:wu,_emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0:Ft,_emscripten_bind_b2BodyDef_set_active_1:te,_emscripten_bind_b2DistanceJointDef_set_localAnchorB_1:nr,_emscripten_bind_b2Body_GetWorldPoint_1:as,_emscripten_bind_b2ManifoldPoint_get_normalImpulse_0:cm,_emscripten_bind_JSContactFilter_ShouldCollide_2:Ko,_emscripten_bind_b2Joint_GetReactionTorque_1:yk,_emscripten_bind_b2RevoluteJointDef_set_type_1:fp,_emscripten_bind_b2RopeJointDef_b2RopeJointDef_0:du,_emscripten_bind_b2BodyDef_get_linearDamping_0:ge,_emscripten_bind_b2World_Step_3:jh,_emscripten_bind_b2CircleShape_RayCast_4:Aj,_emscripten_bind_b2Profile_get_step_0:Fd,_emscripten_bind_b2Vec3_b2Vec3_0:af,_emscripten_bind_b2DistanceJoint_GetLength_0:Ob,_emscripten_bind_b2PulleyJoint_GetLengthB_0:bq,_emscripten_bind_b2Filter_set_categoryBits_1:Rc,_emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0:Oh,_emscripten_bind_b2Shape_get_m_type_0:dr,_emscripten_bind_b2MouseJoint_SetDampingRatio_1:ed,_emscripten_bind_b2World_GetAutoClearForces_0:Kh,_emscripten_enum_b2ShapeType_e_circle:vu,_emscripten_bind_b2BodyDef_set_fixedRotation_1:pe,_emscripten_bind_b2RopeJoint_GetLimitState_0:vn,_emscripten_bind_b2JointDef_get_collideConnected_0:tm,_emscripten_bind_b2Body_Dump_0:Fs,_emscripten_bind_b2RevoluteJoint_GetLowerLimit_0:xt,_emscripten_bind_b2Body_GetWorldCenter_0:Mr,_emscripten_bind_JSContactListener___destroy___0:Hi,_emscripten_bind_b2BodyDef_set_linearVelocity_1:de,_emscripten_bind_b2JointDef_set_collideConnected_1:um,_emscripten_bind_b2RopeJointDef_get_localAnchorB_0:gu,_emscripten_bind_b2Body_GetUserData_0:Cs,_emscripten_bind_b2World_GetContinuousPhysics_0:wh,_emscripten_bind_b2Fixture_RayCast_3:Ec,_emscripten_bind_b2JointDef_set_bodyA_1:qm,_emscripten_bind_b2GearJointDef_get_collideConnected_0:nt,_emscripten_bind_b2RopeJointDef_get_maxLength_0:iu,_emscripten_bind_b2MouseJointDef_get_bodyA_0:Dq,_emscripten_bind_b2Body_SetBullet_1:os,_emscripten_bind_b2DistanceJoint_GetType_0:Tb,_emscripten_bind_b2FixtureDef_get_restitution_0:Kf,_emscripten_bind_b2Fixture_GetType_0:sc,_emscripten_bind_b2PulleyJointDef_set_localAnchorB_1:Il,_emscripten_bind_b2RevoluteJoint_GetBodyB_0:Jt,_emscripten_bind_b2Profile_set_solveInit_1:Md,_emscripten_bind_b2RopeJointDef_set_type_1:lu,_emscripten_bind_b2PrismaticJointDef_get_bodyB_0:Yg,_emscripten_bind_b2Body_SetLinearVelocity_1:Or,_emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0:st,_emscripten_bind_b2PulleyJointDef_get_userData_0:Rl,_emscripten_bind_b2PrismaticJointDef_set_bodyB_1:Zg,_emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0:Tf,_free:DA,_emscripten_bind_b2Manifold_get_localNormal_0:ng,_emscripten_bind_b2AABB_RayCast_2:xf,_emscripten_bind_b2FixtureDef_set_isSensor_1:Pf,_emscripten_bind_b2RopeJoint_GetBodyB_0:yn,_emscripten_bind_b2PrismaticJoint_GetAnchorA_0:hi,_emscripten_bind_b2ChainShape_set_m_count_1:Um,_emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0:Zh,_emscripten_bind_b2WeldJoint_GetFrequency_0:_k,_emscripten_bind_b2Joint_GetUserData_0:Ak,_emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0:Wo,_emscripten_bind_b2Manifold_set_type_1:sg,_emscripten_bind_b2Vec3_b2Vec3_3:bf,_emscripten_bind_b2RopeJointDef_set_maxLength_1:ju,_emscripten_bind_b2ChainShape_TestPoint_2:Nm,_emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0:Rh,_emscripten_bind_b2RayCastInput_get_p2_0:Ln,_emscripten_bind_b2RevoluteJoint_EnableLimit_1:wt,_emscripten_bind_b2BodyDef_set_angle_1:be,_emscripten_bind_b2WeldJoint_GetUserData_0:kl,_emscripten_bind_b2WheelJointDef_get_localAnchorA_0:Xi,_emscripten_bind_b2PulleyJointDef_set_type_1:Ql,_emscripten_bind_b2Body_IsBullet_0:ps,_emscripten_bind_b2Body_ApplyLinearImpulse_2:Vr,_emscripten_bind_b2Mat33_GetSymInverse33_1:kc,_emscripten_bind_b2PolygonShape_ComputeMass_2:$n,_emscripten_bind_b2WeldJoint_GetLocalAnchorA_0:Xk,_emscripten_bind_b2MouseJoint_SetFrequency_1:cd,_emscripten_bind_b2EdgeShape_get_m_vertex1_0:so,_emscripten_bind_b2BodyDef_set_awake_1:ne,_emscripten_bind_b2Vec2_get_y_0:Ze,_emscripten_bind_b2Body_CreateFixture_1:Fr,_emscripten_bind_b2Body_CreateFixture_2:Gr,_emscripten_bind_b2PulleyJoint_GetUserData_0:lq,_emscripten_bind_b2Body_SetActive_1:us,_emscripten_bind_b2Fixture_GetUserData_0:Bc,_emscripten_bind_b2PolygonShape_ComputeAABB_3:_n,_emscripten_bind_b2ContactFeature_get_typeA_0:Ge,_emscripten_bind_b2MouseJoint_GetReactionForce_1:ld,_emscripten_bind_b2FrictionJoint_GetReactionTorque_1:Ss,_emscripten_bind_b2EdgeShape_TestPoint_2:oo,_memcpy:HA,_emscripten_bind_b2PolygonShape_get_m_centroid_0:ao,_emscripten_bind_b2ChainShape___destroy___0:fn,_emscripten_bind_b2GearJoint_SetUserData_1:Sk,_emscripten_bind_b2Vec3_set_z_1:nf,_emscripten_bind_b2PrismaticJointDef_set_enableLimit_1:Hg,_emscripten_bind_b2DistanceJoint_GetFrequency_0:Qb,_emscripten_bind_b2Body_SetGravityScale_1:ls,_emscripten_bind_b2AABB_GetPerimeter_0:tf,_emscripten_bind_b2PulleyJointDef_get_lengthA_0:Jl,_emscripten_bind_b2Vec3_set_x_1:jf,_emscripten_bind_b2PulleyJointDef_get_type_0:Pl,_emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1:Fb,_emscripten_bind_b2Shape___destroy___0:hr,_strlen:GA,_emscripten_bind_b2Color_set_b_1:pn,_emscripten_bind_b2Joint_GetReactionForce_1:xk,_emscripten_bind_b2FixtureDef_set_friction_1:Jf,_emscripten_bind_b2ContactID___destroy___0:Ai,_emscripten_bind_b2EdgeShape_get_m_hasVertex0_0:Ao,_emscripten_bind_JSRayCastCallback_ReportFixture_4:Ae,_emscripten_bind_b2Profile_set_solveVelocity_1:Od,_emscripten_bind_b2PrismaticJoint_GetAnchorB_0:ii,_emscripten_bind_b2WeldJointDef_b2WeldJointDef_0:Kj,_emscripten_enum_b2BodyType_b2_staticBody:Su,_emscripten_bind_b2RevoluteJointDef_set_upperAngle_1:Zo,_emscripten_bind_b2RevoluteJointDef_get_type_0:ep,_emscripten_bind_b2GearJointDef_get_type_0:ft,_emscripten_bind_b2ChainShape_GetType_0:Lm,_emscripten_bind_b2RayCastInput_get_maxFraction_0:Nn,_emscripten_bind_b2GearJoint_GetBodyA_0:Kk,_emscripten_bind_b2Body_GetLocalVector_1:ds,_emscripten_bind_b2PrismaticJoint_EnableLimit_1:Vh,_emscripten_bind_b2FrictionJointDef_get_maxForce_0:Zf,_emscripten_bind_b2BodyDef_set_angularVelocity_1:fe,_emscripten_bind_b2Body_SetLinearDamping_1:hs,_emscripten_bind_b2WheelJoint_GetBodyB_0:Pp,_emscripten_bind_b2Color___destroy___0:qn,_emscripten_bind_b2PrismaticJoint_IsActive_0:oi,_emscripten_enum_b2JointType_e_weldJoint:Iu,_emscripten_bind_b2World_SetContinuousPhysics_1:vh,_emscripten_bind_b2MouseJointDef_get_target_0:rq,_emscripten_bind_b2Manifold_b2Manifold_0:mg,_emscripten_bind_b2PulleyJointDef_set_userData_1:Sl,_emscripten_bind_b2FrictionJointDef_set_maxForce_1:_f,_emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0:ir,_emscripten_bind_b2PolygonShape_set_m_centroid_1:bo,_emscripten_bind_b2Mat33_GetInverse22_1:jc,_emscripten_bind_b2PolygonShape_SetAsBox_4:Tn,_emscripten_bind_b2EdgeShape_get_m_vertex2_0:uo,_emscripten_bind_b2WheelJoint_GetReactionTorque_1:Tp,_emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0:Mo,_emscripten_bind_b2ContactFeature_set_typeA_1:He,_emscripten_bind_b2Fixture_Dump_1:Nc,_emscripten_bind_b2World_GetJointList_0:ph,_emscripten_bind_b2Manifold_set_localPoint_1:qg,_emscripten_bind_b2DistanceJoint_SetUserData_1:ac,_emscripten_bind_b2BodyDef_set_bullet_1:re,_emscripten_bind_b2RayCastOutput___destroy___0:vi,___cxa_can_catch:AA,_emscripten_bind_b2WheelJoint_GetNext_0:Up,_emscripten_bind_b2AABB_GetCenter_0:rf,_emscripten_bind_b2Filter_set_groupIndex_1:Vc,_emscripten_bind_b2JointDef_b2JointDef_0:km,_emscripten_bind_b2CircleShape_b2CircleShape_0:wj,_emscripten_bind_b2GearJointDef_b2GearJointDef_0:_s,_emscripten_bind_b2JointDef_get_bodyB_0:rm,_emscripten_bind_b2DistanceJoint_GetReactionForce_1:Yb,_emscripten_bind_b2PrismaticJoint_GetJointSpeed_0:Th,_emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0:Dl,_emscripten_bind_b2Joint_GetAnchorA_0:vk,_emscripten_bind_b2Contact_GetRestitution_0:Xq,_emscripten_bind_b2ContactEdge_get_contact_0:Yt,_emscripten_bind_b2RevoluteJointDef_get_userData_0:gp,_emscripten_bind_b2Fixture_GetAABB_1:Mc,_emscripten_bind_b2DistanceJointDef_Initialize_4:jr,_emscripten_bind_b2PrismaticJointDef_set_collideConnected_1:$g,_emscripten_bind_b2PrismaticJointDef_set_localAxisA_1:Dg,_emscripten_bind_b2GearJointDef_get_bodyB_0:lt,_emscripten_bind_b2WheelJointDef_get_bodyB_0:rj,_emscripten_bind_b2WeldJoint_GetLocalAnchorB_0:Yk,_emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1:Ro,_emscripten_bind_b2Body_DestroyFixture_1:Hr,_emscripten_bind_b2Profile_set_broadphase_1:Sd,_emscripten_bind_b2WheelJointDef_get_localAnchorB_0:Zi,_emscripten_bind_b2ContactImpulse_get_count_0:Ib,_emscripten_bind_b2World_GetJointCount_0:Bh,_emscripten_bind_b2WheelJoint_GetMotorSpeed_0:Fp,_emscripten_bind_b2Body_GetAngularDamping_0:is,_emscripten_bind_b2WheelJointDef_get_dampingRatio_0:jj,_emscripten_bind_b2RayCastOutput_get_fraction_0:ti,_emscripten_enum_b2ManifoldType_e_circles:Pu,_emscripten_bind_b2GearJoint_SetRatio_1:Hk,_emscripten_bind_JSDraw_DrawPolygon_3:qp,_emscripten_bind_b2Filter___destroy___0:Wc,_emscripten_bind_b2JointEdge_set_next_1:xl,___cxa_is_pointer_type:BA,_emscripten_bind_b2BodyDef_get_fixedRotation_0:oe,_emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1:Rg,_emscripten_bind_b2ChainShape_SetPrevVertex_1:Im,_emscripten_bind_b2Filter_get_categoryBits_0:Qc,_emscripten_bind_b2MouseJoint_GetReactionTorque_1:md,_emscripten_bind_b2MouseJoint_GetUserData_0:od,_emscripten_bind_b2WheelJoint_GetUserData_0:Vp,_emscripten_bind_b2Vec3_op_sub_1:ff,_emscripten_bind_b2BodyDef_get_gravityScale_0:we,_emscripten_bind_b2Shape_GetType_0:Zq,_emscripten_bind_b2AABB_IsValid_0:qf,_emscripten_bind_b2WheelJoint_GetBodyA_0:Op,_emscripten_bind_JSDraw_DrawTransform_1:vp,_emscripten_bind_b2PulleyJoint_GetLengthA_0:aq,_emscripten_bind_b2DistanceJointDef_get_frequencyHz_0:qr,_emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1:Ct,_emscripten_bind_b2World___destroy___0:Nh,_emscripten_bind_b2ChainShape_get_m_hasNextVertex_0:$m,_emscripten_bind_b2ChainShape_SetNextVertex_1:Jm,_emscripten_bind_b2Body_SetType_1:ms,_emscripten_bind_b2Body_GetMass_0:Xr,_emscripten_bind_b2Rot_b2Rot_0:td,_emscripten_bind_b2Rot_b2Rot_1:ud,_emscripten_enum_b2JointType_e_distanceJoint:Du,_emscripten_bind_b2PulleyJoint___destroy___0:pq,_emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0:Ph,_emscripten_bind_b2MouseJoint_GetType_0:gd,_emscripten_bind_JSQueryCallback___destroy___0:Zc,_emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1:Xo,_emscripten_bind_b2JointEdge___destroy___0:yl,_emscripten_bind_b2PulleyJoint_GetRatio_0:cq,_emscripten_bind_JSContactListener_BeginContact_1:Di,_emscripten_bind_b2JointEdge_get_next_0:wl,_emscripten_bind_b2RayCastInput_set_maxFraction_1:On,_emscripten_bind_b2MouseJoint_GetBodyA_0:hd,_emscripten_bind_b2Profile_set_collide_1:Id,_emscripten_bind_b2AABB_b2AABB_0:pf,_emscripten_bind_b2Fixture_Refilter_0:yc,_emscripten_bind_b2World_CreateBody_1:fh,_emscripten_bind_b2RopeJointDef_set_userData_1:nu,_emscripten_bind_b2Fixture_IsSensor_0:vc,_emscripten_bind_b2WeldJoint_GetType_0:cl,_emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0:Qg,_emscripten_bind_b2Rot___destroy___0:Ed,_emscripten_bind_b2Filter_get_maskBits_0:Sc,_emscripten_bind_b2Body_GetFixtureList_0:ys,_emscripten_bind_b2RevoluteJointDef_get_enableMotor_0:_o,_emscripten_bind_b2MouseJointDef_set_dampingRatio_1:yq,_emscripten_bind_JSRayCastCallback___destroy___0:Be,_emscripten_bind_b2ContactListener___destroy___0:_l,_emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1:Bg,_emscripten_enum_b2DrawFlag_e_pairBit:Yu,_emscripten_bind_b2FrictionJoint___destroy___0:Ys,_emscripten_bind_b2WeldJoint_Dump_0:bl,_emscripten_bind_b2FrictionJointDef_get_maxTorque_0:$f,_emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0:Gs,_emscripten_bind_b2WeldJointDef_get_localAnchorB_0:Oj,_emscripten_bind_b2PrismaticJointDef_get_bodyA_0:Wg,_emscripten_bind_b2Vec2_IsValid_0:Ve,_emscripten_bind_b2World_SetGravity_1:Gh,_emscripten_bind_b2World_GetWarmStarting_0:uh,_emscripten_bind_b2RevoluteJointDef_set_enableLimit_1:Vo,_emscripten_bind_b2WeldJointDef___destroy___0:ek,_emscripten_bind_b2Mat22_Solve_1:Pi,_emscripten_bind_b2Color_get_g_0:mn,_emscripten_bind_b2World_GetProfile_0:Lh,_emscripten_bind_b2RopeJoint_GetNext_0:Dn,_emscripten_bind_b2Filter_b2Filter_0:Pc,_emscripten_bind_b2PolygonShape_GetChildCount_0:Xn,_emscripten_bind_b2GearJointDef_get_ratio_0:dt,_emscripten_bind_b2Mat33_Solve33_1:hc,_emscripten_bind_b2PulleyJoint_GetReactionForce_1:iq,_emscripten_bind_b2WheelJoint_GetCollideConnected_0:Yp,_emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1:Lp,_emscripten_bind_b2RevoluteJointDef___destroy___0:op,_emscripten_bind_b2PolygonShape_set_m_vertexCount_1:eo,_emscripten_bind_b2RevoluteJoint_EnableMotor_1:Bt,_emscripten_bind_b2ContactFeature_get_typeB_0:Ie,_emscripten_bind_b2ContactID_get_key_0:yi,_emscripten_bind_b2Rot_GetAngle_0:xd,_emscripten_bind_b2World_SetAllowSleeping_1:rh,_emscripten_enum_b2DrawFlag_e_centerOfMassBit:Zu,_emscripten_bind_b2ManifoldPoint_set_id_1:hm,_emscripten_bind_b2FrictionJoint_GetCollideConnected_0:Xs,_emscripten_bind_b2WheelJointDef_set_motorSpeed_1:gj,_emscripten_bind_b2Mat22_get_ex_0:Qi,_emscripten_bind_b2Fixture_GetDensity_0:Hc,_emscripten_bind_b2PolygonShape_get_m_type_0:fo,_emscripten_bind_b2Vec2_Set_2:Oe,_emscripten_bind_b2WeldJointDef_get_type_0:Wj,_emscripten_bind_b2MouseJointDef_b2MouseJointDef_0:qq,_emscripten_bind_b2Rot_get_s_0:Ad,_emscripten_bind_b2FrictionJoint_SetMaxTorque_1:Ks,_emscripten_bind_b2MouseJointDef_get_frequencyHz_0:vq,_emscripten_bind_b2FrictionJoint_SetUserData_1:Vs,_emscripten_bind_b2FixtureDef_set_userData_1:Hf,_emscripten_bind_b2JointDef_get_userData_0:nm,_emscripten_bind_b2DistanceJointDef_get_collideConnected_0:Cr,_emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1:To,_emscripten_bind_b2ContactFeature___destroy___0:Ke,_emscripten_bind_b2DistanceJointDef_set_bodyB_1:Br,_emscripten_bind_JSQueryCallback_JSQueryCallback_0:Xc,_emscripten_bind_b2ChainShape_GetChildCount_0:Mm,_emscripten_bind_b2MassData_b2MassData_0:kk,_emscripten_bind_b2Vec3_set_y_1:lf,_emscripten_bind_b2AABB_Combine_1:uf,_emscripten_bind_b2AABB_Combine_2:vf,_emscripten_bind_b2PrismaticJoint_GetBodyA_0:fi,_emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0:ci,_emscripten_bind_b2AABB___destroy___0:Cf,_emscripten_bind_b2Body_IsSleepingAllowed_0:rs,_emscripten_bind_b2MouseJointDef_set_maxForce_1:uq,_emscripten_bind_b2Profile_get_solve_0:Jd,_emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1:Gb,_emscripten_bind_b2PolygonShape_GetVertexCount_0:Un,_emscripten_bind_b2Rot_get_c_0:Cd,_emscripten_bind_b2AABB_set_lowerBound_1:zf,_emscripten_bind_b2Body_ApplyTorque_1:Ur,_emscripten_bind_b2MouseJoint_SetMaxForce_1:ad,_emscripten_bind_b2FrictionJointDef_get_bodyB_0:hg,_emscripten_bind_b2JointDef_set_userData_1:om,_emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0:em,_emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0:cp,_emscripten_bind_b2WeldJointDef_get_dampingRatio_0:Uj,_emscripten_bind_b2MouseJoint___destroy___0:sd,_emscripten_bind_b2EdgeShape_b2EdgeShape_0:ko,_emscripten_bind_b2FrictionJoint_GetReactionForce_1:Rs,_emscripten_bind_b2DistanceJointDef_set_type_1:vr,_emscripten_bind_b2WeldJoint___destroy___0:ol,_emscripten_bind_JSContactListener_PostSolve_2:Gi,_emscripten_bind_b2PulleyJoint_GetBodyA_0:eq,_emscripten_bind_b2RopeJointDef_get_type_0:ku,_emscripten_bind_b2CircleShape_ComputeMass_2:Cj,_emscripten_bind_b2DistanceJointDef_get_localAnchorB_0:mr,_emscripten_bind_b2GearJointDef___destroy___0:pt,_emscripten_bind_b2RevoluteJointDef_set_bodyA_1:jp,_emscripten_enum_b2BodyType_b2_dynamicBody:Uu,_emscripten_bind_b2CircleShape_TestPoint_2:zj,_emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1:fs,_emscripten_bind_b2Mat22_b2Mat22_0:Ii,_emscripten_bind_b2MouseJoint_GetAnchorB_0:kd,_emscripten_enum_b2BodyType_b2_kinematicBody:Tu,_emscripten_bind_b2Manifold_get_localPoint_0:pg,_emscripten_bind_b2GearJoint_GetBodyB_0:Lk,_emscripten_bind_b2CircleShape___destroy___0:Jj,_emscripten_bind_b2EdgeShape___destroy___0:Io,_emscripten_bind_b2World_GetContactCount_0:Ch,_emscripten_bind_b2Contact_SetRestitution_1:Wq,_emscripten_bind_b2BodyDef_get_angularDamping_0:ie,_emscripten_bind_b2EdgeShape_get_m_vertex3_0:yo,_emscripten_bind_b2Fixture_SetUserData_1:Cc,_emscripten_bind_b2Transform_SetIdentity_0:ym,_emscripten_bind_b2GearJointDef_set_joint1_1:at,_emscripten_bind_b2EdgeShape_set_m_vertex2_1:vo,_emscripten_bind_b2ContactEdge_get_next_0:au,_emscripten_bind_b2ContactFeature_set_indexB_1:Fe,_emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1:es,_emscripten_bind_b2WeldJoint_GetCollideConnected_0:nl,_emscripten_bind_b2Mat22_set_ey_1:Ti,_emscripten_bind_b2WheelJointDef_set_frequencyHz_1:ij,_emscripten_bind_b2World_GetSubStepping_0:yh,_emscripten_bind_b2Rot_GetYAxis_0:zd,_emscripten_bind_b2Contact_GetChildIndexB_0:Sq,_emscripten_bind_b2DistanceJoint___destroy___0:dc,_emscripten_bind_b2EdgeShape_GetType_0:mo,_emscripten_bind_b2WheelJointDef_set_dampingRatio_1:kj,_emscripten_bind_b2ManifoldPoint___destroy___0:im,_emscripten_enum_b2JointType_e_prismaticJoint:Cu,_emscripten_bind_b2WeldJointDef_get_referenceAngle_0:Qj,_emscripten_bind_b2Vec2_Length_0:Se,_emscripten_bind_b2Vec2_SetZero_0:Ne,_emscripten_bind_b2RopeJoint___destroy___0:In,_emscripten_bind_b2World_DestroyJoint_1:ih,_emscripten_bind_b2JointDef_set_bodyB_1:sm,_emscripten_bind_b2Mat22_Set_2:Li,_emscripten_bind_b2Body_GetType_0:ns,_emscripten_bind_b2WeldJoint_GetAnchorB_0:gl,_emscripten_bind_b2WeldJoint_GetNext_0:jl,_emscripten_bind_b2Shape_get_m_radius_0:fr,_emscripten_bind_b2EdgeShape_ComputeAABB_3:qo,_emscripten_bind_b2BodyDef_get_type_0:Yd,_emscripten_bind_b2WheelJointDef_set_collideConnected_1:uj,_emscripten_bind_JSDestructionListener___destroy___0:Hb,_emscripten_bind_b2RopeJoint_GetLocalAnchorA_0:rn,_emscripten_bind_b2BodyDef_set_linearDamping_1:he,_emscripten_bind_b2FrictionJoint_GetUserData_0:Us,_emscripten_bind_b2Contact_SetFriction_1:Tq,_emscripten_bind_b2Manifold_set_localNormal_1:og,_emscripten_bind_b2JointDef_get_bodyA_0:pm,_emscripten_bind_b2Body_GetLinearDamping_0:gs,_emscripten_bind_b2WeldJointDef_set_frequencyHz_1:Tj,_emscripten_bind_b2Body_ResetMassData_0:$r,_emscripten_bind_b2PrismaticJointDef_set_enableMotor_1:Ng,_emscripten_enum_b2JointType_e_wheelJoint:Hu,_emscripten_bind_b2Vec2_Skew_0:We,_emscripten_bind_b2MouseJoint_GetDampingRatio_0:fd,_emscripten_bind_b2RevoluteJoint_GetAnchorA_0:Kt,_emscripten_bind_b2ChainShape_set_m_prevVertex_1:Wm,_emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0:Zm,_emscripten_bind_b2FrictionJoint_GetNext_0:Ts,_emscripten_bind_b2PrismaticJointDef_set_userData_1:Vg,_emscripten_bind_b2FrictionJointDef_set_type_1:cg,_emscripten_bind_b2PrismaticJoint_GetUserData_0:mi,_emscripten_bind_b2FrictionJointDef_get_collideConnected_0:jg,_emscripten_bind_b2Body_GetInertia_0:Yr,_emscripten_bind_b2WeldJointDef_set_referenceAngle_1:Rj,_emscripten_bind_b2FrictionJoint_GetAnchorA_0:Ps,_emscripten_bind_b2RopeJoint_GetType_0:wn,_emscripten_bind_b2MassData_get_I_0:pk,_emscripten_bind_b2WheelJointDef_get_motorSpeed_0:fj,_emscripten_enum_b2JointType_e_ropeJoint:Ku,_emscripten_bind_b2Filter_set_maskBits_1:Tc,_emscripten_bind_b2EdgeShape_set_m_radius_1:Ho,_emscripten_bind_b2Mat22_b2Mat22_2:Ji,_emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1:ej,_emscripten_bind_b2FrictionJointDef_set_bodyB_1:ig,_emscripten_bind_b2Mat22_b2Mat22_4:Ki,_emscripten_bind_b2ChainShape_set_m_hasNextVertex_1:an,_emscripten_bind_b2Mat22_GetInverse_0:Oi,_emscripten_bind_b2PrismaticJoint_EnableMotor_1:_h,_emscripten_bind_b2CircleShape_get_m_type_0:Fj,_emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0:Lb,_emscripten_bind_b2ContactEdge_b2ContactEdge_0:Vt,_emscripten_bind_b2BodyDef___destroy___0:ye,_emscripten_bind_b2FrictionJointDef_set_maxTorque_1:ag,_emscripten_bind_b2PolygonShape_GetVertex_1:Vn,_emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1:El,_emscripten_bind_b2RevoluteJointDef_get_collideConnected_0:mp,_emscripten_bind_b2DistanceJointDef_set_bodyA_1:zr,_emscripten_bind_b2RevoluteJoint_SetLimits_2:zt,_emscripten_bind_b2WeldJointDef_set_type_1:Xj,_emscripten_bind_b2FixtureDef_set_density_1:Nf,_emscripten_bind_b2Shape_set_m_type_1:er,_emscripten_bind_b2WheelJoint_GetJointTranslation_0:Ap,_emscripten_bind_b2WheelJoint_GetMotorTorque_1:Ip,_emscripten_bind_b2RopeJoint_SetUserData_1:Fn,_emscripten_bind_b2RopeJointDef___destroy___0:uu,_emscripten_bind_b2WheelJoint_IsActive_0:Xp,_emscripten_bind_b2PrismaticJointDef_get_enableMotor_0:Mg,_emscripten_bind_b2Transform_b2Transform_2:xm,_emscripten_bind_b2WeldJoint_GetReactionForce_1:hl,_emscripten_bind_b2ChainShape_RayCast_4:Om,_emscripten_bind_b2PrismaticJoint_GetUpperLimit_0:Xh,_emscripten_bind_b2ContactID_get_cf_0:wi,_emscripten_bind_b2MouseJointDef_set_frequencyHz_1:wq,_emscripten_bind_b2ChainShape_get_m_radius_0:dn,_emscripten_bind_b2Body_GetLinearVelocity_0:Pr,_emscripten_bind_b2ChainShape_set_m_radius_1:en,_emscripten_bind_b2DistanceJoint_GetReactionTorque_1:Zb,_emscripten_bind_b2World_Dump_0:Mh,_emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0:rt,_emscripten_bind_b2Profile_set_solve_1:Kd,_emscripten_bind_b2WeldJoint_GetDampingRatio_0:al,_emscripten_bind_b2Color_get_b_0:on,_emscripten_bind_b2MouseJointDef_get_userData_0:Bq,_emscripten_bind_b2CircleShape_ComputeAABB_3:Bj,_emscripten_bind_b2RopeJoint_GetReactionForce_1:Bn,_emscripten_bind_b2PrismaticJointDef_get_enableLimit_0:Gg,_emscripten_bind_b2ManifoldPoint_set_localPoint_1:bm,_emscripten_bind_b2Fixture_GetFilterData_0:xc,_emscripten_bind_b2World_GetBodyList_0:oh,_emscripten_bind_b2Shape_ComputeMass_2:cr,_emscripten_bind_b2Joint_GetNext_0:zk,_emscripten_bind_b2PrismaticJointDef_get_collideConnected_0:_g,_emscripten_bind_b2World_RayCast_3:nh,_emscripten_bind_b2MassData_set_I_1:qk,_emscripten_bind_b2MassData___destroy___0:rk,_emscripten_bind_b2Profile_get_collide_0:Hd,_emscripten_bind_b2Color_b2Color_3:hn,_emscripten_bind_b2Color_b2Color_0:gn,_emscripten_bind_b2MouseJoint_GetFrequency_0:dd,_emscripten_bind_b2WeldJointDef_Initialize_3:Lj,_emscripten_bind_b2Shape_GetChildCount_0:_q,_emscripten_enum_b2JointType_e_gearJoint:Gu,_emscripten_bind_b2FixtureDef_get_friction_0:If,_emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1:zg,_emscripten_bind_b2Contact_GetManifold_0:Kq,_emscripten_bind_b2MouseJoint_GetTarget_0:$c,_emscripten_bind_b2WeldJointDef_get_localAnchorA_0:Mj,_emscripten_bind_b2MouseJoint_SetUserData_1:pd,_emscripten_bind_b2JointEdge_get_other_0:ql,_emscripten_bind_b2ChainShape_GetChildEdge_2:Km,_emscripten_bind_b2GearJointDef_set_collideConnected_1:ot,_emscripten_bind_b2WheelJoint_SetUserData_1:Wp,_emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1:$h,_emscripten_bind_b2DistanceJoint_GetCollideConnected_0:cc,_emscripten_bind_b2MouseJoint_GetMaxForce_0:bd,_emscripten_bind_b2PrismaticJointDef_set_bodyA_1:Xg,_emscripten_bind_b2Mat22_SetZero_0:Ni,_emscripten_bind_b2Contact_GetChildIndexA_0:Qq,_emscripten_bind_b2Fixture_SetRestitution_1:Lc,_emscripten_bind_b2Body_GetTransform_0:Jr,_emscripten_bind_b2ContactEdge___destroy___0:cu,_emscripten_bind_b2Mat33_set_ex_1:mc,_emscripten_bind_b2AABB_GetExtents_0:sf,_emscripten_bind_b2RevoluteJointDef_get_bodyA_0:ip,_emscripten_bind_b2PrismaticJoint_GetBodyB_0:gi,_emscripten_bind_b2WheelJointDef_set_bodyA_1:qj,_emscripten_bind_b2DistanceJointDef_set_collideConnected_1:Dr,_emscripten_bind_b2BodyDef_get_angle_0:ae,_emscripten_bind_b2PulleyJoint_GetReactionTorque_1:jq,_emscripten_bind_b2FixtureDef_get_shape_0:Ef,_emscripten_bind_b2WeldJointDef_get_userData_0:Yj,_emscripten_bind_b2FrictionJoint_SetMaxForce_1:Is,_emscripten_bind_b2Mat33_b2Mat33_3:fc,_emscripten_bind_b2Vec3_get_y_0:kf,_emscripten_bind_b2JointDef_get_type_0:lm,_emscripten_bind_JSQueryCallback_ReportFixture_1:Yc,_emscripten_bind_b2Fixture_TestPoint_1:Dc,_emscripten_bind_b2RevoluteJoint_GetCollideConnected_0:St,_emscripten_bind_JSDraw_JSDraw_0:pp,_emscripten_bind_b2MouseJoint_GetAnchorA_0:jd,_emscripten_bind_b2Transform_get_p_0:Am,_emscripten_bind_b2EdgeShape_ComputeMass_2:ro,_emscripten_bind_VoidPtr___destroy___0:Wd,_emscripten_bind_b2DistanceJointDef___destroy___0:Er,_emscripten_bind_b2RopeJointDef_set_bodyA_1:pu,_emscripten_bind_b2JointDef_set_type_1:mm,_emscripten_bind_b2Draw_AppendFlags_1:hk,_emscripten_bind_b2World_GetContactList_0:qh,_emscripten_bind_b2Mat33_set_ez_1:qc,_emscripten_bind_b2JointEdge_b2JointEdge_0:pl,_emscripten_bind_b2FrictionJointDef_get_bodyA_0:fg,_emscripten_bind_b2Body_ApplyForce_2:Sr,_emscripten_bind_b2WheelJointDef_get_type_0:lj,_emscripten_bind_b2RevoluteJoint_GetReactionForce_1:Mt,_emscripten_bind_b2PulleyJointDef_set_collideConnected_1:Yl,_emscripten_bind_b2RopeJoint_GetCollideConnected_0:Hn,_emscripten_bind_b2GearJointDef_set_joint2_1:ct,_emscripten_bind_b2BodyDef_set_userData_1:ve,_emscripten_bind_b2GearJoint_GetAnchorB_0:Nk,_emscripten_bind_b2RopeJoint_IsActive_0:Gn,_emscripten_bind_b2Fixture_GetFriction_0:Ic,_emscripten_enum_b2DrawFlag_e_aabbBit:Xu,_emscripten_bind_b2RevoluteJointDef_Initialize_3:No,_emscripten_bind_b2Body_GetAngle_0:Lr,_emscripten_bind_b2EdgeShape_Set_2:lo,_emscripten_bind_b2Mat33_SetZero_0:gc,_emscripten_bind_b2PrismaticJointDef_get_localAxisA_0:Cg,_emscripten_bind_b2Mat22_get_ey_0:Si,_emscripten_bind_b2Mat22_SetIdentity_0:Mi,_emscripten_bind_b2Joint_IsActive_0:Ck,_emscripten_bind_b2BodyDef_get_allowSleep_0:ke,_emscripten_bind_b2World_GetTreeHeight_0:Dh,_emscripten_bind_b2GearJoint_GetJoint2_0:Gk,_emscripten_bind_b2EdgeShape_set_m_vertex1_1:to,_emscripten_bind_b2Body_GetWorld_0:Es,_emscripten_enum_b2LimitState_e_inactiveLimit:Lu,_emscripten_bind_b2PulleyJointDef_set_lengthB_1:Ml,_emscripten_bind_b2Body_SetAwake_1:ss,_emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1:Lg,_emscripten_bind_b2Vec2___destroy___0:$e,_emscripten_bind_b2RayCastInput_set_p1_1:Kn,_emscripten_bind_b2Contact_ResetFriction_0:Vq,_emscripten_bind_b2PulleyJoint_GetAnchorA_0:gq,_emscripten_bind_b2BodyDef_get_linearVelocity_0:ce,_emscripten_bind_b2DistanceJointDef_get_bodyB_0:Ar,_emscripten_bind_b2Mat22___destroy___0:Ui,_emscripten_bind_b2RevoluteJoint_GetAnchorB_0:Lt,_emscripten_bind_b2RevoluteJoint_GetNext_0:Ot,_emscripten_bind_b2WeldJointDef_get_bodyA_0:_j,_emscripten_bind_b2Fixture_GetShape_0:tc,_emscripten_bind_b2PolygonShape_SetAsBox_2:Sn,_emscripten_bind_b2Vec3_op_mul_1:gf,_emscripten_bind_b2PolygonShape_set_m_type_1:go,_emscripten_bind_b2PolygonShape_get_m_vertexCount_0:co,_emscripten_bind_b2WheelJoint_GetType_0:Np,_emscripten_bind_b2RevoluteJoint_IsActive_0:Rt,_emscripten_bind_b2GearJoint_GetNext_0:Qk,_emscripten_bind_b2MouseJointDef_get_maxForce_0:tq,_emscripten_bind_b2Color_Set_3:jn,_emscripten_bind_b2EdgeShape_set_m_type_1:Fo,_emscripten_bind_b2WheelJoint_GetLocalAxisA_0:zp,_emscripten_bind_b2Body_GetNext_0:Bs,_emscripten_bind_b2RopeJoint_GetBodyA_0:xn,_emscripten_enum_b2JointType_e_unknownJoint:Au,_emscripten_bind_b2ContactFeature_set_indexA_1:De,_emscripten_bind_b2Profile_get_solveInit_0:Ld,_emscripten_bind_b2BodyDef_set_angularDamping_1:je,_emscripten_bind_b2FrictionJoint_GetAnchorB_0:Qs,_emscripten_bind_b2World_QueryAABB_2:mh,_emscripten_bind_b2BodyDef_get_userData_0:ue,_emscripten_bind_b2Body_SetAngularVelocity_1:Qr,_emscripten_bind_b2WheelJointDef_get_userData_0:nj,_emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0:vt,_emscripten_bind_b2DistanceJoint_GetBodyB_0:Vb,_emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1:dp,_emscripten_bind_b2WeldJointDef_set_bodyB_1:bk,_emscripten_bind_b2RevoluteJoint_SetUserData_1:Qt,_emscripten_bind_b2DistanceJoint_SetLength_1:Nb,_emscripten_bind_b2JointEdge_get_joint_0:sl,_emscripten_bind_b2Body_GetLocalCenter_0:Nr,_emscripten_bind_b2FixtureDef___destroy___0:Sf,_emscripten_bind_b2FixtureDef_set_shape_1:Ff,_emscripten_bind_b2WeldJoint_GetAnchorA_0:fl,_emscripten_bind_b2Profile_get_solveVelocity_0:Nd,_emscripten_bind_b2WeldJointDef_get_bodyB_0:ak,_emscripten_bind_b2Body_SetAngularDamping_1:js,_emscripten_bind_b2PulleyJointDef_Initialize_7:Al,_emscripten_bind_b2GearJointDef_set_bodyB_1:mt,_emscripten_bind_b2RopeJoint_GetReactionTorque_1:Cn,_emscripten_bind_b2Mat22_set_ex_1:Ri,_emscripten_bind_b2GearJoint_GetType_0:Jk,_emscripten_bind_b2ChainShape_b2ChainShape_0:Fm,_emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1:Et,_emscripten_bind_b2RopeJointDef_set_localAnchorB_1:hu,_emscripten_bind_b2FrictionJointDef_Initialize_3:Uf,_emscripten_bind_b2GearJointDef_set_userData_1:it,_emscripten_bind_b2ChainShape_CreateLoop_2:Gm,_emscripten_bind_b2EdgeShape_get_m_radius_0:Go,_emscripten_bind_b2Contact_GetFixtureB_0:Rq,_emscripten_bind_b2ChainShape_ComputeMass_2:Qm,_emscripten_bind_b2Vec2_set_y_1:_e,_emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0:Uh,_emscripten_bind_b2RopeJointDef_get_bodyB_0:qu,_emscripten_bind_b2BodyDef_b2BodyDef_0:Xd,_emscripten_bind_b2MassData_get_mass_0:lk,_emscripten_bind_b2WheelJoint___destroy___0:Zp,_emscripten_bind_b2Joint_GetBodyB_0:uk,_emscripten_bind_b2MouseJointDef_set_collideConnected_1:Iq,_emscripten_bind_b2WheelJointDef_set_localAxisA_1:aj,_emscripten_bind_b2Joint_Dump_0:Ek,_emscripten_bind_b2WheelJointDef_b2WheelJointDef_0:Vi,_emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1:bp,_emscripten_bind_b2WheelJointDef_get_enableMotor_0:bj,_emscripten_bind_b2Vec2_LengthSquared_0:Te,_emscripten_bind_b2FrictionJointDef_set_bodyA_1:gg,_emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0:Kp,_emscripten_bind_b2ContactFeature_get_indexB_0:Ee,_emscripten_bind_b2Body_GetJointList_0:zs,_emscripten_bind_b2FrictionJoint_GetBodyA_0:Ns,_emscripten_bind_b2WheelJointDef_set_localAnchorB_1:_i,_emscripten_bind_b2DistanceJointDef_set_localAnchorA_1:lr,_emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0:Og,_emscripten_bind_b2Body_SetUserData_1:Ds,_emscripten_bind_b2DistanceJoint_GetUserData_0:$b,_emscripten_bind_b2PulleyJointDef_set_bodyA_1:Ul,_emscripten_bind_b2Joint_GetType_0:sk,_emscripten_bind_b2Manifold_get_pointCount_0:tg,_emscripten_bind_b2Mat33_get_ez_0:pc,_emscripten_bind_b2DestructionListenerWrapper___destroy___0:Bi,_emscripten_bind_b2WheelJointDef_get_bodyA_0:pj,_emscripten_enum_b2LimitState_e_atUpperLimit:Nu,_emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1:Cl,_emscripten_bind_b2MouseJointDef_get_type_0:zq,_emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1:bi,_emscripten_bind_b2PulleyJointDef_get_collideConnected_0:Xl,_emscripten_bind_b2RopeJoint_SetMaxLength_1:tn,_emscripten_bind_b2Joint_SetUserData_1:Bk,_emscripten_bind_b2PolygonShape_set_m_radius_1:io,_emscripten_bind_b2Vec2_get_x_0:Xe,_emscripten_bind_JSContactListener_JSContactListener_0:Ci,runPostSets:EA,stackAlloc:wb,stackSave:xb,stackRestore:yb,setThrew:zb,setTempRet0:Cb,getTempRet0:Db,dynCall_iiii:IA,dynCall_viiiii:bB,dynCall_did:wB,dynCall_vi:RB,dynCall_diiiid:kC,dynCall_vii:FC,dynCall_viidii:_C,dynCall_ii:tD,dynCall_viidi:OD,dynCall_viii:hE,dynCall_v:CE,dynCall_viid:XE,dynCall_viiiiii:qF,dynCall_iii:LF,dynCall_iiiiii:eG,dynCall_viiii:zG}
// EMSCRIPTEN_END_ASM

})({Math:Math,Int8Array:Int8Array,Int16Array:Int16Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array},{abort:ta,assert:oa,min:Oa,jsCall:function(){var a=Array.prototype.slice.call(arguments);return i.p[a[0]].apply(e,a.slice(1))},invoke_iiii:function(a,b,f,g){try{return h.dynCall_iiii(a,b,f,g)}catch(k){"number"!==typeof k&&"longjmp"!==k&&c(k),j.setThrew(1,0)}},invoke_viiiii:function(a,
b,f,g,k,n){try{h.dynCall_viiiii(a,b,f,g,k,n)}catch(m){"number"!==typeof m&&"longjmp"!==m&&c(m),j.setThrew(1,0)}},invoke_did:function(a,b,f){try{return h.dynCall_did(a,b,f)}catch(g){"number"!==typeof g&&"longjmp"!==g&&c(g),j.setThrew(1,0)}},invoke_vi:function(a,b){try{h.dynCall_vi(a,b)}catch(f){"number"!==typeof f&&"longjmp"!==f&&c(f),j.setThrew(1,0)}},invoke_diiiid:function(a,b,f,g,k,n){try{return h.dynCall_diiiid(a,b,f,g,k,n)}catch(m){"number"!==typeof m&&"longjmp"!==m&&c(m),j.setThrew(1,0)}},invoke_vii:function(a,
b,f){try{h.dynCall_vii(a,b,f)}catch(g){"number"!==typeof g&&"longjmp"!==g&&c(g),j.setThrew(1,0)}},invoke_viidii:function(a,b,f,g,k,n){try{h.dynCall_viidii(a,b,f,g,k,n)}catch(m){"number"!==typeof m&&"longjmp"!==m&&c(m),j.setThrew(1,0)}},invoke_ii:function(a,b){try{return h.dynCall_ii(a,b)}catch(f){"number"!==typeof f&&"longjmp"!==f&&c(f),j.setThrew(1,0)}},invoke_viidi:function(a,b,f,g,k){try{h.dynCall_viidi(a,b,f,g,k)}catch(n){"number"!==typeof n&&"longjmp"!==n&&c(n),j.setThrew(1,0)}},invoke_viii:function(a,
b,f,g){try{h.dynCall_viii(a,b,f,g)}catch(k){"number"!==typeof k&&"longjmp"!==k&&c(k),j.setThrew(1,0)}},invoke_v:function(a){try{h.dynCall_v(a)}catch(b){"number"!==typeof b&&"longjmp"!==b&&c(b),j.setThrew(1,0)}},invoke_viid:function(a,b,f,g){try{h.dynCall_viid(a,b,f,g)}catch(k){"number"!==typeof k&&"longjmp"!==k&&c(k),j.setThrew(1,0)}},invoke_viiiiii:function(a,b,f,g,k,n,m){try{h.dynCall_viiiiii(a,b,f,g,k,n,m)}catch(l){"number"!==typeof l&&"longjmp"!==l&&c(l),j.setThrew(1,0)}},invoke_iii:function(a,
b,f){try{return h.dynCall_iii(a,b,f)}catch(g){"number"!==typeof g&&"longjmp"!==g&&c(g),j.setThrew(1,0)}},invoke_iiiiii:function(a,b,f,g,k,n){try{return h.dynCall_iiiiii(a,b,f,g,k,n)}catch(m){"number"!==typeof m&&"longjmp"!==m&&c(m),j.setThrew(1,0)}},invoke_viiii:function(a,b,f,g,k){try{h.dynCall_viiii(a,b,f,g,k)}catch(n){"number"!==typeof n&&"longjmp"!==n&&c(n),j.setThrew(1,0)}},_cosf:Db,_send:function(a,b,f){return!d.wa(a)?(Zb($b),-1):ac(a,b,f)},_pthread_key_create:function(a){if(0==a)return 22;
Ma[a>>2]=ec;dc[ec]=0;ec++;return 0},___cxa_guard_acquire:function(a){return!Ja[a>>0]?Ja[a>>0]=1:0},___setErrNo:Zb,_vfprintf:function(a,b,f){return jc(a,b,Ma[f>>2])},_emscripten_asm_const_int:function(a){var b=Array.prototype.slice.call(arguments,1);return i.O(a,b.length).apply(e,b)|0},___assert_fail:function(a,b,f,g){za=aa;c("Assertion failed: "+sa(a)+", at: "+[b?sa(b):"unknown filename",f,g?sa(g):"unknown function"]+" at "+eb())},_atan2f:Fb,__ZSt18uncaught_exceptionv:Pb,___cxa_guard_release:function(){},
_pwrite:function(a,b,f,g){a=ua.Y(a);if(!a)return Zb($b),-1;try{return ua.write(a,Ja,b,f,g)}catch(k){return ua.$(k),-1}},_emscripten_asm_const_double:function(a){var b=Array.prototype.slice.call(arguments,1);return+i.O(a,b.length).apply(e,b)},_fprintf:jc,__reallyNegative:gc,_sbrk:mc,___cxa_begin_catch:function(a){Pb.K--;Rb.push(a);var b=Tb(a);b&&Sb[b].S++;return a},_sinf:Eb,_fileno:bc,___resumeException:function(a){Qb||(Qb=a);var b=Tb(a);b&&(Sb[b].S=0);c(a+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.")},
___cxa_find_matching_catch:Ub,_sysconf:function(a){switch(a){case 30:return 4096;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 79:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;
case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1E3;case 89:return 700;case 71:return 256;
case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"===typeof navigator?navigator.hardwareConcurrency||1:1}Zb(22);return-1},_pthread_getspecific:function(a){return dc[a]||0},_vprintf:function(a,b){return kc(a,Ma[b>>2])},_emscripten_memcpy_big:function(a,b,f){bb.set(bb.subarray(b,b+f),a);return a},_pthread_once:Wb,_printf:kc,_floorf:Ob,_sqrtf:Gb,_write:ac,___errno_location:function(){return Yb},_pthread_setspecific:function(a,
b){if(!(a in dc))return 22;dc[a]=b;return 0},_fputc:cc,___cxa_throw:function(a,b,f){Sb[a]={e:a,N:a,type:b,oa:f,S:0};Qb=a;"uncaught_exception"in Pb?Pb.K++:Pb.K=1;c(a+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.")},_abort:function(){h.abort()},_fwrite:fc,_time:function(a){var b=Date.now()/1E3|0;a&&(Ma[a>>2]=b);return b},___cxa_allocate_exception:function(a){return $a(a)},__formatString:hc,
___cxa_pure_virtual:function(){za=aa;c("Pure virtual function called!")},STACKTOP:qa,STACK_MAX:kb,tempDoublePtr:Nb,ABORT:za,NaN:NaN,Infinity:Infinity,_stderr:nc},ob),oc=h._emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0=j._emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0,pc=h._emscripten_bind_b2ContactEdge_set_next_1=j._emscripten_bind_b2ContactEdge_set_next_1,qc=h._emscripten_bind_b2ChainShape_get_m_count_0=j._emscripten_bind_b2ChainShape_get_m_count_0,rc=h._emscripten_bind_b2Fixture_SetFriction_1=
j._emscripten_bind_b2Fixture_SetFriction_1,sc=h._emscripten_bind_b2Shape_ComputeAABB_3=j._emscripten_bind_b2Shape_ComputeAABB_3,tc=h._emscripten_bind_b2FrictionJointDef_set_userData_1=j._emscripten_bind_b2FrictionJointDef_set_userData_1,uc=h._emscripten_bind_b2Vec3_get_z_0=j._emscripten_bind_b2Vec3_get_z_0,vc=h._emscripten_bind_b2World_IsLocked_0=j._emscripten_bind_b2World_IsLocked_0,wc=h._emscripten_bind_b2Draw_GetFlags_0=j._emscripten_bind_b2Draw_GetFlags_0,xc=h._emscripten_bind_b2FrictionJoint_IsActive_0=
j._emscripten_bind_b2FrictionJoint_IsActive_0,yc=h._emscripten_bind_b2Color_set_g_1=j._emscripten_bind_b2Color_set_g_1,zc=h._emscripten_bind_b2WheelJointDef_get_frequencyHz_0=j._emscripten_bind_b2WheelJointDef_get_frequencyHz_0,Ac=h._emscripten_bind_b2RopeJointDef_set_localAnchorA_1=j._emscripten_bind_b2RopeJointDef_set_localAnchorA_1,Bc=h._emscripten_bind_b2PolygonShape_RayCast_4=j._emscripten_bind_b2PolygonShape_RayCast_4,Cc=h._emscripten_bind_b2World_GetTreeBalance_0=j._emscripten_bind_b2World_GetTreeBalance_0,
Dc=h._emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0=j._emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0,Ec=h._emscripten_bind_JSDraw_DrawSolidCircle_4=j._emscripten_bind_JSDraw_DrawSolidCircle_4,Fc=h._emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0=j._emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0,Gc=h._emscripten_bind_b2FixtureDef_get_filter_0=j._emscripten_bind_b2FixtureDef_get_filter_0,Hc=h._emscripten_bind_b2FrictionJointDef_get_type_0=j._emscripten_bind_b2FrictionJointDef_get_type_0,
Ic=h._emscripten_bind_b2RevoluteJoint_GetMotorTorque_1=j._emscripten_bind_b2RevoluteJoint_GetMotorTorque_1,Jc=h._emscripten_bind_b2RayCastInput_get_p1_0=j._emscripten_bind_b2RayCastInput_get_p1_0,Kc=h._emscripten_bind_b2EdgeShape_set_m_hasVertex3_1=j._emscripten_bind_b2EdgeShape_set_m_hasVertex3_1,Lc=h._emscripten_bind_b2JointEdge_set_joint_1=j._emscripten_bind_b2JointEdge_set_joint_1,Mc=h._emscripten_enum_b2ShapeType_e_polygon=j._emscripten_enum_b2ShapeType_e_polygon,Nc=h._emscripten_bind_b2Fixture___destroy___0=
j._emscripten_bind_b2Fixture___destroy___0,Oc=h._emscripten_bind_b2PulleyJoint_SetUserData_1=j._emscripten_bind_b2PulleyJoint_SetUserData_1,Pc=h._emscripten_bind_b2World_SetWarmStarting_1=j._emscripten_bind_b2World_SetWarmStarting_1,Qc=h._emscripten_bind_JSDraw_DrawCircle_3=j._emscripten_bind_JSDraw_DrawCircle_3,Rc=h._emscripten_bind_b2WeldJoint_IsActive_0=j._emscripten_bind_b2WeldJoint_IsActive_0,Sc=h._emscripten_bind_b2DestructionListener___destroy___0=j._emscripten_bind_b2DestructionListener___destroy___0,
Tc=h._emscripten_bind_b2BodyDef_set_type_1=j._emscripten_bind_b2BodyDef_set_type_1,Uc=h._emscripten_bind_b2ChainShape_ComputeAABB_3=j._emscripten_bind_b2ChainShape_ComputeAABB_3,Vc=h._emscripten_bind_b2MouseJointDef_set_type_1=j._emscripten_bind_b2MouseJointDef_set_type_1,Wc=h._emscripten_bind_b2JointEdge_get_prev_0=j._emscripten_bind_b2JointEdge_get_prev_0,Xc=h._emscripten_bind_b2WeldJoint_GetReactionTorque_1=j._emscripten_bind_b2WeldJoint_GetReactionTorque_1,Yc=h._emscripten_bind_b2DistanceJointDef_get_userData_0=
j._emscripten_bind_b2DistanceJointDef_get_userData_0,Zc=h._emscripten_bind_b2BodyDef_get_position_0=j._emscripten_bind_b2BodyDef_get_position_0,$c=h._emscripten_bind_b2RevoluteJointDef_set_userData_1=j._emscripten_bind_b2RevoluteJointDef_set_userData_1,ad=h._emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0=j._emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0,bd=h._emscripten_bind_b2WheelJointDef_get_collideConnected_0=j._emscripten_bind_b2WheelJointDef_get_collideConnected_0,cd=h._emscripten_bind_b2MouseJointDef_set_userData_1=
j._emscripten_bind_b2MouseJointDef_set_userData_1,dd=h._emscripten_bind_JSDraw_DrawSegment_3=j._emscripten_bind_JSDraw_DrawSegment_3,ed=h._emscripten_bind_b2FixtureDef_set_restitution_1=j._emscripten_bind_b2FixtureDef_set_restitution_1,fd=h._emscripten_bind_b2EdgeShape_GetChildCount_0=j._emscripten_bind_b2EdgeShape_GetChildCount_0,gd=h._emscripten_bind_b2Mat33_get_ey_0=j._emscripten_bind_b2Mat33_get_ey_0,hd=h._emscripten_bind_b2MouseJoint_IsActive_0=j._emscripten_bind_b2MouseJoint_IsActive_0,id=h._emscripten_bind_b2World_GetGravity_0=
j._emscripten_bind_b2World_GetGravity_0,jd=h._emscripten_bind_b2World_DrawDebugData_0=j._emscripten_bind_b2World_DrawDebugData_0,kd=h._emscripten_bind_b2Profile_get_broadphase_0=j._emscripten_bind_b2Profile_get_broadphase_0,ld=h._emscripten_bind_b2PulleyJointDef_get_bodyA_0=j._emscripten_bind_b2PulleyJointDef_get_bodyA_0,md=h._emscripten_bind_b2PrismaticJoint_SetLimits_2=j._emscripten_bind_b2PrismaticJoint_SetLimits_2,nd=h._emscripten_bind_b2PulleyJointDef_get_localAnchorA_0=j._emscripten_bind_b2PulleyJointDef_get_localAnchorA_0,
od=h._emscripten_bind_b2DistanceJoint_GetAnchorA_0=j._emscripten_bind_b2DistanceJoint_GetAnchorA_0,pd=h._emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1=j._emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1,qd=h._emscripten_bind_b2DistanceJointDef_set_dampingRatio_1=j._emscripten_bind_b2DistanceJointDef_set_dampingRatio_1,rd=h._emscripten_bind_b2RopeJointDef_set_collideConnected_1=j._emscripten_bind_b2RopeJointDef_set_collideConnected_1,sd=h._emscripten_bind_b2CircleShape_set_m_p_1=j._emscripten_bind_b2CircleShape_set_m_p_1,
td=h._emscripten_bind_JSContactListener_EndContact_1=j._emscripten_bind_JSContactListener_EndContact_1,ud=h._emscripten_bind_b2MassData_set_mass_1=j._emscripten_bind_b2MassData_set_mass_1,vd=h._emscripten_bind_b2Vec3_get_x_0=j._emscripten_bind_b2Vec3_get_x_0,wd=h._emscripten_bind_b2ChainShape_CreateChain_2=j._emscripten_bind_b2ChainShape_CreateChain_2,xd=h._emscripten_bind_b2Color_get_r_0=j._emscripten_bind_b2Color_get_r_0,yd=h._emscripten_bind_b2World_DestroyBody_1=j._emscripten_bind_b2World_DestroyBody_1,
zd=h._emscripten_bind_b2Profile_get_solvePosition_0=j._emscripten_bind_b2Profile_get_solvePosition_0,Ad=h._emscripten_bind_b2Shape_RayCast_4=j._emscripten_bind_b2Shape_RayCast_4,Bd=h._emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0=j._emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0,Cd=h._emscripten_bind_b2Mat33___destroy___0=j._emscripten_bind_b2Mat33___destroy___0,Dd=h._emscripten_bind_b2GearJoint_GetReactionTorque_1=j._emscripten_bind_b2GearJoint_GetReactionTorque_1,Ed=h._emscripten_bind_b2WeldJointDef_set_collideConnected_1=
j._emscripten_bind_b2WeldJointDef_set_collideConnected_1,Fd=h._emscripten_bind_b2Manifold_get_type_0=j._emscripten_bind_b2Manifold_get_type_0,Gd=h._emscripten_bind_b2RevoluteJoint___destroy___0=j._emscripten_bind_b2RevoluteJoint___destroy___0,Hd=h._emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0=j._emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0,Id=h._emscripten_bind_b2World_SetAutoClearForces_1=j._emscripten_bind_b2World_SetAutoClearForces_1,Jd=h._emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1=
j._emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1,Kd=h._emscripten_bind_b2BodyDef_set_position_1=j._emscripten_bind_b2BodyDef_set_position_1,Ld=h._emscripten_bind_b2Transform_get_q_0=j._emscripten_bind_b2Transform_get_q_0,Md=h._emscripten_bind_b2FrictionJoint_GetMaxForce_0=j._emscripten_bind_b2FrictionJoint_GetMaxForce_0,Nd=h._emscripten_bind_b2RevoluteJoint_GetType_0=j._emscripten_bind_b2RevoluteJoint_GetType_0,Od=h._emscripten_bind_b2Contact_GetNext_0=j._emscripten_bind_b2Contact_GetNext_0,
Pd=h._emscripten_bind_b2EdgeShape_get_m_type_0=j._emscripten_bind_b2EdgeShape_get_m_type_0,Qd=h._emscripten_bind_b2GearJoint_GetJoint1_0=j._emscripten_bind_b2GearJoint_GetJoint1_0,Rd=h._emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0=j._emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0,Sd=h._emscripten_enum_b2ContactFeatureType_e_face=j._emscripten_enum_b2ContactFeatureType_e_face,Td=h._emscripten_bind_b2GearJoint_GetAnchorA_0=j._emscripten_bind_b2GearJoint_GetAnchorA_0,Ud=h._emscripten_enum_b2JointType_e_mouseJoint=
j._emscripten_enum_b2JointType_e_mouseJoint,Vd=h._emscripten_bind_b2MouseJointDef_set_bodyA_1=j._emscripten_bind_b2MouseJointDef_set_bodyA_1,Wd=h._emscripten_enum_b2JointType_e_revoluteJoint=j._emscripten_enum_b2JointType_e_revoluteJoint,Xd=h._emscripten_bind_b2World_SetContactListener_1=j._emscripten_bind_b2World_SetContactListener_1,Yd=h._emscripten_bind_b2Body_IsAwake_0=j._emscripten_bind_b2Body_IsAwake_0,Zd=h._emscripten_bind_b2JointEdge_set_other_1=j._emscripten_bind_b2JointEdge_set_other_1,
$d=h._emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0=j._emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0,ae=h._emscripten_bind_b2MouseJointDef_set_target_1=j._emscripten_bind_b2MouseJointDef_set_target_1,be=h._emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0=j._emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0,ce=h._emscripten_bind_b2FixtureDef_get_density_0=j._emscripten_bind_b2FixtureDef_get_density_0,de=h._emscripten_bind_b2ChainShape_set_m_vertices_1=j._emscripten_bind_b2ChainShape_set_m_vertices_1,
ee=h._emscripten_bind_b2ChainShape_get_m_vertices_0=j._emscripten_bind_b2ChainShape_get_m_vertices_0,fe=h._emscripten_bind_b2Rot_set_s_1=j._emscripten_bind_b2Rot_set_s_1,ge=h._emscripten_bind_b2RevoluteJoint_GetUpperLimit_0=j._emscripten_bind_b2RevoluteJoint_GetUpperLimit_0,he=h._emscripten_bind_b2WheelJointDef_set_bodyB_1=j._emscripten_bind_b2WheelJointDef_set_bodyB_1,ie=h._emscripten_bind_b2WheelJointDef_set_enableMotor_1=j._emscripten_bind_b2WheelJointDef_set_enableMotor_1,je=h._emscripten_bind_b2FixtureDef_get_userData_0=
j._emscripten_bind_b2FixtureDef_get_userData_0,ke=h._emscripten_bind_b2FrictionJointDef_set_collideConnected_1=j._emscripten_bind_b2FrictionJointDef_set_collideConnected_1,le=h._emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0=j._emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0,me=h._emscripten_bind_b2GearJoint_GetCollideConnected_0=j._emscripten_bind_b2GearJoint_GetCollideConnected_0,ne=h._emscripten_bind_b2RevoluteJointDef_get_upperAngle_0=j._emscripten_bind_b2RevoluteJointDef_get_upperAngle_0,
oe=h._emscripten_enum_b2JointType_e_frictionJoint=j._emscripten_enum_b2JointType_e_frictionJoint,pe=h._emscripten_bind_b2RayCastOutput_set_fraction_1=j._emscripten_bind_b2RayCastOutput_set_fraction_1,qe=h._emscripten_bind_b2Color_set_r_1=j._emscripten_bind_b2Color_set_r_1,re=h._emscripten_bind_b2DistanceJointDef_get_length_0=j._emscripten_bind_b2DistanceJointDef_get_length_0,se=h._emscripten_bind_b2PulleyJoint_GetBodyB_0=j._emscripten_bind_b2PulleyJoint_GetBodyB_0,te=h._emscripten_bind_b2WheelJointDef_set_type_1=
j._emscripten_bind_b2WheelJointDef_set_type_1,ue=h._emscripten_bind_b2World_GetTreeQuality_0=j._emscripten_bind_b2World_GetTreeQuality_0,ve=h._emscripten_bind_b2BodyDef_set_gravityScale_1=j._emscripten_bind_b2BodyDef_set_gravityScale_1,we=h._emscripten_bind_b2RopeJointDef_set_bodyB_1=j._emscripten_bind_b2RopeJointDef_set_bodyB_1,xe=h._emscripten_bind_b2PrismaticJoint_GetLowerLimit_0=j._emscripten_bind_b2PrismaticJoint_GetLowerLimit_0,ye=h._emscripten_bind_b2AABB_get_lowerBound_0=j._emscripten_bind_b2AABB_get_lowerBound_0,
ze=h._emscripten_bind_b2WheelJoint_SetMotorSpeed_1=j._emscripten_bind_b2WheelJoint_SetMotorSpeed_1,Ae=h._emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0=j._emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0,Be=h._emscripten_bind_b2Body_SetMassData_1=j._emscripten_bind_b2Body_SetMassData_1,Ce=h._emscripten_bind_b2BodyDef_get_angularVelocity_0=j._emscripten_bind_b2BodyDef_get_angularVelocity_0,De=h._emscripten_bind_b2WeldJoint_SetDampingRatio_1=j._emscripten_bind_b2WeldJoint_SetDampingRatio_1,
Ee=h._emscripten_bind_b2PrismaticJointDef___destroy___0=j._emscripten_bind_b2PrismaticJointDef___destroy___0,Fe=h._emscripten_bind_b2Contact_IsTouching_0=j._emscripten_bind_b2Contact_IsTouching_0,Ge=h._emscripten_bind_b2Draw_SetFlags_1=j._emscripten_bind_b2Draw_SetFlags_1,He=h._emscripten_bind_b2AABB_Contains_1=j._emscripten_bind_b2AABB_Contains_1,Ie=h._emscripten_bind_b2DistanceJoint_GetNext_0=j._emscripten_bind_b2DistanceJoint_GetNext_0,Je=h._emscripten_bind_b2GearJoint_GetReactionForce_1=j._emscripten_bind_b2GearJoint_GetReactionForce_1,
Ke=h._emscripten_bind_b2PrismaticJoint_GetNext_0=j._emscripten_bind_b2PrismaticJoint_GetNext_0,Le=h._emscripten_bind_b2Filter_get_groupIndex_0=j._emscripten_bind_b2Filter_get_groupIndex_0,Me=h._emscripten_bind_b2PrismaticJoint_GetType_0=j._emscripten_bind_b2PrismaticJoint_GetType_0,Ne=h._emscripten_bind_b2Fixture_GetRestitution_0=j._emscripten_bind_b2Fixture_GetRestitution_0,Oe=h._emscripten_bind_b2Transform_set_q_1=j._emscripten_bind_b2Transform_set_q_1,Pe=h._emscripten_bind_b2PolygonShape___destroy___0=
j._emscripten_bind_b2PolygonShape___destroy___0,Qe=h._emscripten_bind_b2AABB_get_upperBound_0=j._emscripten_bind_b2AABB_get_upperBound_0,Re=h._emscripten_bind_b2Transform___destroy___0=j._emscripten_bind_b2Transform___destroy___0,Se=h._emscripten_bind_b2WeldJointDef_set_localAnchorB_1=j._emscripten_bind_b2WeldJointDef_set_localAnchorB_1,Te=h._emscripten_bind_b2CircleShape_set_m_radius_1=j._emscripten_bind_b2CircleShape_set_m_radius_1,Ue=h._emscripten_bind_b2EdgeShape_set_m_hasVertex0_1=j._emscripten_bind_b2EdgeShape_set_m_hasVertex0_1,
Ve=h._emscripten_bind_b2RopeJoint_GetMaxLength_0=j._emscripten_bind_b2RopeJoint_GetMaxLength_0,We=h._emscripten_bind_b2GearJoint_GetUserData_0=j._emscripten_bind_b2GearJoint_GetUserData_0,Xe=h._emscripten_bind_b2GearJointDef_set_type_1=j._emscripten_bind_b2GearJointDef_set_type_1,Ye=h._emscripten_bind_b2DistanceJoint_SetDampingRatio_1=j._emscripten_bind_b2DistanceJoint_SetDampingRatio_1,Ze=h._emscripten_bind_b2Contact_GetFixtureA_0=j._emscripten_bind_b2Contact_GetFixtureA_0,$e=h._emscripten_bind_b2QueryCallback___destroy___0=
j._emscripten_bind_b2QueryCallback___destroy___0,af=h._emscripten_bind_b2PulleyJointDef_get_ratio_0=j._emscripten_bind_b2PulleyJointDef_get_ratio_0,bf=h._emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0=j._emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0,cf=h._emscripten_bind_b2CircleShape_set_m_type_1=j._emscripten_bind_b2CircleShape_set_m_type_1,df=h._emscripten_enum_b2ShapeType_e_typeCount=j._emscripten_enum_b2ShapeType_e_typeCount,ef=h._emscripten_bind_b2Body_SetTransform_2=j._emscripten_bind_b2Body_SetTransform_2,
ff=h._emscripten_bind_b2RopeJoint_GetAnchorB_0=j._emscripten_bind_b2RopeJoint_GetAnchorB_0,gf=h._emscripten_bind_b2AABB_set_upperBound_1=j._emscripten_bind_b2AABB_set_upperBound_1,hf=h._emscripten_bind_b2MouseJointDef_get_collideConnected_0=j._emscripten_bind_b2MouseJointDef_get_collideConnected_0,jf=h._emscripten_bind_b2ContactImpulse___destroy___0=j._emscripten_bind_b2ContactImpulse___destroy___0,kf=h._emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0=j._emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0,
lf=h._emscripten_bind_b2Vec2_set_x_1=j._emscripten_bind_b2Vec2_set_x_1,mf=h._emscripten_bind_b2RayCastInput___destroy___0=j._emscripten_bind_b2RayCastInput___destroy___0,nf=h._emscripten_bind_JSDestructionListener_JSDestructionListener_0=j._emscripten_bind_JSDestructionListener_JSDestructionListener_0,of=h._emscripten_bind_b2WheelJointDef_set_localAnchorA_1=j._emscripten_bind_b2WheelJointDef_set_localAnchorA_1,pf=h._emscripten_bind_b2FrictionJoint_GetBodyB_0=j._emscripten_bind_b2FrictionJoint_GetBodyB_0,
qf=h._emscripten_bind_b2WeldJointDef_set_bodyA_1=j._emscripten_bind_b2WeldJointDef_set_bodyA_1,rf=h._emscripten_bind_b2World_SetDestructionListener_1=j._emscripten_bind_b2World_SetDestructionListener_1,sf=h._emscripten_bind_b2RevoluteJoint_GetJointSpeed_0=j._emscripten_bind_b2RevoluteJoint_GetJointSpeed_0,tf=h._emscripten_bind_b2WheelJoint_GetLocalAnchorB_0=j._emscripten_bind_b2WheelJoint_GetLocalAnchorB_0,uf=h._emscripten_bind_b2JointDef___destroy___0=j._emscripten_bind_b2JointDef___destroy___0,
vf=h._emscripten_bind_b2PrismaticJointDef_Initialize_4=j._emscripten_bind_b2PrismaticJointDef_Initialize_4,wf=h._emscripten_bind_b2FrictionJointDef_get_localAnchorA_0=j._emscripten_bind_b2FrictionJointDef_get_localAnchorA_0,xf=h._emscripten_bind_b2CircleShape_GetChildCount_0=j._emscripten_bind_b2CircleShape_GetChildCount_0,yf=h._emscripten_bind_b2BodyDef_get_bullet_0=j._emscripten_bind_b2BodyDef_get_bullet_0,zf=h._emscripten_bind_b2ManifoldPoint_get_localPoint_0=j._emscripten_bind_b2ManifoldPoint_get_localPoint_0,
Af=h._emscripten_bind_b2PrismaticJointDef_get_type_0=j._emscripten_bind_b2PrismaticJointDef_get_type_0,Bf=h._emscripten_bind_b2MassData_get_center_0=j._emscripten_bind_b2MassData_get_center_0,Cf=h._emscripten_bind_b2World_b2World_1=j._emscripten_bind_b2World_b2World_1,Df=h._emscripten_bind_b2WheelJoint_GetReactionForce_1=j._emscripten_bind_b2WheelJoint_GetReactionForce_1,Ef=h._emscripten_bind_b2World_SetSubStepping_1=j._emscripten_bind_b2World_SetSubStepping_1,Ff=h._emscripten_bind_b2Vec2_op_add_1=
j._emscripten_bind_b2Vec2_op_add_1,Gf=h._emscripten_bind_b2Joint_GetBodyA_0=j._emscripten_bind_b2Joint_GetBodyA_0,Hf=h._emscripten_bind_b2Joint_GetCollideConnected_0=j._emscripten_bind_b2Joint_GetCollideConnected_0,If=h._emscripten_bind_b2WheelJoint_IsMotorEnabled_0=j._emscripten_bind_b2WheelJoint_IsMotorEnabled_0,Jf=h._emscripten_bind_b2WheelJointDef___destroy___0=j._emscripten_bind_b2WheelJointDef___destroy___0,Kf=h._emscripten_bind_b2Vec3_SetZero_0=j._emscripten_bind_b2Vec3_SetZero_0,Lf=h._emscripten_enum_b2JointType_e_pulleyJoint=
j._emscripten_enum_b2JointType_e_pulleyJoint,Mf=h._emscripten_bind_b2ChainShape_get_m_nextVertex_0=j._emscripten_bind_b2ChainShape_get_m_nextVertex_0,Nf=h._emscripten_bind_b2Contact_SetEnabled_1=j._emscripten_bind_b2Contact_SetEnabled_1,Of=h._emscripten_bind_b2Shape_set_m_radius_1=j._emscripten_bind_b2Shape_set_m_radius_1,Pf=h._emscripten_bind_b2GearJointDef_get_joint2_0=j._emscripten_bind_b2GearJointDef_get_joint2_0,Qf=h._emscripten_bind_b2World_SetDebugDraw_1=j._emscripten_bind_b2World_SetDebugDraw_1,
Rf=h._emscripten_bind_b2ContactID_set_key_1=j._emscripten_bind_b2ContactID_set_key_1,Sf=h._emscripten_bind_b2RevoluteJointDef_set_collideConnected_1=j._emscripten_bind_b2RevoluteJointDef_set_collideConnected_1,$a=h._malloc=j._malloc,Tf=h._emscripten_bind_b2World_GetProxyCount_0=j._emscripten_bind_b2World_GetProxyCount_0,Uf=h._emscripten_bind_b2Vec2_Normalize_0=j._emscripten_bind_b2Vec2_Normalize_0,Vf=h._emscripten_bind_b2WheelJoint_GetJointSpeed_0=j._emscripten_bind_b2WheelJoint_GetJointSpeed_0,Wf=
h._emscripten_bind_b2FrictionJointDef_set_localAnchorA_1=j._emscripten_bind_b2FrictionJointDef_set_localAnchorA_1,Xf=h._emscripten_bind_b2GearJoint_GetRatio_0=j._emscripten_bind_b2GearJoint_GetRatio_0,Yf=h._emscripten_bind_JSRayCastCallback_JSRayCastCallback_0=j._emscripten_bind_JSRayCastCallback_JSRayCastCallback_0,Zf=h._emscripten_bind_b2RayCastInput_set_p2_1=j._emscripten_bind_b2RayCastInput_set_p2_1,$f=h._emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0=j._emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0,
ag=h._emscripten_bind_b2RayCastOutput_get_normal_0=j._emscripten_bind_b2RayCastOutput_get_normal_0,bg=h._emscripten_bind_b2WeldJoint_GetBodyA_0=j._emscripten_bind_b2WeldJoint_GetBodyA_0,cg=h._emscripten_enum_b2DrawFlag_e_jointBit=j._emscripten_enum_b2DrawFlag_e_jointBit,dg=h._emscripten_bind_b2FixtureDef_get_isSensor_0=j._emscripten_bind_b2FixtureDef_get_isSensor_0,eg=h._emscripten_bind_b2PulleyJointDef_set_bodyB_1=j._emscripten_bind_b2PulleyJointDef_set_bodyB_1,fg=h._emscripten_bind_b2WheelJoint_EnableMotor_1=
j._emscripten_bind_b2WheelJoint_EnableMotor_1,gg=h._emscripten_bind_b2WheelJoint_GetLocalAnchorA_0=j._emscripten_bind_b2WheelJoint_GetLocalAnchorA_0,hg=h._emscripten_bind_JSDraw_DrawSolidPolygon_3=j._emscripten_bind_JSDraw_DrawSolidPolygon_3,ig=h._emscripten_bind_b2Rot_Set_1=j._emscripten_bind_b2Rot_Set_1,jg=h._emscripten_bind_b2RevoluteJoint_GetJointAngle_0=j._emscripten_bind_b2RevoluteJoint_GetJointAngle_0,kg=h._emscripten_bind_JSDraw___destroy___0=j._emscripten_bind_JSDraw___destroy___0,lg=h._emscripten_bind_b2MouseJointDef___destroy___0=
j._emscripten_bind_b2MouseJointDef___destroy___0,mg=h._emscripten_bind_b2Mat33_Solve22_1=j._emscripten_bind_b2Mat33_Solve22_1,ng=h._emscripten_bind_b2Profile_set_solvePosition_1=j._emscripten_bind_b2Profile_set_solvePosition_1,og=h._emscripten_bind_b2ContactFilter___destroy___0=j._emscripten_bind_b2ContactFilter___destroy___0,pg=h._emscripten_bind_b2PulleyJointDef_get_localAnchorB_0=j._emscripten_bind_b2PulleyJointDef_get_localAnchorB_0,qg=h._emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1=j._emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1,
rg=h._emscripten_bind_b2PrismaticJoint___destroy___0=j._emscripten_bind_b2PrismaticJoint___destroy___0,sg=h._emscripten_bind_b2World_CreateJoint_1=j._emscripten_bind_b2World_CreateJoint_1,tg=h._emscripten_bind_b2Profile_get_solveTOI_0=j._emscripten_bind_b2Profile_get_solveTOI_0,ug=h._emscripten_bind_b2ManifoldPoint_get_id_0=j._emscripten_bind_b2ManifoldPoint_get_id_0,vg=h._emscripten_bind_JSContactFilter_JSContactListener_0=j._emscripten_bind_JSContactFilter_JSContactListener_0,wg=h._emscripten_bind_b2Manifold_set_pointCount_1=
j._emscripten_bind_b2Manifold_set_pointCount_1,xg=h._emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0=j._emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0,yg=h._emscripten_bind_b2Body_SetSleepingAllowed_1=j._emscripten_bind_b2Body_SetSleepingAllowed_1,zg=h._emscripten_bind_b2Rot_SetIdentity_0=j._emscripten_bind_b2Rot_SetIdentity_0,Ag=h._emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0=j._emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0,Bg=h._emscripten_bind_b2Vec3_op_add_1=j._emscripten_bind_b2Vec3_op_add_1,
Cg=h._emscripten_bind_b2FrictionJoint_GetType_0=j._emscripten_bind_b2FrictionJoint_GetType_0,Dg=h._emscripten_bind_b2MouseJoint_SetTarget_1=j._emscripten_bind_b2MouseJoint_SetTarget_1,Eg=h._emscripten_bind_b2MouseJointDef_get_dampingRatio_0=j._emscripten_bind_b2MouseJointDef_get_dampingRatio_0,Fg=h._emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0=j._emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0,Gg=h._emscripten_bind_b2ChainShape_set_m_type_1=j._emscripten_bind_b2ChainShape_set_m_type_1,Hg=h._emscripten_bind_b2RevoluteJointDef_set_bodyB_1=
j._emscripten_bind_b2RevoluteJointDef_set_bodyB_1,Ig=h._emscripten_bind_b2Body_GetGravityScale_0=j._emscripten_bind_b2Body_GetGravityScale_0,Jg=h._emscripten_bind_b2Mat33_b2Mat33_0=j._emscripten_bind_b2Mat33_b2Mat33_0,Kg=h._emscripten_bind_b2MouseJointDef_get_bodyB_0=j._emscripten_bind_b2MouseJointDef_get_bodyB_0,Lg=h._emscripten_bind_b2Shape_TestPoint_2=j._emscripten_bind_b2Shape_TestPoint_2,Mg=h._emscripten_bind_b2Body_GetWorldVector_1=j._emscripten_bind_b2Body_GetWorldVector_1,Ng=h._emscripten_bind_b2WeldJointDef_get_frequencyHz_0=
j._emscripten_bind_b2WeldJointDef_get_frequencyHz_0,Og=h._emscripten_bind_b2PolygonShape_Set_2=j._emscripten_bind_b2PolygonShape_Set_2,Pg=h._emscripten_bind_b2Manifold___destroy___0=j._emscripten_bind_b2Manifold___destroy___0,Qg=h._emscripten_bind_b2PulleyJointDef_set_lengthA_1=j._emscripten_bind_b2PulleyJointDef_set_lengthA_1,Rg=h._emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1=j._emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1,Sg=h._emscripten_bind_b2GearJoint___destroy___0=j._emscripten_bind_b2GearJoint___destroy___0,
Tg=h._emscripten_bind_b2PulleyJointDef_set_ratio_1=j._emscripten_bind_b2PulleyJointDef_set_ratio_1,Ug=h._emscripten_bind_b2JointEdge_set_prev_1=j._emscripten_bind_b2JointEdge_set_prev_1,Vg=h._emscripten_bind_b2PrismaticJoint_GetReactionTorque_1=j._emscripten_bind_b2PrismaticJoint_GetReactionTorque_1,Wg=h._emscripten_bind_b2Body_GetLocalPoint_1=j._emscripten_bind_b2Body_GetLocalPoint_1,Xg=h._emscripten_bind_b2PrismaticJoint_GetCollideConnected_0=j._emscripten_bind_b2PrismaticJoint_GetCollideConnected_0,
Yg=h._emscripten_bind_b2RopeJointDef_get_userData_0=j._emscripten_bind_b2RopeJointDef_get_userData_0,Zg=h._emscripten_bind_b2DistanceJoint_IsActive_0=j._emscripten_bind_b2DistanceJoint_IsActive_0,$g=h._emscripten_bind_b2Vec2_b2Vec2_2=j._emscripten_bind_b2Vec2_b2Vec2_2,ah=h._emscripten_bind_b2PrismaticJoint_GetJointTranslation_0=j._emscripten_bind_b2PrismaticJoint_GetJointTranslation_0,bh=h._emscripten_bind_b2Vec2_b2Vec2_0=j._emscripten_bind_b2Vec2_b2Vec2_0,ch=h._emscripten_bind_b2DistanceJoint_GetAnchorB_0=
j._emscripten_bind_b2DistanceJoint_GetAnchorB_0,dh=h._emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0=j._emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0,eh=h._emscripten_bind_b2Vec2_op_sub_1=j._emscripten_bind_b2Vec2_op_sub_1,fh=h._emscripten_bind_b2CircleShape_get_m_p_0=j._emscripten_bind_b2CircleShape_get_m_p_0,gh=h._emscripten_bind_b2ContactFeature_get_indexA_0=j._emscripten_bind_b2ContactFeature_get_indexA_0,hh=h._emscripten_bind_b2ChainShape_set_m_nextVertex_1=j._emscripten_bind_b2ChainShape_set_m_nextVertex_1,
ih=h._emscripten_bind_b2PulleyJoint_GetCollideConnected_0=j._emscripten_bind_b2PulleyJoint_GetCollideConnected_0,jh=h._emscripten_bind_b2PulleyJoint_GetAnchorB_0=j._emscripten_bind_b2PulleyJoint_GetAnchorB_0,kh=h._emscripten_bind_b2Mat33_get_ex_0=j._emscripten_bind_b2Mat33_get_ex_0,lh=h._emscripten_bind_b2Body_GetPosition_0=j._emscripten_bind_b2Body_GetPosition_0,mh=h._emscripten_bind_b2Profile___destroy___0=j._emscripten_bind_b2Profile___destroy___0,nh=h._emscripten_bind_b2ContactEdge_get_prev_0=
j._emscripten_bind_b2ContactEdge_get_prev_0,oh=h._emscripten_bind_b2DistanceJoint_SetFrequency_1=j._emscripten_bind_b2DistanceJoint_SetFrequency_1,ph=h._emscripten_enum_b2ShapeType_e_chain=j._emscripten_enum_b2ShapeType_e_chain,qh=h._emscripten_enum_b2ContactFeatureType_e_vertex=j._emscripten_enum_b2ContactFeatureType_e_vertex,rh=h._emscripten_bind_b2Fixture_GetBody_0=j._emscripten_bind_b2Fixture_GetBody_0,sh=h._emscripten_bind_b2Body_ApplyForceToCenter_1=j._emscripten_bind_b2Body_ApplyForceToCenter_1,
th=h._emscripten_bind_b2ContactImpulse_set_count_1=j._emscripten_bind_b2ContactImpulse_set_count_1,uh=h._emscripten_bind_b2PulleyJointDef_get_bodyB_0=j._emscripten_bind_b2PulleyJointDef_get_bodyB_0,vh=h._emscripten_bind_b2Rot_set_c_1=j._emscripten_bind_b2Rot_set_c_1,wh=h._emscripten_bind_b2RevoluteJoint_GetReactionTorque_1=j._emscripten_bind_b2RevoluteJoint_GetReactionTorque_1,xh=h._emscripten_bind_b2Fixture_SetDensity_1=j._emscripten_bind_b2Fixture_SetDensity_1,yh=h._emscripten_bind_b2ChainShape_get_m_prevVertex_0=
j._emscripten_bind_b2ChainShape_get_m_prevVertex_0,zh=h._emscripten_bind_b2World_ClearForces_0=j._emscripten_bind_b2World_ClearForces_0,Ah=h._emscripten_bind_b2Vec3___destroy___0=j._emscripten_bind_b2Vec3___destroy___0,Bh=h._emscripten_bind_b2WheelJointDef_set_userData_1=j._emscripten_bind_b2WheelJointDef_set_userData_1,Ch=h._emscripten_bind_b2WeldJoint_SetFrequency_1=j._emscripten_bind_b2WeldJoint_SetFrequency_1,Dh=h._emscripten_bind_JSContactListener_PreSolve_2=j._emscripten_bind_JSContactListener_PreSolve_2,
Eh=h._emscripten_bind_b2Body_SetFixedRotation_1=j._emscripten_bind_b2Body_SetFixedRotation_1,Fh=h._emscripten_bind_b2RayCastOutput_set_normal_1=j._emscripten_bind_b2RayCastOutput_set_normal_1,Gh=h._emscripten_bind_b2DistanceJoint_GetDampingRatio_0=j._emscripten_bind_b2DistanceJoint_GetDampingRatio_0,Hh=h._emscripten_bind_b2WeldJointDef_set_userData_1=j._emscripten_bind_b2WeldJointDef_set_userData_1,Ih=h._emscripten_bind_b2Body_GetMassData_1=j._emscripten_bind_b2Body_GetMassData_1,Jh=h._emscripten_bind_b2Body_ApplyAngularImpulse_1=
j._emscripten_bind_b2Body_ApplyAngularImpulse_1,Kh=h._emscripten_bind_b2MouseJointDef_set_bodyB_1=j._emscripten_bind_b2MouseJointDef_set_bodyB_1,Lh=h._emscripten_bind_b2CircleShape_GetType_0=j._emscripten_bind_b2CircleShape_GetType_0,Mh=h._emscripten_bind_b2PolygonShape_GetType_0=j._emscripten_bind_b2PolygonShape_GetType_0,Nh=h._emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1=j._emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1,Oh=h._emscripten_bind_b2RopeJointDef_get_collideConnected_0=
j._emscripten_bind_b2RopeJointDef_get_collideConnected_0,Ph=h._emscripten_bind_b2FixtureDef_set_filter_1=j._emscripten_bind_b2FixtureDef_set_filter_1,Qh=h._emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0=j._emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0,Rh=h._emscripten_bind_b2Fixture_SetFilterData_1=j._emscripten_bind_b2Fixture_SetFilterData_1,Sh=h._emscripten_bind_b2FrictionJointDef_get_userData_0=j._emscripten_bind_b2FrictionJointDef_get_userData_0,Th=h._emscripten_bind_b2RayCastCallback___destroy___0=
j._emscripten_bind_b2RayCastCallback___destroy___0,Uh=h._emscripten_bind_b2PulleyJointDef_set_localAnchorA_1=j._emscripten_bind_b2PulleyJointDef_set_localAnchorA_1,Vh=h._emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0=j._emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0,Wh=h._emscripten_bind_b2WheelJoint_GetAnchorA_0=j._emscripten_bind_b2WheelJoint_GetAnchorA_0,Xh=h._emscripten_bind_b2Transform_Set_2=j._emscripten_bind_b2Transform_Set_2,Yh=h._emscripten_bind_b2RopeJointDef_get_localAnchorA_0=j._emscripten_bind_b2RopeJointDef_get_localAnchorA_0,
Zh=h._emscripten_bind_b2ContactEdge_set_contact_1=j._emscripten_bind_b2ContactEdge_set_contact_1,$h=h._emscripten_bind_b2RevoluteJointDef_get_enableLimit_0=j._emscripten_bind_b2RevoluteJointDef_get_enableLimit_0,ai=h._emscripten_bind_b2CircleShape_get_m_radius_0=j._emscripten_bind_b2CircleShape_get_m_radius_0,bi=h._emscripten_bind_b2RevoluteJoint_GetUserData_0=j._emscripten_bind_b2RevoluteJoint_GetUserData_0,ci=h._emscripten_bind_b2Profile_set_solveTOI_1=j._emscripten_bind_b2Profile_set_solveTOI_1,
di=h._emscripten_bind_b2PrismaticJointDef_set_type_1=j._emscripten_bind_b2PrismaticJointDef_set_type_1,ei=h._emscripten_bind_b2GearJointDef_get_userData_0=j._emscripten_bind_b2GearJointDef_get_userData_0,fi=h._emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1=j._emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1,gi=h._emscripten_bind_b2FrictionJointDef___destroy___0=j._emscripten_bind_b2FrictionJointDef___destroy___0,hi=h._emscripten_bind_b2PrismaticJoint_GetReactionForce_1=j._emscripten_bind_b2PrismaticJoint_GetReactionForce_1,
ii=h._emscripten_bind_b2Transform_b2Transform_0=j._emscripten_bind_b2Transform_b2Transform_0,ji=h._emscripten_bind_b2MouseJoint_GetCollideConnected_0=j._emscripten_bind_b2MouseJoint_GetCollideConnected_0,ki=h._emscripten_enum_b2LimitState_e_equalLimits=j._emscripten_enum_b2LimitState_e_equalLimits,li=h._emscripten_bind_b2ManifoldPoint_set_normalImpulse_1=j._emscripten_bind_b2ManifoldPoint_set_normalImpulse_1,mi=h._emscripten_bind_b2Body_GetContactList_0=j._emscripten_bind_b2Body_GetContactList_0,
ni=h._emscripten_bind_b2Body_IsFixedRotation_0=j._emscripten_bind_b2Body_IsFixedRotation_0,oi=h._emscripten_enum_b2DrawFlag_e_shapeBit=j._emscripten_enum_b2DrawFlag_e_shapeBit,pi=h._emscripten_bind_b2Contact_GetFriction_0=j._emscripten_bind_b2Contact_GetFriction_0,qi=h._emscripten_bind_b2WheelJoint_GetAnchorB_0=j._emscripten_bind_b2WheelJoint_GetAnchorB_0,ri=h._emscripten_bind_b2DistanceJointDef_set_length_1=j._emscripten_bind_b2DistanceJointDef_set_length_1,si=h._emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0=
j._emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0,ti=h._emscripten_bind_b2Mat33_set_ey_1=j._emscripten_bind_b2Mat33_set_ey_1,ui=h._emscripten_bind_b2DistanceJointDef_get_type_0=j._emscripten_bind_b2DistanceJointDef_get_type_0,vi=h._emscripten_bind_b2Draw_ClearFlags_1=j._emscripten_bind_b2Draw_ClearFlags_1,wi=h._emscripten_bind_b2Body_IsActive_0=j._emscripten_bind_b2Body_IsActive_0,xi=h._emscripten_bind_b2Contact_ResetRestitution_0=j._emscripten_bind_b2Contact_ResetRestitution_0,yi=h._emscripten_bind_b2World_GetAllowSleeping_0=
j._emscripten_bind_b2World_GetAllowSleeping_0,zi=h._emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0=j._emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0,Ai=h._emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1=j._emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1,Bi=h._emscripten_bind_b2GearJointDef_set_bodyA_1=j._emscripten_bind_b2GearJointDef_set_bodyA_1,Ci=h._emscripten_bind_b2RevoluteJointDef_set_enableMotor_1=j._emscripten_bind_b2RevoluteJointDef_set_enableMotor_1,Di=h._emscripten_bind_b2PulleyJoint_IsActive_0=
j._emscripten_bind_b2PulleyJoint_IsActive_0,Ei=h._emscripten_bind_b2MouseJoint_GetNext_0=j._emscripten_bind_b2MouseJoint_GetNext_0,Fi=h._emscripten_bind_b2Transform_set_p_1=j._emscripten_bind_b2Transform_set_p_1,Gi=h._emscripten_bind_b2EdgeShape_set_m_vertex0_1=j._emscripten_bind_b2EdgeShape_set_m_vertex0_1,Hi=h._emscripten_bind_b2PulleyJointDef_get_lengthB_0=j._emscripten_bind_b2PulleyJointDef_get_lengthB_0,Ii=h._emscripten_bind_b2WeldJoint_SetUserData_1=j._emscripten_bind_b2WeldJoint_SetUserData_1,
Ji=h._emscripten_bind_b2Fixture_SetSensor_1=j._emscripten_bind_b2Fixture_SetSensor_1,Ki=h._emscripten_bind_b2GearJointDef_get_joint1_0=j._emscripten_bind_b2GearJointDef_get_joint1_0,Li=h._emscripten_bind_b2PrismaticJoint_GetMotorForce_1=j._emscripten_bind_b2PrismaticJoint_GetMotorForce_1,Mi=h._emscripten_bind_b2DistanceJoint_GetBodyA_0=j._emscripten_bind_b2DistanceJoint_GetBodyA_0,Ni=h._emscripten_bind_b2GearJoint_IsActive_0=j._emscripten_bind_b2GearJoint_IsActive_0,Oi=h._emscripten_bind_b2EdgeShape_get_m_vertex0_0=
j._emscripten_bind_b2EdgeShape_get_m_vertex0_0,Pi=h._emscripten_bind_b2World_GetBodyCount_0=j._emscripten_bind_b2World_GetBodyCount_0,Qi=h._emscripten_bind_b2Fixture_GetMassData_1=j._emscripten_bind_b2Fixture_GetMassData_1,Ri=h._emscripten_bind_b2WeldJointDef_get_collideConnected_0=j._emscripten_bind_b2WeldJointDef_get_collideConnected_0,Si=h._emscripten_bind_b2FrictionJoint_GetMaxTorque_0=j._emscripten_bind_b2FrictionJoint_GetMaxTorque_0,Ti=h._emscripten_bind_b2EdgeShape_RayCast_4=j._emscripten_bind_b2EdgeShape_RayCast_4,
Ui=h._emscripten_bind_b2BodyDef_set_allowSleep_1=j._emscripten_bind_b2BodyDef_set_allowSleep_1,Vi=h._emscripten_bind_b2PulleyJoint_GetType_0=j._emscripten_bind_b2PulleyJoint_GetType_0,Wi=h._emscripten_bind_b2WeldJointDef_set_localAnchorA_1=j._emscripten_bind_b2WeldJointDef_set_localAnchorA_1,Xi=h._emscripten_bind_b2Profile_set_step_1=j._emscripten_bind_b2Profile_set_step_1,Yi=h._emscripten_bind_b2ContactEdge_set_other_1=j._emscripten_bind_b2ContactEdge_set_other_1,Zi=h._emscripten_enum_b2LimitState_e_atLowerLimit=
j._emscripten_enum_b2LimitState_e_atLowerLimit,$i=h._emscripten_bind_b2Vec2_op_mul_1=j._emscripten_bind_b2Vec2_op_mul_1,aj=h._emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0=j._emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0,bj=h._emscripten_bind_b2PrismaticJoint_SetUserData_1=j._emscripten_bind_b2PrismaticJoint_SetUserData_1,cj=h._emscripten_bind_b2RopeJoint_GetAnchorA_0=j._emscripten_bind_b2RopeJoint_GetAnchorA_0,dj=h._emscripten_bind_b2DistanceJointDef_get_bodyA_0=j._emscripten_bind_b2DistanceJointDef_get_bodyA_0,
ej=h._emscripten_bind_b2DistanceJointDef_set_userData_1=j._emscripten_bind_b2DistanceJointDef_set_userData_1,fj=h._emscripten_bind_b2ContactEdge_get_other_0=j._emscripten_bind_b2ContactEdge_get_other_0,gj=h._emscripten_bind_b2RopeJoint_GetLocalAnchorB_0=j._emscripten_bind_b2RopeJoint_GetLocalAnchorB_0,hj=h._emscripten_bind_b2PulleyJointDef___destroy___0=j._emscripten_bind_b2PulleyJointDef___destroy___0,ij=h._emscripten_bind_b2MouseJoint_GetBodyB_0=j._emscripten_bind_b2MouseJoint_GetBodyB_0,jj=h._emscripten_bind_b2PolygonShape_TestPoint_2=
j._emscripten_bind_b2PolygonShape_TestPoint_2,kj=h._emscripten_bind_b2EdgeShape_set_m_vertex3_1=j._emscripten_bind_b2EdgeShape_set_m_vertex3_1,lj=h._emscripten_bind_b2PolygonShape_b2PolygonShape_0=j._emscripten_bind_b2PolygonShape_b2PolygonShape_0,mj=h._emscripten_bind_b2GearJointDef_set_ratio_1=j._emscripten_bind_b2GearJointDef_set_ratio_1,nj=h._emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1=j._emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1,oj=h._emscripten_bind_b2WheelJointDef_get_localAxisA_0=
j._emscripten_bind_b2WheelJointDef_get_localAxisA_0,pj=h._emscripten_bind_b2DistanceJointDef_get_localAnchorA_0=j._emscripten_bind_b2DistanceJointDef_get_localAnchorA_0,qj=h._emscripten_bind_b2MassData_set_center_1=j._emscripten_bind_b2MassData_set_center_1,rj=h._emscripten_bind_b2FrictionJointDef_get_localAnchorB_0=j._emscripten_bind_b2FrictionJointDef_get_localAnchorB_0,sj=h._emscripten_bind_b2BodyDef_get_active_0=j._emscripten_bind_b2BodyDef_get_active_0,tj=h._emscripten_bind_b2Body_GetAngularVelocity_0=
j._emscripten_bind_b2Body_GetAngularVelocity_0,uj=h._emscripten_bind_b2WeldJoint_GetBodyB_0=j._emscripten_bind_b2WeldJoint_GetBodyB_0,vj=h._emscripten_bind_b2Draw___destroy___0=j._emscripten_bind_b2Draw___destroy___0,wj=h._emscripten_bind_b2WheelJointDef_Initialize_4=j._emscripten_bind_b2WheelJointDef_Initialize_4,xj=h._emscripten_bind_b2WeldJointDef_set_dampingRatio_1=j._emscripten_bind_b2WeldJointDef_set_dampingRatio_1,yj=h._emscripten_bind_b2Contact_IsEnabled_0=j._emscripten_bind_b2Contact_IsEnabled_0,
zj=h._emscripten_bind_b2Joint_GetAnchorB_0=j._emscripten_bind_b2Joint_GetAnchorB_0,Aj=h._emscripten_bind_b2PrismaticJointDef_get_userData_0=j._emscripten_bind_b2PrismaticJointDef_get_userData_0,Bj=h._emscripten_bind_b2ContactFeature_set_typeB_1=j._emscripten_bind_b2ContactFeature_set_typeB_1,Cj=h._emscripten_bind_b2RevoluteJoint_GetBodyA_0=j._emscripten_bind_b2RevoluteJoint_GetBodyA_0,Dj=h._emscripten_bind_b2ContactID_set_cf_1=j._emscripten_bind_b2ContactID_set_cf_1,Ej=h._emscripten_bind_b2Rot_GetXAxis_0=
j._emscripten_bind_b2Rot_GetXAxis_0,Fj=h._emscripten_bind_b2ContactEdge_set_prev_1=j._emscripten_bind_b2ContactEdge_set_prev_1,Gj=h._emscripten_bind_b2Vec3_Set_3=j._emscripten_bind_b2Vec3_Set_3,Hj=h._emscripten_bind_b2Fixture_GetNext_0=j._emscripten_bind_b2Fixture_GetNext_0,Ij=h._emscripten_bind_b2FrictionJointDef_set_localAnchorB_1=j._emscripten_bind_b2FrictionJointDef_set_localAnchorB_1,Jj=h._emscripten_bind_b2PulleyJoint_GetNext_0=j._emscripten_bind_b2PulleyJoint_GetNext_0,Kj=h._emscripten_bind_b2ChainShape_get_m_type_0=
j._emscripten_bind_b2ChainShape_get_m_type_0,Lj=h._emscripten_bind_b2GearJointDef_get_bodyA_0=j._emscripten_bind_b2GearJointDef_get_bodyA_0,Mj=h._emscripten_bind_b2DistanceJointDef_set_frequencyHz_1=j._emscripten_bind_b2DistanceJointDef_set_frequencyHz_1,Nj=h._emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0=j._emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0,Oj=h._emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0=j._emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0,Pj=h._emscripten_bind_JSContactFilter___destroy___0=
j._emscripten_bind_JSContactFilter___destroy___0,Vb=h._memset=j._memset,Qj=h._emscripten_bind_b2PolygonShape_get_m_radius_0=j._emscripten_bind_b2PolygonShape_get_m_radius_0,Rj=h._emscripten_bind_b2RopeJoint_GetUserData_0=j._emscripten_bind_b2RopeJoint_GetUserData_0,Sj=h._emscripten_bind_b2RopeJointDef_get_bodyA_0=j._emscripten_bind_b2RopeJointDef_get_bodyA_0,Tj=h._emscripten_bind_b2DistanceJointDef_get_dampingRatio_0=j._emscripten_bind_b2DistanceJointDef_get_dampingRatio_0,Uj=h._emscripten_enum_b2ManifoldType_e_faceA=
j._emscripten_enum_b2ManifoldType_e_faceA,Vj=h._emscripten_enum_b2ManifoldType_e_faceB=j._emscripten_enum_b2ManifoldType_e_faceB,Wj=h._emscripten_bind_b2RevoluteJointDef_get_bodyB_0=j._emscripten_bind_b2RevoluteJointDef_get_bodyB_0,Xj=h._emscripten_bind_b2FixtureDef_b2FixtureDef_0=j._emscripten_bind_b2FixtureDef_b2FixtureDef_0,Yj=h._emscripten_bind_b2BodyDef_get_awake_0=j._emscripten_bind_b2BodyDef_get_awake_0,Zj=h._emscripten_bind_b2EdgeShape_get_m_hasVertex3_0=j._emscripten_bind_b2EdgeShape_get_m_hasVertex3_0,
$j=h._emscripten_enum_b2ShapeType_e_edge=j._emscripten_enum_b2ShapeType_e_edge,ak=h._emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0=j._emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0,bk=h._emscripten_bind_b2BodyDef_set_active_1=j._emscripten_bind_b2BodyDef_set_active_1,ck=h._emscripten_bind_b2DistanceJointDef_set_localAnchorB_1=j._emscripten_bind_b2DistanceJointDef_set_localAnchorB_1,dk=h._emscripten_bind_b2Body_GetWorldPoint_1=j._emscripten_bind_b2Body_GetWorldPoint_1,ek=h._emscripten_bind_b2ManifoldPoint_get_normalImpulse_0=
j._emscripten_bind_b2ManifoldPoint_get_normalImpulse_0,fk=h._emscripten_bind_JSContactFilter_ShouldCollide_2=j._emscripten_bind_JSContactFilter_ShouldCollide_2,gk=h._emscripten_bind_b2Joint_GetReactionTorque_1=j._emscripten_bind_b2Joint_GetReactionTorque_1,hk=h._emscripten_bind_b2RevoluteJointDef_set_type_1=j._emscripten_bind_b2RevoluteJointDef_set_type_1,ik=h._emscripten_bind_b2RopeJointDef_b2RopeJointDef_0=j._emscripten_bind_b2RopeJointDef_b2RopeJointDef_0,jk=h._emscripten_bind_b2BodyDef_get_linearDamping_0=
j._emscripten_bind_b2BodyDef_get_linearDamping_0,kk=h._emscripten_bind_b2World_Step_3=j._emscripten_bind_b2World_Step_3,lk=h._emscripten_bind_b2CircleShape_RayCast_4=j._emscripten_bind_b2CircleShape_RayCast_4,mk=h._emscripten_bind_b2Profile_get_step_0=j._emscripten_bind_b2Profile_get_step_0,nk=h._emscripten_bind_b2Vec3_b2Vec3_0=j._emscripten_bind_b2Vec3_b2Vec3_0,ok=h._emscripten_bind_b2DistanceJoint_GetLength_0=j._emscripten_bind_b2DistanceJoint_GetLength_0,pk=h._emscripten_bind_b2PulleyJoint_GetLengthB_0=
j._emscripten_bind_b2PulleyJoint_GetLengthB_0,qk=h._emscripten_bind_b2Filter_set_categoryBits_1=j._emscripten_bind_b2Filter_set_categoryBits_1,rk=h._emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0=j._emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0,sk=h._emscripten_bind_b2Shape_get_m_type_0=j._emscripten_bind_b2Shape_get_m_type_0,tk=h._emscripten_bind_b2MouseJoint_SetDampingRatio_1=j._emscripten_bind_b2MouseJoint_SetDampingRatio_1,uk=h._emscripten_bind_b2World_GetAutoClearForces_0=j._emscripten_bind_b2World_GetAutoClearForces_0,
vk=h._emscripten_enum_b2ShapeType_e_circle=j._emscripten_enum_b2ShapeType_e_circle,wk=h._emscripten_bind_b2BodyDef_set_fixedRotation_1=j._emscripten_bind_b2BodyDef_set_fixedRotation_1,xk=h._emscripten_bind_b2RopeJoint_GetLimitState_0=j._emscripten_bind_b2RopeJoint_GetLimitState_0,yk=h._emscripten_bind_b2JointDef_get_collideConnected_0=j._emscripten_bind_b2JointDef_get_collideConnected_0,zk=h._emscripten_bind_b2Body_Dump_0=j._emscripten_bind_b2Body_Dump_0,Ak=h._emscripten_bind_b2RevoluteJoint_GetLowerLimit_0=
j._emscripten_bind_b2RevoluteJoint_GetLowerLimit_0,Bk=h._emscripten_bind_b2Body_GetWorldCenter_0=j._emscripten_bind_b2Body_GetWorldCenter_0,Ck=h._emscripten_bind_JSContactListener___destroy___0=j._emscripten_bind_JSContactListener___destroy___0,Dk=h._emscripten_bind_b2BodyDef_set_linearVelocity_1=j._emscripten_bind_b2BodyDef_set_linearVelocity_1,Ek=h._emscripten_bind_b2JointDef_set_collideConnected_1=j._emscripten_bind_b2JointDef_set_collideConnected_1,Fk=h._emscripten_bind_b2RopeJointDef_get_localAnchorB_0=
j._emscripten_bind_b2RopeJointDef_get_localAnchorB_0,Gk=h._emscripten_bind_b2Body_GetUserData_0=j._emscripten_bind_b2Body_GetUserData_0,Hk=h._emscripten_bind_b2World_GetContinuousPhysics_0=j._emscripten_bind_b2World_GetContinuousPhysics_0,Ik=h._emscripten_bind_b2Fixture_RayCast_3=j._emscripten_bind_b2Fixture_RayCast_3,Jk=h._emscripten_bind_b2JointDef_set_bodyA_1=j._emscripten_bind_b2JointDef_set_bodyA_1,Kk=h._emscripten_bind_b2GearJointDef_get_collideConnected_0=j._emscripten_bind_b2GearJointDef_get_collideConnected_0,
Lk=h._emscripten_bind_b2RopeJointDef_get_maxLength_0=j._emscripten_bind_b2RopeJointDef_get_maxLength_0,Mk=h._emscripten_bind_b2MouseJointDef_get_bodyA_0=j._emscripten_bind_b2MouseJointDef_get_bodyA_0,Nk=h._emscripten_bind_b2Body_SetBullet_1=j._emscripten_bind_b2Body_SetBullet_1,Ok=h._emscripten_bind_b2DistanceJoint_GetType_0=j._emscripten_bind_b2DistanceJoint_GetType_0,Pk=h._emscripten_bind_b2FixtureDef_get_restitution_0=j._emscripten_bind_b2FixtureDef_get_restitution_0,Qk=h._emscripten_bind_b2Fixture_GetType_0=
j._emscripten_bind_b2Fixture_GetType_0,Rk=h._emscripten_bind_b2PulleyJointDef_set_localAnchorB_1=j._emscripten_bind_b2PulleyJointDef_set_localAnchorB_1,Sk=h._emscripten_bind_b2RevoluteJoint_GetBodyB_0=j._emscripten_bind_b2RevoluteJoint_GetBodyB_0,Tk=h._emscripten_bind_b2Profile_set_solveInit_1=j._emscripten_bind_b2Profile_set_solveInit_1,Uk=h._emscripten_bind_b2RopeJointDef_set_type_1=j._emscripten_bind_b2RopeJointDef_set_type_1,Vk=h._emscripten_bind_b2PrismaticJointDef_get_bodyB_0=j._emscripten_bind_b2PrismaticJointDef_get_bodyB_0,
Wk=h._emscripten_bind_b2Body_SetLinearVelocity_1=j._emscripten_bind_b2Body_SetLinearVelocity_1,Xk=h._emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0=j._emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0,Yk=h._emscripten_bind_b2PulleyJointDef_get_userData_0=j._emscripten_bind_b2PulleyJointDef_get_userData_0,Zk=h._emscripten_bind_b2PrismaticJointDef_set_bodyB_1=j._emscripten_bind_b2PrismaticJointDef_set_bodyB_1,$k=h._emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0=j._emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0,
db=h._free=j._free,al=h._emscripten_bind_b2Manifold_get_localNormal_0=j._emscripten_bind_b2Manifold_get_localNormal_0,bl=h._emscripten_bind_b2AABB_RayCast_2=j._emscripten_bind_b2AABB_RayCast_2,cl=h._emscripten_bind_b2FixtureDef_set_isSensor_1=j._emscripten_bind_b2FixtureDef_set_isSensor_1,dl=h._emscripten_bind_b2RopeJoint_GetBodyB_0=j._emscripten_bind_b2RopeJoint_GetBodyB_0,el=h._emscripten_bind_b2PrismaticJoint_GetAnchorA_0=j._emscripten_bind_b2PrismaticJoint_GetAnchorA_0,fl=h._emscripten_bind_b2ChainShape_set_m_count_1=
j._emscripten_bind_b2ChainShape_set_m_count_1,gl=h._emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0=j._emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0,hl=h._emscripten_bind_b2WeldJoint_GetFrequency_0=j._emscripten_bind_b2WeldJoint_GetFrequency_0,il=h._emscripten_bind_b2Joint_GetUserData_0=j._emscripten_bind_b2Joint_GetUserData_0,jl=h._emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0=j._emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0,kl=h._emscripten_bind_b2Manifold_set_type_1=j._emscripten_bind_b2Manifold_set_type_1,
ll=h._emscripten_bind_b2Vec3_b2Vec3_3=j._emscripten_bind_b2Vec3_b2Vec3_3,ml=h._emscripten_bind_b2RopeJointDef_set_maxLength_1=j._emscripten_bind_b2RopeJointDef_set_maxLength_1,nl=h._emscripten_bind_b2ChainShape_TestPoint_2=j._emscripten_bind_b2ChainShape_TestPoint_2,ol=h._emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0=j._emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0,pl=h._emscripten_bind_b2RayCastInput_get_p2_0=j._emscripten_bind_b2RayCastInput_get_p2_0,ql=h._emscripten_bind_b2RevoluteJoint_EnableLimit_1=
j._emscripten_bind_b2RevoluteJoint_EnableLimit_1,rl=h._emscripten_bind_b2BodyDef_set_angle_1=j._emscripten_bind_b2BodyDef_set_angle_1,sl=h._emscripten_bind_b2WeldJoint_GetUserData_0=j._emscripten_bind_b2WeldJoint_GetUserData_0,tl=h._emscripten_bind_b2WheelJointDef_get_localAnchorA_0=j._emscripten_bind_b2WheelJointDef_get_localAnchorA_0,ul=h._emscripten_bind_b2PulleyJointDef_set_type_1=j._emscripten_bind_b2PulleyJointDef_set_type_1,vl=h._emscripten_bind_b2Body_IsBullet_0=j._emscripten_bind_b2Body_IsBullet_0,
wl=h._emscripten_bind_b2Body_ApplyLinearImpulse_2=j._emscripten_bind_b2Body_ApplyLinearImpulse_2,xl=h._emscripten_bind_b2Mat33_GetSymInverse33_1=j._emscripten_bind_b2Mat33_GetSymInverse33_1,yl=h._emscripten_bind_b2PolygonShape_ComputeMass_2=j._emscripten_bind_b2PolygonShape_ComputeMass_2,zl=h._emscripten_bind_b2WeldJoint_GetLocalAnchorA_0=j._emscripten_bind_b2WeldJoint_GetLocalAnchorA_0,Al=h._emscripten_bind_b2MouseJoint_SetFrequency_1=j._emscripten_bind_b2MouseJoint_SetFrequency_1,Bl=h._emscripten_bind_b2EdgeShape_get_m_vertex1_0=
j._emscripten_bind_b2EdgeShape_get_m_vertex1_0,Cl=h._emscripten_bind_b2BodyDef_set_awake_1=j._emscripten_bind_b2BodyDef_set_awake_1,Dl=h._emscripten_bind_b2Vec2_get_y_0=j._emscripten_bind_b2Vec2_get_y_0,El=h._emscripten_bind_b2Body_CreateFixture_1=j._emscripten_bind_b2Body_CreateFixture_1,Fl=h._emscripten_bind_b2Body_CreateFixture_2=j._emscripten_bind_b2Body_CreateFixture_2,Gl=h._emscripten_bind_b2PulleyJoint_GetUserData_0=j._emscripten_bind_b2PulleyJoint_GetUserData_0,Hl=h._emscripten_bind_b2Body_SetActive_1=
j._emscripten_bind_b2Body_SetActive_1,Il=h._emscripten_bind_b2Fixture_GetUserData_0=j._emscripten_bind_b2Fixture_GetUserData_0,Jl=h._emscripten_bind_b2PolygonShape_ComputeAABB_3=j._emscripten_bind_b2PolygonShape_ComputeAABB_3,Kl=h._emscripten_bind_b2ContactFeature_get_typeA_0=j._emscripten_bind_b2ContactFeature_get_typeA_0,Ll=h._emscripten_bind_b2MouseJoint_GetReactionForce_1=j._emscripten_bind_b2MouseJoint_GetReactionForce_1,Ml=h._emscripten_bind_b2FrictionJoint_GetReactionTorque_1=j._emscripten_bind_b2FrictionJoint_GetReactionTorque_1,
Nl=h._emscripten_bind_b2EdgeShape_TestPoint_2=j._emscripten_bind_b2EdgeShape_TestPoint_2,lc=h._memcpy=j._memcpy,Ol=h._emscripten_bind_b2PolygonShape_get_m_centroid_0=j._emscripten_bind_b2PolygonShape_get_m_centroid_0,Pl=h._emscripten_bind_b2ChainShape___destroy___0=j._emscripten_bind_b2ChainShape___destroy___0,Ql=h._emscripten_bind_b2GearJoint_SetUserData_1=j._emscripten_bind_b2GearJoint_SetUserData_1,Rl=h._emscripten_bind_b2Vec3_set_z_1=j._emscripten_bind_b2Vec3_set_z_1,Sl=h._emscripten_bind_b2PrismaticJointDef_set_enableLimit_1=
j._emscripten_bind_b2PrismaticJointDef_set_enableLimit_1,Tl=h._emscripten_bind_b2DistanceJoint_GetFrequency_0=j._emscripten_bind_b2DistanceJoint_GetFrequency_0,Ul=h._emscripten_bind_b2Body_SetGravityScale_1=j._emscripten_bind_b2Body_SetGravityScale_1,Vl=h._emscripten_bind_b2AABB_GetPerimeter_0=j._emscripten_bind_b2AABB_GetPerimeter_0,Wl=h._emscripten_bind_b2PulleyJointDef_get_lengthA_0=j._emscripten_bind_b2PulleyJointDef_get_lengthA_0,Xl=h._emscripten_bind_b2Vec3_set_x_1=j._emscripten_bind_b2Vec3_set_x_1,
Yl=h._emscripten_bind_b2PulleyJointDef_get_type_0=j._emscripten_bind_b2PulleyJointDef_get_type_0,Zl=h._emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1=j._emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1,$l=h._emscripten_bind_b2Shape___destroy___0=j._emscripten_bind_b2Shape___destroy___0,Xb=h._strlen=j._strlen,am=h._emscripten_bind_b2Color_set_b_1=j._emscripten_bind_b2Color_set_b_1,bm=h._emscripten_bind_b2Joint_GetReactionForce_1=j._emscripten_bind_b2Joint_GetReactionForce_1,cm=h._emscripten_bind_b2FixtureDef_set_friction_1=
j._emscripten_bind_b2FixtureDef_set_friction_1,dm=h._emscripten_bind_b2ContactID___destroy___0=j._emscripten_bind_b2ContactID___destroy___0,em=h._emscripten_bind_b2EdgeShape_get_m_hasVertex0_0=j._emscripten_bind_b2EdgeShape_get_m_hasVertex0_0,fm=h._emscripten_bind_JSRayCastCallback_ReportFixture_4=j._emscripten_bind_JSRayCastCallback_ReportFixture_4,gm=h._emscripten_bind_b2Profile_set_solveVelocity_1=j._emscripten_bind_b2Profile_set_solveVelocity_1,hm=h._emscripten_bind_b2PrismaticJoint_GetAnchorB_0=
j._emscripten_bind_b2PrismaticJoint_GetAnchorB_0,im=h._emscripten_bind_b2WeldJointDef_b2WeldJointDef_0=j._emscripten_bind_b2WeldJointDef_b2WeldJointDef_0,jm=h._emscripten_enum_b2BodyType_b2_staticBody=j._emscripten_enum_b2BodyType_b2_staticBody,km=h._emscripten_bind_b2RevoluteJointDef_set_upperAngle_1=j._emscripten_bind_b2RevoluteJointDef_set_upperAngle_1,lm=h._emscripten_bind_b2RevoluteJointDef_get_type_0=j._emscripten_bind_b2RevoluteJointDef_get_type_0,mm=h._emscripten_bind_b2GearJointDef_get_type_0=
j._emscripten_bind_b2GearJointDef_get_type_0,nm=h._emscripten_bind_b2ChainShape_GetType_0=j._emscripten_bind_b2ChainShape_GetType_0,om=h._emscripten_bind_b2RayCastInput_get_maxFraction_0=j._emscripten_bind_b2RayCastInput_get_maxFraction_0,pm=h._emscripten_bind_b2GearJoint_GetBodyA_0=j._emscripten_bind_b2GearJoint_GetBodyA_0,qm=h._emscripten_bind_b2Body_GetLocalVector_1=j._emscripten_bind_b2Body_GetLocalVector_1,rm=h._emscripten_bind_b2PrismaticJoint_EnableLimit_1=j._emscripten_bind_b2PrismaticJoint_EnableLimit_1,
sm=h._emscripten_bind_b2FrictionJointDef_get_maxForce_0=j._emscripten_bind_b2FrictionJointDef_get_maxForce_0,tm=h._emscripten_bind_b2BodyDef_set_angularVelocity_1=j._emscripten_bind_b2BodyDef_set_angularVelocity_1,um=h._emscripten_bind_b2Body_SetLinearDamping_1=j._emscripten_bind_b2Body_SetLinearDamping_1,vm=h._emscripten_bind_b2WheelJoint_GetBodyB_0=j._emscripten_bind_b2WheelJoint_GetBodyB_0,wm=h._emscripten_bind_b2Color___destroy___0=j._emscripten_bind_b2Color___destroy___0,xm=h._emscripten_bind_b2PrismaticJoint_IsActive_0=
j._emscripten_bind_b2PrismaticJoint_IsActive_0,ym=h._emscripten_enum_b2JointType_e_weldJoint=j._emscripten_enum_b2JointType_e_weldJoint,zm=h._emscripten_bind_b2World_SetContinuousPhysics_1=j._emscripten_bind_b2World_SetContinuousPhysics_1,Am=h._emscripten_bind_b2MouseJointDef_get_target_0=j._emscripten_bind_b2MouseJointDef_get_target_0,Bm=h._emscripten_bind_b2Manifold_b2Manifold_0=j._emscripten_bind_b2Manifold_b2Manifold_0,Cm=h._emscripten_bind_b2PulleyJointDef_set_userData_1=j._emscripten_bind_b2PulleyJointDef_set_userData_1,
Dm=h._emscripten_bind_b2FrictionJointDef_set_maxForce_1=j._emscripten_bind_b2FrictionJointDef_set_maxForce_1,Em=h._emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0=j._emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0,Fm=h._emscripten_bind_b2PolygonShape_set_m_centroid_1=j._emscripten_bind_b2PolygonShape_set_m_centroid_1,Gm=h._emscripten_bind_b2Mat33_GetInverse22_1=j._emscripten_bind_b2Mat33_GetInverse22_1,Hm=h._emscripten_bind_b2PolygonShape_SetAsBox_4=j._emscripten_bind_b2PolygonShape_SetAsBox_4,
Im=h._emscripten_bind_b2EdgeShape_get_m_vertex2_0=j._emscripten_bind_b2EdgeShape_get_m_vertex2_0,Jm=h._emscripten_bind_b2WheelJoint_GetReactionTorque_1=j._emscripten_bind_b2WheelJoint_GetReactionTorque_1,Km=h._emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0=j._emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0,Lm=h._emscripten_bind_b2ContactFeature_set_typeA_1=j._emscripten_bind_b2ContactFeature_set_typeA_1,Mm=h._emscripten_bind_b2Fixture_Dump_1=j._emscripten_bind_b2Fixture_Dump_1,Nm=
h._emscripten_bind_b2World_GetJointList_0=j._emscripten_bind_b2World_GetJointList_0,Om=h._emscripten_bind_b2Manifold_set_localPoint_1=j._emscripten_bind_b2Manifold_set_localPoint_1,Pm=h._emscripten_bind_b2DistanceJoint_SetUserData_1=j._emscripten_bind_b2DistanceJoint_SetUserData_1,Qm=h._emscripten_bind_b2BodyDef_set_bullet_1=j._emscripten_bind_b2BodyDef_set_bullet_1,Rm=h._emscripten_bind_b2RayCastOutput___destroy___0=j._emscripten_bind_b2RayCastOutput___destroy___0;h.___cxa_can_catch=j.___cxa_can_catch;
var Sm=h._emscripten_bind_b2WheelJoint_GetNext_0=j._emscripten_bind_b2WheelJoint_GetNext_0,Tm=h._emscripten_bind_b2AABB_GetCenter_0=j._emscripten_bind_b2AABB_GetCenter_0,Um=h._emscripten_bind_b2Filter_set_groupIndex_1=j._emscripten_bind_b2Filter_set_groupIndex_1,Vm=h._emscripten_bind_b2JointDef_b2JointDef_0=j._emscripten_bind_b2JointDef_b2JointDef_0,Wm=h._emscripten_bind_b2CircleShape_b2CircleShape_0=j._emscripten_bind_b2CircleShape_b2CircleShape_0,Xm=h._emscripten_bind_b2GearJointDef_b2GearJointDef_0=
j._emscripten_bind_b2GearJointDef_b2GearJointDef_0,Ym=h._emscripten_bind_b2JointDef_get_bodyB_0=j._emscripten_bind_b2JointDef_get_bodyB_0,Zm=h._emscripten_bind_b2DistanceJoint_GetReactionForce_1=j._emscripten_bind_b2DistanceJoint_GetReactionForce_1,$m=h._emscripten_bind_b2PrismaticJoint_GetJointSpeed_0=j._emscripten_bind_b2PrismaticJoint_GetJointSpeed_0,an=h._emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0=j._emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0,bn=h._emscripten_bind_b2Joint_GetAnchorA_0=
j._emscripten_bind_b2Joint_GetAnchorA_0,cn=h._emscripten_bind_b2Contact_GetRestitution_0=j._emscripten_bind_b2Contact_GetRestitution_0,dn=h._emscripten_bind_b2ContactEdge_get_contact_0=j._emscripten_bind_b2ContactEdge_get_contact_0,en=h._emscripten_bind_b2RevoluteJointDef_get_userData_0=j._emscripten_bind_b2RevoluteJointDef_get_userData_0,fn=h._emscripten_bind_b2Fixture_GetAABB_1=j._emscripten_bind_b2Fixture_GetAABB_1,gn=h._emscripten_bind_b2DistanceJointDef_Initialize_4=j._emscripten_bind_b2DistanceJointDef_Initialize_4,
hn=h._emscripten_bind_b2PrismaticJointDef_set_collideConnected_1=j._emscripten_bind_b2PrismaticJointDef_set_collideConnected_1,jn=h._emscripten_bind_b2PrismaticJointDef_set_localAxisA_1=j._emscripten_bind_b2PrismaticJointDef_set_localAxisA_1,kn=h._emscripten_bind_b2GearJointDef_get_bodyB_0=j._emscripten_bind_b2GearJointDef_get_bodyB_0,ln=h._emscripten_bind_b2WheelJointDef_get_bodyB_0=j._emscripten_bind_b2WheelJointDef_get_bodyB_0,mn=h._emscripten_bind_b2WeldJoint_GetLocalAnchorB_0=j._emscripten_bind_b2WeldJoint_GetLocalAnchorB_0,
nn=h._emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1=j._emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1,on=h._emscripten_bind_b2Body_DestroyFixture_1=j._emscripten_bind_b2Body_DestroyFixture_1,pn=h._emscripten_bind_b2Profile_set_broadphase_1=j._emscripten_bind_b2Profile_set_broadphase_1,qn=h._emscripten_bind_b2WheelJointDef_get_localAnchorB_0=j._emscripten_bind_b2WheelJointDef_get_localAnchorB_0,rn=h._emscripten_bind_b2ContactImpulse_get_count_0=j._emscripten_bind_b2ContactImpulse_get_count_0,
sn=h._emscripten_bind_b2World_GetJointCount_0=j._emscripten_bind_b2World_GetJointCount_0,tn=h._emscripten_bind_b2WheelJoint_GetMotorSpeed_0=j._emscripten_bind_b2WheelJoint_GetMotorSpeed_0,un=h._emscripten_bind_b2Body_GetAngularDamping_0=j._emscripten_bind_b2Body_GetAngularDamping_0,vn=h._emscripten_bind_b2WheelJointDef_get_dampingRatio_0=j._emscripten_bind_b2WheelJointDef_get_dampingRatio_0,wn=h._emscripten_bind_b2RayCastOutput_get_fraction_0=j._emscripten_bind_b2RayCastOutput_get_fraction_0,xn=h._emscripten_enum_b2ManifoldType_e_circles=
j._emscripten_enum_b2ManifoldType_e_circles,yn=h._emscripten_bind_b2GearJoint_SetRatio_1=j._emscripten_bind_b2GearJoint_SetRatio_1,zn=h._emscripten_bind_JSDraw_DrawPolygon_3=j._emscripten_bind_JSDraw_DrawPolygon_3,An=h._emscripten_bind_b2Filter___destroy___0=j._emscripten_bind_b2Filter___destroy___0,Bn=h._emscripten_bind_b2JointEdge_set_next_1=j._emscripten_bind_b2JointEdge_set_next_1;h.___cxa_is_pointer_type=j.___cxa_is_pointer_type;
var Cn=h._emscripten_bind_b2BodyDef_get_fixedRotation_0=j._emscripten_bind_b2BodyDef_get_fixedRotation_0,Dn=h._emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1=j._emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1,En=h._emscripten_bind_b2ChainShape_SetPrevVertex_1=j._emscripten_bind_b2ChainShape_SetPrevVertex_1,Fn=h._emscripten_bind_b2Filter_get_categoryBits_0=j._emscripten_bind_b2Filter_get_categoryBits_0,Gn=h._emscripten_bind_b2MouseJoint_GetReactionTorque_1=j._emscripten_bind_b2MouseJoint_GetReactionTorque_1,
Hn=h._emscripten_bind_b2MouseJoint_GetUserData_0=j._emscripten_bind_b2MouseJoint_GetUserData_0,In=h._emscripten_bind_b2WheelJoint_GetUserData_0=j._emscripten_bind_b2WheelJoint_GetUserData_0,Jn=h._emscripten_bind_b2Vec3_op_sub_1=j._emscripten_bind_b2Vec3_op_sub_1,Kn=h._emscripten_bind_b2BodyDef_get_gravityScale_0=j._emscripten_bind_b2BodyDef_get_gravityScale_0,Ln=h._emscripten_bind_b2Shape_GetType_0=j._emscripten_bind_b2Shape_GetType_0,Mn=h._emscripten_bind_b2AABB_IsValid_0=j._emscripten_bind_b2AABB_IsValid_0,
Nn=h._emscripten_bind_b2WheelJoint_GetBodyA_0=j._emscripten_bind_b2WheelJoint_GetBodyA_0,On=h._emscripten_bind_JSDraw_DrawTransform_1=j._emscripten_bind_JSDraw_DrawTransform_1,Pn=h._emscripten_bind_b2PulleyJoint_GetLengthA_0=j._emscripten_bind_b2PulleyJoint_GetLengthA_0,Qn=h._emscripten_bind_b2DistanceJointDef_get_frequencyHz_0=j._emscripten_bind_b2DistanceJointDef_get_frequencyHz_0,Rn=h._emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1=j._emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1,Sn=h._emscripten_bind_b2World___destroy___0=
j._emscripten_bind_b2World___destroy___0,Tn=h._emscripten_bind_b2ChainShape_get_m_hasNextVertex_0=j._emscripten_bind_b2ChainShape_get_m_hasNextVertex_0,Un=h._emscripten_bind_b2ChainShape_SetNextVertex_1=j._emscripten_bind_b2ChainShape_SetNextVertex_1,Vn=h._emscripten_bind_b2Body_SetType_1=j._emscripten_bind_b2Body_SetType_1,Wn=h._emscripten_bind_b2Body_GetMass_0=j._emscripten_bind_b2Body_GetMass_0,Xn=h._emscripten_bind_b2Rot_b2Rot_0=j._emscripten_bind_b2Rot_b2Rot_0,Yn=h._emscripten_bind_b2Rot_b2Rot_1=
j._emscripten_bind_b2Rot_b2Rot_1,Zn=h._emscripten_enum_b2JointType_e_distanceJoint=j._emscripten_enum_b2JointType_e_distanceJoint,$n=h._emscripten_bind_b2PulleyJoint___destroy___0=j._emscripten_bind_b2PulleyJoint___destroy___0,ao=h._emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0=j._emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0,bo=h._emscripten_bind_b2MouseJoint_GetType_0=j._emscripten_bind_b2MouseJoint_GetType_0,co=h._emscripten_bind_JSQueryCallback___destroy___0=j._emscripten_bind_JSQueryCallback___destroy___0,
eo=h._emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1=j._emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1,fo=h._emscripten_bind_b2JointEdge___destroy___0=j._emscripten_bind_b2JointEdge___destroy___0,go=h._emscripten_bind_b2PulleyJoint_GetRatio_0=j._emscripten_bind_b2PulleyJoint_GetRatio_0,ho=h._emscripten_bind_JSContactListener_BeginContact_1=j._emscripten_bind_JSContactListener_BeginContact_1,io=h._emscripten_bind_b2JointEdge_get_next_0=j._emscripten_bind_b2JointEdge_get_next_0,jo=h._emscripten_bind_b2RayCastInput_set_maxFraction_1=
j._emscripten_bind_b2RayCastInput_set_maxFraction_1,ko=h._emscripten_bind_b2MouseJoint_GetBodyA_0=j._emscripten_bind_b2MouseJoint_GetBodyA_0,lo=h._emscripten_bind_b2Profile_set_collide_1=j._emscripten_bind_b2Profile_set_collide_1,mo=h._emscripten_bind_b2AABB_b2AABB_0=j._emscripten_bind_b2AABB_b2AABB_0,no=h._emscripten_bind_b2Fixture_Refilter_0=j._emscripten_bind_b2Fixture_Refilter_0,oo=h._emscripten_bind_b2World_CreateBody_1=j._emscripten_bind_b2World_CreateBody_1,po=h._emscripten_bind_b2RopeJointDef_set_userData_1=
j._emscripten_bind_b2RopeJointDef_set_userData_1,qo=h._emscripten_bind_b2Fixture_IsSensor_0=j._emscripten_bind_b2Fixture_IsSensor_0,ro=h._emscripten_bind_b2WeldJoint_GetType_0=j._emscripten_bind_b2WeldJoint_GetType_0,so=h._emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0=j._emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0,to=h._emscripten_bind_b2Rot___destroy___0=j._emscripten_bind_b2Rot___destroy___0,uo=h._emscripten_bind_b2Filter_get_maskBits_0=j._emscripten_bind_b2Filter_get_maskBits_0,
vo=h._emscripten_bind_b2Body_GetFixtureList_0=j._emscripten_bind_b2Body_GetFixtureList_0,wo=h._emscripten_bind_b2RevoluteJointDef_get_enableMotor_0=j._emscripten_bind_b2RevoluteJointDef_get_enableMotor_0,xo=h._emscripten_bind_b2MouseJointDef_set_dampingRatio_1=j._emscripten_bind_b2MouseJointDef_set_dampingRatio_1,yo=h._emscripten_bind_JSRayCastCallback___destroy___0=j._emscripten_bind_JSRayCastCallback___destroy___0,zo=h._emscripten_bind_b2ContactListener___destroy___0=j._emscripten_bind_b2ContactListener___destroy___0,
Ao=h._emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1=j._emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1,Bo=h._emscripten_enum_b2DrawFlag_e_pairBit=j._emscripten_enum_b2DrawFlag_e_pairBit,Co=h._emscripten_bind_b2FrictionJoint___destroy___0=j._emscripten_bind_b2FrictionJoint___destroy___0,Do=h._emscripten_bind_b2WeldJoint_Dump_0=j._emscripten_bind_b2WeldJoint_Dump_0,Eo=h._emscripten_bind_b2FrictionJointDef_get_maxTorque_0=j._emscripten_bind_b2FrictionJointDef_get_maxTorque_0,Fo=h._emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0=
j._emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0,Go=h._emscripten_bind_b2WeldJointDef_get_localAnchorB_0=j._emscripten_bind_b2WeldJointDef_get_localAnchorB_0,Ho=h._emscripten_bind_b2PrismaticJointDef_get_bodyA_0=j._emscripten_bind_b2PrismaticJointDef_get_bodyA_0,Io=h._emscripten_bind_b2Vec2_IsValid_0=j._emscripten_bind_b2Vec2_IsValid_0,Jo=h._emscripten_bind_b2World_SetGravity_1=j._emscripten_bind_b2World_SetGravity_1,Ko=h._emscripten_bind_b2World_GetWarmStarting_0=j._emscripten_bind_b2World_GetWarmStarting_0,
Lo=h._emscripten_bind_b2RevoluteJointDef_set_enableLimit_1=j._emscripten_bind_b2RevoluteJointDef_set_enableLimit_1,Mo=h._emscripten_bind_b2WeldJointDef___destroy___0=j._emscripten_bind_b2WeldJointDef___destroy___0,No=h._emscripten_bind_b2Mat22_Solve_1=j._emscripten_bind_b2Mat22_Solve_1,Oo=h._emscripten_bind_b2Color_get_g_0=j._emscripten_bind_b2Color_get_g_0,Po=h._emscripten_bind_b2World_GetProfile_0=j._emscripten_bind_b2World_GetProfile_0,Qo=h._emscripten_bind_b2RopeJoint_GetNext_0=j._emscripten_bind_b2RopeJoint_GetNext_0,
Ro=h._emscripten_bind_b2Filter_b2Filter_0=j._emscripten_bind_b2Filter_b2Filter_0,So=h._emscripten_bind_b2PolygonShape_GetChildCount_0=j._emscripten_bind_b2PolygonShape_GetChildCount_0,To=h._emscripten_bind_b2GearJointDef_get_ratio_0=j._emscripten_bind_b2GearJointDef_get_ratio_0,Uo=h._emscripten_bind_b2Mat33_Solve33_1=j._emscripten_bind_b2Mat33_Solve33_1,Vo=h._emscripten_bind_b2PulleyJoint_GetReactionForce_1=j._emscripten_bind_b2PulleyJoint_GetReactionForce_1,Wo=h._emscripten_bind_b2WheelJoint_GetCollideConnected_0=
j._emscripten_bind_b2WheelJoint_GetCollideConnected_0,Xo=h._emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1=j._emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1,Yo=h._emscripten_bind_b2RevoluteJointDef___destroy___0=j._emscripten_bind_b2RevoluteJointDef___destroy___0,Zo=h._emscripten_bind_b2PolygonShape_set_m_vertexCount_1=j._emscripten_bind_b2PolygonShape_set_m_vertexCount_1,$o=h._emscripten_bind_b2RevoluteJoint_EnableMotor_1=j._emscripten_bind_b2RevoluteJoint_EnableMotor_1,ap=h._emscripten_bind_b2ContactFeature_get_typeB_0=
j._emscripten_bind_b2ContactFeature_get_typeB_0,bp=h._emscripten_bind_b2ContactID_get_key_0=j._emscripten_bind_b2ContactID_get_key_0,cp=h._emscripten_bind_b2Rot_GetAngle_0=j._emscripten_bind_b2Rot_GetAngle_0,dp=h._emscripten_bind_b2World_SetAllowSleeping_1=j._emscripten_bind_b2World_SetAllowSleeping_1,ep=h._emscripten_enum_b2DrawFlag_e_centerOfMassBit=j._emscripten_enum_b2DrawFlag_e_centerOfMassBit,fp=h._emscripten_bind_b2ManifoldPoint_set_id_1=j._emscripten_bind_b2ManifoldPoint_set_id_1,gp=h._emscripten_bind_b2FrictionJoint_GetCollideConnected_0=
j._emscripten_bind_b2FrictionJoint_GetCollideConnected_0,hp=h._emscripten_bind_b2WheelJointDef_set_motorSpeed_1=j._emscripten_bind_b2WheelJointDef_set_motorSpeed_1,ip=h._emscripten_bind_b2Mat22_get_ex_0=j._emscripten_bind_b2Mat22_get_ex_0,jp=h._emscripten_bind_b2Fixture_GetDensity_0=j._emscripten_bind_b2Fixture_GetDensity_0,kp=h._emscripten_bind_b2PolygonShape_get_m_type_0=j._emscripten_bind_b2PolygonShape_get_m_type_0,lp=h._emscripten_bind_b2Vec2_Set_2=j._emscripten_bind_b2Vec2_Set_2,mp=h._emscripten_bind_b2WeldJointDef_get_type_0=
j._emscripten_bind_b2WeldJointDef_get_type_0,np=h._emscripten_bind_b2MouseJointDef_b2MouseJointDef_0=j._emscripten_bind_b2MouseJointDef_b2MouseJointDef_0,op=h._emscripten_bind_b2Rot_get_s_0=j._emscripten_bind_b2Rot_get_s_0,pp=h._emscripten_bind_b2FrictionJoint_SetMaxTorque_1=j._emscripten_bind_b2FrictionJoint_SetMaxTorque_1,qp=h._emscripten_bind_b2MouseJointDef_get_frequencyHz_0=j._emscripten_bind_b2MouseJointDef_get_frequencyHz_0,rp=h._emscripten_bind_b2FrictionJoint_SetUserData_1=j._emscripten_bind_b2FrictionJoint_SetUserData_1,
sp=h._emscripten_bind_b2FixtureDef_set_userData_1=j._emscripten_bind_b2FixtureDef_set_userData_1,tp=h._emscripten_bind_b2JointDef_get_userData_0=j._emscripten_bind_b2JointDef_get_userData_0,up=h._emscripten_bind_b2DistanceJointDef_get_collideConnected_0=j._emscripten_bind_b2DistanceJointDef_get_collideConnected_0,vp=h._emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1=j._emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1,wp=h._emscripten_bind_b2ContactFeature___destroy___0=j._emscripten_bind_b2ContactFeature___destroy___0,
xp=h._emscripten_bind_b2DistanceJointDef_set_bodyB_1=j._emscripten_bind_b2DistanceJointDef_set_bodyB_1,yp=h._emscripten_bind_JSQueryCallback_JSQueryCallback_0=j._emscripten_bind_JSQueryCallback_JSQueryCallback_0,zp=h._emscripten_bind_b2ChainShape_GetChildCount_0=j._emscripten_bind_b2ChainShape_GetChildCount_0,Ap=h._emscripten_bind_b2MassData_b2MassData_0=j._emscripten_bind_b2MassData_b2MassData_0,Bp=h._emscripten_bind_b2Vec3_set_y_1=j._emscripten_bind_b2Vec3_set_y_1,Cp=h._emscripten_bind_b2AABB_Combine_1=
j._emscripten_bind_b2AABB_Combine_1,Dp=h._emscripten_bind_b2AABB_Combine_2=j._emscripten_bind_b2AABB_Combine_2,Ep=h._emscripten_bind_b2PrismaticJoint_GetBodyA_0=j._emscripten_bind_b2PrismaticJoint_GetBodyA_0,Fp=h._emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0=j._emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0,Gp=h._emscripten_bind_b2AABB___destroy___0=j._emscripten_bind_b2AABB___destroy___0,Hp=h._emscripten_bind_b2Body_IsSleepingAllowed_0=j._emscripten_bind_b2Body_IsSleepingAllowed_0,Ip=
h._emscripten_bind_b2MouseJointDef_set_maxForce_1=j._emscripten_bind_b2MouseJointDef_set_maxForce_1,Jp=h._emscripten_bind_b2Profile_get_solve_0=j._emscripten_bind_b2Profile_get_solve_0,Kp=h._emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1=j._emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1,Lp=h._emscripten_bind_b2PolygonShape_GetVertexCount_0=j._emscripten_bind_b2PolygonShape_GetVertexCount_0,Mp=h._emscripten_bind_b2Rot_get_c_0=j._emscripten_bind_b2Rot_get_c_0,Np=h._emscripten_bind_b2AABB_set_lowerBound_1=
j._emscripten_bind_b2AABB_set_lowerBound_1,Op=h._emscripten_bind_b2Body_ApplyTorque_1=j._emscripten_bind_b2Body_ApplyTorque_1,Pp=h._emscripten_bind_b2MouseJoint_SetMaxForce_1=j._emscripten_bind_b2MouseJoint_SetMaxForce_1,Qp=h._emscripten_bind_b2FrictionJointDef_get_bodyB_0=j._emscripten_bind_b2FrictionJointDef_get_bodyB_0,Rp=h._emscripten_bind_b2JointDef_set_userData_1=j._emscripten_bind_b2JointDef_set_userData_1,Sp=h._emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0=j._emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0,
Tp=h._emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0=j._emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0,Up=h._emscripten_bind_b2WeldJointDef_get_dampingRatio_0=j._emscripten_bind_b2WeldJointDef_get_dampingRatio_0,Vp=h._emscripten_bind_b2MouseJoint___destroy___0=j._emscripten_bind_b2MouseJoint___destroy___0,Wp=h._emscripten_bind_b2EdgeShape_b2EdgeShape_0=j._emscripten_bind_b2EdgeShape_b2EdgeShape_0,Xp=h._emscripten_bind_b2FrictionJoint_GetReactionForce_1=j._emscripten_bind_b2FrictionJoint_GetReactionForce_1,
Yp=h._emscripten_bind_b2DistanceJointDef_set_type_1=j._emscripten_bind_b2DistanceJointDef_set_type_1,Zp=h._emscripten_bind_b2WeldJoint___destroy___0=j._emscripten_bind_b2WeldJoint___destroy___0,$p=h._emscripten_bind_JSContactListener_PostSolve_2=j._emscripten_bind_JSContactListener_PostSolve_2,aq=h._emscripten_bind_b2PulleyJoint_GetBodyA_0=j._emscripten_bind_b2PulleyJoint_GetBodyA_0,bq=h._emscripten_bind_b2RopeJointDef_get_type_0=j._emscripten_bind_b2RopeJointDef_get_type_0,cq=h._emscripten_bind_b2CircleShape_ComputeMass_2=
j._emscripten_bind_b2CircleShape_ComputeMass_2,dq=h._emscripten_bind_b2DistanceJointDef_get_localAnchorB_0=j._emscripten_bind_b2DistanceJointDef_get_localAnchorB_0,eq=h._emscripten_bind_b2GearJointDef___destroy___0=j._emscripten_bind_b2GearJointDef___destroy___0,fq=h._emscripten_bind_b2RevoluteJointDef_set_bodyA_1=j._emscripten_bind_b2RevoluteJointDef_set_bodyA_1,gq=h._emscripten_enum_b2BodyType_b2_dynamicBody=j._emscripten_enum_b2BodyType_b2_dynamicBody,hq=h._emscripten_bind_b2CircleShape_TestPoint_2=
j._emscripten_bind_b2CircleShape_TestPoint_2,iq=h._emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1=j._emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1,jq=h._emscripten_bind_b2Mat22_b2Mat22_0=j._emscripten_bind_b2Mat22_b2Mat22_0,kq=h._emscripten_bind_b2MouseJoint_GetAnchorB_0=j._emscripten_bind_b2MouseJoint_GetAnchorB_0,lq=h._emscripten_enum_b2BodyType_b2_kinematicBody=j._emscripten_enum_b2BodyType_b2_kinematicBody,mq=h._emscripten_bind_b2Manifold_get_localPoint_0=j._emscripten_bind_b2Manifold_get_localPoint_0,
nq=h._emscripten_bind_b2GearJoint_GetBodyB_0=j._emscripten_bind_b2GearJoint_GetBodyB_0,oq=h._emscripten_bind_b2CircleShape___destroy___0=j._emscripten_bind_b2CircleShape___destroy___0,pq=h._emscripten_bind_b2EdgeShape___destroy___0=j._emscripten_bind_b2EdgeShape___destroy___0,qq=h._emscripten_bind_b2World_GetContactCount_0=j._emscripten_bind_b2World_GetContactCount_0,rq=h._emscripten_bind_b2Contact_SetRestitution_1=j._emscripten_bind_b2Contact_SetRestitution_1,sq=h._emscripten_bind_b2BodyDef_get_angularDamping_0=
j._emscripten_bind_b2BodyDef_get_angularDamping_0,tq=h._emscripten_bind_b2EdgeShape_get_m_vertex3_0=j._emscripten_bind_b2EdgeShape_get_m_vertex3_0,uq=h._emscripten_bind_b2Fixture_SetUserData_1=j._emscripten_bind_b2Fixture_SetUserData_1,vq=h._emscripten_bind_b2Transform_SetIdentity_0=j._emscripten_bind_b2Transform_SetIdentity_0,wq=h._emscripten_bind_b2GearJointDef_set_joint1_1=j._emscripten_bind_b2GearJointDef_set_joint1_1,xq=h._emscripten_bind_b2EdgeShape_set_m_vertex2_1=j._emscripten_bind_b2EdgeShape_set_m_vertex2_1,
yq=h._emscripten_bind_b2ContactEdge_get_next_0=j._emscripten_bind_b2ContactEdge_get_next_0,zq=h._emscripten_bind_b2ContactFeature_set_indexB_1=j._emscripten_bind_b2ContactFeature_set_indexB_1,Aq=h._emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1=j._emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1,Bq=h._emscripten_bind_b2WeldJoint_GetCollideConnected_0=j._emscripten_bind_b2WeldJoint_GetCollideConnected_0,Cq=h._emscripten_bind_b2Mat22_set_ey_1=j._emscripten_bind_b2Mat22_set_ey_1,Dq=
h._emscripten_bind_b2WheelJointDef_set_frequencyHz_1=j._emscripten_bind_b2WheelJointDef_set_frequencyHz_1,Eq=h._emscripten_bind_b2World_GetSubStepping_0=j._emscripten_bind_b2World_GetSubStepping_0,Fq=h._emscripten_bind_b2Rot_GetYAxis_0=j._emscripten_bind_b2Rot_GetYAxis_0,Gq=h._emscripten_bind_b2Contact_GetChildIndexB_0=j._emscripten_bind_b2Contact_GetChildIndexB_0,Hq=h._emscripten_bind_b2DistanceJoint___destroy___0=j._emscripten_bind_b2DistanceJoint___destroy___0,Iq=h._emscripten_bind_b2EdgeShape_GetType_0=
j._emscripten_bind_b2EdgeShape_GetType_0,Jq=h._emscripten_bind_b2WheelJointDef_set_dampingRatio_1=j._emscripten_bind_b2WheelJointDef_set_dampingRatio_1,Kq=h._emscripten_bind_b2ManifoldPoint___destroy___0=j._emscripten_bind_b2ManifoldPoint___destroy___0,Lq=h._emscripten_enum_b2JointType_e_prismaticJoint=j._emscripten_enum_b2JointType_e_prismaticJoint,Mq=h._emscripten_bind_b2WeldJointDef_get_referenceAngle_0=j._emscripten_bind_b2WeldJointDef_get_referenceAngle_0,Nq=h._emscripten_bind_b2Vec2_Length_0=
j._emscripten_bind_b2Vec2_Length_0,Oq=h._emscripten_bind_b2Vec2_SetZero_0=j._emscripten_bind_b2Vec2_SetZero_0,Pq=h._emscripten_bind_b2RopeJoint___destroy___0=j._emscripten_bind_b2RopeJoint___destroy___0,Qq=h._emscripten_bind_b2World_DestroyJoint_1=j._emscripten_bind_b2World_DestroyJoint_1,Rq=h._emscripten_bind_b2JointDef_set_bodyB_1=j._emscripten_bind_b2JointDef_set_bodyB_1,Sq=h._emscripten_bind_b2Mat22_Set_2=j._emscripten_bind_b2Mat22_Set_2,Tq=h._emscripten_bind_b2Body_GetType_0=j._emscripten_bind_b2Body_GetType_0,
Uq=h._emscripten_bind_b2WeldJoint_GetAnchorB_0=j._emscripten_bind_b2WeldJoint_GetAnchorB_0,Vq=h._emscripten_bind_b2WeldJoint_GetNext_0=j._emscripten_bind_b2WeldJoint_GetNext_0,Wq=h._emscripten_bind_b2Shape_get_m_radius_0=j._emscripten_bind_b2Shape_get_m_radius_0,Xq=h._emscripten_bind_b2EdgeShape_ComputeAABB_3=j._emscripten_bind_b2EdgeShape_ComputeAABB_3,Yq=h._emscripten_bind_b2BodyDef_get_type_0=j._emscripten_bind_b2BodyDef_get_type_0,Zq=h._emscripten_bind_b2WheelJointDef_set_collideConnected_1=j._emscripten_bind_b2WheelJointDef_set_collideConnected_1,
$q=h._emscripten_bind_JSDestructionListener___destroy___0=j._emscripten_bind_JSDestructionListener___destroy___0,ar=h._emscripten_bind_b2RopeJoint_GetLocalAnchorA_0=j._emscripten_bind_b2RopeJoint_GetLocalAnchorA_0,br=h._emscripten_bind_b2BodyDef_set_linearDamping_1=j._emscripten_bind_b2BodyDef_set_linearDamping_1,cr=h._emscripten_bind_b2FrictionJoint_GetUserData_0=j._emscripten_bind_b2FrictionJoint_GetUserData_0,dr=h._emscripten_bind_b2Contact_SetFriction_1=j._emscripten_bind_b2Contact_SetFriction_1,
er=h._emscripten_bind_b2Manifold_set_localNormal_1=j._emscripten_bind_b2Manifold_set_localNormal_1,fr=h._emscripten_bind_b2JointDef_get_bodyA_0=j._emscripten_bind_b2JointDef_get_bodyA_0,gr=h._emscripten_bind_b2Body_GetLinearDamping_0=j._emscripten_bind_b2Body_GetLinearDamping_0,hr=h._emscripten_bind_b2WeldJointDef_set_frequencyHz_1=j._emscripten_bind_b2WeldJointDef_set_frequencyHz_1,ir=h._emscripten_bind_b2Body_ResetMassData_0=j._emscripten_bind_b2Body_ResetMassData_0,jr=h._emscripten_bind_b2PrismaticJointDef_set_enableMotor_1=
j._emscripten_bind_b2PrismaticJointDef_set_enableMotor_1,kr=h._emscripten_enum_b2JointType_e_wheelJoint=j._emscripten_enum_b2JointType_e_wheelJoint,lr=h._emscripten_bind_b2Vec2_Skew_0=j._emscripten_bind_b2Vec2_Skew_0,mr=h._emscripten_bind_b2MouseJoint_GetDampingRatio_0=j._emscripten_bind_b2MouseJoint_GetDampingRatio_0,nr=h._emscripten_bind_b2RevoluteJoint_GetAnchorA_0=j._emscripten_bind_b2RevoluteJoint_GetAnchorA_0,or=h._emscripten_bind_b2ChainShape_set_m_prevVertex_1=j._emscripten_bind_b2ChainShape_set_m_prevVertex_1,
pr=h._emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0=j._emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0,qr=h._emscripten_bind_b2FrictionJoint_GetNext_0=j._emscripten_bind_b2FrictionJoint_GetNext_0,rr=h._emscripten_bind_b2PrismaticJointDef_set_userData_1=j._emscripten_bind_b2PrismaticJointDef_set_userData_1,sr=h._emscripten_bind_b2FrictionJointDef_set_type_1=j._emscripten_bind_b2FrictionJointDef_set_type_1,tr=h._emscripten_bind_b2PrismaticJoint_GetUserData_0=j._emscripten_bind_b2PrismaticJoint_GetUserData_0,
ur=h._emscripten_bind_b2FrictionJointDef_get_collideConnected_0=j._emscripten_bind_b2FrictionJointDef_get_collideConnected_0,vr=h._emscripten_bind_b2Body_GetInertia_0=j._emscripten_bind_b2Body_GetInertia_0,wr=h._emscripten_bind_b2WeldJointDef_set_referenceAngle_1=j._emscripten_bind_b2WeldJointDef_set_referenceAngle_1,xr=h._emscripten_bind_b2FrictionJoint_GetAnchorA_0=j._emscripten_bind_b2FrictionJoint_GetAnchorA_0,yr=h._emscripten_bind_b2RopeJoint_GetType_0=j._emscripten_bind_b2RopeJoint_GetType_0,
zr=h._emscripten_bind_b2MassData_get_I_0=j._emscripten_bind_b2MassData_get_I_0,Ar=h._emscripten_bind_b2WheelJointDef_get_motorSpeed_0=j._emscripten_bind_b2WheelJointDef_get_motorSpeed_0,Br=h._emscripten_enum_b2JointType_e_ropeJoint=j._emscripten_enum_b2JointType_e_ropeJoint,Cr=h._emscripten_bind_b2Filter_set_maskBits_1=j._emscripten_bind_b2Filter_set_maskBits_1,Dr=h._emscripten_bind_b2EdgeShape_set_m_radius_1=j._emscripten_bind_b2EdgeShape_set_m_radius_1,Er=h._emscripten_bind_b2Mat22_b2Mat22_2=j._emscripten_bind_b2Mat22_b2Mat22_2,
Fr=h._emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1=j._emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1,Gr=h._emscripten_bind_b2FrictionJointDef_set_bodyB_1=j._emscripten_bind_b2FrictionJointDef_set_bodyB_1,Hr=h._emscripten_bind_b2Mat22_b2Mat22_4=j._emscripten_bind_b2Mat22_b2Mat22_4,Ir=h._emscripten_bind_b2ChainShape_set_m_hasNextVertex_1=j._emscripten_bind_b2ChainShape_set_m_hasNextVertex_1,Jr=h._emscripten_bind_b2Mat22_GetInverse_0=j._emscripten_bind_b2Mat22_GetInverse_0,Kr=h._emscripten_bind_b2PrismaticJoint_EnableMotor_1=
j._emscripten_bind_b2PrismaticJoint_EnableMotor_1,Lr=h._emscripten_bind_b2CircleShape_get_m_type_0=j._emscripten_bind_b2CircleShape_get_m_type_0,Mr=h._emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0=j._emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0,Nr=h._emscripten_bind_b2ContactEdge_b2ContactEdge_0=j._emscripten_bind_b2ContactEdge_b2ContactEdge_0,Or=h._emscripten_bind_b2BodyDef___destroy___0=j._emscripten_bind_b2BodyDef___destroy___0,Pr=h._emscripten_bind_b2FrictionJointDef_set_maxTorque_1=
j._emscripten_bind_b2FrictionJointDef_set_maxTorque_1,Qr=h._emscripten_bind_b2PolygonShape_GetVertex_1=j._emscripten_bind_b2PolygonShape_GetVertex_1,Rr=h._emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1=j._emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1,Sr=h._emscripten_bind_b2RevoluteJointDef_get_collideConnected_0=j._emscripten_bind_b2RevoluteJointDef_get_collideConnected_0,Tr=h._emscripten_bind_b2DistanceJointDef_set_bodyA_1=j._emscripten_bind_b2DistanceJointDef_set_bodyA_1,Ur=h._emscripten_bind_b2RevoluteJoint_SetLimits_2=
j._emscripten_bind_b2RevoluteJoint_SetLimits_2,Vr=h._emscripten_bind_b2WeldJointDef_set_type_1=j._emscripten_bind_b2WeldJointDef_set_type_1,Wr=h._emscripten_bind_b2FixtureDef_set_density_1=j._emscripten_bind_b2FixtureDef_set_density_1,Xr=h._emscripten_bind_b2Shape_set_m_type_1=j._emscripten_bind_b2Shape_set_m_type_1,Yr=h._emscripten_bind_b2WheelJoint_GetJointTranslation_0=j._emscripten_bind_b2WheelJoint_GetJointTranslation_0,Zr=h._emscripten_bind_b2WheelJoint_GetMotorTorque_1=j._emscripten_bind_b2WheelJoint_GetMotorTorque_1,
$r=h._emscripten_bind_b2RopeJoint_SetUserData_1=j._emscripten_bind_b2RopeJoint_SetUserData_1,as=h._emscripten_bind_b2RopeJointDef___destroy___0=j._emscripten_bind_b2RopeJointDef___destroy___0,bs=h._emscripten_bind_b2WheelJoint_IsActive_0=j._emscripten_bind_b2WheelJoint_IsActive_0,cs=h._emscripten_bind_b2PrismaticJointDef_get_enableMotor_0=j._emscripten_bind_b2PrismaticJointDef_get_enableMotor_0,ds=h._emscripten_bind_b2Transform_b2Transform_2=j._emscripten_bind_b2Transform_b2Transform_2,es=h._emscripten_bind_b2WeldJoint_GetReactionForce_1=
j._emscripten_bind_b2WeldJoint_GetReactionForce_1,fs=h._emscripten_bind_b2ChainShape_RayCast_4=j._emscripten_bind_b2ChainShape_RayCast_4,gs=h._emscripten_bind_b2PrismaticJoint_GetUpperLimit_0=j._emscripten_bind_b2PrismaticJoint_GetUpperLimit_0,hs=h._emscripten_bind_b2ContactID_get_cf_0=j._emscripten_bind_b2ContactID_get_cf_0,is=h._emscripten_bind_b2MouseJointDef_set_frequencyHz_1=j._emscripten_bind_b2MouseJointDef_set_frequencyHz_1,js=h._emscripten_bind_b2ChainShape_get_m_radius_0=j._emscripten_bind_b2ChainShape_get_m_radius_0,
ks=h._emscripten_bind_b2Body_GetLinearVelocity_0=j._emscripten_bind_b2Body_GetLinearVelocity_0,ls=h._emscripten_bind_b2ChainShape_set_m_radius_1=j._emscripten_bind_b2ChainShape_set_m_radius_1,ms=h._emscripten_bind_b2DistanceJoint_GetReactionTorque_1=j._emscripten_bind_b2DistanceJoint_GetReactionTorque_1,ns=h._emscripten_bind_b2World_Dump_0=j._emscripten_bind_b2World_Dump_0,os=h._emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0=j._emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0,ps=h._emscripten_bind_b2Profile_set_solve_1=
j._emscripten_bind_b2Profile_set_solve_1,qs=h._emscripten_bind_b2WeldJoint_GetDampingRatio_0=j._emscripten_bind_b2WeldJoint_GetDampingRatio_0,rs=h._emscripten_bind_b2Color_get_b_0=j._emscripten_bind_b2Color_get_b_0,ss=h._emscripten_bind_b2MouseJointDef_get_userData_0=j._emscripten_bind_b2MouseJointDef_get_userData_0,ts=h._emscripten_bind_b2CircleShape_ComputeAABB_3=j._emscripten_bind_b2CircleShape_ComputeAABB_3,us=h._emscripten_bind_b2RopeJoint_GetReactionForce_1=j._emscripten_bind_b2RopeJoint_GetReactionForce_1,
vs=h._emscripten_bind_b2PrismaticJointDef_get_enableLimit_0=j._emscripten_bind_b2PrismaticJointDef_get_enableLimit_0,xs=h._emscripten_bind_b2ManifoldPoint_set_localPoint_1=j._emscripten_bind_b2ManifoldPoint_set_localPoint_1,ys=h._emscripten_bind_b2Fixture_GetFilterData_0=j._emscripten_bind_b2Fixture_GetFilterData_0,zs=h._emscripten_bind_b2World_GetBodyList_0=j._emscripten_bind_b2World_GetBodyList_0,As=h._emscripten_bind_b2Shape_ComputeMass_2=j._emscripten_bind_b2Shape_ComputeMass_2,Bs=h._emscripten_bind_b2Joint_GetNext_0=
j._emscripten_bind_b2Joint_GetNext_0,Cs=h._emscripten_bind_b2PrismaticJointDef_get_collideConnected_0=j._emscripten_bind_b2PrismaticJointDef_get_collideConnected_0,Ds=h._emscripten_bind_b2World_RayCast_3=j._emscripten_bind_b2World_RayCast_3,Es=h._emscripten_bind_b2MassData_set_I_1=j._emscripten_bind_b2MassData_set_I_1,Fs=h._emscripten_bind_b2MassData___destroy___0=j._emscripten_bind_b2MassData___destroy___0,Gs=h._emscripten_bind_b2Profile_get_collide_0=j._emscripten_bind_b2Profile_get_collide_0,Hs=
h._emscripten_bind_b2Color_b2Color_3=j._emscripten_bind_b2Color_b2Color_3,Is=h._emscripten_bind_b2Color_b2Color_0=j._emscripten_bind_b2Color_b2Color_0,Js=h._emscripten_bind_b2MouseJoint_GetFrequency_0=j._emscripten_bind_b2MouseJoint_GetFrequency_0,Ks=h._emscripten_bind_b2WeldJointDef_Initialize_3=j._emscripten_bind_b2WeldJointDef_Initialize_3,Ls=h._emscripten_bind_b2Shape_GetChildCount_0=j._emscripten_bind_b2Shape_GetChildCount_0,Ms=h._emscripten_enum_b2JointType_e_gearJoint=j._emscripten_enum_b2JointType_e_gearJoint,
Ns=h._emscripten_bind_b2FixtureDef_get_friction_0=j._emscripten_bind_b2FixtureDef_get_friction_0,Os=h._emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1=j._emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1,Ps=h._emscripten_bind_b2Contact_GetManifold_0=j._emscripten_bind_b2Contact_GetManifold_0,Qs=h._emscripten_bind_b2MouseJoint_GetTarget_0=j._emscripten_bind_b2MouseJoint_GetTarget_0,Rs=h._emscripten_bind_b2WeldJointDef_get_localAnchorA_0=j._emscripten_bind_b2WeldJointDef_get_localAnchorA_0,
Ss=h._emscripten_bind_b2MouseJoint_SetUserData_1=j._emscripten_bind_b2MouseJoint_SetUserData_1,Ts=h._emscripten_bind_b2JointEdge_get_other_0=j._emscripten_bind_b2JointEdge_get_other_0,Us=h._emscripten_bind_b2ChainShape_GetChildEdge_2=j._emscripten_bind_b2ChainShape_GetChildEdge_2,Vs=h._emscripten_bind_b2GearJointDef_set_collideConnected_1=j._emscripten_bind_b2GearJointDef_set_collideConnected_1,Ws=h._emscripten_bind_b2WheelJoint_SetUserData_1=j._emscripten_bind_b2WheelJoint_SetUserData_1,Xs=h._emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1=
j._emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1,Ys=h._emscripten_bind_b2DistanceJoint_GetCollideConnected_0=j._emscripten_bind_b2DistanceJoint_GetCollideConnected_0,Zs=h._emscripten_bind_b2MouseJoint_GetMaxForce_0=j._emscripten_bind_b2MouseJoint_GetMaxForce_0,$s=h._emscripten_bind_b2PrismaticJointDef_set_bodyA_1=j._emscripten_bind_b2PrismaticJointDef_set_bodyA_1,at=h._emscripten_bind_b2Mat22_SetZero_0=j._emscripten_bind_b2Mat22_SetZero_0,bt=h._emscripten_bind_b2Contact_GetChildIndexA_0=j._emscripten_bind_b2Contact_GetChildIndexA_0,
ct=h._emscripten_bind_b2Fixture_SetRestitution_1=j._emscripten_bind_b2Fixture_SetRestitution_1,dt=h._emscripten_bind_b2Body_GetTransform_0=j._emscripten_bind_b2Body_GetTransform_0,et=h._emscripten_bind_b2ContactEdge___destroy___0=j._emscripten_bind_b2ContactEdge___destroy___0,ft=h._emscripten_bind_b2Mat33_set_ex_1=j._emscripten_bind_b2Mat33_set_ex_1,gt=h._emscripten_bind_b2AABB_GetExtents_0=j._emscripten_bind_b2AABB_GetExtents_0,ht=h._emscripten_bind_b2RevoluteJointDef_get_bodyA_0=j._emscripten_bind_b2RevoluteJointDef_get_bodyA_0,
it=h._emscripten_bind_b2PrismaticJoint_GetBodyB_0=j._emscripten_bind_b2PrismaticJoint_GetBodyB_0,jt=h._emscripten_bind_b2WheelJointDef_set_bodyA_1=j._emscripten_bind_b2WheelJointDef_set_bodyA_1,kt=h._emscripten_bind_b2DistanceJointDef_set_collideConnected_1=j._emscripten_bind_b2DistanceJointDef_set_collideConnected_1,lt=h._emscripten_bind_b2BodyDef_get_angle_0=j._emscripten_bind_b2BodyDef_get_angle_0,mt=h._emscripten_bind_b2PulleyJoint_GetReactionTorque_1=j._emscripten_bind_b2PulleyJoint_GetReactionTorque_1,
nt=h._emscripten_bind_b2FixtureDef_get_shape_0=j._emscripten_bind_b2FixtureDef_get_shape_0,ot=h._emscripten_bind_b2WeldJointDef_get_userData_0=j._emscripten_bind_b2WeldJointDef_get_userData_0,pt=h._emscripten_bind_b2FrictionJoint_SetMaxForce_1=j._emscripten_bind_b2FrictionJoint_SetMaxForce_1,qt=h._emscripten_bind_b2Mat33_b2Mat33_3=j._emscripten_bind_b2Mat33_b2Mat33_3,rt=h._emscripten_bind_b2Vec3_get_y_0=j._emscripten_bind_b2Vec3_get_y_0,st=h._emscripten_bind_b2JointDef_get_type_0=j._emscripten_bind_b2JointDef_get_type_0,
tt=h._emscripten_bind_JSQueryCallback_ReportFixture_1=j._emscripten_bind_JSQueryCallback_ReportFixture_1,ut=h._emscripten_bind_b2Fixture_TestPoint_1=j._emscripten_bind_b2Fixture_TestPoint_1,vt=h._emscripten_bind_b2RevoluteJoint_GetCollideConnected_0=j._emscripten_bind_b2RevoluteJoint_GetCollideConnected_0,wt=h._emscripten_bind_JSDraw_JSDraw_0=j._emscripten_bind_JSDraw_JSDraw_0,xt=h._emscripten_bind_b2MouseJoint_GetAnchorA_0=j._emscripten_bind_b2MouseJoint_GetAnchorA_0,yt=h._emscripten_bind_b2Transform_get_p_0=
j._emscripten_bind_b2Transform_get_p_0,zt=h._emscripten_bind_b2EdgeShape_ComputeMass_2=j._emscripten_bind_b2EdgeShape_ComputeMass_2,At=h._emscripten_bind_VoidPtr___destroy___0=j._emscripten_bind_VoidPtr___destroy___0,Bt=h._emscripten_bind_b2DistanceJointDef___destroy___0=j._emscripten_bind_b2DistanceJointDef___destroy___0,Ct=h._emscripten_bind_b2RopeJointDef_set_bodyA_1=j._emscripten_bind_b2RopeJointDef_set_bodyA_1,Dt=h._emscripten_bind_b2JointDef_set_type_1=j._emscripten_bind_b2JointDef_set_type_1,
Et=h._emscripten_bind_b2Draw_AppendFlags_1=j._emscripten_bind_b2Draw_AppendFlags_1,Ft=h._emscripten_bind_b2World_GetContactList_0=j._emscripten_bind_b2World_GetContactList_0,Gt=h._emscripten_bind_b2Mat33_set_ez_1=j._emscripten_bind_b2Mat33_set_ez_1,Ht=h._emscripten_bind_b2JointEdge_b2JointEdge_0=j._emscripten_bind_b2JointEdge_b2JointEdge_0,It=h._emscripten_bind_b2FrictionJointDef_get_bodyA_0=j._emscripten_bind_b2FrictionJointDef_get_bodyA_0,Jt=h._emscripten_bind_b2Body_ApplyForce_2=j._emscripten_bind_b2Body_ApplyForce_2,
Kt=h._emscripten_bind_b2WheelJointDef_get_type_0=j._emscripten_bind_b2WheelJointDef_get_type_0,Lt=h._emscripten_bind_b2RevoluteJoint_GetReactionForce_1=j._emscripten_bind_b2RevoluteJoint_GetReactionForce_1,Mt=h._emscripten_bind_b2PulleyJointDef_set_collideConnected_1=j._emscripten_bind_b2PulleyJointDef_set_collideConnected_1,Nt=h._emscripten_bind_b2RopeJoint_GetCollideConnected_0=j._emscripten_bind_b2RopeJoint_GetCollideConnected_0,Ot=h._emscripten_bind_b2GearJointDef_set_joint2_1=j._emscripten_bind_b2GearJointDef_set_joint2_1,
Pt=h._emscripten_bind_b2BodyDef_set_userData_1=j._emscripten_bind_b2BodyDef_set_userData_1,Qt=h._emscripten_bind_b2GearJoint_GetAnchorB_0=j._emscripten_bind_b2GearJoint_GetAnchorB_0,Rt=h._emscripten_bind_b2RopeJoint_IsActive_0=j._emscripten_bind_b2RopeJoint_IsActive_0,St=h._emscripten_bind_b2Fixture_GetFriction_0=j._emscripten_bind_b2Fixture_GetFriction_0,Tt=h._emscripten_enum_b2DrawFlag_e_aabbBit=j._emscripten_enum_b2DrawFlag_e_aabbBit,Ut=h._emscripten_bind_b2RevoluteJointDef_Initialize_3=j._emscripten_bind_b2RevoluteJointDef_Initialize_3,
Vt=h._emscripten_bind_b2Body_GetAngle_0=j._emscripten_bind_b2Body_GetAngle_0,Wt=h._emscripten_bind_b2EdgeShape_Set_2=j._emscripten_bind_b2EdgeShape_Set_2,Xt=h._emscripten_bind_b2Mat33_SetZero_0=j._emscripten_bind_b2Mat33_SetZero_0,Yt=h._emscripten_bind_b2PrismaticJointDef_get_localAxisA_0=j._emscripten_bind_b2PrismaticJointDef_get_localAxisA_0,Zt=h._emscripten_bind_b2Mat22_get_ey_0=j._emscripten_bind_b2Mat22_get_ey_0,$t=h._emscripten_bind_b2Mat22_SetIdentity_0=j._emscripten_bind_b2Mat22_SetIdentity_0,
au=h._emscripten_bind_b2Joint_IsActive_0=j._emscripten_bind_b2Joint_IsActive_0,bu=h._emscripten_bind_b2BodyDef_get_allowSleep_0=j._emscripten_bind_b2BodyDef_get_allowSleep_0,cu=h._emscripten_bind_b2World_GetTreeHeight_0=j._emscripten_bind_b2World_GetTreeHeight_0,du=h._emscripten_bind_b2GearJoint_GetJoint2_0=j._emscripten_bind_b2GearJoint_GetJoint2_0,eu=h._emscripten_bind_b2EdgeShape_set_m_vertex1_1=j._emscripten_bind_b2EdgeShape_set_m_vertex1_1,fu=h._emscripten_bind_b2Body_GetWorld_0=j._emscripten_bind_b2Body_GetWorld_0,
gu=h._emscripten_enum_b2LimitState_e_inactiveLimit=j._emscripten_enum_b2LimitState_e_inactiveLimit,hu=h._emscripten_bind_b2PulleyJointDef_set_lengthB_1=j._emscripten_bind_b2PulleyJointDef_set_lengthB_1,iu=h._emscripten_bind_b2Body_SetAwake_1=j._emscripten_bind_b2Body_SetAwake_1,ju=h._emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1=j._emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1,ku=h._emscripten_bind_b2Vec2___destroy___0=j._emscripten_bind_b2Vec2___destroy___0,lu=h._emscripten_bind_b2RayCastInput_set_p1_1=
j._emscripten_bind_b2RayCastInput_set_p1_1,mu=h._emscripten_bind_b2Contact_ResetFriction_0=j._emscripten_bind_b2Contact_ResetFriction_0,nu=h._emscripten_bind_b2PulleyJoint_GetAnchorA_0=j._emscripten_bind_b2PulleyJoint_GetAnchorA_0,ou=h._emscripten_bind_b2BodyDef_get_linearVelocity_0=j._emscripten_bind_b2BodyDef_get_linearVelocity_0,pu=h._emscripten_bind_b2DistanceJointDef_get_bodyB_0=j._emscripten_bind_b2DistanceJointDef_get_bodyB_0,qu=h._emscripten_bind_b2Mat22___destroy___0=j._emscripten_bind_b2Mat22___destroy___0,
ru=h._emscripten_bind_b2RevoluteJoint_GetAnchorB_0=j._emscripten_bind_b2RevoluteJoint_GetAnchorB_0,su=h._emscripten_bind_b2RevoluteJoint_GetNext_0=j._emscripten_bind_b2RevoluteJoint_GetNext_0,tu=h._emscripten_bind_b2WeldJointDef_get_bodyA_0=j._emscripten_bind_b2WeldJointDef_get_bodyA_0,uu=h._emscripten_bind_b2Fixture_GetShape_0=j._emscripten_bind_b2Fixture_GetShape_0,vu=h._emscripten_bind_b2PolygonShape_SetAsBox_2=j._emscripten_bind_b2PolygonShape_SetAsBox_2,wu=h._emscripten_bind_b2Vec3_op_mul_1=
j._emscripten_bind_b2Vec3_op_mul_1,xu=h._emscripten_bind_b2PolygonShape_set_m_type_1=j._emscripten_bind_b2PolygonShape_set_m_type_1,yu=h._emscripten_bind_b2PolygonShape_get_m_vertexCount_0=j._emscripten_bind_b2PolygonShape_get_m_vertexCount_0,zu=h._emscripten_bind_b2WheelJoint_GetType_0=j._emscripten_bind_b2WheelJoint_GetType_0,Au=h._emscripten_bind_b2RevoluteJoint_IsActive_0=j._emscripten_bind_b2RevoluteJoint_IsActive_0,Bu=h._emscripten_bind_b2GearJoint_GetNext_0=j._emscripten_bind_b2GearJoint_GetNext_0,
Cu=h._emscripten_bind_b2MouseJointDef_get_maxForce_0=j._emscripten_bind_b2MouseJointDef_get_maxForce_0,Du=h._emscripten_bind_b2Color_Set_3=j._emscripten_bind_b2Color_Set_3,Eu=h._emscripten_bind_b2EdgeShape_set_m_type_1=j._emscripten_bind_b2EdgeShape_set_m_type_1,Fu=h._emscripten_bind_b2WheelJoint_GetLocalAxisA_0=j._emscripten_bind_b2WheelJoint_GetLocalAxisA_0,Gu=h._emscripten_bind_b2Body_GetNext_0=j._emscripten_bind_b2Body_GetNext_0,Hu=h._emscripten_bind_b2RopeJoint_GetBodyA_0=j._emscripten_bind_b2RopeJoint_GetBodyA_0,
Iu=h._emscripten_enum_b2JointType_e_unknownJoint=j._emscripten_enum_b2JointType_e_unknownJoint,Ju=h._emscripten_bind_b2ContactFeature_set_indexA_1=j._emscripten_bind_b2ContactFeature_set_indexA_1,Ku=h._emscripten_bind_b2Profile_get_solveInit_0=j._emscripten_bind_b2Profile_get_solveInit_0,Lu=h._emscripten_bind_b2BodyDef_set_angularDamping_1=j._emscripten_bind_b2BodyDef_set_angularDamping_1,Mu=h._emscripten_bind_b2FrictionJoint_GetAnchorB_0=j._emscripten_bind_b2FrictionJoint_GetAnchorB_0,Nu=h._emscripten_bind_b2World_QueryAABB_2=
j._emscripten_bind_b2World_QueryAABB_2,Ou=h._emscripten_bind_b2BodyDef_get_userData_0=j._emscripten_bind_b2BodyDef_get_userData_0,Pu=h._emscripten_bind_b2Body_SetAngularVelocity_1=j._emscripten_bind_b2Body_SetAngularVelocity_1,Qu=h._emscripten_bind_b2WheelJointDef_get_userData_0=j._emscripten_bind_b2WheelJointDef_get_userData_0,Ru=h._emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0=j._emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0,Su=h._emscripten_bind_b2DistanceJoint_GetBodyB_0=j._emscripten_bind_b2DistanceJoint_GetBodyB_0,
Tu=h._emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1=j._emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1,Uu=h._emscripten_bind_b2WeldJointDef_set_bodyB_1=j._emscripten_bind_b2WeldJointDef_set_bodyB_1,Vu=h._emscripten_bind_b2RevoluteJoint_SetUserData_1=j._emscripten_bind_b2RevoluteJoint_SetUserData_1,Wu=h._emscripten_bind_b2DistanceJoint_SetLength_1=j._emscripten_bind_b2DistanceJoint_SetLength_1,Xu=h._emscripten_bind_b2JointEdge_get_joint_0=j._emscripten_bind_b2JointEdge_get_joint_0,
Yu=h._emscripten_bind_b2Body_GetLocalCenter_0=j._emscripten_bind_b2Body_GetLocalCenter_0,Zu=h._emscripten_bind_b2FixtureDef___destroy___0=j._emscripten_bind_b2FixtureDef___destroy___0,$u=h._emscripten_bind_b2FixtureDef_set_shape_1=j._emscripten_bind_b2FixtureDef_set_shape_1,av=h._emscripten_bind_b2WeldJoint_GetAnchorA_0=j._emscripten_bind_b2WeldJoint_GetAnchorA_0,bv=h._emscripten_bind_b2Profile_get_solveVelocity_0=j._emscripten_bind_b2Profile_get_solveVelocity_0,cv=h._emscripten_bind_b2WeldJointDef_get_bodyB_0=
j._emscripten_bind_b2WeldJointDef_get_bodyB_0,dv=h._emscripten_bind_b2Body_SetAngularDamping_1=j._emscripten_bind_b2Body_SetAngularDamping_1,ev=h._emscripten_bind_b2PulleyJointDef_Initialize_7=j._emscripten_bind_b2PulleyJointDef_Initialize_7,fv=h._emscripten_bind_b2GearJointDef_set_bodyB_1=j._emscripten_bind_b2GearJointDef_set_bodyB_1,gv=h._emscripten_bind_b2RopeJoint_GetReactionTorque_1=j._emscripten_bind_b2RopeJoint_GetReactionTorque_1,hv=h._emscripten_bind_b2Mat22_set_ex_1=j._emscripten_bind_b2Mat22_set_ex_1,
iv=h._emscripten_bind_b2GearJoint_GetType_0=j._emscripten_bind_b2GearJoint_GetType_0,jv=h._emscripten_bind_b2ChainShape_b2ChainShape_0=j._emscripten_bind_b2ChainShape_b2ChainShape_0,kv=h._emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1=j._emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1,lv=h._emscripten_bind_b2RopeJointDef_set_localAnchorB_1=j._emscripten_bind_b2RopeJointDef_set_localAnchorB_1,mv=h._emscripten_bind_b2FrictionJointDef_Initialize_3=j._emscripten_bind_b2FrictionJointDef_Initialize_3,
nv=h._emscripten_bind_b2GearJointDef_set_userData_1=j._emscripten_bind_b2GearJointDef_set_userData_1,ov=h._emscripten_bind_b2ChainShape_CreateLoop_2=j._emscripten_bind_b2ChainShape_CreateLoop_2,pv=h._emscripten_bind_b2EdgeShape_get_m_radius_0=j._emscripten_bind_b2EdgeShape_get_m_radius_0,qv=h._emscripten_bind_b2Contact_GetFixtureB_0=j._emscripten_bind_b2Contact_GetFixtureB_0,rv=h._emscripten_bind_b2ChainShape_ComputeMass_2=j._emscripten_bind_b2ChainShape_ComputeMass_2,sv=h._emscripten_bind_b2Vec2_set_y_1=
j._emscripten_bind_b2Vec2_set_y_1,tv=h._emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0=j._emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0,uv=h._emscripten_bind_b2RopeJointDef_get_bodyB_0=j._emscripten_bind_b2RopeJointDef_get_bodyB_0,vv=h._emscripten_bind_b2BodyDef_b2BodyDef_0=j._emscripten_bind_b2BodyDef_b2BodyDef_0,wv=h._emscripten_bind_b2MassData_get_mass_0=j._emscripten_bind_b2MassData_get_mass_0,xv=h._emscripten_bind_b2WheelJoint___destroy___0=j._emscripten_bind_b2WheelJoint___destroy___0,
yv=h._emscripten_bind_b2Joint_GetBodyB_0=j._emscripten_bind_b2Joint_GetBodyB_0,zv=h._emscripten_bind_b2MouseJointDef_set_collideConnected_1=j._emscripten_bind_b2MouseJointDef_set_collideConnected_1,Av=h._emscripten_bind_b2WheelJointDef_set_localAxisA_1=j._emscripten_bind_b2WheelJointDef_set_localAxisA_1,Bv=h._emscripten_bind_b2Joint_Dump_0=j._emscripten_bind_b2Joint_Dump_0,Cv=h._emscripten_bind_b2WheelJointDef_b2WheelJointDef_0=j._emscripten_bind_b2WheelJointDef_b2WheelJointDef_0,Dv=h._emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1=
j._emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1,Ev=h._emscripten_bind_b2WheelJointDef_get_enableMotor_0=j._emscripten_bind_b2WheelJointDef_get_enableMotor_0,Fv=h._emscripten_bind_b2Vec2_LengthSquared_0=j._emscripten_bind_b2Vec2_LengthSquared_0,Gv=h._emscripten_bind_b2FrictionJointDef_set_bodyA_1=j._emscripten_bind_b2FrictionJointDef_set_bodyA_1,Hv=h._emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0=j._emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0,Iv=h._emscripten_bind_b2ContactFeature_get_indexB_0=
j._emscripten_bind_b2ContactFeature_get_indexB_0,Jv=h._emscripten_bind_b2Body_GetJointList_0=j._emscripten_bind_b2Body_GetJointList_0,Kv=h._emscripten_bind_b2FrictionJoint_GetBodyA_0=j._emscripten_bind_b2FrictionJoint_GetBodyA_0,Lv=h._emscripten_bind_b2WheelJointDef_set_localAnchorB_1=j._emscripten_bind_b2WheelJointDef_set_localAnchorB_1,Mv=h._emscripten_bind_b2DistanceJointDef_set_localAnchorA_1=j._emscripten_bind_b2DistanceJointDef_set_localAnchorA_1,Nv=h._emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0=
j._emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0,Ov=h._emscripten_bind_b2Body_SetUserData_1=j._emscripten_bind_b2Body_SetUserData_1,Pv=h._emscripten_bind_b2DistanceJoint_GetUserData_0=j._emscripten_bind_b2DistanceJoint_GetUserData_0,Qv=h._emscripten_bind_b2PulleyJointDef_set_bodyA_1=j._emscripten_bind_b2PulleyJointDef_set_bodyA_1,Rv=h._emscripten_bind_b2Joint_GetType_0=j._emscripten_bind_b2Joint_GetType_0,Sv=h._emscripten_bind_b2Manifold_get_pointCount_0=j._emscripten_bind_b2Manifold_get_pointCount_0,
Tv=h._emscripten_bind_b2Mat33_get_ez_0=j._emscripten_bind_b2Mat33_get_ez_0,Uv=h._emscripten_bind_b2DestructionListenerWrapper___destroy___0=j._emscripten_bind_b2DestructionListenerWrapper___destroy___0,Vv=h._emscripten_bind_b2WheelJointDef_get_bodyA_0=j._emscripten_bind_b2WheelJointDef_get_bodyA_0,Wv=h._emscripten_enum_b2LimitState_e_atUpperLimit=j._emscripten_enum_b2LimitState_e_atUpperLimit,Xv=h._emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1=j._emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1,
Yv=h._emscripten_bind_b2MouseJointDef_get_type_0=j._emscripten_bind_b2MouseJointDef_get_type_0,Zv=h._emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1=j._emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1,$v=h._emscripten_bind_b2PulleyJointDef_get_collideConnected_0=j._emscripten_bind_b2PulleyJointDef_get_collideConnected_0,aw=h._emscripten_bind_b2RopeJoint_SetMaxLength_1=j._emscripten_bind_b2RopeJoint_SetMaxLength_1,bw=h._emscripten_bind_b2Joint_SetUserData_1=j._emscripten_bind_b2Joint_SetUserData_1,
cw=h._emscripten_bind_b2PolygonShape_set_m_radius_1=j._emscripten_bind_b2PolygonShape_set_m_radius_1,dw=h._emscripten_bind_b2Vec2_get_x_0=j._emscripten_bind_b2Vec2_get_x_0,ew=h._emscripten_bind_JSContactListener_JSContactListener_0=j._emscripten_bind_JSContactListener_JSContactListener_0;h.runPostSets=j.runPostSets;h.dynCall_iiii=j.dynCall_iiii;h.dynCall_viiiii=j.dynCall_viiiii;h.dynCall_did=j.dynCall_did;h.dynCall_vi=j.dynCall_vi;h.dynCall_diiiid=j.dynCall_diiiid;h.dynCall_vii=j.dynCall_vii;
h.dynCall_viidii=j.dynCall_viidii;h.dynCall_ii=j.dynCall_ii;h.dynCall_viidi=j.dynCall_viidi;h.dynCall_viii=j.dynCall_viii;h.dynCall_v=j.dynCall_v;h.dynCall_viid=j.dynCall_viid;h.dynCall_viiiiii=j.dynCall_viiiiii;h.dynCall_iii=j.dynCall_iii;h.dynCall_iiiiii=j.dynCall_iiiiii;h.dynCall_viiii=j.dynCall_viiii;i.A=j.stackAlloc;i.B=j.stackSave;i.J=j.stackRestore;i.ea=j.setTempRet0;i.Z=j.getTempRet0;var ic=e;
if(Mb)if("function"===typeof h.locateFile?Mb=h.locateFile(Mb):h.memoryInitializerPrefixURL&&(Mb=h.memoryInitializerPrefixURL+Mb),ea||ia){var fw=h.readBinary(Mb);bb.set(fw,ib)}else Kb(),Browser.ma(Mb,function(a){bb.set(a,ib);Lb()},function(){c("could not load memory initializer "+Mb)});function ma(a){this.name="ExitStatus";this.message="Program terminated with exit("+a+")";this.status=a}ma.prototype=Error();var gw,hw=e,Jb=function iw(){!h.calledRun&&jw&&kw();h.calledRun||(Jb=iw)};
h.callMain=h.na=function(a){function b(){for(var a=0;3>a;a++)g.push(0)}oa(0==Hb,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");oa(0==qb.length,"cannot call main when preRun functions remain to be called");a=a||[];wb||(wb=aa,pb(rb));var f=a.length+1,g=[Za(zb(h.thisProgram),"i8",0)];b();for(var k=0;k<f-1;k+=1)g.push(Za(zb(a[k]),"i8",0)),b();g.push(0);g=Za(g,"i32",0);gw=qa;try{var n=h._main(f,g,0);lw(n)}catch(m){m instanceof ma||("SimulateInfiniteLoop"==m?h.noExitRuntime=
aa:(m&&("object"===typeof m&&m.stack)&&h.n("exception thrown: "+[m,m.stack]),c(m)))}finally{}};
function kw(a){function b(){if(!h.calledRun&&(h.calledRun=aa,!za)){wb||(wb=aa,pb(rb));pb(sb);ga&&hw!==e&&h.n("pre-main prep time: "+(Date.now()-hw)+" ms");h._main&&jw&&h.callMain(a);if(h.postRun)for("function"==typeof h.postRun&&(h.postRun=[h.postRun]);h.postRun.length;)yb(h.postRun.shift());pb(ub)}}a=a||h.arguments;hw===e&&(hw=Date.now());if(0<Hb)h.n("run() called, but dependencies remain, so not running");else{if(h.preRun)for("function"==typeof h.preRun&&(h.preRun=[h.preRun]);h.preRun.length;)xb(h.preRun.shift());
pb(qb);!(0<Hb)&&!h.calledRun&&(h.setStatus?(h.setStatus("Running..."),setTimeout(function(){setTimeout(function(){h.setStatus("")},1);b()},1)):b())}}h.run=h.ya=kw;function lw(a){h.noExitRuntime||(za=aa,qa=gw,pb(tb),ea?(process.stdout.once("drain",function(){process.exit(a)}),console.log(" "),setTimeout(function(){process.exit(a)},500)):ia&&"function"===typeof quit&&quit(a),c(new ma(a)))}h.exit=h.pa=lw;
function ta(a){a&&(h.print(a),h.n(a));za=aa;c("abort() at "+eb()+"\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.")}h.abort=h.abort=ta;if(h.preInit)for("function"==typeof h.preInit&&(h.preInit=[h.preInit]);0<h.preInit.length;)h.preInit.pop()();var jw=aa;h.noInitialRun&&(jw=ba);h.noExitRuntime=aa;kw();function p(){}p.prototype=Object.create(p.prototype);p.prototype.g=p;p.k={};h.WrapperObject=p;function q(a){return(a||p).k}h.getCache=q;
function r(a,b){var f=q(b),g=f[a];if(g)return g;g=Object.create((b||p).prototype);g.e=a;return f[a]=g}h.wrapPointer=r;function mw(a,b){return r(a.e,b)}h.castObject=mw;h.NULL=r(0);function nw(a){a.__destroy__||c("Error: Cannot destroy object. (Did you create it yourself?)");a.__destroy__();delete q(a.g)[a.e]}h.destroy=nw;function ow(a,b){return a.e===b.e}h.compare=ow;function pw(a){return a.e}h.getPointer=pw;function qw(a){return a.g}h.getClass=qw;
function s(a){return"string"==typeof a?Za(zb(a),"i8",Va):a}function rw(){this.e=nf();q(rw)[this.e]=this}rw.prototype=Object.create(sw.prototype);rw.prototype.g=rw;rw.k={};h.JSDestructionListener=rw;rw.prototype.SayGoodbyeJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zl(b,a)};rw.prototype.SayGoodbyeFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kp(b,a)};rw.prototype.__destroy__=function(){$q(this.e)};
function tw(){c("cannot construct a b2ContactImpulse, no constructor in IDL")}tw.prototype=Object.create(p.prototype);tw.prototype.g=tw;tw.k={};h.b2ContactImpulse=tw;tw.prototype.get_count=function(){return rn(this.e)};tw.prototype.set_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);th(b,a)};tw.prototype.__destroy__=function(){jf(this.e)};function t(){c("cannot construct a b2DistanceJoint, no constructor in IDL")}t.prototype=Object.create(u.prototype);t.prototype.g=t;t.k={};
h.b2DistanceJoint=t;t.prototype.GetLocalAnchorA=function(){return r(Mr(this.e),v)};t.prototype.GetLocalAnchorB=function(){return r(si(this.e),v)};t.prototype.SetLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wu(b,a)};t.prototype.GetLength=function(){return ok(this.e)};t.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);oh(b,a)};t.prototype.GetFrequency=function(){return Tl(this.e)};
t.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ye(b,a)};t.prototype.GetDampingRatio=function(){return Gh(this.e)};t.prototype.GetType=function(){return Ok(this.e)};t.prototype.GetBodyA=function(){return r(Mi(this.e),w)};t.prototype.GetBodyB=function(){return r(Su(this.e),w)};t.prototype.GetAnchorA=function(){return r(od(this.e),v)};t.prototype.GetAnchorB=function(){return r(ch(this.e),v)};
t.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Zm(b,a),v)};t.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return ms(b,a)};t.prototype.GetNext=function(){return r(Ie(this.e),u)};t.prototype.GetUserData=function(){return Pv(this.e)};t.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pm(b,a)};t.prototype.IsActive=function(){return Zg(this.e)};t.prototype.GetCollideConnected=function(){return Ys(this.e)};
t.prototype.__destroy__=function(){Hq(this.e)};function uw(a,b,f){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);f=f&&"object"===typeof f?f.e:s(f);this.e=a===d?Jg():b===d?_emscripten_bind_b2Mat33_b2Mat33_1(a):f===d?_emscripten_bind_b2Mat33_b2Mat33_2(a,b):qt(a,b,f);q(uw)[this.e]=this}uw.prototype=Object.create(p.prototype);uw.prototype.g=uw;uw.k={};h.b2Mat33=uw;uw.prototype.SetZero=function(){Xt(this.e)};
uw.prototype.Solve33=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Uo(b,a),y)};uw.prototype.Solve22=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(mg(b,a),v)};uw.prototype.GetInverse22=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gm(b,a)};uw.prototype.GetSymInverse33=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xl(b,a)};uw.prototype.get_ex=function(){return r(kh(this.e),y)};
uw.prototype.set_ex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ft(b,a)};uw.prototype.get_ey=function(){return r(gd(this.e),y)};uw.prototype.set_ey=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ti(b,a)};uw.prototype.get_ez=function(){return r(Tv(this.e),y)};uw.prototype.set_ez=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gt(b,a)};uw.prototype.__destroy__=function(){Cd(this.e)};function z(){c("cannot construct a b2Fixture, no constructor in IDL")}
z.prototype=Object.create(p.prototype);z.prototype.g=z;z.k={};h.b2Fixture=z;z.prototype.GetType=function(){return Qk(this.e)};z.prototype.GetShape=function(){return r(uu(this.e),vw)};z.prototype.SetSensor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ji(b,a)};z.prototype.IsSensor=function(){return qo(this.e)};z.prototype.SetFilterData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rh(b,a)};z.prototype.GetFilterData=function(){return r(ys(this.e),ww)};
z.prototype.Refilter=function(){no(this.e)};z.prototype.GetBody=function(){return r(rh(this.e),w)};z.prototype.GetNext=function(){return r(Hj(this.e),z)};z.prototype.GetUserData=function(){return Il(this.e)};z.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);uq(b,a)};z.prototype.TestPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return ut(b,a)};
z.prototype.RayCast=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);return Ik(g,a,b,f)};z.prototype.GetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qi(b,a)};z.prototype.SetDensity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xh(b,a)};z.prototype.GetDensity=function(){return jp(this.e)};z.prototype.GetFriction=function(){return St(this.e)};
z.prototype.SetFriction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rc(b,a)};z.prototype.GetRestitution=function(){return Ne(this.e)};z.prototype.SetRestitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ct(b,a)};z.prototype.GetAABB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(fn(b,a),xw)};z.prototype.Dump=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Mm(b,a)};z.prototype.__destroy__=function(){Nc(this.e)};
function ww(){this.e=Ro();q(ww)[this.e]=this}ww.prototype=Object.create(p.prototype);ww.prototype.g=ww;ww.k={};h.b2Filter=ww;ww.prototype.get_categoryBits=function(){return Fn(this.e)};ww.prototype.set_categoryBits=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qk(b,a)};ww.prototype.get_maskBits=function(){return uo(this.e)};ww.prototype.set_maskBits=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Cr(b,a)};ww.prototype.get_groupIndex=function(){return Le(this.e)};
ww.prototype.set_groupIndex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Um(b,a)};ww.prototype.__destroy__=function(){An(this.e)};function yw(){this.e=yp();q(yw)[this.e]=this}yw.prototype=Object.create(zw.prototype);yw.prototype.g=yw;yw.k={};h.JSQueryCallback=yw;yw.prototype.ReportFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return tt(b,a)};yw.prototype.__destroy__=function(){co(this.e)};function A(){c("cannot construct a b2MouseJoint, no constructor in IDL")}
A.prototype=Object.create(u.prototype);A.prototype.g=A;A.k={};h.b2MouseJoint=A;A.prototype.SetTarget=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dg(b,a)};A.prototype.GetTarget=function(){return r(Qs(this.e),v)};A.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pp(b,a)};A.prototype.GetMaxForce=function(){return Zs(this.e)};A.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Al(b,a)};A.prototype.GetFrequency=function(){return Js(this.e)};
A.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);tk(b,a)};A.prototype.GetDampingRatio=function(){return mr(this.e)};A.prototype.GetType=function(){return bo(this.e)};A.prototype.GetBodyA=function(){return r(ko(this.e),w)};A.prototype.GetBodyB=function(){return r(ij(this.e),w)};A.prototype.GetAnchorA=function(){return r(xt(this.e),v)};A.prototype.GetAnchorB=function(){return r(kq(this.e),v)};
A.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Ll(b,a),v)};A.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Gn(b,a)};A.prototype.GetNext=function(){return r(Ei(this.e),u)};A.prototype.GetUserData=function(){return Hn(this.e)};A.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ss(b,a)};A.prototype.IsActive=function(){return hd(this.e)};A.prototype.GetCollideConnected=function(){return ji(this.e)};
A.prototype.__destroy__=function(){Vp(this.e)};function Aw(a){a=a&&"object"===typeof a?a.e:s(a);this.e=a===d?Xn():Yn(a);q(Aw)[this.e]=this}Aw.prototype=Object.create(p.prototype);Aw.prototype.g=Aw;Aw.k={};h.b2Rot=Aw;Aw.prototype.Set=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ig(b,a)};Aw.prototype.SetIdentity=function(){zg(this.e)};Aw.prototype.GetAngle=function(){return cp(this.e)};Aw.prototype.GetXAxis=function(){return r(Ej(this.e),v)};
Aw.prototype.GetYAxis=function(){return r(Fq(this.e),v)};Aw.prototype.get_s=function(){return op(this.e)};Aw.prototype.set_s=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fe(b,a)};Aw.prototype.get_c=function(){return Mp(this.e)};Aw.prototype.set_c=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);vh(b,a)};Aw.prototype.__destroy__=function(){to(this.e)};function B(){c("cannot construct a b2Profile, no constructor in IDL")}B.prototype=Object.create(p.prototype);B.prototype.g=B;
B.k={};h.b2Profile=B;B.prototype.get_step=function(){return mk(this.e)};B.prototype.set_step=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xi(b,a)};B.prototype.get_collide=function(){return Gs(this.e)};B.prototype.set_collide=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);lo(b,a)};B.prototype.get_solve=function(){return Jp(this.e)};B.prototype.set_solve=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ps(b,a)};B.prototype.get_solveInit=function(){return Ku(this.e)};
B.prototype.set_solveInit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tk(b,a)};B.prototype.get_solveVelocity=function(){return bv(this.e)};B.prototype.set_solveVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);gm(b,a)};B.prototype.get_solvePosition=function(){return zd(this.e)};B.prototype.set_solvePosition=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ng(b,a)};B.prototype.get_broadphase=function(){return kd(this.e)};
B.prototype.set_broadphase=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pn(b,a)};B.prototype.get_solveTOI=function(){return tg(this.e)};B.prototype.set_solveTOI=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ci(b,a)};B.prototype.__destroy__=function(){mh(this.e)};function Bw(){c("cannot construct a VoidPtr, no constructor in IDL")}Bw.prototype=Object.create(p.prototype);Bw.prototype.g=Bw;Bw.k={};h.VoidPtr=Bw;Bw.prototype.__destroy__=function(){At(this.e)};
function C(){this.e=vv();q(C)[this.e]=this}C.prototype=Object.create(p.prototype);C.prototype.g=C;C.k={};h.b2BodyDef=C;C.prototype.get_type=function(){return Yq(this.e)};C.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tc(b,a)};C.prototype.get_position=function(){return r(Zc(this.e),v)};C.prototype.set_position=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kd(b,a)};C.prototype.get_angle=function(){return lt(this.e)};
C.prototype.set_angle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rl(b,a)};C.prototype.get_linearVelocity=function(){return r(ou(this.e),v)};C.prototype.set_linearVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dk(b,a)};C.prototype.get_angularVelocity=function(){return Ce(this.e)};C.prototype.set_angularVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);tm(b,a)};C.prototype.get_linearDamping=function(){return jk(this.e)};
C.prototype.set_linearDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);br(b,a)};C.prototype.get_angularDamping=function(){return sq(this.e)};C.prototype.set_angularDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lu(b,a)};C.prototype.get_allowSleep=function(){return bu(this.e)};C.prototype.set_allowSleep=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ui(b,a)};C.prototype.get_awake=function(){return Yj(this.e)};
C.prototype.set_awake=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Cl(b,a)};C.prototype.get_fixedRotation=function(){return Cn(this.e)};C.prototype.set_fixedRotation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wk(b,a)};C.prototype.get_bullet=function(){return yf(this.e)};C.prototype.set_bullet=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qm(b,a)};C.prototype.get_active=function(){return sj(this.e)};
C.prototype.set_active=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);bk(b,a)};C.prototype.get_userData=function(){return Ou(this.e)};C.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pt(b,a)};C.prototype.get_gravityScale=function(){return Kn(this.e)};C.prototype.set_gravityScale=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ve(b,a)};C.prototype.__destroy__=function(){Or(this.e)};function Cw(){this.e=Yf();q(Cw)[this.e]=this}Cw.prototype=Object.create(Dw.prototype);
Cw.prototype.g=Cw;Cw.k={};h.JSRayCastCallback=Cw;Cw.prototype.ReportFixture=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return fm(k,a,b,f,g)};Cw.prototype.__destroy__=function(){yo(this.e)};function Ew(){c("cannot construct a b2ContactFeature, no constructor in IDL")}Ew.prototype=Object.create(p.prototype);Ew.prototype.g=Ew;Ew.k={};h.b2ContactFeature=Ew;
Ew.prototype.get_indexA=function(){return gh(this.e)};Ew.prototype.set_indexA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ju(b,a)};Ew.prototype.get_indexB=function(){return Iv(this.e)};Ew.prototype.set_indexB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);zq(b,a)};Ew.prototype.get_typeA=function(){return Kl(this.e)};Ew.prototype.set_typeA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lm(b,a)};Ew.prototype.get_typeB=function(){return ap(this.e)};
Ew.prototype.set_typeB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bj(b,a)};Ew.prototype.__destroy__=function(){wp(this.e)};function v(a,b){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);this.e=a===d?bh():b===d?_emscripten_bind_b2Vec2_b2Vec2_1(a):$g(a,b);q(v)[this.e]=this}v.prototype=Object.create(p.prototype);v.prototype.g=v;v.k={};h.b2Vec2=v;v.prototype.SetZero=function(){Oq(this.e)};
v.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);lp(f,a,b)};v.prototype.op_add=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ff(b,a)};v.prototype.op_sub=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);eh(b,a)};v.prototype.op_mul=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$i(b,a)};v.prototype.Length=function(){return Nq(this.e)};v.prototype.LengthSquared=function(){return Fv(this.e)};
v.prototype.Normalize=function(){return Uf(this.e)};v.prototype.IsValid=function(){return Io(this.e)};v.prototype.Skew=function(){return r(lr(this.e),v)};v.prototype.get_x=function(){return dw(this.e)};v.prototype.set_x=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);lf(b,a)};v.prototype.get_y=function(){return Dl(this.e)};v.prototype.set_y=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sv(b,a)};v.prototype.__destroy__=function(){ku(this.e)};
function y(a,b,f){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);f=f&&"object"===typeof f?f.e:s(f);this.e=a===d?nk():b===d?_emscripten_bind_b2Vec3_b2Vec3_1(a):f===d?_emscripten_bind_b2Vec3_b2Vec3_2(a,b):ll(a,b,f);q(y)[this.e]=this}y.prototype=Object.create(p.prototype);y.prototype.g=y;y.k={};h.b2Vec3=y;y.prototype.SetZero=function(){Kf(this.e)};
y.prototype.Set=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Gj(g,a,b,f)};y.prototype.op_add=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bg(b,a)};y.prototype.op_sub=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jn(b,a)};y.prototype.op_mul=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wu(b,a)};y.prototype.get_x=function(){return vd(this.e)};
y.prototype.set_x=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xl(b,a)};y.prototype.get_y=function(){return rt(this.e)};y.prototype.set_y=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bp(b,a)};y.prototype.get_z=function(){return uc(this.e)};y.prototype.set_z=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rl(b,a)};y.prototype.__destroy__=function(){Ah(this.e)};function xw(){this.e=mo();q(xw)[this.e]=this}xw.prototype=Object.create(p.prototype);
xw.prototype.g=xw;xw.k={};h.b2AABB=xw;xw.prototype.IsValid=function(){return Mn(this.e)};xw.prototype.GetCenter=function(){return r(Tm(this.e),v)};xw.prototype.GetExtents=function(){return r(gt(this.e),v)};xw.prototype.GetPerimeter=function(){return Vl(this.e)};xw.prototype.Combine=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);b===d?Cp(f,a):Dp(f,a,b)};xw.prototype.Contains=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return He(b,a)};
xw.prototype.RayCast=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return bl(f,a,b)};xw.prototype.get_lowerBound=function(){return r(ye(this.e),v)};xw.prototype.set_lowerBound=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Np(b,a)};xw.prototype.get_upperBound=function(){return r(Qe(this.e),v)};xw.prototype.set_upperBound=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);gf(b,a)};xw.prototype.__destroy__=function(){Gp(this.e)};
function Fw(){this.e=Xj();q(Fw)[this.e]=this}Fw.prototype=Object.create(p.prototype);Fw.prototype.g=Fw;Fw.k={};h.b2FixtureDef=Fw;Fw.prototype.get_shape=function(){return r(nt(this.e),vw)};Fw.prototype.set_shape=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$u(b,a)};Fw.prototype.get_userData=function(){return je(this.e)};Fw.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sp(b,a)};Fw.prototype.get_friction=function(){return Ns(this.e)};
Fw.prototype.set_friction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cm(b,a)};Fw.prototype.get_restitution=function(){return Pk(this.e)};Fw.prototype.set_restitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ed(b,a)};Fw.prototype.get_density=function(){return ce(this.e)};Fw.prototype.set_density=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wr(b,a)};Fw.prototype.get_isSensor=function(){return dg(this.e)};
Fw.prototype.set_isSensor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cl(b,a)};Fw.prototype.get_filter=function(){return r(Gc(this.e),ww)};Fw.prototype.set_filter=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ph(b,a)};Fw.prototype.__destroy__=function(){Zu(this.e)};function D(){this.e=$k();q(D)[this.e]=this}D.prototype=Object.create(E.prototype);D.prototype.g=D;D.k={};h.b2FrictionJointDef=D;
D.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);mv(g,a,b,f)};D.prototype.get_localAnchorA=function(){return r(wf(this.e),v)};D.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wf(b,a)};D.prototype.get_localAnchorB=function(){return r(rj(this.e),v)};D.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ij(b,a)};
D.prototype.get_maxForce=function(){return sm(this.e)};D.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dm(b,a)};D.prototype.get_maxTorque=function(){return Eo(this.e)};D.prototype.set_maxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pr(b,a)};D.prototype.get_type=function(){return Hc(this.e)};D.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sr(b,a)};D.prototype.get_userData=function(){return Sh(this.e)};
D.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);tc(b,a)};D.prototype.get_bodyA=function(){return r(It(this.e),w)};D.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gv(b,a)};D.prototype.get_bodyB=function(){return r(Qp(this.e),w)};D.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gr(b,a)};D.prototype.get_collideConnected=function(){return ur(this.e)};
D.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ke(b,a)};D.prototype.__destroy__=function(){gi(this.e)};function Gw(){this.e=Bm();q(Gw)[this.e]=this}Gw.prototype=Object.create(p.prototype);Gw.prototype.g=Gw;Gw.k={};h.b2Manifold=Gw;Gw.prototype.get_localNormal=function(){return r(al(this.e),v)};Gw.prototype.set_localNormal=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);er(b,a)};Gw.prototype.get_localPoint=function(){return r(mq(this.e),v)};
Gw.prototype.set_localPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Om(b,a)};Gw.prototype.get_type=function(){return Fd(this.e)};Gw.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);kl(b,a)};Gw.prototype.get_pointCount=function(){return Sv(this.e)};Gw.prototype.set_pointCount=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wg(b,a)};Gw.prototype.__destroy__=function(){Pg(this.e)};function F(){this.e=kf();q(F)[this.e]=this}F.prototype=Object.create(E.prototype);
F.prototype.g=F;F.k={};h.b2PrismaticJointDef=F;F.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);vf(k,a,b,f,g)};F.prototype.get_localAnchorA=function(){return r(aj(this.e),v)};F.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Os(b,a)};F.prototype.get_localAnchorB=function(){return r(bf(this.e),v)};
F.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ao(b,a)};F.prototype.get_localAxisA=function(){return r(Yt(this.e),v)};F.prototype.set_localAxisA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);jn(b,a)};F.prototype.get_referenceAngle=function(){return Ae(this.e)};F.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Nh(b,a)};F.prototype.get_enableLimit=function(){return vs(this.e)};
F.prototype.set_enableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Sl(b,a)};F.prototype.get_lowerTranslation=function(){return le(this.e)};F.prototype.set_lowerTranslation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jd(b,a)};F.prototype.get_upperTranslation=function(){return Dc(this.e)};F.prototype.set_upperTranslation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ju(b,a)};F.prototype.get_enableMotor=function(){return cs(this.e)};
F.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);jr(b,a)};F.prototype.get_maxMotorForce=function(){return Nv(this.e)};F.prototype.set_maxMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ai(b,a)};F.prototype.get_motorSpeed=function(){return so(this.e)};F.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dn(b,a)};F.prototype.get_type=function(){return Af(this.e)};
F.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);di(b,a)};F.prototype.get_userData=function(){return Aj(this.e)};F.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rr(b,a)};F.prototype.get_bodyA=function(){return r(Ho(this.e),w)};F.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$s(b,a)};F.prototype.get_bodyB=function(){return r(Vk(this.e),w)};
F.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zk(b,a)};F.prototype.get_collideConnected=function(){return Cs(this.e)};F.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hn(b,a)};F.prototype.__destroy__=function(){Ee(this.e)};function G(a){a=a&&"object"===typeof a?a.e:s(a);this.e=Cf(a);q(G)[this.e]=this}G.prototype=Object.create(p.prototype);G.prototype.g=G;G.k={};h.b2World=G;
G.prototype.SetDestructionListener=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rf(b,a)};G.prototype.SetContactListener=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xd(b,a)};G.prototype.SetDebugDraw=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qf(b,a)};G.prototype.CreateBody=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(oo(b,a),w)};G.prototype.DestroyBody=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);yd(b,a)};
G.prototype.CreateJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(sg(b,a),u)};G.prototype.DestroyJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qq(b,a)};G.prototype.Step=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);kk(g,a,b,f)};G.prototype.ClearForces=function(){zh(this.e)};G.prototype.DrawDebugData=function(){jd(this.e)};
G.prototype.QueryAABB=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Nu(f,a,b)};G.prototype.RayCast=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Ds(g,a,b,f)};G.prototype.GetBodyList=function(){return r(zs(this.e),w)};G.prototype.GetJointList=function(){return r(Nm(this.e),u)};G.prototype.GetContactList=function(){return r(Ft(this.e),H)};
G.prototype.SetAllowSleeping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);dp(b,a)};G.prototype.GetAllowSleeping=function(){return yi(this.e)};G.prototype.SetWarmStarting=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pc(b,a)};G.prototype.GetWarmStarting=function(){return Ko(this.e)};G.prototype.SetContinuousPhysics=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);zm(b,a)};G.prototype.GetContinuousPhysics=function(){return Hk(this.e)};
G.prototype.SetSubStepping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ef(b,a)};G.prototype.GetSubStepping=function(){return Eq(this.e)};G.prototype.GetProxyCount=function(){return Tf(this.e)};G.prototype.GetBodyCount=function(){return Pi(this.e)};G.prototype.GetJointCount=function(){return sn(this.e)};G.prototype.GetContactCount=function(){return qq(this.e)};G.prototype.GetTreeHeight=function(){return cu(this.e)};G.prototype.GetTreeBalance=function(){return Cc(this.e)};
G.prototype.GetTreeQuality=function(){return ue(this.e)};G.prototype.SetGravity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jo(b,a)};G.prototype.GetGravity=function(){return r(id(this.e),v)};G.prototype.IsLocked=function(){return vc(this.e)};G.prototype.SetAutoClearForces=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Id(b,a)};G.prototype.GetAutoClearForces=function(){return uk(this.e)};G.prototype.GetProfile=function(){return r(Po(this.e),B)};G.prototype.Dump=function(){ns(this.e)};
G.prototype.__destroy__=function(){Sn(this.e)};function I(){c("cannot construct a b2PrismaticJoint, no constructor in IDL")}I.prototype=Object.create(u.prototype);I.prototype.g=I;I.k={};h.b2PrismaticJoint=I;I.prototype.GetLocalAnchorA=function(){return r(rk(this.e),v)};I.prototype.GetLocalAnchorB=function(){return r(ao(this.e),v)};I.prototype.GetLocalAxisA=function(){return r(Vh(this.e),v)};I.prototype.GetReferenceAngle=function(){return ol(this.e)};I.prototype.GetJointTranslation=function(){return ah(this.e)};
I.prototype.GetJointSpeed=function(){return $m(this.e)};I.prototype.IsLimitEnabled=function(){return tv(this.e)};I.prototype.EnableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rm(b,a)};I.prototype.GetLowerLimit=function(){return xe(this.e)};I.prototype.GetUpperLimit=function(){return gs(this.e)};I.prototype.SetLimits=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);md(f,a,b)};I.prototype.IsMotorEnabled=function(){return gl(this.e)};
I.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kr(b,a)};I.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xs(b,a)};I.prototype.GetMotorSpeed=function(){return xg(this.e)};I.prototype.SetMaxMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zv(b,a)};I.prototype.GetMaxMotorForce=function(){return Fp(this.e)};I.prototype.GetMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Li(b,a)};
I.prototype.GetType=function(){return Me(this.e)};I.prototype.GetBodyA=function(){return r(Ep(this.e),w)};I.prototype.GetBodyB=function(){return r(it(this.e),w)};I.prototype.GetAnchorA=function(){return r(el(this.e),v)};I.prototype.GetAnchorB=function(){return r(hm(this.e),v)};I.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(hi(b,a),v)};I.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Vg(b,a)};
I.prototype.GetNext=function(){return r(Ke(this.e),u)};I.prototype.GetUserData=function(){return tr(this.e)};I.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);bj(b,a)};I.prototype.IsActive=function(){return xm(this.e)};I.prototype.GetCollideConnected=function(){return Xg(this.e)};I.prototype.__destroy__=function(){rg(this.e)};function Hw(){c("cannot construct a b2RayCastOutput, no constructor in IDL")}Hw.prototype=Object.create(p.prototype);Hw.prototype.g=Hw;
Hw.k={};h.b2RayCastOutput=Hw;Hw.prototype.get_normal=function(){return r(ag(this.e),v)};Hw.prototype.set_normal=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fh(b,a)};Hw.prototype.get_fraction=function(){return wn(this.e)};Hw.prototype.set_fraction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pe(b,a)};Hw.prototype.__destroy__=function(){Rm(this.e)};function Iw(){c("cannot construct a b2ContactID, no constructor in IDL")}Iw.prototype=Object.create(p.prototype);
Iw.prototype.g=Iw;Iw.k={};h.b2ContactID=Iw;Iw.prototype.get_cf=function(){return r(hs(this.e),Ew)};Iw.prototype.set_cf=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dj(b,a)};Iw.prototype.get_key=function(){return bp(this.e)};Iw.prototype.set_key=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rf(b,a)};Iw.prototype.__destroy__=function(){dm(this.e)};function sw(){c("cannot construct a b2DestructionListenerWrapper, no constructor in IDL")}sw.prototype=Object.create(p.prototype);
sw.prototype.g=sw;sw.k={};h.b2DestructionListenerWrapper=sw;sw.prototype.__destroy__=function(){Uv(this.e)};function Jw(){this.e=ew();q(Jw)[this.e]=this}Jw.prototype=Object.create(Kw.prototype);Jw.prototype.g=Jw;Jw.k={};h.JSContactListener=Jw;Jw.prototype.BeginContact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ho(b,a)};Jw.prototype.EndContact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);td(b,a)};
Jw.prototype.PreSolve=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Dh(f,a,b)};Jw.prototype.PostSolve=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);$p(f,a,b)};Jw.prototype.__destroy__=function(){Ck(this.e)};
function Lw(a,b,f,g){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);f=f&&"object"===typeof f?f.e:s(f);g=g&&"object"===typeof g?g.e:s(g);this.e=a===d?jq():b===d?_emscripten_bind_b2Mat22_b2Mat22_1(a):f===d?Er(a,b):g===d?_emscripten_bind_b2Mat22_b2Mat22_3(a,b,f):Hr(a,b,f,g);q(Lw)[this.e]=this}Lw.prototype=Object.create(p.prototype);Lw.prototype.g=Lw;Lw.k={};h.b2Mat22=Lw;
Lw.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Sq(f,a,b)};Lw.prototype.SetIdentity=function(){$t(this.e)};Lw.prototype.SetZero=function(){at(this.e)};Lw.prototype.GetInverse=function(){return r(Jr(this.e),Lw)};Lw.prototype.Solve=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(No(b,a),v)};Lw.prototype.get_ex=function(){return r(ip(this.e),v)};
Lw.prototype.set_ex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hv(b,a)};Lw.prototype.get_ey=function(){return r(Zt(this.e),v)};Lw.prototype.set_ey=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Cq(b,a)};Lw.prototype.__destroy__=function(){qu(this.e)};function J(){this.e=Cv();q(J)[this.e]=this}J.prototype=Object.create(E.prototype);J.prototype.g=J;J.k={};h.b2WheelJointDef=J;
J.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);wj(k,a,b,f,g)};J.prototype.get_localAnchorA=function(){return r(tl(this.e),v)};J.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);of(b,a)};J.prototype.get_localAnchorB=function(){return r(qn(this.e),v)};
J.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lv(b,a)};J.prototype.get_localAxisA=function(){return r(oj(this.e),v)};J.prototype.set_localAxisA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Av(b,a)};J.prototype.get_enableMotor=function(){return Ev(this.e)};J.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ie(b,a)};J.prototype.get_maxMotorTorque=function(){return dh(this.e)};
J.prototype.set_maxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fr(b,a)};J.prototype.get_motorSpeed=function(){return Ar(this.e)};J.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hp(b,a)};J.prototype.get_frequencyHz=function(){return zc(this.e)};J.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dq(b,a)};J.prototype.get_dampingRatio=function(){return vn(this.e)};
J.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jq(b,a)};J.prototype.get_type=function(){return Kt(this.e)};J.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);te(b,a)};J.prototype.get_userData=function(){return Qu(this.e)};J.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bh(b,a)};J.prototype.get_bodyA=function(){return r(Vv(this.e),w)};
J.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);jt(b,a)};J.prototype.get_bodyB=function(){return r(ln(this.e),w)};J.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);he(b,a)};J.prototype.get_collideConnected=function(){return bd(this.e)};J.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zq(b,a)};J.prototype.__destroy__=function(){Jf(this.e)};function Mw(){this.e=Wm();q(Mw)[this.e]=this}
Mw.prototype=Object.create(vw.prototype);Mw.prototype.g=Mw;Mw.k={};h.b2CircleShape=Mw;Mw.prototype.GetType=function(){return Lh(this.e)};Mw.prototype.GetChildCount=function(){return xf(this.e)};Mw.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return hq(f,a,b)};
Mw.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return lk(k,a,b,f,g)};Mw.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);ts(g,a,b,f)};
Mw.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);cq(f,a,b)};Mw.prototype.get_m_p=function(){return r(fh(this.e),v)};Mw.prototype.set_m_p=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sd(b,a)};Mw.prototype.get_m_type=function(){return Lr(this.e)};Mw.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cf(b,a)};Mw.prototype.get_m_radius=function(){return ai(this.e)};
Mw.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Te(b,a)};Mw.prototype.__destroy__=function(){oq(this.e)};function K(){this.e=im();q(K)[this.e]=this}K.prototype=Object.create(E.prototype);K.prototype.g=K;K.k={};h.b2WeldJointDef=K;K.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Ks(g,a,b,f)};K.prototype.get_localAnchorA=function(){return r(Rs(this.e),v)};
K.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wi(b,a)};K.prototype.get_localAnchorB=function(){return r(Go(this.e),v)};K.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Se(b,a)};K.prototype.get_referenceAngle=function(){return Mq(this.e)};K.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wr(b,a)};K.prototype.get_frequencyHz=function(){return Ng(this.e)};
K.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hr(b,a)};K.prototype.get_dampingRatio=function(){return Up(this.e)};K.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xj(b,a)};K.prototype.get_type=function(){return mp(this.e)};K.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vr(b,a)};K.prototype.get_userData=function(){return ot(this.e)};
K.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Hh(b,a)};K.prototype.get_bodyA=function(){return r(tu(this.e),w)};K.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qf(b,a)};K.prototype.get_bodyB=function(){return r(cv(this.e),w)};K.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Uu(b,a)};K.prototype.get_collideConnected=function(){return Ri(this.e)};
K.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ed(b,a)};K.prototype.__destroy__=function(){Mo(this.e)};function Nw(){c("cannot construct a b2Draw, no constructor in IDL")}Nw.prototype=Object.create(p.prototype);Nw.prototype.g=Nw;Nw.k={};h.b2Draw=Nw;Nw.prototype.SetFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ge(b,a)};Nw.prototype.GetFlags=function(){return wc(this.e)};
Nw.prototype.AppendFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Et(b,a)};Nw.prototype.ClearFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);vi(b,a)};Nw.prototype.__destroy__=function(){vj(this.e)};function Ow(){this.e=Ap();q(Ow)[this.e]=this}Ow.prototype=Object.create(p.prototype);Ow.prototype.g=Ow;Ow.k={};h.b2MassData=Ow;Ow.prototype.get_mass=function(){return wv(this.e)};Ow.prototype.set_mass=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ud(b,a)};
Ow.prototype.get_center=function(){return r(Bf(this.e),v)};Ow.prototype.set_center=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qj(b,a)};Ow.prototype.get_I=function(){return zr(this.e)};Ow.prototype.set_I=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Es(b,a)};Ow.prototype.__destroy__=function(){Fs(this.e)};function u(){c("cannot construct a b2Joint, no constructor in IDL")}u.prototype=Object.create(p.prototype);u.prototype.g=u;u.k={};h.b2Joint=u;u.prototype.GetType=function(){return Rv(this.e)};
u.prototype.GetBodyA=function(){return r(Gf(this.e),w)};u.prototype.GetBodyB=function(){return r(yv(this.e),w)};u.prototype.GetAnchorA=function(){return r(bn(this.e),v)};u.prototype.GetAnchorB=function(){return r(zj(this.e),v)};u.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(bm(b,a),v)};u.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return gk(b,a)};u.prototype.GetNext=function(){return r(Bs(this.e),u)};
u.prototype.GetUserData=function(){return il(this.e)};u.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);bw(b,a)};u.prototype.IsActive=function(){return au(this.e)};u.prototype.GetCollideConnected=function(){return Hf(this.e)};u.prototype.Dump=function(){Bv(this.e)};function Pw(){c("cannot construct a b2GearJoint, no constructor in IDL")}Pw.prototype=Object.create(u.prototype);Pw.prototype.g=Pw;Pw.k={};h.b2GearJoint=Pw;
Pw.prototype.GetJoint1=function(){return r(Qd(this.e),u)};Pw.prototype.GetJoint2=function(){return r(du(this.e),u)};Pw.prototype.SetRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);yn(b,a)};Pw.prototype.GetRatio=function(){return Xf(this.e)};Pw.prototype.GetType=function(){return iv(this.e)};Pw.prototype.GetBodyA=function(){return r(pm(this.e),w)};Pw.prototype.GetBodyB=function(){return r(nq(this.e),w)};Pw.prototype.GetAnchorA=function(){return r(Td(this.e),v)};
Pw.prototype.GetAnchorB=function(){return r(Qt(this.e),v)};Pw.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Je(b,a),v)};Pw.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Dd(b,a)};Pw.prototype.GetNext=function(){return r(Bu(this.e),u)};Pw.prototype.GetUserData=function(){return We(this.e)};Pw.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ql(b,a)};
Pw.prototype.IsActive=function(){return Ni(this.e)};Pw.prototype.GetCollideConnected=function(){return me(this.e)};Pw.prototype.__destroy__=function(){Sg(this.e)};function Dw(){c("cannot construct a b2RayCastCallback, no constructor in IDL")}Dw.prototype=Object.create(p.prototype);Dw.prototype.g=Dw;Dw.k={};h.b2RayCastCallback=Dw;Dw.prototype.__destroy__=function(){Th(this.e)};function L(){c("cannot construct a b2WeldJoint, no constructor in IDL")}L.prototype=Object.create(u.prototype);
L.prototype.g=L;L.k={};h.b2WeldJoint=L;L.prototype.GetLocalAnchorA=function(){return r(zl(this.e),v)};L.prototype.GetLocalAnchorB=function(){return r(mn(this.e),v)};L.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ch(b,a)};L.prototype.GetFrequency=function(){return hl(this.e)};L.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);De(b,a)};L.prototype.GetDampingRatio=function(){return qs(this.e)};L.prototype.Dump=function(){Do(this.e)};
L.prototype.GetType=function(){return ro(this.e)};L.prototype.GetBodyA=function(){return r(bg(this.e),w)};L.prototype.GetBodyB=function(){return r(uj(this.e),w)};L.prototype.GetAnchorA=function(){return r(av(this.e),v)};L.prototype.GetAnchorB=function(){return r(Uq(this.e),v)};L.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(es(b,a),v)};L.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Xc(b,a)};
L.prototype.GetNext=function(){return r(Vq(this.e),u)};L.prototype.GetUserData=function(){return sl(this.e)};L.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ii(b,a)};L.prototype.IsActive=function(){return Rc(this.e)};L.prototype.GetCollideConnected=function(){return Bq(this.e)};L.prototype.__destroy__=function(){Zp(this.e)};function Qw(){this.e=Ht();q(Qw)[this.e]=this}Qw.prototype=Object.create(p.prototype);Qw.prototype.g=Qw;Qw.k={};h.b2JointEdge=Qw;
Qw.prototype.get_other=function(){return r(Ts(this.e),w)};Qw.prototype.set_other=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zd(b,a)};Qw.prototype.get_joint=function(){return r(Xu(this.e),u)};Qw.prototype.set_joint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lc(b,a)};Qw.prototype.get_prev=function(){return r(Wc(this.e),Qw)};Qw.prototype.set_prev=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ug(b,a)};Qw.prototype.get_next=function(){return r(io(this.e),Qw)};
Qw.prototype.set_next=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bn(b,a)};Qw.prototype.__destroy__=function(){fo(this.e)};function M(){this.e=Hd();q(M)[this.e]=this}M.prototype=Object.create(E.prototype);M.prototype.g=M;M.k={};h.b2PulleyJointDef=M;
M.prototype.Initialize=function(a,b,f,g,k,n,m){var l=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g),k=k&&"object"===typeof k?k.e:s(k),n=n&&"object"===typeof n?n.e:s(n),m=m&&"object"===typeof m?m.e:s(m);ev(l,a,b,f,g,k,n,m)};M.prototype.get_groundAnchorA=function(){return r(Qh(this.e),v)};M.prototype.set_groundAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xv(b,a)};
M.prototype.get_groundAnchorB=function(){return r(an(this.e),v)};M.prototype.set_groundAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rr(b,a)};M.prototype.get_localAnchorA=function(){return r(nd(this.e),v)};M.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Uh(b,a)};M.prototype.get_localAnchorB=function(){return r(pg(this.e),v)};M.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rk(b,a)};
M.prototype.get_lengthA=function(){return Wl(this.e)};M.prototype.set_lengthA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qg(b,a)};M.prototype.get_lengthB=function(){return Hi(this.e)};M.prototype.set_lengthB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hu(b,a)};M.prototype.get_ratio=function(){return af(this.e)};M.prototype.set_ratio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tg(b,a)};M.prototype.get_type=function(){return Yl(this.e)};
M.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ul(b,a)};M.prototype.get_userData=function(){return Yk(this.e)};M.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Cm(b,a)};M.prototype.get_bodyA=function(){return r(ld(this.e),w)};M.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qv(b,a)};M.prototype.get_bodyB=function(){return r(uh(this.e),w)};
M.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);eg(b,a)};M.prototype.get_collideConnected=function(){return $v(this.e)};M.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Mt(b,a)};M.prototype.__destroy__=function(){hj(this.e)};function Kw(){c("cannot construct a b2ContactListener, no constructor in IDL")}Kw.prototype=Object.create(p.prototype);Kw.prototype.g=Kw;Kw.k={};h.b2ContactListener=Kw;Kw.prototype.__destroy__=function(){zo(this.e)};
function Rw(){this.e=zi();q(Rw)[this.e]=this}Rw.prototype=Object.create(p.prototype);Rw.prototype.g=Rw;Rw.k={};h.b2ManifoldPoint=Rw;Rw.prototype.get_localPoint=function(){return r(zf(this.e),v)};Rw.prototype.set_localPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xs(b,a)};Rw.prototype.get_normalImpulse=function(){return ek(this.e)};Rw.prototype.set_normalImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);li(b,a)};Rw.prototype.get_tangentImpulse=function(){return Sp(this.e)};
Rw.prototype.set_tangentImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pd(b,a)};Rw.prototype.get_id=function(){return r(ug(this.e),Iw)};Rw.prototype.set_id=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fp(b,a)};Rw.prototype.__destroy__=function(){Kq(this.e)};function zw(){c("cannot construct a b2QueryCallback, no constructor in IDL")}zw.prototype=Object.create(p.prototype);zw.prototype.g=zw;zw.k={};h.b2QueryCallback=zw;zw.prototype.__destroy__=function(){$e(this.e)};
function E(){this.e=Vm();q(E)[this.e]=this}E.prototype=Object.create(p.prototype);E.prototype.g=E;E.k={};h.b2JointDef=E;E.prototype.get_type=function(){return st(this.e)};E.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dt(b,a)};E.prototype.get_userData=function(){return tp(this.e)};E.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rp(b,a)};E.prototype.get_bodyA=function(){return r(fr(this.e),w)};
E.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jk(b,a)};E.prototype.get_bodyB=function(){return r(Ym(this.e),w)};E.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rq(b,a)};E.prototype.get_collideConnected=function(){return yk(this.e)};E.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ek(b,a)};E.prototype.__destroy__=function(){uf(this.e)};
function Sw(a,b){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);this.e=a===d?ii():b===d?_emscripten_bind_b2Transform_b2Transform_1(a):ds(a,b);q(Sw)[this.e]=this}Sw.prototype=Object.create(p.prototype);Sw.prototype.g=Sw;Sw.k={};h.b2Transform=Sw;Sw.prototype.SetIdentity=function(){vq(this.e)};Sw.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Xh(f,a,b)};Sw.prototype.get_p=function(){return r(yt(this.e),v)};
Sw.prototype.set_p=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fi(b,a)};Sw.prototype.get_q=function(){return r(Ld(this.e),Aw)};Sw.prototype.set_q=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Oe(b,a)};Sw.prototype.__destroy__=function(){Re(this.e)};function N(){this.e=jv();q(N)[this.e]=this}N.prototype=Object.create(vw.prototype);N.prototype.g=N;N.k={};h.b2ChainShape=N;
N.prototype.CreateLoop=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);ov(f,a,b)};N.prototype.CreateChain=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);wd(f,a,b)};N.prototype.SetPrevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);En(b,a)};N.prototype.SetNextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Un(b,a)};
N.prototype.GetChildEdge=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Us(f,a,b)};N.prototype.GetType=function(){return nm(this.e)};N.prototype.GetChildCount=function(){return zp(this.e)};N.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return nl(f,a,b)};
N.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return fs(k,a,b,f,g)};N.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Uc(g,a,b,f)};
N.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);rv(f,a,b)};N.prototype.get_m_vertices=function(){return r(ee(this.e),v)};N.prototype.set_m_vertices=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);de(b,a)};N.prototype.get_m_count=function(){return qc(this.e)};N.prototype.set_m_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fl(b,a)};N.prototype.get_m_prevVertex=function(){return r(yh(this.e),v)};
N.prototype.set_m_prevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);or(b,a)};N.prototype.get_m_nextVertex=function(){return r(Mf(this.e),v)};N.prototype.set_m_nextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hh(b,a)};N.prototype.get_m_hasPrevVertex=function(){return pr(this.e)};N.prototype.set_m_hasPrevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qg(b,a)};N.prototype.get_m_hasNextVertex=function(){return Tn(this.e)};
N.prototype.set_m_hasNextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ir(b,a)};N.prototype.get_m_type=function(){return Kj(this.e)};N.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gg(b,a)};N.prototype.get_m_radius=function(){return js(this.e)};N.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ls(b,a)};N.prototype.__destroy__=function(){Pl(this.e)};
function Tw(a,b,f){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);f=f&&"object"===typeof f?f.e:s(f);this.e=a===d?Is():b===d?_emscripten_bind_b2Color_b2Color_1(a):f===d?_emscripten_bind_b2Color_b2Color_2(a,b):Hs(a,b,f);q(Tw)[this.e]=this}Tw.prototype=Object.create(p.prototype);Tw.prototype.g=Tw;Tw.k={};h.b2Color=Tw;Tw.prototype.Set=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Du(g,a,b,f)};
Tw.prototype.get_r=function(){return xd(this.e)};Tw.prototype.set_r=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qe(b,a)};Tw.prototype.get_g=function(){return Oo(this.e)};Tw.prototype.set_g=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);yc(b,a)};Tw.prototype.get_b=function(){return rs(this.e)};Tw.prototype.set_b=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);am(b,a)};Tw.prototype.__destroy__=function(){wm(this.e)};
function O(){c("cannot construct a b2RopeJoint, no constructor in IDL")}O.prototype=Object.create(u.prototype);O.prototype.g=O;O.k={};h.b2RopeJoint=O;O.prototype.GetLocalAnchorA=function(){return r(ar(this.e),v)};O.prototype.GetLocalAnchorB=function(){return r(gj(this.e),v)};O.prototype.SetMaxLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);aw(b,a)};O.prototype.GetMaxLength=function(){return Ve(this.e)};O.prototype.GetLimitState=function(){return xk(this.e)};O.prototype.GetType=function(){return yr(this.e)};
O.prototype.GetBodyA=function(){return r(Hu(this.e),w)};O.prototype.GetBodyB=function(){return r(dl(this.e),w)};O.prototype.GetAnchorA=function(){return r(cj(this.e),v)};O.prototype.GetAnchorB=function(){return r(ff(this.e),v)};O.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(us(b,a),v)};O.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return gv(b,a)};O.prototype.GetNext=function(){return r(Qo(this.e),u)};
O.prototype.GetUserData=function(){return Rj(this.e)};O.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$r(b,a)};O.prototype.IsActive=function(){return Rt(this.e)};O.prototype.GetCollideConnected=function(){return Nt(this.e)};O.prototype.__destroy__=function(){Pq(this.e)};function Uw(){c("cannot construct a b2RayCastInput, no constructor in IDL")}Uw.prototype=Object.create(p.prototype);Uw.prototype.g=Uw;Uw.k={};h.b2RayCastInput=Uw;
Uw.prototype.get_p1=function(){return r(Jc(this.e),v)};Uw.prototype.set_p1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);lu(b,a)};Uw.prototype.get_p2=function(){return r(pl(this.e),v)};Uw.prototype.set_p2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zf(b,a)};Uw.prototype.get_maxFraction=function(){return om(this.e)};Uw.prototype.set_maxFraction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);jo(b,a)};Uw.prototype.__destroy__=function(){mf(this.e)};
function P(){this.e=lj();q(P)[this.e]=this}P.prototype=Object.create(vw.prototype);P.prototype.g=P;P.k={};h.b2PolygonShape=P;P.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Og(f,a,b)};
P.prototype.SetAsBox=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);f===d?vu(k,a,b):g===d?_emscripten_bind_b2PolygonShape_SetAsBox_3(k,a,b,f):Hm(k,a,b,f,g)};P.prototype.GetVertexCount=function(){return Lp(this.e)};P.prototype.GetVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Qr(b,a),v)};P.prototype.GetType=function(){return Mh(this.e)};
P.prototype.GetChildCount=function(){return So(this.e)};P.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return jj(f,a,b)};P.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return Bc(k,a,b,f,g)};
P.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Jl(g,a,b,f)};P.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);yl(f,a,b)};P.prototype.get_m_centroid=function(){return r(Ol(this.e),v)};P.prototype.set_m_centroid=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fm(b,a)};P.prototype.get_m_vertexCount=function(){return yu(this.e)};
P.prototype.set_m_vertexCount=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zo(b,a)};P.prototype.get_m_type=function(){return kp(this.e)};P.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xu(b,a)};P.prototype.get_m_radius=function(){return Qj(this.e)};P.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cw(b,a)};P.prototype.__destroy__=function(){Pe(this.e)};function Q(){this.e=Wp();q(Q)[this.e]=this}Q.prototype=Object.create(vw.prototype);
Q.prototype.g=Q;Q.k={};h.b2EdgeShape=Q;Q.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Wt(f,a,b)};Q.prototype.GetType=function(){return Iq(this.e)};Q.prototype.GetChildCount=function(){return fd(this.e)};Q.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return Nl(f,a,b)};
Q.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return Ti(k,a,b,f,g)};Q.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Xq(g,a,b,f)};
Q.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);zt(f,a,b)};Q.prototype.get_m_vertex1=function(){return r(Bl(this.e),v)};Q.prototype.set_m_vertex1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);eu(b,a)};Q.prototype.get_m_vertex2=function(){return r(Im(this.e),v)};Q.prototype.set_m_vertex2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xq(b,a)};Q.prototype.get_m_vertex0=function(){return r(Oi(this.e),v)};
Q.prototype.set_m_vertex0=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gi(b,a)};Q.prototype.get_m_vertex3=function(){return r(tq(this.e),v)};Q.prototype.set_m_vertex3=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);kj(b,a)};Q.prototype.get_m_hasVertex0=function(){return em(this.e)};Q.prototype.set_m_hasVertex0=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ue(b,a)};Q.prototype.get_m_hasVertex3=function(){return Zj(this.e)};
Q.prototype.set_m_hasVertex3=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kc(b,a)};Q.prototype.get_m_type=function(){return Pd(this.e)};Q.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Eu(b,a)};Q.prototype.get_m_radius=function(){return pv(this.e)};Q.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dr(b,a)};Q.prototype.__destroy__=function(){pq(this.e)};
function Vw(){c("cannot construct a JSContactFilter, no constructor in IDL")}Vw.prototype=Object.create(Ww.prototype);Vw.prototype.g=Vw;Vw.k={};h.JSContactFilter=Vw;Vw.prototype.JSContactListener=function(){vg(this.e)};Vw.prototype.ShouldCollide=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return fk(f,a,b)};Vw.prototype.__destroy__=function(){Pj(this.e)};function S(){this.e=Km();q(S)[this.e]=this}S.prototype=Object.create(E.prototype);
S.prototype.g=S;S.k={};h.b2RevoluteJointDef=S;S.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Ut(g,a,b,f)};S.prototype.get_localAnchorA=function(){return r(ad(this.e),v)};S.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rg(b,a)};S.prototype.get_localAnchorB=function(){return r(Nj(this.e),v)};
S.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);nn(b,a)};S.prototype.get_referenceAngle=function(){return Oj(this.e)};S.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);vp(b,a)};S.prototype.get_enableLimit=function(){return $h(this.e)};S.prototype.set_enableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lo(b,a)};S.prototype.get_lowerAngle=function(){return jl(this.e)};
S.prototype.set_lowerAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);eo(b,a)};S.prototype.get_upperAngle=function(){return ne(this.e)};S.prototype.set_upperAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);km(b,a)};S.prototype.get_enableMotor=function(){return wo(this.e)};S.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ci(b,a)};S.prototype.get_motorSpeed=function(){return $f(this.e)};
S.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dv(b,a)};S.prototype.get_maxMotorTorque=function(){return Tp(this.e)};S.prototype.set_maxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tu(b,a)};S.prototype.get_type=function(){return lm(this.e)};S.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hk(b,a)};S.prototype.get_userData=function(){return en(this.e)};
S.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$c(b,a)};S.prototype.get_bodyA=function(){return r(ht(this.e),w)};S.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fq(b,a)};S.prototype.get_bodyB=function(){return r(Wj(this.e),w)};S.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Hg(b,a)};S.prototype.get_collideConnected=function(){return Sr(this.e)};
S.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Sf(b,a)};S.prototype.__destroy__=function(){Yo(this.e)};function Xw(){this.e=wt();q(Xw)[this.e]=this}Xw.prototype=Object.create(Nw.prototype);Xw.prototype.g=Xw;Xw.k={};h.JSDraw=Xw;Xw.prototype.DrawPolygon=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);zn(g,a,b,f)};
Xw.prototype.DrawSolidPolygon=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);hg(g,a,b,f)};Xw.prototype.DrawCircle=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Qc(g,a,b,f)};
Xw.prototype.DrawSolidCircle=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);Ec(k,a,b,f,g)};Xw.prototype.DrawSegment=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);dd(g,a,b,f)};Xw.prototype.DrawTransform=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);On(b,a)};Xw.prototype.__destroy__=function(){kg(this.e)};
function T(){c("cannot construct a b2WheelJoint, no constructor in IDL")}T.prototype=Object.create(u.prototype);T.prototype.g=T;T.k={};h.b2WheelJoint=T;T.prototype.GetLocalAnchorA=function(){return r(gg(this.e),v)};T.prototype.GetLocalAnchorB=function(){return r(tf(this.e),v)};T.prototype.GetLocalAxisA=function(){return r(Fu(this.e),v)};T.prototype.GetJointTranslation=function(){return Yr(this.e)};T.prototype.GetJointSpeed=function(){return Vf(this.e)};T.prototype.IsMotorEnabled=function(){return If(this.e)};
T.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fg(b,a)};T.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ze(b,a)};T.prototype.GetMotorSpeed=function(){return tn(this.e)};T.prototype.SetMaxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);nj(b,a)};T.prototype.GetMaxMotorTorque=function(){return Rd(this.e)};T.prototype.GetMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Zr(b,a)};
T.prototype.SetSpringFrequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fi(b,a)};T.prototype.GetSpringFrequencyHz=function(){return Hv(this.e)};T.prototype.SetSpringDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xo(b,a)};T.prototype.GetSpringDampingRatio=function(){return oc(this.e)};T.prototype.GetType=function(){return zu(this.e)};T.prototype.GetBodyA=function(){return r(Nn(this.e),w)};T.prototype.GetBodyB=function(){return r(vm(this.e),w)};
T.prototype.GetAnchorA=function(){return r(Wh(this.e),v)};T.prototype.GetAnchorB=function(){return r(qi(this.e),v)};T.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Df(b,a),v)};T.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Jm(b,a)};T.prototype.GetNext=function(){return r(Sm(this.e),u)};T.prototype.GetUserData=function(){return In(this.e)};
T.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ws(b,a)};T.prototype.IsActive=function(){return bs(this.e)};T.prototype.GetCollideConnected=function(){return Wo(this.e)};T.prototype.__destroy__=function(){xv(this.e)};function U(){c("cannot construct a b2PulleyJoint, no constructor in IDL")}U.prototype=Object.create(u.prototype);U.prototype.g=U;U.k={};h.b2PulleyJoint=U;U.prototype.GetGroundAnchorA=function(){return r(Bd(this.e),v)};
U.prototype.GetGroundAnchorB=function(){return r(Ag(this.e),v)};U.prototype.GetLengthA=function(){return Pn(this.e)};U.prototype.GetLengthB=function(){return pk(this.e)};U.prototype.GetRatio=function(){return go(this.e)};U.prototype.GetType=function(){return Vi(this.e)};U.prototype.GetBodyA=function(){return r(aq(this.e),w)};U.prototype.GetBodyB=function(){return r(se(this.e),w)};U.prototype.GetAnchorA=function(){return r(nu(this.e),v)};U.prototype.GetAnchorB=function(){return r(jh(this.e),v)};
U.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Vo(b,a),v)};U.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return mt(b,a)};U.prototype.GetNext=function(){return r(Jj(this.e),u)};U.prototype.GetUserData=function(){return Gl(this.e)};U.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Oc(b,a)};U.prototype.IsActive=function(){return Di(this.e)};U.prototype.GetCollideConnected=function(){return ih(this.e)};
U.prototype.__destroy__=function(){$n(this.e)};function V(){this.e=np();q(V)[this.e]=this}V.prototype=Object.create(E.prototype);V.prototype.g=V;V.k={};h.b2MouseJointDef=V;V.prototype.get_target=function(){return r(Am(this.e),v)};V.prototype.set_target=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ae(b,a)};V.prototype.get_maxForce=function(){return Cu(this.e)};V.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ip(b,a)};V.prototype.get_frequencyHz=function(){return qp(this.e)};
V.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);is(b,a)};V.prototype.get_dampingRatio=function(){return Eg(this.e)};V.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xo(b,a)};V.prototype.get_type=function(){return Yv(this.e)};V.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vc(b,a)};V.prototype.get_userData=function(){return ss(this.e)};
V.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cd(b,a)};V.prototype.get_bodyA=function(){return r(Mk(this.e),w)};V.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vd(b,a)};V.prototype.get_bodyB=function(){return r(Kg(this.e),w)};V.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kh(b,a)};V.prototype.get_collideConnected=function(){return hf(this.e)};
V.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);zv(b,a)};V.prototype.__destroy__=function(){lg(this.e)};function H(){c("cannot construct a b2Contact, no constructor in IDL")}H.prototype=Object.create(p.prototype);H.prototype.g=H;H.k={};h.b2Contact=H;H.prototype.GetManifold=function(){return r(Ps(this.e),Gw)};H.prototype.IsTouching=function(){return Fe(this.e)};H.prototype.SetEnabled=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Nf(b,a)};
H.prototype.IsEnabled=function(){return yj(this.e)};H.prototype.GetNext=function(){return r(Od(this.e),H)};H.prototype.GetFixtureA=function(){return r(Ze(this.e),z)};H.prototype.GetChildIndexA=function(){return bt(this.e)};H.prototype.GetFixtureB=function(){return r(qv(this.e),z)};H.prototype.GetChildIndexB=function(){return Gq(this.e)};H.prototype.SetFriction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);dr(b,a)};H.prototype.GetFriction=function(){return pi(this.e)};
H.prototype.ResetFriction=function(){mu(this.e)};H.prototype.SetRestitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rq(b,a)};H.prototype.GetRestitution=function(){return cn(this.e)};H.prototype.ResetRestitution=function(){xi(this.e)};function vw(){c("cannot construct a b2Shape, no constructor in IDL")}vw.prototype=Object.create(p.prototype);vw.prototype.g=vw;vw.k={};h.b2Shape=vw;vw.prototype.GetType=function(){return Ln(this.e)};vw.prototype.GetChildCount=function(){return Ls(this.e)};
vw.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return Lg(f,a,b)};vw.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return Ad(k,a,b,f,g)};
vw.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);sc(g,a,b,f)};vw.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);As(f,a,b)};vw.prototype.get_m_type=function(){return sk(this.e)};vw.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xr(b,a)};vw.prototype.get_m_radius=function(){return Wq(this.e)};
vw.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Of(b,a)};vw.prototype.__destroy__=function(){$l(this.e)};function W(){this.e=Em();q(W)[this.e]=this}W.prototype=Object.create(E.prototype);W.prototype.g=W;W.k={};h.b2DistanceJointDef=W;W.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);gn(k,a,b,f,g)};
W.prototype.get_localAnchorA=function(){return r(pj(this.e),v)};W.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Mv(b,a)};W.prototype.get_localAnchorB=function(){return r(dq(this.e),v)};W.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ck(b,a)};W.prototype.get_length=function(){return re(this.e)};W.prototype.set_length=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ri(b,a)};W.prototype.get_frequencyHz=function(){return Qn(this.e)};
W.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Mj(b,a)};W.prototype.get_dampingRatio=function(){return Tj(this.e)};W.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qd(b,a)};W.prototype.get_type=function(){return ui(this.e)};W.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Yp(b,a)};W.prototype.get_userData=function(){return Yc(this.e)};
W.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ej(b,a)};W.prototype.get_bodyA=function(){return r(dj(this.e),w)};W.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tr(b,a)};W.prototype.get_bodyB=function(){return r(pu(this.e),w)};W.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xp(b,a)};W.prototype.get_collideConnected=function(){return up(this.e)};
W.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);kt(b,a)};W.prototype.__destroy__=function(){Bt(this.e)};function w(){c("cannot construct a b2Body, no constructor in IDL")}w.prototype=Object.create(p.prototype);w.prototype.g=w;w.k={};h.b2Body=w;w.prototype.CreateFixture=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return b===d?r(El(f,a),z):r(Fl(f,a,b),z)};
w.prototype.DestroyFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);on(b,a)};w.prototype.SetTransform=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);ef(f,a,b)};w.prototype.GetTransform=function(){return r(dt(this.e),Sw)};w.prototype.GetPosition=function(){return r(lh(this.e),v)};w.prototype.GetAngle=function(){return Vt(this.e)};w.prototype.GetWorldCenter=function(){return r(Bk(this.e),v)};
w.prototype.GetLocalCenter=function(){return r(Yu(this.e),v)};w.prototype.SetLinearVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wk(b,a)};w.prototype.GetLinearVelocity=function(){return r(ks(this.e),v)};w.prototype.SetAngularVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pu(b,a)};w.prototype.GetAngularVelocity=function(){return tj(this.e)};
w.prototype.ApplyForce=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Jt(f,a,b)};w.prototype.ApplyForceToCenter=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sh(b,a)};w.prototype.ApplyTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Op(b,a)};w.prototype.ApplyLinearImpulse=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);wl(f,a,b)};
w.prototype.ApplyAngularImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jh(b,a)};w.prototype.GetMass=function(){return Wn(this.e)};w.prototype.GetInertia=function(){return vr(this.e)};w.prototype.GetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ih(b,a)};w.prototype.SetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Be(b,a)};w.prototype.ResetMassData=function(){ir(this.e)};
w.prototype.GetWorldPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(dk(b,a),v)};w.prototype.GetWorldVector=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Mg(b,a),v)};w.prototype.GetLocalPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Wg(b,a),v)};w.prototype.GetLocalVector=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(qm(b,a),v)};
w.prototype.GetLinearVelocityFromWorldPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Aq(b,a),v)};w.prototype.GetLinearVelocityFromLocalPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(iq(b,a),v)};w.prototype.GetLinearDamping=function(){return gr(this.e)};w.prototype.SetLinearDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);um(b,a)};w.prototype.GetAngularDamping=function(){return un(this.e)};
w.prototype.SetAngularDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);dv(b,a)};w.prototype.GetGravityScale=function(){return Ig(this.e)};w.prototype.SetGravityScale=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ul(b,a)};w.prototype.SetType=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vn(b,a)};w.prototype.GetType=function(){return Tq(this.e)};w.prototype.SetBullet=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Nk(b,a)};
w.prototype.IsBullet=function(){return vl(this.e)};w.prototype.SetSleepingAllowed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);yg(b,a)};w.prototype.IsSleepingAllowed=function(){return Hp(this.e)};w.prototype.SetAwake=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);iu(b,a)};w.prototype.IsAwake=function(){return Yd(this.e)};w.prototype.SetActive=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Hl(b,a)};w.prototype.IsActive=function(){return wi(this.e)};
w.prototype.SetFixedRotation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Eh(b,a)};w.prototype.IsFixedRotation=function(){return ni(this.e)};w.prototype.GetFixtureList=function(){return r(vo(this.e),z)};w.prototype.GetJointList=function(){return r(Jv(this.e),Qw)};w.prototype.GetContactList=function(){return r(mi(this.e),Yw)};w.prototype.GetNext=function(){return r(Gu(this.e),w)};w.prototype.GetUserData=function(){return Gk(this.e)};
w.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ov(b,a)};w.prototype.GetWorld=function(){return r(fu(this.e),G)};w.prototype.Dump=function(){zk(this.e)};function X(){c("cannot construct a b2FrictionJoint, no constructor in IDL")}X.prototype=Object.create(u.prototype);X.prototype.g=X;X.k={};h.b2FrictionJoint=X;X.prototype.GetLocalAnchorA=function(){return r(Fo(this.e),v)};X.prototype.GetLocalAnchorB=function(){return r(be(this.e),v)};
X.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pt(b,a)};X.prototype.GetMaxForce=function(){return Md(this.e)};X.prototype.SetMaxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pp(b,a)};X.prototype.GetMaxTorque=function(){return Si(this.e)};X.prototype.GetType=function(){return Cg(this.e)};X.prototype.GetBodyA=function(){return r(Kv(this.e),w)};X.prototype.GetBodyB=function(){return r(pf(this.e),w)};
X.prototype.GetAnchorA=function(){return r(xr(this.e),v)};X.prototype.GetAnchorB=function(){return r(Mu(this.e),v)};X.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Xp(b,a),v)};X.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Ml(b,a)};X.prototype.GetNext=function(){return r(qr(this.e),u)};X.prototype.GetUserData=function(){return cr(this.e)};
X.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rp(b,a)};X.prototype.IsActive=function(){return xc(this.e)};X.prototype.GetCollideConnected=function(){return gp(this.e)};X.prototype.__destroy__=function(){Co(this.e)};function Zw(){c("cannot construct a b2DestructionListener, no constructor in IDL")}Zw.prototype=Object.create(p.prototype);Zw.prototype.g=Zw;Zw.k={};h.b2DestructionListener=Zw;Zw.prototype.__destroy__=function(){Sc(this.e)};
function Y(){this.e=Xm();q(Y)[this.e]=this}Y.prototype=Object.create(E.prototype);Y.prototype.g=Y;Y.k={};h.b2GearJointDef=Y;Y.prototype.get_joint1=function(){return r(Ki(this.e),u)};Y.prototype.set_joint1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wq(b,a)};Y.prototype.get_joint2=function(){return r(Pf(this.e),u)};Y.prototype.set_joint2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ot(b,a)};Y.prototype.get_ratio=function(){return To(this.e)};
Y.prototype.set_ratio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);mj(b,a)};Y.prototype.get_type=function(){return mm(this.e)};Y.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xe(b,a)};Y.prototype.get_userData=function(){return ei(this.e)};Y.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);nv(b,a)};Y.prototype.get_bodyA=function(){return r(Lj(this.e),w)};
Y.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bi(b,a)};Y.prototype.get_bodyB=function(){return r(kn(this.e),w)};Y.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fv(b,a)};Y.prototype.get_collideConnected=function(){return Kk(this.e)};Y.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vs(b,a)};Y.prototype.__destroy__=function(){eq(this.e)};
function Z(){c("cannot construct a b2RevoluteJoint, no constructor in IDL")}Z.prototype=Object.create(u.prototype);Z.prototype.g=Z;Z.k={};h.b2RevoluteJoint=Z;Z.prototype.GetLocalAnchorA=function(){return r(Fc(this.e),v)};Z.prototype.GetLocalAnchorB=function(){return r(os(this.e),v)};Z.prototype.GetReferenceAngle=function(){return Xk(this.e)};Z.prototype.GetJointAngle=function(){return jg(this.e)};Z.prototype.GetJointSpeed=function(){return sf(this.e)};Z.prototype.IsLimitEnabled=function(){return Ru(this.e)};
Z.prototype.EnableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ql(b,a)};Z.prototype.GetLowerLimit=function(){return Ak(this.e)};Z.prototype.GetUpperLimit=function(){return ge(this.e)};Z.prototype.SetLimits=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Ur(f,a,b)};Z.prototype.IsMotorEnabled=function(){return $d(this.e)};Z.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$o(b,a)};
Z.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rn(b,a)};Z.prototype.GetMotorSpeed=function(){return Fg(this.e)};Z.prototype.SetMaxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);kv(b,a)};Z.prototype.GetMaxMotorTorque=function(){return ak(this.e)};Z.prototype.GetMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Ic(b,a)};Z.prototype.GetType=function(){return Nd(this.e)};
Z.prototype.GetBodyA=function(){return r(Cj(this.e),w)};Z.prototype.GetBodyB=function(){return r(Sk(this.e),w)};Z.prototype.GetAnchorA=function(){return r(nr(this.e),v)};Z.prototype.GetAnchorB=function(){return r(ru(this.e),v)};Z.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Lt(b,a),v)};Z.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return wh(b,a)};Z.prototype.GetNext=function(){return r(su(this.e),u)};
Z.prototype.GetUserData=function(){return bi(this.e)};Z.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vu(b,a)};Z.prototype.IsActive=function(){return Au(this.e)};Z.prototype.GetCollideConnected=function(){return vt(this.e)};Z.prototype.__destroy__=function(){Gd(this.e)};function Ww(){c("cannot construct a b2ContactFilter, no constructor in IDL")}Ww.prototype=Object.create(p.prototype);Ww.prototype.g=Ww;Ww.k={};h.b2ContactFilter=Ww;Ww.prototype.__destroy__=function(){og(this.e)};
function Yw(){this.e=Nr();q(Yw)[this.e]=this}Yw.prototype=Object.create(p.prototype);Yw.prototype.g=Yw;Yw.k={};h.b2ContactEdge=Yw;Yw.prototype.get_other=function(){return r(fj(this.e),w)};Yw.prototype.set_other=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Yi(b,a)};Yw.prototype.get_contact=function(){return r(dn(this.e),H)};Yw.prototype.set_contact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zh(b,a)};Yw.prototype.get_prev=function(){return r(nh(this.e),Yw)};
Yw.prototype.set_prev=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fj(b,a)};Yw.prototype.get_next=function(){return r(yq(this.e),Yw)};Yw.prototype.set_next=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pc(b,a)};Yw.prototype.__destroy__=function(){et(this.e)};function $(){this.e=ik();q($)[this.e]=this}$.prototype=Object.create(E.prototype);$.prototype.g=$;$.k={};h.b2RopeJointDef=$;$.prototype.get_localAnchorA=function(){return r(Yh(this.e),v)};
$.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ac(b,a)};$.prototype.get_localAnchorB=function(){return r(Fk(this.e),v)};$.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);lv(b,a)};$.prototype.get_maxLength=function(){return Lk(this.e)};$.prototype.set_maxLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ml(b,a)};$.prototype.get_type=function(){return bq(this.e)};
$.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Uk(b,a)};$.prototype.get_userData=function(){return Yg(this.e)};$.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);po(b,a)};$.prototype.get_bodyA=function(){return r(Sj(this.e),w)};$.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ct(b,a)};$.prototype.get_bodyB=function(){return r(uv(this.e),w)};
$.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);we(b,a)};$.prototype.get_collideConnected=function(){return Oh(this.e)};$.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rd(b,a)};$.prototype.__destroy__=function(){as(this.e)};h.b2Shape.e_circle=vk();h.b2Shape.e_edge=$j();h.b2Shape.e_polygon=Mc();h.b2Shape.e_chain=ph();h.b2Shape.e_typeCount=df();h.e_unknownJoint=Iu();h.e_revoluteJoint=Wd();h.e_prismaticJoint=Lq();
h.e_distanceJoint=Zn();h.e_pulleyJoint=Lf();h.e_mouseJoint=Ud();h.e_gearJoint=Ms();h.e_wheelJoint=kr();h.e_weldJoint=ym();h.e_frictionJoint=oe();h.e_ropeJoint=Br();h.e_inactiveLimit=gu();h.e_atLowerLimit=Zi();h.e_atUpperLimit=Wv();h.e_equalLimits=ki();h.b2Manifold.e_circles=xn();h.b2Manifold.e_faceA=Uj();h.b2Manifold.e_faceB=Vj();h.b2_staticBody=jm();h.b2_kinematicBody=lq();h.b2_dynamicBody=gq();h.b2Draw.e_shapeBit=oi();h.b2Draw.e_jointBit=cg();h.b2Draw.e_aabbBit=Tt();h.b2Draw.e_pairBit=Bo();
h.b2Draw.e_centerOfMassBit=ep();h.b2ContactFeature.e_vertex=qh();h.b2ContactFeature.e_face=Sd();function p(){}p.prototype=Object.create(p.prototype);p.prototype.g=p;p.k={};h.WrapperObject=p;function q(a){return(a||p).k}h.getCache=q;function r(a,b){var f=q(b),g=f[a];if(g)return g;g=Object.create((b||p).prototype);g.e=a;return f[a]=g}h.wrapPointer=r;function mw(a,b){return r(a.e,b)}h.castObject=mw;h.NULL=r(0);
function nw(a){a.__destroy__||c("Error: Cannot destroy object. (Did you create it yourself?)");a.__destroy__();delete q(a.g)[a.e]}h.destroy=nw;function ow(a,b){return a.e===b.e}h.compare=ow;function pw(a){return a.e}h.getPointer=pw;function qw(a){return a.g}h.getClass=qw;function s(a){return"string"==typeof a?Za(zb(a),"i8",Va):a}function rw(){this.e=nf();q(rw)[this.e]=this}rw.prototype=Object.create(sw.prototype);rw.prototype.g=rw;rw.k={};h.JSDestructionListener=rw;
rw.prototype.SayGoodbyeJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zl(b,a)};rw.prototype.SayGoodbyeFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kp(b,a)};rw.prototype.__destroy__=function(){$q(this.e)};function tw(){c("cannot construct a b2ContactImpulse, no constructor in IDL")}tw.prototype=Object.create(p.prototype);tw.prototype.g=tw;tw.k={};h.b2ContactImpulse=tw;tw.prototype.get_count=function(){return rn(this.e)};
tw.prototype.set_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);th(b,a)};tw.prototype.__destroy__=function(){jf(this.e)};function t(){c("cannot construct a b2DistanceJoint, no constructor in IDL")}t.prototype=Object.create(u.prototype);t.prototype.g=t;t.k={};h.b2DistanceJoint=t;t.prototype.GetLocalAnchorA=function(){return r(Mr(this.e),v)};t.prototype.GetLocalAnchorB=function(){return r(si(this.e),v)};
t.prototype.SetLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wu(b,a)};t.prototype.GetLength=function(){return ok(this.e)};t.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);oh(b,a)};t.prototype.GetFrequency=function(){return Tl(this.e)};t.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ye(b,a)};t.prototype.GetDampingRatio=function(){return Gh(this.e)};t.prototype.GetType=function(){return Ok(this.e)};
t.prototype.GetBodyA=function(){return r(Mi(this.e),w)};t.prototype.GetBodyB=function(){return r(Su(this.e),w)};t.prototype.GetAnchorA=function(){return r(od(this.e),v)};t.prototype.GetAnchorB=function(){return r(ch(this.e),v)};t.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Zm(b,a),v)};t.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return ms(b,a)};t.prototype.GetNext=function(){return r(Ie(this.e),u)};
t.prototype.GetUserData=function(){return Pv(this.e)};t.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pm(b,a)};t.prototype.IsActive=function(){return Zg(this.e)};t.prototype.GetCollideConnected=function(){return Ys(this.e)};t.prototype.__destroy__=function(){Hq(this.e)};
function uw(a,b,f){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);f=f&&"object"===typeof f?f.e:s(f);this.e=a===d?Jg():b===d?_emscripten_bind_b2Mat33_b2Mat33_1(a):f===d?_emscripten_bind_b2Mat33_b2Mat33_2(a,b):qt(a,b,f);q(uw)[this.e]=this}uw.prototype=Object.create(p.prototype);uw.prototype.g=uw;uw.k={};h.b2Mat33=uw;uw.prototype.SetZero=function(){Xt(this.e)};uw.prototype.Solve33=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Uo(b,a),y)};
uw.prototype.Solve22=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(mg(b,a),v)};uw.prototype.GetInverse22=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gm(b,a)};uw.prototype.GetSymInverse33=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xl(b,a)};uw.prototype.get_ex=function(){return r(kh(this.e),y)};uw.prototype.set_ex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ft(b,a)};uw.prototype.get_ey=function(){return r(gd(this.e),y)};
uw.prototype.set_ey=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ti(b,a)};uw.prototype.get_ez=function(){return r(Tv(this.e),y)};uw.prototype.set_ez=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gt(b,a)};uw.prototype.__destroy__=function(){Cd(this.e)};function z(){c("cannot construct a b2Fixture, no constructor in IDL")}z.prototype=Object.create(p.prototype);z.prototype.g=z;z.k={};h.b2Fixture=z;z.prototype.GetType=function(){return Qk(this.e)};
z.prototype.GetShape=function(){return r(uu(this.e),vw)};z.prototype.SetSensor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ji(b,a)};z.prototype.IsSensor=function(){return qo(this.e)};z.prototype.SetFilterData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rh(b,a)};z.prototype.GetFilterData=function(){return r(ys(this.e),ww)};z.prototype.Refilter=function(){no(this.e)};z.prototype.GetBody=function(){return r(rh(this.e),w)};
z.prototype.GetNext=function(){return r(Hj(this.e),z)};z.prototype.GetUserData=function(){return Il(this.e)};z.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);uq(b,a)};z.prototype.TestPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return ut(b,a)};z.prototype.RayCast=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);return Ik(g,a,b,f)};
z.prototype.GetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qi(b,a)};z.prototype.SetDensity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xh(b,a)};z.prototype.GetDensity=function(){return jp(this.e)};z.prototype.GetFriction=function(){return St(this.e)};z.prototype.SetFriction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rc(b,a)};z.prototype.GetRestitution=function(){return Ne(this.e)};
z.prototype.SetRestitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ct(b,a)};z.prototype.GetAABB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(fn(b,a),xw)};z.prototype.Dump=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Mm(b,a)};z.prototype.__destroy__=function(){Nc(this.e)};function ww(){this.e=Ro();q(ww)[this.e]=this}ww.prototype=Object.create(p.prototype);ww.prototype.g=ww;ww.k={};h.b2Filter=ww;ww.prototype.get_categoryBits=function(){return Fn(this.e)};
ww.prototype.set_categoryBits=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qk(b,a)};ww.prototype.get_maskBits=function(){return uo(this.e)};ww.prototype.set_maskBits=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Cr(b,a)};ww.prototype.get_groupIndex=function(){return Le(this.e)};ww.prototype.set_groupIndex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Um(b,a)};ww.prototype.__destroy__=function(){An(this.e)};function yw(){this.e=yp();q(yw)[this.e]=this}
yw.prototype=Object.create(zw.prototype);yw.prototype.g=yw;yw.k={};h.JSQueryCallback=yw;yw.prototype.ReportFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return tt(b,a)};yw.prototype.__destroy__=function(){co(this.e)};function A(){c("cannot construct a b2MouseJoint, no constructor in IDL")}A.prototype=Object.create(u.prototype);A.prototype.g=A;A.k={};h.b2MouseJoint=A;A.prototype.SetTarget=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dg(b,a)};
A.prototype.GetTarget=function(){return r(Qs(this.e),v)};A.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pp(b,a)};A.prototype.GetMaxForce=function(){return Zs(this.e)};A.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Al(b,a)};A.prototype.GetFrequency=function(){return Js(this.e)};A.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);tk(b,a)};A.prototype.GetDampingRatio=function(){return mr(this.e)};
A.prototype.GetType=function(){return bo(this.e)};A.prototype.GetBodyA=function(){return r(ko(this.e),w)};A.prototype.GetBodyB=function(){return r(ij(this.e),w)};A.prototype.GetAnchorA=function(){return r(xt(this.e),v)};A.prototype.GetAnchorB=function(){return r(kq(this.e),v)};A.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Ll(b,a),v)};A.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Gn(b,a)};
A.prototype.GetNext=function(){return r(Ei(this.e),u)};A.prototype.GetUserData=function(){return Hn(this.e)};A.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ss(b,a)};A.prototype.IsActive=function(){return hd(this.e)};A.prototype.GetCollideConnected=function(){return ji(this.e)};A.prototype.__destroy__=function(){Vp(this.e)};function Aw(a){a=a&&"object"===typeof a?a.e:s(a);this.e=a===d?Xn():Yn(a);q(Aw)[this.e]=this}Aw.prototype=Object.create(p.prototype);
Aw.prototype.g=Aw;Aw.k={};h.b2Rot=Aw;Aw.prototype.Set=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ig(b,a)};Aw.prototype.SetIdentity=function(){zg(this.e)};Aw.prototype.GetAngle=function(){return cp(this.e)};Aw.prototype.GetXAxis=function(){return r(Ej(this.e),v)};Aw.prototype.GetYAxis=function(){return r(Fq(this.e),v)};Aw.prototype.get_s=function(){return op(this.e)};Aw.prototype.set_s=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fe(b,a)};Aw.prototype.get_c=function(){return Mp(this.e)};
Aw.prototype.set_c=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);vh(b,a)};Aw.prototype.__destroy__=function(){to(this.e)};function B(){c("cannot construct a b2Profile, no constructor in IDL")}B.prototype=Object.create(p.prototype);B.prototype.g=B;B.k={};h.b2Profile=B;B.prototype.get_step=function(){return mk(this.e)};B.prototype.set_step=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xi(b,a)};B.prototype.get_collide=function(){return Gs(this.e)};
B.prototype.set_collide=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);lo(b,a)};B.prototype.get_solve=function(){return Jp(this.e)};B.prototype.set_solve=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ps(b,a)};B.prototype.get_solveInit=function(){return Ku(this.e)};B.prototype.set_solveInit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tk(b,a)};B.prototype.get_solveVelocity=function(){return bv(this.e)};
B.prototype.set_solveVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);gm(b,a)};B.prototype.get_solvePosition=function(){return zd(this.e)};B.prototype.set_solvePosition=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ng(b,a)};B.prototype.get_broadphase=function(){return kd(this.e)};B.prototype.set_broadphase=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pn(b,a)};B.prototype.get_solveTOI=function(){return tg(this.e)};
B.prototype.set_solveTOI=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ci(b,a)};B.prototype.__destroy__=function(){mh(this.e)};function Bw(){c("cannot construct a VoidPtr, no constructor in IDL")}Bw.prototype=Object.create(p.prototype);Bw.prototype.g=Bw;Bw.k={};h.VoidPtr=Bw;Bw.prototype.__destroy__=function(){At(this.e)};function C(){this.e=vv();q(C)[this.e]=this}C.prototype=Object.create(p.prototype);C.prototype.g=C;C.k={};h.b2BodyDef=C;C.prototype.get_type=function(){return Yq(this.e)};
C.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tc(b,a)};C.prototype.get_position=function(){return r(Zc(this.e),v)};C.prototype.set_position=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kd(b,a)};C.prototype.get_angle=function(){return lt(this.e)};C.prototype.set_angle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rl(b,a)};C.prototype.get_linearVelocity=function(){return r(ou(this.e),v)};
C.prototype.set_linearVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dk(b,a)};C.prototype.get_angularVelocity=function(){return Ce(this.e)};C.prototype.set_angularVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);tm(b,a)};C.prototype.get_linearDamping=function(){return jk(this.e)};C.prototype.set_linearDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);br(b,a)};C.prototype.get_angularDamping=function(){return sq(this.e)};
C.prototype.set_angularDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lu(b,a)};C.prototype.get_allowSleep=function(){return bu(this.e)};C.prototype.set_allowSleep=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ui(b,a)};C.prototype.get_awake=function(){return Yj(this.e)};C.prototype.set_awake=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Cl(b,a)};C.prototype.get_fixedRotation=function(){return Cn(this.e)};
C.prototype.set_fixedRotation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wk(b,a)};C.prototype.get_bullet=function(){return yf(this.e)};C.prototype.set_bullet=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qm(b,a)};C.prototype.get_active=function(){return sj(this.e)};C.prototype.set_active=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);bk(b,a)};C.prototype.get_userData=function(){return Ou(this.e)};
C.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pt(b,a)};C.prototype.get_gravityScale=function(){return Kn(this.e)};C.prototype.set_gravityScale=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ve(b,a)};C.prototype.__destroy__=function(){Or(this.e)};function Cw(){this.e=Yf();q(Cw)[this.e]=this}Cw.prototype=Object.create(Dw.prototype);Cw.prototype.g=Cw;Cw.k={};h.JSRayCastCallback=Cw;
Cw.prototype.ReportFixture=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return fm(k,a,b,f,g)};Cw.prototype.__destroy__=function(){yo(this.e)};function Ew(){c("cannot construct a b2ContactFeature, no constructor in IDL")}Ew.prototype=Object.create(p.prototype);Ew.prototype.g=Ew;Ew.k={};h.b2ContactFeature=Ew;Ew.prototype.get_indexA=function(){return gh(this.e)};
Ew.prototype.set_indexA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ju(b,a)};Ew.prototype.get_indexB=function(){return Iv(this.e)};Ew.prototype.set_indexB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);zq(b,a)};Ew.prototype.get_typeA=function(){return Kl(this.e)};Ew.prototype.set_typeA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lm(b,a)};Ew.prototype.get_typeB=function(){return ap(this.e)};
Ew.prototype.set_typeB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bj(b,a)};Ew.prototype.__destroy__=function(){wp(this.e)};function v(a,b){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);this.e=a===d?bh():b===d?_emscripten_bind_b2Vec2_b2Vec2_1(a):$g(a,b);q(v)[this.e]=this}v.prototype=Object.create(p.prototype);v.prototype.g=v;v.k={};h.b2Vec2=v;v.prototype.SetZero=function(){Oq(this.e)};
v.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);lp(f,a,b)};v.prototype.op_add=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ff(b,a)};v.prototype.op_sub=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);eh(b,a)};v.prototype.op_mul=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$i(b,a)};v.prototype.Length=function(){return Nq(this.e)};v.prototype.LengthSquared=function(){return Fv(this.e)};
v.prototype.Normalize=function(){return Uf(this.e)};v.prototype.IsValid=function(){return Io(this.e)};v.prototype.Skew=function(){return r(lr(this.e),v)};v.prototype.get_x=function(){return dw(this.e)};v.prototype.set_x=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);lf(b,a)};v.prototype.get_y=function(){return Dl(this.e)};v.prototype.set_y=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sv(b,a)};v.prototype.__destroy__=function(){ku(this.e)};
function y(a,b,f){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);f=f&&"object"===typeof f?f.e:s(f);this.e=a===d?nk():b===d?_emscripten_bind_b2Vec3_b2Vec3_1(a):f===d?_emscripten_bind_b2Vec3_b2Vec3_2(a,b):ll(a,b,f);q(y)[this.e]=this}y.prototype=Object.create(p.prototype);y.prototype.g=y;y.k={};h.b2Vec3=y;y.prototype.SetZero=function(){Kf(this.e)};
y.prototype.Set=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Gj(g,a,b,f)};y.prototype.op_add=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bg(b,a)};y.prototype.op_sub=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jn(b,a)};y.prototype.op_mul=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wu(b,a)};y.prototype.get_x=function(){return vd(this.e)};
y.prototype.set_x=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xl(b,a)};y.prototype.get_y=function(){return rt(this.e)};y.prototype.set_y=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bp(b,a)};y.prototype.get_z=function(){return uc(this.e)};y.prototype.set_z=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rl(b,a)};y.prototype.__destroy__=function(){Ah(this.e)};function xw(){this.e=mo();q(xw)[this.e]=this}xw.prototype=Object.create(p.prototype);
xw.prototype.g=xw;xw.k={};h.b2AABB=xw;xw.prototype.IsValid=function(){return Mn(this.e)};xw.prototype.GetCenter=function(){return r(Tm(this.e),v)};xw.prototype.GetExtents=function(){return r(gt(this.e),v)};xw.prototype.GetPerimeter=function(){return Vl(this.e)};xw.prototype.Combine=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);b===d?Cp(f,a):Dp(f,a,b)};xw.prototype.Contains=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return He(b,a)};
xw.prototype.RayCast=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return bl(f,a,b)};xw.prototype.get_lowerBound=function(){return r(ye(this.e),v)};xw.prototype.set_lowerBound=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Np(b,a)};xw.prototype.get_upperBound=function(){return r(Qe(this.e),v)};xw.prototype.set_upperBound=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);gf(b,a)};xw.prototype.__destroy__=function(){Gp(this.e)};
function Fw(){this.e=Xj();q(Fw)[this.e]=this}Fw.prototype=Object.create(p.prototype);Fw.prototype.g=Fw;Fw.k={};h.b2FixtureDef=Fw;Fw.prototype.get_shape=function(){return r(nt(this.e),vw)};Fw.prototype.set_shape=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$u(b,a)};Fw.prototype.get_userData=function(){return je(this.e)};Fw.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sp(b,a)};Fw.prototype.get_friction=function(){return Ns(this.e)};
Fw.prototype.set_friction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cm(b,a)};Fw.prototype.get_restitution=function(){return Pk(this.e)};Fw.prototype.set_restitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ed(b,a)};Fw.prototype.get_density=function(){return ce(this.e)};Fw.prototype.set_density=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wr(b,a)};Fw.prototype.get_isSensor=function(){return dg(this.e)};
Fw.prototype.set_isSensor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cl(b,a)};Fw.prototype.get_filter=function(){return r(Gc(this.e),ww)};Fw.prototype.set_filter=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ph(b,a)};Fw.prototype.__destroy__=function(){Zu(this.e)};function D(){this.e=$k();q(D)[this.e]=this}D.prototype=Object.create(E.prototype);D.prototype.g=D;D.k={};h.b2FrictionJointDef=D;
D.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);mv(g,a,b,f)};D.prototype.get_localAnchorA=function(){return r(wf(this.e),v)};D.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wf(b,a)};D.prototype.get_localAnchorB=function(){return r(rj(this.e),v)};D.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ij(b,a)};
D.prototype.get_maxForce=function(){return sm(this.e)};D.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dm(b,a)};D.prototype.get_maxTorque=function(){return Eo(this.e)};D.prototype.set_maxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pr(b,a)};D.prototype.get_type=function(){return Hc(this.e)};D.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sr(b,a)};D.prototype.get_userData=function(){return Sh(this.e)};
D.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);tc(b,a)};D.prototype.get_bodyA=function(){return r(It(this.e),w)};D.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gv(b,a)};D.prototype.get_bodyB=function(){return r(Qp(this.e),w)};D.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gr(b,a)};D.prototype.get_collideConnected=function(){return ur(this.e)};
D.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ke(b,a)};D.prototype.__destroy__=function(){gi(this.e)};function Gw(){this.e=Bm();q(Gw)[this.e]=this}Gw.prototype=Object.create(p.prototype);Gw.prototype.g=Gw;Gw.k={};h.b2Manifold=Gw;Gw.prototype.get_localNormal=function(){return r(al(this.e),v)};Gw.prototype.set_localNormal=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);er(b,a)};Gw.prototype.get_localPoint=function(){return r(mq(this.e),v)};
Gw.prototype.set_localPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Om(b,a)};Gw.prototype.get_type=function(){return Fd(this.e)};Gw.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);kl(b,a)};Gw.prototype.get_pointCount=function(){return Sv(this.e)};Gw.prototype.set_pointCount=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wg(b,a)};Gw.prototype.__destroy__=function(){Pg(this.e)};function F(){this.e=kf();q(F)[this.e]=this}F.prototype=Object.create(E.prototype);
F.prototype.g=F;F.k={};h.b2PrismaticJointDef=F;F.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);vf(k,a,b,f,g)};F.prototype.get_localAnchorA=function(){return r(aj(this.e),v)};F.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Os(b,a)};F.prototype.get_localAnchorB=function(){return r(bf(this.e),v)};
F.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ao(b,a)};F.prototype.get_localAxisA=function(){return r(Yt(this.e),v)};F.prototype.set_localAxisA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);jn(b,a)};F.prototype.get_referenceAngle=function(){return Ae(this.e)};F.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Nh(b,a)};F.prototype.get_enableLimit=function(){return vs(this.e)};
F.prototype.set_enableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Sl(b,a)};F.prototype.get_lowerTranslation=function(){return le(this.e)};F.prototype.set_lowerTranslation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jd(b,a)};F.prototype.get_upperTranslation=function(){return Dc(this.e)};F.prototype.set_upperTranslation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ju(b,a)};F.prototype.get_enableMotor=function(){return cs(this.e)};
F.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);jr(b,a)};F.prototype.get_maxMotorForce=function(){return Nv(this.e)};F.prototype.set_maxMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ai(b,a)};F.prototype.get_motorSpeed=function(){return so(this.e)};F.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dn(b,a)};F.prototype.get_type=function(){return Af(this.e)};
F.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);di(b,a)};F.prototype.get_userData=function(){return Aj(this.e)};F.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rr(b,a)};F.prototype.get_bodyA=function(){return r(Ho(this.e),w)};F.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$s(b,a)};F.prototype.get_bodyB=function(){return r(Vk(this.e),w)};
F.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zk(b,a)};F.prototype.get_collideConnected=function(){return Cs(this.e)};F.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hn(b,a)};F.prototype.__destroy__=function(){Ee(this.e)};function G(a){a=a&&"object"===typeof a?a.e:s(a);this.e=Cf(a);q(G)[this.e]=this}G.prototype=Object.create(p.prototype);G.prototype.g=G;G.k={};h.b2World=G;
G.prototype.SetDestructionListener=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rf(b,a)};G.prototype.SetContactListener=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xd(b,a)};G.prototype.SetDebugDraw=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qf(b,a)};G.prototype.CreateBody=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(oo(b,a),w)};G.prototype.DestroyBody=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);yd(b,a)};
G.prototype.CreateJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(sg(b,a),u)};G.prototype.DestroyJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qq(b,a)};G.prototype.Step=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);kk(g,a,b,f)};G.prototype.ClearForces=function(){zh(this.e)};G.prototype.DrawDebugData=function(){jd(this.e)};
G.prototype.QueryAABB=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Nu(f,a,b)};G.prototype.RayCast=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Ds(g,a,b,f)};G.prototype.GetBodyList=function(){return r(zs(this.e),w)};G.prototype.GetJointList=function(){return r(Nm(this.e),u)};G.prototype.GetContactList=function(){return r(Ft(this.e),H)};
G.prototype.SetAllowSleeping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);dp(b,a)};G.prototype.GetAllowSleeping=function(){return yi(this.e)};G.prototype.SetWarmStarting=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pc(b,a)};G.prototype.GetWarmStarting=function(){return Ko(this.e)};G.prototype.SetContinuousPhysics=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);zm(b,a)};G.prototype.GetContinuousPhysics=function(){return Hk(this.e)};
G.prototype.SetSubStepping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ef(b,a)};G.prototype.GetSubStepping=function(){return Eq(this.e)};G.prototype.GetProxyCount=function(){return Tf(this.e)};G.prototype.GetBodyCount=function(){return Pi(this.e)};G.prototype.GetJointCount=function(){return sn(this.e)};G.prototype.GetContactCount=function(){return qq(this.e)};G.prototype.GetTreeHeight=function(){return cu(this.e)};G.prototype.GetTreeBalance=function(){return Cc(this.e)};
G.prototype.GetTreeQuality=function(){return ue(this.e)};G.prototype.SetGravity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jo(b,a)};G.prototype.GetGravity=function(){return r(id(this.e),v)};G.prototype.IsLocked=function(){return vc(this.e)};G.prototype.SetAutoClearForces=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Id(b,a)};G.prototype.GetAutoClearForces=function(){return uk(this.e)};G.prototype.GetProfile=function(){return r(Po(this.e),B)};G.prototype.Dump=function(){ns(this.e)};
G.prototype.__destroy__=function(){Sn(this.e)};function I(){c("cannot construct a b2PrismaticJoint, no constructor in IDL")}I.prototype=Object.create(u.prototype);I.prototype.g=I;I.k={};h.b2PrismaticJoint=I;I.prototype.GetLocalAnchorA=function(){return r(rk(this.e),v)};I.prototype.GetLocalAnchorB=function(){return r(ao(this.e),v)};I.prototype.GetLocalAxisA=function(){return r(Vh(this.e),v)};I.prototype.GetReferenceAngle=function(){return ol(this.e)};I.prototype.GetJointTranslation=function(){return ah(this.e)};
I.prototype.GetJointSpeed=function(){return $m(this.e)};I.prototype.IsLimitEnabled=function(){return tv(this.e)};I.prototype.EnableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rm(b,a)};I.prototype.GetLowerLimit=function(){return xe(this.e)};I.prototype.GetUpperLimit=function(){return gs(this.e)};I.prototype.SetLimits=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);md(f,a,b)};I.prototype.IsMotorEnabled=function(){return gl(this.e)};
I.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kr(b,a)};I.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xs(b,a)};I.prototype.GetMotorSpeed=function(){return xg(this.e)};I.prototype.SetMaxMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zv(b,a)};I.prototype.GetMaxMotorForce=function(){return Fp(this.e)};I.prototype.GetMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Li(b,a)};
I.prototype.GetType=function(){return Me(this.e)};I.prototype.GetBodyA=function(){return r(Ep(this.e),w)};I.prototype.GetBodyB=function(){return r(it(this.e),w)};I.prototype.GetAnchorA=function(){return r(el(this.e),v)};I.prototype.GetAnchorB=function(){return r(hm(this.e),v)};I.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(hi(b,a),v)};I.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Vg(b,a)};
I.prototype.GetNext=function(){return r(Ke(this.e),u)};I.prototype.GetUserData=function(){return tr(this.e)};I.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);bj(b,a)};I.prototype.IsActive=function(){return xm(this.e)};I.prototype.GetCollideConnected=function(){return Xg(this.e)};I.prototype.__destroy__=function(){rg(this.e)};function Hw(){c("cannot construct a b2RayCastOutput, no constructor in IDL")}Hw.prototype=Object.create(p.prototype);Hw.prototype.g=Hw;
Hw.k={};h.b2RayCastOutput=Hw;Hw.prototype.get_normal=function(){return r(ag(this.e),v)};Hw.prototype.set_normal=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fh(b,a)};Hw.prototype.get_fraction=function(){return wn(this.e)};Hw.prototype.set_fraction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pe(b,a)};Hw.prototype.__destroy__=function(){Rm(this.e)};function Iw(){c("cannot construct a b2ContactID, no constructor in IDL")}Iw.prototype=Object.create(p.prototype);
Iw.prototype.g=Iw;Iw.k={};h.b2ContactID=Iw;Iw.prototype.get_cf=function(){return r(hs(this.e),Ew)};Iw.prototype.set_cf=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dj(b,a)};Iw.prototype.get_key=function(){return bp(this.e)};Iw.prototype.set_key=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rf(b,a)};Iw.prototype.__destroy__=function(){dm(this.e)};function sw(){c("cannot construct a b2DestructionListenerWrapper, no constructor in IDL")}sw.prototype=Object.create(p.prototype);
sw.prototype.g=sw;sw.k={};h.b2DestructionListenerWrapper=sw;sw.prototype.__destroy__=function(){Uv(this.e)};function Jw(){this.e=ew();q(Jw)[this.e]=this}Jw.prototype=Object.create(Kw.prototype);Jw.prototype.g=Jw;Jw.k={};h.JSContactListener=Jw;Jw.prototype.BeginContact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ho(b,a)};Jw.prototype.EndContact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);td(b,a)};
Jw.prototype.PreSolve=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Dh(f,a,b)};Jw.prototype.PostSolve=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);$p(f,a,b)};Jw.prototype.__destroy__=function(){Ck(this.e)};
function Lw(a,b,f,g){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);f=f&&"object"===typeof f?f.e:s(f);g=g&&"object"===typeof g?g.e:s(g);this.e=a===d?jq():b===d?_emscripten_bind_b2Mat22_b2Mat22_1(a):f===d?Er(a,b):g===d?_emscripten_bind_b2Mat22_b2Mat22_3(a,b,f):Hr(a,b,f,g);q(Lw)[this.e]=this}Lw.prototype=Object.create(p.prototype);Lw.prototype.g=Lw;Lw.k={};h.b2Mat22=Lw;
Lw.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Sq(f,a,b)};Lw.prototype.SetIdentity=function(){$t(this.e)};Lw.prototype.SetZero=function(){at(this.e)};Lw.prototype.GetInverse=function(){return r(Jr(this.e),Lw)};Lw.prototype.Solve=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(No(b,a),v)};Lw.prototype.get_ex=function(){return r(ip(this.e),v)};
Lw.prototype.set_ex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hv(b,a)};Lw.prototype.get_ey=function(){return r(Zt(this.e),v)};Lw.prototype.set_ey=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Cq(b,a)};Lw.prototype.__destroy__=function(){qu(this.e)};function J(){this.e=Cv();q(J)[this.e]=this}J.prototype=Object.create(E.prototype);J.prototype.g=J;J.k={};h.b2WheelJointDef=J;
J.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);wj(k,a,b,f,g)};J.prototype.get_localAnchorA=function(){return r(tl(this.e),v)};J.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);of(b,a)};J.prototype.get_localAnchorB=function(){return r(qn(this.e),v)};
J.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lv(b,a)};J.prototype.get_localAxisA=function(){return r(oj(this.e),v)};J.prototype.set_localAxisA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Av(b,a)};J.prototype.get_enableMotor=function(){return Ev(this.e)};J.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ie(b,a)};J.prototype.get_maxMotorTorque=function(){return dh(this.e)};
J.prototype.set_maxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fr(b,a)};J.prototype.get_motorSpeed=function(){return Ar(this.e)};J.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hp(b,a)};J.prototype.get_frequencyHz=function(){return zc(this.e)};J.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dq(b,a)};J.prototype.get_dampingRatio=function(){return vn(this.e)};
J.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jq(b,a)};J.prototype.get_type=function(){return Kt(this.e)};J.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);te(b,a)};J.prototype.get_userData=function(){return Qu(this.e)};J.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bh(b,a)};J.prototype.get_bodyA=function(){return r(Vv(this.e),w)};
J.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);jt(b,a)};J.prototype.get_bodyB=function(){return r(ln(this.e),w)};J.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);he(b,a)};J.prototype.get_collideConnected=function(){return bd(this.e)};J.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zq(b,a)};J.prototype.__destroy__=function(){Jf(this.e)};function Mw(){this.e=Wm();q(Mw)[this.e]=this}
Mw.prototype=Object.create(vw.prototype);Mw.prototype.g=Mw;Mw.k={};h.b2CircleShape=Mw;Mw.prototype.GetType=function(){return Lh(this.e)};Mw.prototype.GetChildCount=function(){return xf(this.e)};Mw.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return hq(f,a,b)};
Mw.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return lk(k,a,b,f,g)};Mw.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);ts(g,a,b,f)};
Mw.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);cq(f,a,b)};Mw.prototype.get_m_p=function(){return r(fh(this.e),v)};Mw.prototype.set_m_p=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sd(b,a)};Mw.prototype.get_m_type=function(){return Lr(this.e)};Mw.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cf(b,a)};Mw.prototype.get_m_radius=function(){return ai(this.e)};
Mw.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Te(b,a)};Mw.prototype.__destroy__=function(){oq(this.e)};function K(){this.e=im();q(K)[this.e]=this}K.prototype=Object.create(E.prototype);K.prototype.g=K;K.k={};h.b2WeldJointDef=K;K.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Ks(g,a,b,f)};K.prototype.get_localAnchorA=function(){return r(Rs(this.e),v)};
K.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wi(b,a)};K.prototype.get_localAnchorB=function(){return r(Go(this.e),v)};K.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Se(b,a)};K.prototype.get_referenceAngle=function(){return Mq(this.e)};K.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wr(b,a)};K.prototype.get_frequencyHz=function(){return Ng(this.e)};
K.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hr(b,a)};K.prototype.get_dampingRatio=function(){return Up(this.e)};K.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xj(b,a)};K.prototype.get_type=function(){return mp(this.e)};K.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vr(b,a)};K.prototype.get_userData=function(){return ot(this.e)};
K.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Hh(b,a)};K.prototype.get_bodyA=function(){return r(tu(this.e),w)};K.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qf(b,a)};K.prototype.get_bodyB=function(){return r(cv(this.e),w)};K.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Uu(b,a)};K.prototype.get_collideConnected=function(){return Ri(this.e)};
K.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ed(b,a)};K.prototype.__destroy__=function(){Mo(this.e)};function Nw(){c("cannot construct a b2Draw, no constructor in IDL")}Nw.prototype=Object.create(p.prototype);Nw.prototype.g=Nw;Nw.k={};h.b2Draw=Nw;Nw.prototype.SetFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ge(b,a)};Nw.prototype.GetFlags=function(){return wc(this.e)};
Nw.prototype.AppendFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Et(b,a)};Nw.prototype.ClearFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);vi(b,a)};Nw.prototype.__destroy__=function(){vj(this.e)};function Ow(){this.e=Ap();q(Ow)[this.e]=this}Ow.prototype=Object.create(p.prototype);Ow.prototype.g=Ow;Ow.k={};h.b2MassData=Ow;Ow.prototype.get_mass=function(){return wv(this.e)};Ow.prototype.set_mass=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ud(b,a)};
Ow.prototype.get_center=function(){return r(Bf(this.e),v)};Ow.prototype.set_center=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qj(b,a)};Ow.prototype.get_I=function(){return zr(this.e)};Ow.prototype.set_I=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Es(b,a)};Ow.prototype.__destroy__=function(){Fs(this.e)};function u(){c("cannot construct a b2Joint, no constructor in IDL")}u.prototype=Object.create(p.prototype);u.prototype.g=u;u.k={};h.b2Joint=u;u.prototype.GetType=function(){return Rv(this.e)};
u.prototype.GetBodyA=function(){return r(Gf(this.e),w)};u.prototype.GetBodyB=function(){return r(yv(this.e),w)};u.prototype.GetAnchorA=function(){return r(bn(this.e),v)};u.prototype.GetAnchorB=function(){return r(zj(this.e),v)};u.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(bm(b,a),v)};u.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return gk(b,a)};u.prototype.GetNext=function(){return r(Bs(this.e),u)};
u.prototype.GetUserData=function(){return il(this.e)};u.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);bw(b,a)};u.prototype.IsActive=function(){return au(this.e)};u.prototype.GetCollideConnected=function(){return Hf(this.e)};u.prototype.Dump=function(){Bv(this.e)};function Pw(){c("cannot construct a b2GearJoint, no constructor in IDL")}Pw.prototype=Object.create(u.prototype);Pw.prototype.g=Pw;Pw.k={};h.b2GearJoint=Pw;
Pw.prototype.GetJoint1=function(){return r(Qd(this.e),u)};Pw.prototype.GetJoint2=function(){return r(du(this.e),u)};Pw.prototype.SetRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);yn(b,a)};Pw.prototype.GetRatio=function(){return Xf(this.e)};Pw.prototype.GetType=function(){return iv(this.e)};Pw.prototype.GetBodyA=function(){return r(pm(this.e),w)};Pw.prototype.GetBodyB=function(){return r(nq(this.e),w)};Pw.prototype.GetAnchorA=function(){return r(Td(this.e),v)};
Pw.prototype.GetAnchorB=function(){return r(Qt(this.e),v)};Pw.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Je(b,a),v)};Pw.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Dd(b,a)};Pw.prototype.GetNext=function(){return r(Bu(this.e),u)};Pw.prototype.GetUserData=function(){return We(this.e)};Pw.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ql(b,a)};
Pw.prototype.IsActive=function(){return Ni(this.e)};Pw.prototype.GetCollideConnected=function(){return me(this.e)};Pw.prototype.__destroy__=function(){Sg(this.e)};function Dw(){c("cannot construct a b2RayCastCallback, no constructor in IDL")}Dw.prototype=Object.create(p.prototype);Dw.prototype.g=Dw;Dw.k={};h.b2RayCastCallback=Dw;Dw.prototype.__destroy__=function(){Th(this.e)};function L(){c("cannot construct a b2WeldJoint, no constructor in IDL")}L.prototype=Object.create(u.prototype);
L.prototype.g=L;L.k={};h.b2WeldJoint=L;L.prototype.GetLocalAnchorA=function(){return r(zl(this.e),v)};L.prototype.GetLocalAnchorB=function(){return r(mn(this.e),v)};L.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ch(b,a)};L.prototype.GetFrequency=function(){return hl(this.e)};L.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);De(b,a)};L.prototype.GetDampingRatio=function(){return qs(this.e)};L.prototype.Dump=function(){Do(this.e)};
L.prototype.GetType=function(){return ro(this.e)};L.prototype.GetBodyA=function(){return r(bg(this.e),w)};L.prototype.GetBodyB=function(){return r(uj(this.e),w)};L.prototype.GetAnchorA=function(){return r(av(this.e),v)};L.prototype.GetAnchorB=function(){return r(Uq(this.e),v)};L.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(es(b,a),v)};L.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Xc(b,a)};
L.prototype.GetNext=function(){return r(Vq(this.e),u)};L.prototype.GetUserData=function(){return sl(this.e)};L.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ii(b,a)};L.prototype.IsActive=function(){return Rc(this.e)};L.prototype.GetCollideConnected=function(){return Bq(this.e)};L.prototype.__destroy__=function(){Zp(this.e)};function Qw(){this.e=Ht();q(Qw)[this.e]=this}Qw.prototype=Object.create(p.prototype);Qw.prototype.g=Qw;Qw.k={};h.b2JointEdge=Qw;
Qw.prototype.get_other=function(){return r(Ts(this.e),w)};Qw.prototype.set_other=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zd(b,a)};Qw.prototype.get_joint=function(){return r(Xu(this.e),u)};Qw.prototype.set_joint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lc(b,a)};Qw.prototype.get_prev=function(){return r(Wc(this.e),Qw)};Qw.prototype.set_prev=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ug(b,a)};Qw.prototype.get_next=function(){return r(io(this.e),Qw)};
Qw.prototype.set_next=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bn(b,a)};Qw.prototype.__destroy__=function(){fo(this.e)};function M(){this.e=Hd();q(M)[this.e]=this}M.prototype=Object.create(E.prototype);M.prototype.g=M;M.k={};h.b2PulleyJointDef=M;
M.prototype.Initialize=function(a,b,f,g,k,n,m){var l=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g),k=k&&"object"===typeof k?k.e:s(k),n=n&&"object"===typeof n?n.e:s(n),m=m&&"object"===typeof m?m.e:s(m);ev(l,a,b,f,g,k,n,m)};M.prototype.get_groundAnchorA=function(){return r(Qh(this.e),v)};M.prototype.set_groundAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xv(b,a)};
M.prototype.get_groundAnchorB=function(){return r(an(this.e),v)};M.prototype.set_groundAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rr(b,a)};M.prototype.get_localAnchorA=function(){return r(nd(this.e),v)};M.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Uh(b,a)};M.prototype.get_localAnchorB=function(){return r(pg(this.e),v)};M.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rk(b,a)};
M.prototype.get_lengthA=function(){return Wl(this.e)};M.prototype.set_lengthA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qg(b,a)};M.prototype.get_lengthB=function(){return Hi(this.e)};M.prototype.set_lengthB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hu(b,a)};M.prototype.get_ratio=function(){return af(this.e)};M.prototype.set_ratio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tg(b,a)};M.prototype.get_type=function(){return Yl(this.e)};
M.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ul(b,a)};M.prototype.get_userData=function(){return Yk(this.e)};M.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Cm(b,a)};M.prototype.get_bodyA=function(){return r(ld(this.e),w)};M.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Qv(b,a)};M.prototype.get_bodyB=function(){return r(uh(this.e),w)};
M.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);eg(b,a)};M.prototype.get_collideConnected=function(){return $v(this.e)};M.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Mt(b,a)};M.prototype.__destroy__=function(){hj(this.e)};function Kw(){c("cannot construct a b2ContactListener, no constructor in IDL")}Kw.prototype=Object.create(p.prototype);Kw.prototype.g=Kw;Kw.k={};h.b2ContactListener=Kw;Kw.prototype.__destroy__=function(){zo(this.e)};
function Rw(){this.e=zi();q(Rw)[this.e]=this}Rw.prototype=Object.create(p.prototype);Rw.prototype.g=Rw;Rw.k={};h.b2ManifoldPoint=Rw;Rw.prototype.get_localPoint=function(){return r(zf(this.e),v)};Rw.prototype.set_localPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xs(b,a)};Rw.prototype.get_normalImpulse=function(){return ek(this.e)};Rw.prototype.set_normalImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);li(b,a)};Rw.prototype.get_tangentImpulse=function(){return Sp(this.e)};
Rw.prototype.set_tangentImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pd(b,a)};Rw.prototype.get_id=function(){return r(ug(this.e),Iw)};Rw.prototype.set_id=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fp(b,a)};Rw.prototype.__destroy__=function(){Kq(this.e)};function zw(){c("cannot construct a b2QueryCallback, no constructor in IDL")}zw.prototype=Object.create(p.prototype);zw.prototype.g=zw;zw.k={};h.b2QueryCallback=zw;zw.prototype.__destroy__=function(){$e(this.e)};
function E(){this.e=Vm();q(E)[this.e]=this}E.prototype=Object.create(p.prototype);E.prototype.g=E;E.k={};h.b2JointDef=E;E.prototype.get_type=function(){return st(this.e)};E.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dt(b,a)};E.prototype.get_userData=function(){return tp(this.e)};E.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rp(b,a)};E.prototype.get_bodyA=function(){return r(fr(this.e),w)};
E.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jk(b,a)};E.prototype.get_bodyB=function(){return r(Ym(this.e),w)};E.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rq(b,a)};E.prototype.get_collideConnected=function(){return yk(this.e)};E.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ek(b,a)};E.prototype.__destroy__=function(){uf(this.e)};
function Sw(a,b){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);this.e=a===d?ii():b===d?_emscripten_bind_b2Transform_b2Transform_1(a):ds(a,b);q(Sw)[this.e]=this}Sw.prototype=Object.create(p.prototype);Sw.prototype.g=Sw;Sw.k={};h.b2Transform=Sw;Sw.prototype.SetIdentity=function(){vq(this.e)};Sw.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Xh(f,a,b)};Sw.prototype.get_p=function(){return r(yt(this.e),v)};
Sw.prototype.set_p=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fi(b,a)};Sw.prototype.get_q=function(){return r(Ld(this.e),Aw)};Sw.prototype.set_q=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Oe(b,a)};Sw.prototype.__destroy__=function(){Re(this.e)};function N(){this.e=jv();q(N)[this.e]=this}N.prototype=Object.create(vw.prototype);N.prototype.g=N;N.k={};h.b2ChainShape=N;
N.prototype.CreateLoop=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);ov(f,a,b)};N.prototype.CreateChain=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);wd(f,a,b)};N.prototype.SetPrevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);En(b,a)};N.prototype.SetNextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Un(b,a)};
N.prototype.GetChildEdge=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Us(f,a,b)};N.prototype.GetType=function(){return nm(this.e)};N.prototype.GetChildCount=function(){return zp(this.e)};N.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return nl(f,a,b)};
N.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return fs(k,a,b,f,g)};N.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Uc(g,a,b,f)};
N.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);rv(f,a,b)};N.prototype.get_m_vertices=function(){return r(ee(this.e),v)};N.prototype.set_m_vertices=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);de(b,a)};N.prototype.get_m_count=function(){return qc(this.e)};N.prototype.set_m_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fl(b,a)};N.prototype.get_m_prevVertex=function(){return r(yh(this.e),v)};
N.prototype.set_m_prevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);or(b,a)};N.prototype.get_m_nextVertex=function(){return r(Mf(this.e),v)};N.prototype.set_m_nextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hh(b,a)};N.prototype.get_m_hasPrevVertex=function(){return pr(this.e)};N.prototype.set_m_hasPrevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qg(b,a)};N.prototype.get_m_hasNextVertex=function(){return Tn(this.e)};
N.prototype.set_m_hasNextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ir(b,a)};N.prototype.get_m_type=function(){return Kj(this.e)};N.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gg(b,a)};N.prototype.get_m_radius=function(){return js(this.e)};N.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ls(b,a)};N.prototype.__destroy__=function(){Pl(this.e)};
function Tw(a,b,f){a=a&&"object"===typeof a?a.e:s(a);b=b&&"object"===typeof b?b.e:s(b);f=f&&"object"===typeof f?f.e:s(f);this.e=a===d?Is():b===d?_emscripten_bind_b2Color_b2Color_1(a):f===d?_emscripten_bind_b2Color_b2Color_2(a,b):Hs(a,b,f);q(Tw)[this.e]=this}Tw.prototype=Object.create(p.prototype);Tw.prototype.g=Tw;Tw.k={};h.b2Color=Tw;Tw.prototype.Set=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Du(g,a,b,f)};
Tw.prototype.get_r=function(){return xd(this.e)};Tw.prototype.set_r=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qe(b,a)};Tw.prototype.get_g=function(){return Oo(this.e)};Tw.prototype.set_g=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);yc(b,a)};Tw.prototype.get_b=function(){return rs(this.e)};Tw.prototype.set_b=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);am(b,a)};Tw.prototype.__destroy__=function(){wm(this.e)};
function O(){c("cannot construct a b2RopeJoint, no constructor in IDL")}O.prototype=Object.create(u.prototype);O.prototype.g=O;O.k={};h.b2RopeJoint=O;O.prototype.GetLocalAnchorA=function(){return r(ar(this.e),v)};O.prototype.GetLocalAnchorB=function(){return r(gj(this.e),v)};O.prototype.SetMaxLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);aw(b,a)};O.prototype.GetMaxLength=function(){return Ve(this.e)};O.prototype.GetLimitState=function(){return xk(this.e)};O.prototype.GetType=function(){return yr(this.e)};
O.prototype.GetBodyA=function(){return r(Hu(this.e),w)};O.prototype.GetBodyB=function(){return r(dl(this.e),w)};O.prototype.GetAnchorA=function(){return r(cj(this.e),v)};O.prototype.GetAnchorB=function(){return r(ff(this.e),v)};O.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(us(b,a),v)};O.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return gv(b,a)};O.prototype.GetNext=function(){return r(Qo(this.e),u)};
O.prototype.GetUserData=function(){return Rj(this.e)};O.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$r(b,a)};O.prototype.IsActive=function(){return Rt(this.e)};O.prototype.GetCollideConnected=function(){return Nt(this.e)};O.prototype.__destroy__=function(){Pq(this.e)};function Uw(){c("cannot construct a b2RayCastInput, no constructor in IDL")}Uw.prototype=Object.create(p.prototype);Uw.prototype.g=Uw;Uw.k={};h.b2RayCastInput=Uw;
Uw.prototype.get_p1=function(){return r(Jc(this.e),v)};Uw.prototype.set_p1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);lu(b,a)};Uw.prototype.get_p2=function(){return r(pl(this.e),v)};Uw.prototype.set_p2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zf(b,a)};Uw.prototype.get_maxFraction=function(){return om(this.e)};Uw.prototype.set_maxFraction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);jo(b,a)};Uw.prototype.__destroy__=function(){mf(this.e)};
function P(){this.e=lj();q(P)[this.e]=this}P.prototype=Object.create(vw.prototype);P.prototype.g=P;P.k={};h.b2PolygonShape=P;P.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Og(f,a,b)};
P.prototype.SetAsBox=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);f===d?vu(k,a,b):g===d?_emscripten_bind_b2PolygonShape_SetAsBox_3(k,a,b,f):Hm(k,a,b,f,g)};P.prototype.GetVertexCount=function(){return Lp(this.e)};P.prototype.GetVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Qr(b,a),v)};P.prototype.GetType=function(){return Mh(this.e)};
P.prototype.GetChildCount=function(){return So(this.e)};P.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return jj(f,a,b)};P.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return Bc(k,a,b,f,g)};
P.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Jl(g,a,b,f)};P.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);yl(f,a,b)};P.prototype.get_m_centroid=function(){return r(Ol(this.e),v)};P.prototype.set_m_centroid=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fm(b,a)};P.prototype.get_m_vertexCount=function(){return yu(this.e)};
P.prototype.set_m_vertexCount=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zo(b,a)};P.prototype.get_m_type=function(){return kp(this.e)};P.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xu(b,a)};P.prototype.get_m_radius=function(){return Qj(this.e)};P.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cw(b,a)};P.prototype.__destroy__=function(){Pe(this.e)};function Q(){this.e=Wp();q(Q)[this.e]=this}Q.prototype=Object.create(vw.prototype);
Q.prototype.g=Q;Q.k={};h.b2EdgeShape=Q;Q.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Wt(f,a,b)};Q.prototype.GetType=function(){return Iq(this.e)};Q.prototype.GetChildCount=function(){return fd(this.e)};Q.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return Nl(f,a,b)};
Q.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return Ti(k,a,b,f,g)};Q.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Xq(g,a,b,f)};
Q.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);zt(f,a,b)};Q.prototype.get_m_vertex1=function(){return r(Bl(this.e),v)};Q.prototype.set_m_vertex1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);eu(b,a)};Q.prototype.get_m_vertex2=function(){return r(Im(this.e),v)};Q.prototype.set_m_vertex2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xq(b,a)};Q.prototype.get_m_vertex0=function(){return r(Oi(this.e),v)};
Q.prototype.set_m_vertex0=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Gi(b,a)};Q.prototype.get_m_vertex3=function(){return r(tq(this.e),v)};Q.prototype.set_m_vertex3=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);kj(b,a)};Q.prototype.get_m_hasVertex0=function(){return em(this.e)};Q.prototype.set_m_hasVertex0=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ue(b,a)};Q.prototype.get_m_hasVertex3=function(){return Zj(this.e)};
Q.prototype.set_m_hasVertex3=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kc(b,a)};Q.prototype.get_m_type=function(){return Pd(this.e)};Q.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Eu(b,a)};Q.prototype.get_m_radius=function(){return pv(this.e)};Q.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dr(b,a)};Q.prototype.__destroy__=function(){pq(this.e)};
function Vw(){c("cannot construct a JSContactFilter, no constructor in IDL")}Vw.prototype=Object.create(Ww.prototype);Vw.prototype.g=Vw;Vw.k={};h.JSContactFilter=Vw;Vw.prototype.JSContactListener=function(){vg(this.e)};Vw.prototype.ShouldCollide=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return fk(f,a,b)};Vw.prototype.__destroy__=function(){Pj(this.e)};function S(){this.e=Km();q(S)[this.e]=this}S.prototype=Object.create(E.prototype);
S.prototype.g=S;S.k={};h.b2RevoluteJointDef=S;S.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Ut(g,a,b,f)};S.prototype.get_localAnchorA=function(){return r(ad(this.e),v)};S.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rg(b,a)};S.prototype.get_localAnchorB=function(){return r(Nj(this.e),v)};
S.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);nn(b,a)};S.prototype.get_referenceAngle=function(){return Oj(this.e)};S.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);vp(b,a)};S.prototype.get_enableLimit=function(){return $h(this.e)};S.prototype.set_enableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Lo(b,a)};S.prototype.get_lowerAngle=function(){return jl(this.e)};
S.prototype.set_lowerAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);eo(b,a)};S.prototype.get_upperAngle=function(){return ne(this.e)};S.prototype.set_upperAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);km(b,a)};S.prototype.get_enableMotor=function(){return wo(this.e)};S.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ci(b,a)};S.prototype.get_motorSpeed=function(){return $f(this.e)};
S.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Dv(b,a)};S.prototype.get_maxMotorTorque=function(){return Tp(this.e)};S.prototype.set_maxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tu(b,a)};S.prototype.get_type=function(){return lm(this.e)};S.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);hk(b,a)};S.prototype.get_userData=function(){return en(this.e)};
S.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$c(b,a)};S.prototype.get_bodyA=function(){return r(ht(this.e),w)};S.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fq(b,a)};S.prototype.get_bodyB=function(){return r(Wj(this.e),w)};S.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Hg(b,a)};S.prototype.get_collideConnected=function(){return Sr(this.e)};
S.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Sf(b,a)};S.prototype.__destroy__=function(){Yo(this.e)};function Xw(){this.e=wt();q(Xw)[this.e]=this}Xw.prototype=Object.create(Nw.prototype);Xw.prototype.g=Xw;Xw.k={};h.JSDraw=Xw;Xw.prototype.DrawPolygon=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);zn(g,a,b,f)};
Xw.prototype.DrawSolidPolygon=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);hg(g,a,b,f)};Xw.prototype.DrawCircle=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);Qc(g,a,b,f)};
Xw.prototype.DrawSolidCircle=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);Ec(k,a,b,f,g)};Xw.prototype.DrawSegment=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);dd(g,a,b,f)};Xw.prototype.DrawTransform=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);On(b,a)};Xw.prototype.__destroy__=function(){kg(this.e)};
function T(){c("cannot construct a b2WheelJoint, no constructor in IDL")}T.prototype=Object.create(u.prototype);T.prototype.g=T;T.k={};h.b2WheelJoint=T;T.prototype.GetLocalAnchorA=function(){return r(gg(this.e),v)};T.prototype.GetLocalAnchorB=function(){return r(tf(this.e),v)};T.prototype.GetLocalAxisA=function(){return r(Fu(this.e),v)};T.prototype.GetJointTranslation=function(){return Yr(this.e)};T.prototype.GetJointSpeed=function(){return Vf(this.e)};T.prototype.IsMotorEnabled=function(){return If(this.e)};
T.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fg(b,a)};T.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ze(b,a)};T.prototype.GetMotorSpeed=function(){return tn(this.e)};T.prototype.SetMaxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);nj(b,a)};T.prototype.GetMaxMotorTorque=function(){return Rd(this.e)};T.prototype.GetMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Zr(b,a)};
T.prototype.SetSpringFrequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fi(b,a)};T.prototype.GetSpringFrequencyHz=function(){return Hv(this.e)};T.prototype.SetSpringDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xo(b,a)};T.prototype.GetSpringDampingRatio=function(){return oc(this.e)};T.prototype.GetType=function(){return zu(this.e)};T.prototype.GetBodyA=function(){return r(Nn(this.e),w)};T.prototype.GetBodyB=function(){return r(vm(this.e),w)};
T.prototype.GetAnchorA=function(){return r(Wh(this.e),v)};T.prototype.GetAnchorB=function(){return r(qi(this.e),v)};T.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Df(b,a),v)};T.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Jm(b,a)};T.prototype.GetNext=function(){return r(Sm(this.e),u)};T.prototype.GetUserData=function(){return In(this.e)};
T.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ws(b,a)};T.prototype.IsActive=function(){return bs(this.e)};T.prototype.GetCollideConnected=function(){return Wo(this.e)};T.prototype.__destroy__=function(){xv(this.e)};function U(){c("cannot construct a b2PulleyJoint, no constructor in IDL")}U.prototype=Object.create(u.prototype);U.prototype.g=U;U.k={};h.b2PulleyJoint=U;U.prototype.GetGroundAnchorA=function(){return r(Bd(this.e),v)};
U.prototype.GetGroundAnchorB=function(){return r(Ag(this.e),v)};U.prototype.GetLengthA=function(){return Pn(this.e)};U.prototype.GetLengthB=function(){return pk(this.e)};U.prototype.GetRatio=function(){return go(this.e)};U.prototype.GetType=function(){return Vi(this.e)};U.prototype.GetBodyA=function(){return r(aq(this.e),w)};U.prototype.GetBodyB=function(){return r(se(this.e),w)};U.prototype.GetAnchorA=function(){return r(nu(this.e),v)};U.prototype.GetAnchorB=function(){return r(jh(this.e),v)};
U.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Vo(b,a),v)};U.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return mt(b,a)};U.prototype.GetNext=function(){return r(Jj(this.e),u)};U.prototype.GetUserData=function(){return Gl(this.e)};U.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Oc(b,a)};U.prototype.IsActive=function(){return Di(this.e)};U.prototype.GetCollideConnected=function(){return ih(this.e)};
U.prototype.__destroy__=function(){$n(this.e)};function V(){this.e=np();q(V)[this.e]=this}V.prototype=Object.create(E.prototype);V.prototype.g=V;V.k={};h.b2MouseJointDef=V;V.prototype.get_target=function(){return r(Am(this.e),v)};V.prototype.set_target=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ae(b,a)};V.prototype.get_maxForce=function(){return Cu(this.e)};V.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ip(b,a)};V.prototype.get_frequencyHz=function(){return qp(this.e)};
V.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);is(b,a)};V.prototype.get_dampingRatio=function(){return Eg(this.e)};V.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xo(b,a)};V.prototype.get_type=function(){return Yv(this.e)};V.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vc(b,a)};V.prototype.get_userData=function(){return ss(this.e)};
V.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);cd(b,a)};V.prototype.get_bodyA=function(){return r(Mk(this.e),w)};V.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vd(b,a)};V.prototype.get_bodyB=function(){return r(Kg(this.e),w)};V.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Kh(b,a)};V.prototype.get_collideConnected=function(){return hf(this.e)};
V.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);zv(b,a)};V.prototype.__destroy__=function(){lg(this.e)};function H(){c("cannot construct a b2Contact, no constructor in IDL")}H.prototype=Object.create(p.prototype);H.prototype.g=H;H.k={};h.b2Contact=H;H.prototype.GetManifold=function(){return r(Ps(this.e),Gw)};H.prototype.IsTouching=function(){return Fe(this.e)};H.prototype.SetEnabled=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Nf(b,a)};
H.prototype.IsEnabled=function(){return yj(this.e)};H.prototype.GetNext=function(){return r(Od(this.e),H)};H.prototype.GetFixtureA=function(){return r(Ze(this.e),z)};H.prototype.GetChildIndexA=function(){return bt(this.e)};H.prototype.GetFixtureB=function(){return r(qv(this.e),z)};H.prototype.GetChildIndexB=function(){return Gq(this.e)};H.prototype.SetFriction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);dr(b,a)};H.prototype.GetFriction=function(){return pi(this.e)};
H.prototype.ResetFriction=function(){mu(this.e)};H.prototype.SetRestitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rq(b,a)};H.prototype.GetRestitution=function(){return cn(this.e)};H.prototype.ResetRestitution=function(){xi(this.e)};function vw(){c("cannot construct a b2Shape, no constructor in IDL")}vw.prototype=Object.create(p.prototype);vw.prototype.g=vw;vw.k={};h.b2Shape=vw;vw.prototype.GetType=function(){return Ln(this.e)};vw.prototype.GetChildCount=function(){return Ls(this.e)};
vw.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return Lg(f,a,b)};vw.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);return Ad(k,a,b,f,g)};
vw.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f);sc(g,a,b,f)};vw.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);As(f,a,b)};vw.prototype.get_m_type=function(){return sk(this.e)};vw.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xr(b,a)};vw.prototype.get_m_radius=function(){return Wq(this.e)};
vw.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Of(b,a)};vw.prototype.__destroy__=function(){$l(this.e)};function W(){this.e=Em();q(W)[this.e]=this}W.prototype=Object.create(E.prototype);W.prototype.g=W;W.k={};h.b2DistanceJointDef=W;W.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b),f=f&&"object"===typeof f?f.e:s(f),g=g&&"object"===typeof g?g.e:s(g);gn(k,a,b,f,g)};
W.prototype.get_localAnchorA=function(){return r(pj(this.e),v)};W.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Mv(b,a)};W.prototype.get_localAnchorB=function(){return r(dq(this.e),v)};W.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ck(b,a)};W.prototype.get_length=function(){return re(this.e)};W.prototype.set_length=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ri(b,a)};W.prototype.get_frequencyHz=function(){return Qn(this.e)};
W.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Mj(b,a)};W.prototype.get_dampingRatio=function(){return Tj(this.e)};W.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);qd(b,a)};W.prototype.get_type=function(){return ui(this.e)};W.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Yp(b,a)};W.prototype.get_userData=function(){return Yc(this.e)};
W.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ej(b,a)};W.prototype.get_bodyA=function(){return r(dj(this.e),w)};W.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Tr(b,a)};W.prototype.get_bodyB=function(){return r(pu(this.e),w)};W.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);xp(b,a)};W.prototype.get_collideConnected=function(){return up(this.e)};
W.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);kt(b,a)};W.prototype.__destroy__=function(){Bt(this.e)};function w(){c("cannot construct a b2Body, no constructor in IDL")}w.prototype=Object.create(p.prototype);w.prototype.g=w;w.k={};h.b2Body=w;w.prototype.CreateFixture=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);return b===d?r(El(f,a),z):r(Fl(f,a,b),z)};
w.prototype.DestroyFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);on(b,a)};w.prototype.SetTransform=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);ef(f,a,b)};w.prototype.GetTransform=function(){return r(dt(this.e),Sw)};w.prototype.GetPosition=function(){return r(lh(this.e),v)};w.prototype.GetAngle=function(){return Vt(this.e)};w.prototype.GetWorldCenter=function(){return r(Bk(this.e),v)};
w.prototype.GetLocalCenter=function(){return r(Yu(this.e),v)};w.prototype.SetLinearVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Wk(b,a)};w.prototype.GetLinearVelocity=function(){return r(ks(this.e),v)};w.prototype.SetAngularVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Pu(b,a)};w.prototype.GetAngularVelocity=function(){return tj(this.e)};
w.prototype.ApplyForce=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Jt(f,a,b)};w.prototype.ApplyForceToCenter=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);sh(b,a)};w.prototype.ApplyTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Op(b,a)};w.prototype.ApplyLinearImpulse=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);wl(f,a,b)};
w.prototype.ApplyAngularImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Jh(b,a)};w.prototype.GetMass=function(){return Wn(this.e)};w.prototype.GetInertia=function(){return vr(this.e)};w.prototype.GetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ih(b,a)};w.prototype.SetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Be(b,a)};w.prototype.ResetMassData=function(){ir(this.e)};
w.prototype.GetWorldPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(dk(b,a),v)};w.prototype.GetWorldVector=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Mg(b,a),v)};w.prototype.GetLocalPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Wg(b,a),v)};w.prototype.GetLocalVector=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(qm(b,a),v)};
w.prototype.GetLinearVelocityFromWorldPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Aq(b,a),v)};w.prototype.GetLinearVelocityFromLocalPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(iq(b,a),v)};w.prototype.GetLinearDamping=function(){return gr(this.e)};w.prototype.SetLinearDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);um(b,a)};w.prototype.GetAngularDamping=function(){return un(this.e)};
w.prototype.SetAngularDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);dv(b,a)};w.prototype.GetGravityScale=function(){return Ig(this.e)};w.prototype.SetGravityScale=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ul(b,a)};w.prototype.SetType=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vn(b,a)};w.prototype.GetType=function(){return Tq(this.e)};w.prototype.SetBullet=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Nk(b,a)};
w.prototype.IsBullet=function(){return vl(this.e)};w.prototype.SetSleepingAllowed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);yg(b,a)};w.prototype.IsSleepingAllowed=function(){return Hp(this.e)};w.prototype.SetAwake=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);iu(b,a)};w.prototype.IsAwake=function(){return Yd(this.e)};w.prototype.SetActive=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Hl(b,a)};w.prototype.IsActive=function(){return wi(this.e)};
w.prototype.SetFixedRotation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Eh(b,a)};w.prototype.IsFixedRotation=function(){return ni(this.e)};w.prototype.GetFixtureList=function(){return r(vo(this.e),z)};w.prototype.GetJointList=function(){return r(Jv(this.e),Qw)};w.prototype.GetContactList=function(){return r(mi(this.e),Yw)};w.prototype.GetNext=function(){return r(Gu(this.e),w)};w.prototype.GetUserData=function(){return Gk(this.e)};
w.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ov(b,a)};w.prototype.GetWorld=function(){return r(fu(this.e),G)};w.prototype.Dump=function(){zk(this.e)};function X(){c("cannot construct a b2FrictionJoint, no constructor in IDL")}X.prototype=Object.create(u.prototype);X.prototype.g=X;X.k={};h.b2FrictionJoint=X;X.prototype.GetLocalAnchorA=function(){return r(Fo(this.e),v)};X.prototype.GetLocalAnchorB=function(){return r(be(this.e),v)};
X.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pt(b,a)};X.prototype.GetMaxForce=function(){return Md(this.e)};X.prototype.SetMaxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pp(b,a)};X.prototype.GetMaxTorque=function(){return Si(this.e)};X.prototype.GetType=function(){return Cg(this.e)};X.prototype.GetBodyA=function(){return r(Kv(this.e),w)};X.prototype.GetBodyB=function(){return r(pf(this.e),w)};
X.prototype.GetAnchorA=function(){return r(xr(this.e),v)};X.prototype.GetAnchorB=function(){return r(Mu(this.e),v)};X.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Xp(b,a),v)};X.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Ml(b,a)};X.prototype.GetNext=function(){return r(qr(this.e),u)};X.prototype.GetUserData=function(){return cr(this.e)};
X.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rp(b,a)};X.prototype.IsActive=function(){return xc(this.e)};X.prototype.GetCollideConnected=function(){return gp(this.e)};X.prototype.__destroy__=function(){Co(this.e)};function Zw(){c("cannot construct a b2DestructionListener, no constructor in IDL")}Zw.prototype=Object.create(p.prototype);Zw.prototype.g=Zw;Zw.k={};h.b2DestructionListener=Zw;Zw.prototype.__destroy__=function(){Sc(this.e)};
function Y(){this.e=Xm();q(Y)[this.e]=this}Y.prototype=Object.create(E.prototype);Y.prototype.g=Y;Y.k={};h.b2GearJointDef=Y;Y.prototype.get_joint1=function(){return r(Ki(this.e),u)};Y.prototype.set_joint1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);wq(b,a)};Y.prototype.get_joint2=function(){return r(Pf(this.e),u)};Y.prototype.set_joint2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ot(b,a)};Y.prototype.get_ratio=function(){return To(this.e)};
Y.prototype.set_ratio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);mj(b,a)};Y.prototype.get_type=function(){return mm(this.e)};Y.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Xe(b,a)};Y.prototype.get_userData=function(){return ei(this.e)};Y.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);nv(b,a)};Y.prototype.get_bodyA=function(){return r(Lj(this.e),w)};
Y.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Bi(b,a)};Y.prototype.get_bodyB=function(){return r(kn(this.e),w)};Y.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);fv(b,a)};Y.prototype.get_collideConnected=function(){return Kk(this.e)};Y.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vs(b,a)};Y.prototype.__destroy__=function(){eq(this.e)};
function Z(){c("cannot construct a b2RevoluteJoint, no constructor in IDL")}Z.prototype=Object.create(u.prototype);Z.prototype.g=Z;Z.k={};h.b2RevoluteJoint=Z;Z.prototype.GetLocalAnchorA=function(){return r(Fc(this.e),v)};Z.prototype.GetLocalAnchorB=function(){return r(os(this.e),v)};Z.prototype.GetReferenceAngle=function(){return Xk(this.e)};Z.prototype.GetJointAngle=function(){return jg(this.e)};Z.prototype.GetJointSpeed=function(){return sf(this.e)};Z.prototype.IsLimitEnabled=function(){return Ru(this.e)};
Z.prototype.EnableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ql(b,a)};Z.prototype.GetLowerLimit=function(){return Ak(this.e)};Z.prototype.GetUpperLimit=function(){return ge(this.e)};Z.prototype.SetLimits=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:s(a),b=b&&"object"===typeof b?b.e:s(b);Ur(f,a,b)};Z.prototype.IsMotorEnabled=function(){return $d(this.e)};Z.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);$o(b,a)};
Z.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Rn(b,a)};Z.prototype.GetMotorSpeed=function(){return Fg(this.e)};Z.prototype.SetMaxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);kv(b,a)};Z.prototype.GetMaxMotorTorque=function(){return ak(this.e)};Z.prototype.GetMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return Ic(b,a)};Z.prototype.GetType=function(){return Nd(this.e)};
Z.prototype.GetBodyA=function(){return r(Cj(this.e),w)};Z.prototype.GetBodyB=function(){return r(Sk(this.e),w)};Z.prototype.GetAnchorA=function(){return r(nr(this.e),v)};Z.prototype.GetAnchorB=function(){return r(ru(this.e),v)};Z.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return r(Lt(b,a),v)};Z.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);return wh(b,a)};Z.prototype.GetNext=function(){return r(su(this.e),u)};
Z.prototype.GetUserData=function(){return bi(this.e)};Z.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Vu(b,a)};Z.prototype.IsActive=function(){return Au(this.e)};Z.prototype.GetCollideConnected=function(){return vt(this.e)};Z.prototype.__destroy__=function(){Gd(this.e)};function Ww(){c("cannot construct a b2ContactFilter, no constructor in IDL")}Ww.prototype=Object.create(p.prototype);Ww.prototype.g=Ww;Ww.k={};h.b2ContactFilter=Ww;Ww.prototype.__destroy__=function(){og(this.e)};
function Yw(){this.e=Nr();q(Yw)[this.e]=this}Yw.prototype=Object.create(p.prototype);Yw.prototype.g=Yw;Yw.k={};h.b2ContactEdge=Yw;Yw.prototype.get_other=function(){return r(fj(this.e),w)};Yw.prototype.set_other=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Yi(b,a)};Yw.prototype.get_contact=function(){return r(dn(this.e),H)};Yw.prototype.set_contact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Zh(b,a)};Yw.prototype.get_prev=function(){return r(nh(this.e),Yw)};
Yw.prototype.set_prev=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Fj(b,a)};Yw.prototype.get_next=function(){return r(yq(this.e),Yw)};Yw.prototype.set_next=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);pc(b,a)};Yw.prototype.__destroy__=function(){et(this.e)};function $(){this.e=ik();q($)[this.e]=this}$.prototype=Object.create(E.prototype);$.prototype.g=$;$.k={};h.b2RopeJointDef=$;$.prototype.get_localAnchorA=function(){return r(Yh(this.e),v)};
$.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ac(b,a)};$.prototype.get_localAnchorB=function(){return r(Fk(this.e),v)};$.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);lv(b,a)};$.prototype.get_maxLength=function(){return Lk(this.e)};$.prototype.set_maxLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);ml(b,a)};$.prototype.get_type=function(){return bq(this.e)};
$.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Uk(b,a)};$.prototype.get_userData=function(){return Yg(this.e)};$.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);po(b,a)};$.prototype.get_bodyA=function(){return r(Sj(this.e),w)};$.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);Ct(b,a)};$.prototype.get_bodyB=function(){return r(uv(this.e),w)};
$.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);we(b,a)};$.prototype.get_collideConnected=function(){return Oh(this.e)};$.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:s(a);rd(b,a)};$.prototype.__destroy__=function(){as(this.e)};h.b2Shape.e_circle=vk();h.b2Shape.e_edge=$j();h.b2Shape.e_polygon=Mc();h.b2Shape.e_chain=ph();h.b2Shape.e_typeCount=df();h.e_unknownJoint=Iu();h.e_revoluteJoint=Wd();h.e_prismaticJoint=Lq();
h.e_distanceJoint=Zn();h.e_pulleyJoint=Lf();h.e_mouseJoint=Ud();h.e_gearJoint=Ms();h.e_wheelJoint=kr();h.e_weldJoint=ym();h.e_frictionJoint=oe();h.e_ropeJoint=Br();h.e_inactiveLimit=gu();h.e_atLowerLimit=Zi();h.e_atUpperLimit=Wv();h.e_equalLimits=ki();h.b2Manifold.e_circles=xn();h.b2Manifold.e_faceA=Uj();h.b2Manifold.e_faceB=Vj();h.b2_staticBody=jm();h.b2_kinematicBody=lq();h.b2_dynamicBody=gq();h.b2Draw.e_shapeBit=oi();h.b2Draw.e_jointBit=cg();h.b2Draw.e_aabbBit=Tt();h.b2Draw.e_pairBit=Bo();
h.b2Draw.e_centerOfMassBit=ep();h.b2ContactFeature.e_vertex=qh();h.b2ContactFeature.e_face=Sd();this.Box2D=h;

})();
//******************************************************
//*****    Global Initialization
//******************************************************

    var mainCanvasId = "canvasBackground";
    var mainCanvas = document.getElementById(mainCanvasId);

    var testMode = false;

    var builderVersion = "1.8.1.0";    // Version of the builder when building the solution
    var buildDate = "14-04-2016";    // Date when building the solution
    var buildTime = "16:21:36";    // Time when building the solution
    var buildTags = ["game_racer", "theme_rally", "big", "landscape", "levelselectscreen", "endscreen_level", "gameui_difficulty", "boostermedia2", "final"];    // Tags used in this build

//******************************************************
//******************************************************
//******************************************************
//******************************************************
//******************************************************
//*****    The Basic Engine
//******************************************************
//******************************************************
//******************************************************
//******************************************************
//******************************************************

/////////////////////////////////////////////////////////////
// tbBrowser: Browser detection functionality
//
// Copyright 2013-2014 CoolGames
// Last Changed: 18-11-2014
/////////////////////////////////////////////////////////////

var TBBrowser = function(userAgent) {
	"use strict";

	this.userAgent = userAgent;
	if (this.userAgent === undefined) {
		this.userAgent = (navigator !== undefined) ? navigator.userAgent : '';
	}
	this.detect();
};

TBBrowser.prototype.getFirstMatch = function(regex) {
	"use strict";
	var match = this.userAgent.match(regex);
	return (match && match.length > 1 && match[1]) || '';
};

TBBrowser.prototype.detect = function() {
	"use strict";
	var iosdevice = this.getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),
		likeAndroid = /like android/i.test(this.userAgent),
		android = !likeAndroid && /android/i.test(this.userAgent),
		versionIdentifier = this.getFirstMatch(/version\/(\d+(\.\d+)?)/i),
		tablet = /tablet/i.test(this.userAgent),
		mobile = !tablet && /[^-]mobi/i.test(this.userAgent);

	this.browser = {};
	this.os = {};
	this.features = {};

	//Opera
	if (/opera|opr/i.test(this.userAgent)) {
		this.name = 'Opera';
		this.browser.opera = true;
		this.browser.version = versionIdentifier || this.getFirstMatch(/(?:opera|opr)[\s\/](\d+(\.\d+)?)/i);
	}
	//Windows Phone
	else if (/windows phone/i.test(this.userAgent)) {
		this.name = 'Windows Phone';
		this.os.windowsphone = true;
		this.browser.msie = true;
		this.browser.version = this.getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);
	}
	//Internet Explorer
	else if (/msie|trident/i.test(this.userAgent)) {
		this.name = 'Internet Explorer';
		this.browser.msie = true;
		this.browser.version = this.getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i);
	}
	//Chrome
	else if (/chrome|crios|crmo/i.test(this.userAgent)) {
		this.name = 'Chrome';
		this.browser.chrome = true;
		this.browser.version = this.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i);
	}
	//iOS
	else if (iosdevice) {
		this.name = iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod';
		if (versionIdentifier) {
			this.browser.version = versionIdentifier;
		}
	}
	//Sailfish
	else if (/sailfish/i.test(this.userAgent)) {
		this.name = 'Sailfish';
		this.browser.sailfish = true;
		this.browser.version = this.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i);
	}
	//SeaMonkey
	else if (/seamonkey\//i.test(this.userAgent)) {
		this.name = 'SeaMonkey';
		this.browser.seamonkey = true;
		this.browser.version = this.getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i);
	}
	//Firefox
	else if (/firefox|iceweasel/i.test(this.userAgent)) {
		this.name = 'Firefox';
		this.browser.firefox = true;
		this.browser.version = this.getFirstMatch(/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i);
		if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(this.userAgent)) {
			this.os.firefoxos = true;
		}
	}
	//Amazon Silk
	else if (/silk/i.test(this.userAgent)) {
		this.name = 'Amazon Silk';
		this.browser.silk = true;
		this.browser.version = this.getFirstMatch(/silk\/(\d+(\.\d+)?)/i);
	}
	//Android
	else if (android) {
		this.name = 'Android';
		this.browser.stockandroid = true;
		this.browser.version = versionIdentifier;
	}
	//PhantomJS
	else if (/phantom/i.test(this.userAgent)) {
		this.name = 'PhantomJS';
		this.browser.phantom = true;
		this.browser.version = this.getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i);
	}
	//BlackBerry
	else if (/blackberry|\bbb\d+/i.test(this.userAgent) || /rim\stablet/i.test(this.userAgent)) {
		this.name = 'BlackBerry';
		this.browser.blackberry = true;
		this.browser.version = versionIdentifier || this.getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i);
	}
	//WebOS
	else if (/(web|hpw)os/i.test(this.userAgent)) {
		this.name = 'WebOS';
		this.browser.webos = true;
		this.browser.version = versionIdentifier || this.getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i);
		if (/touchpad\//i.test(this.userAgent)) {
			this.features.touchpad = true;
		}
	}
	//Bada
	else if (/bada/i.test(this.userAgent)) {
		this.name = 'Bada';
		this.browser.bada = true;
		this.browser.version = this.getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i);
	}
	//Tizen
	else if (/tizen/i.test(this.userAgent)) {
		this.name = 'Tizen';
		this.browser.tizen = true;
		this.browser.version = this.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier;
	}
	//Safari
	else if (/safari/i.test(this.userAgent)) {
		this.name = 'Safari';
		this.browser.safari = true;
		this.browser.version = versionIdentifier;
	}
	//Unknown!
	else {
		// Do nothing
	}

	//Set webkit or gecko flag for browsers based on these engines
	if (/(apple)?webkit/i.test(this.userAgent)) {
		this.name = this.name || "Webkit";
		this.browser.webkit = true;
		if (!this.browser.version && versionIdentifier) {
			this.browser.version = versionIdentifier;
		}
	}
	else if (!this.opera && /gecko\//i.test(this.userAgent)) {
		this.name = this.name || "Gecko";
		this.browser.gecko = true;
		this.browser.version = this.browser.version || this.getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);
	}

	//Set OS flags for platforms that have multiple browsers
	if (android || this.silk) {
		this.os.android = true;
	}
	else if (iosdevice) {
		this.os.ios = true;
	}

	//OS version extraction
	var osVersion = '';
	if (iosdevice) {
		osVersion = this.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
		osVersion = osVersion.replace(/[_\s]/g, '.');
	}
	else if (android) {
		osVersion = this.getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
	}
	else if (this.windowsphone) {
		osVersion = this.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
	}
	else if (this.webos) {
		osVersion = this.getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
	}
	else if (this.blackberry) {
		osVersion = this.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
	}
	else if (this.bada) {
		osVersion = this.getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
	}
	else if (this.tizen) {
		osVersion = this.getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
	}

	if (osVersion) {
		this.os.version = osVersion;
	}

	//Device type extraction
	var osMajorVersion = osVersion.split('.')[0];
	if (tablet || iosdevice == 'ipad' || (android && (osMajorVersion == 3 || (osMajorVersion == 4 && !mobile))) || this.silk) {
		this.features.tablet = true;
	}
	else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || this.blackberry || this.webos || this.bada) {
		this.features.mobile = true;
	}

	// Graded Browser Support
	// http://developer.yahoo.com/yui/articles/gbs
	this.grade = {a: false, c: false, x: false};
	if ((this.msie && this.browser.version >= 10) ||
		(this.chrome && this.browser.version >= 20) ||
		(this.firefox && this.browser.version >= 20.0) ||
		(this.safari && this.browser.version >= 6) ||
		(this.opera && this.browser.version >= 10.0) ||
		(this.ios && this.os.version && this.os.version.split(".")[0] >= 6)) {
		this.grade.a = true;
	}
	else if ((this.msie && this.browser.version < 10) ||
		(this.chrome && this.browser.version < 20) ||
		(this.firefox && this.browser.version < 20.0) ||
		(this.safari && this.browser.version < 6) ||
		(this.opera && this.browser.version < 10.0) ||
		(this.ios && this.os.version && this.os.version.split(".")[0] < 6) ) {
		this.grade.c = true;
	}
	else {
		this.grade.x = true;
	}

	try {
		this.browser.versionAsNumber = this.browser.version ? parseFloat(this.browser.version.match(/\d+(\.\d+)?/)[0], 10) : 0;
	}
	catch (e) {
		this.browser.versionAsNumber = 0;
	}

	try {
		this.os.versionAsNumber = this.os.version ? parseFloat(this.os.version.match(/\d+(\.\d+)?/)[0], 10) : 0;
	}
	catch (e) {
		this.os.versionAsNumber = 0;
	}

};
var tbBrowser = new TBBrowser();

/////////////////////////////////////////////////////////////
// tbMath: The engine part dealing mathematical calculations
//		It contains classes dealing with vectors, bounding boxes
//		random number, etc.
//
// Copyright 2013-2015 CoolGames
// Last Changed: 08-06-2015
/////////////////////////////////////////////////////////////

//
// The math class tbMath that extends the Math class with other useful methods
//

var TBMath = function() {
	"use strict";
};

TBMath.prototype.degToRad = function(degrees) {
	"use strict";
	return Math.PI * degrees/180;
};

TBMath.prototype.radToDeg = function(rad) {
	"use strict";
	return 180*rad/Math.PI;
};

TBMath.prototype.distance = function(x1, y1, x2, y2) {
	"use strict";
	return Math.sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));
};

TBMath.prototype.direction = function(x1, y1, x2, y2) {
	"use strict";
	var xx = x2-x1, yy = y2-y1;
	return tbMath.radToDeg(Math.atan2(-yy, xx));
};

TBMath.prototype.projectionX = function(direction, length) {
	"use strict";
	return length * Math.cos(tbMath.degToRad(direction));
};

TBMath.prototype.projectionY = function(direction, length) {
	"use strict";
	return - length * Math.sin(tbMath.degToRad(direction));
};

var tbMath = new TBMath();


//
// The vector class tbVector
//

var tbVector = function(x,y) {
	"use strict";
	this.x = x;
	this.y = y;
};

function tbVectorFromPolar(direction, length) {
	"use strict";
	var x = length * Math.cos(tbMath.degToRad(direction)),
		y = - length * Math.sin(tbMath.degToRad(direction));
	return new tbVector(x,y);
}

tbVector.prototype.assignVector = function(v) {
	"use strict";
	this.x = v.x;
	this.y = v.y;
};

tbVector.prototype.assignXY = function(x, y) {
	"use strict";
	this.x = x;
	this.y = y;
};

tbVector.prototype.assign = function(vector_or_x, undefined_or_y) {
	"use strict";
	if (undefined_or_y === undefined) {
		this.x = vector_or_x.x;
		this.y = vector_or_x.y;
	}
	else {
		this.x = vector_or_x;
		this.y = undefined_or_y;
	}
};

tbVector.prototype.magnitude = function() {
	"use strict";
	return Math.sqrt(this.x*this.x + this.y*this.y);
};

tbVector.prototype.length = function() {
	"use strict";
	return Math.sqrt(this.x*this.x + this.y*this.y);
};

tbVector.prototype.lengthSquared = function() {
	"use strict";
	return this.x*this.x + this.y*this.y;
};

tbVector.prototype.distanceSquared = function(other) {
	"use strict";
	var dx = (this.x - other.x),
		dy = (this.y - other.y);
	return dx * dx + dy * dy;
};

tbVector.prototype.distance = function(other) {
	"use strict";
	var dx = (this.x - other.x),
		dy = (this.y - other.y);
	return Math.sqrt(dx * dx + dy * dy);
};

tbVector.prototype.distanceSquaredXY = function(x, y) {
	"use strict";
	var dx = (this.x - x),
		dy = (this.y - y);
	return dx * dx + dy * dy;
};

tbVector.prototype.distanceXY = function(x, y) {
	"use strict";
	var dx = (this.x - x),
		dy = (this.y - y);
	return Math.sqrt(dx * dx + dy * dy);
};

tbVector.prototype.direction = function() {
	"use strict";
	return tbMath.radToDeg(Math.atan2(-this.y, this.x));
};

tbVector.prototype.clone = function() {
	"use strict";
	return new tbVector(this.x, this.y);
};

tbVector.prototype.add = function(vector) {
	"use strict";
	return new tbVector(this.x + vector.x, this.y + vector.y);
};

tbVector.prototype.addDirect = function(vector) {
	"use strict";
	this.x += vector.x;
	this.y += vector.y;
};

tbVector.prototype.subtract = function(vector) {
	"use strict";
	return new tbVector(this.x - vector.x, this.y - vector.y);
};

tbVector.prototype.subtractDirect = function(vector) {
	"use strict";
	this.x -= vector.x;
	this.y -= vector.y;
};

tbVector.prototype.negate = function() {
	"use strict";
	return new tbVector(-this.x, -this.y);
};

tbVector.prototype.negateDirect = function() {
	"use strict";
	this.x = -this.x;
	this.y = -this.y;
};

tbVector.prototype.scale = function(scalar) {
	"use strict";
	return new tbVector(scalar * this.x, scalar * this.y);
};

tbVector.prototype.scaleDirect = function(scalar) {
	"use strict";
	this.x *= scalar;
	this.y *= scalar;
};

tbVector.prototype.multiply = function(vector) {
	"use strict";
	return new tbVector(vector.x * this.x, vector.y * this.y);
};

tbVector.prototype.multiplyDirect = function(vector) {
	"use strict";
	this.x *= vector.x;
	this.y *= vector.y;
};

tbVector.prototype.rotate = function(angle) {
	"use strict";
	var s = Math.sin(angle*Math.PI/180),
		c = Math.cos(angle*Math.PI/180);
	return new tbVector(c * this.x + s * this.y, -s * this.x + c * this.y);
};

tbVector.prototype.rotateDirect = function(angle) {
	"use strict";
	var s = Math.sin(angle*Math.PI/180),
		c = Math.cos(angle*Math.PI/180),
		x = this.x;
	this.x = c * this.x + s * this.y;
	this.y = -s * x + c * this.y;
};

tbVector.prototype.dot = function(vector) {
	"use strict";
	return (this.x * vector.x + this.y * vector.y);
};

tbVector.prototype.perpendicular = function() {
	"use strict";
	return new tbVector(this.y, -this.x);
};

tbVector.prototype.perpendicularDirect = function() {
	"use strict";
	var x = this.x;
	this.x = this.y;
	this.y = -x;
};

tbVector.prototype.normalize = function() {
	"use strict";
	var m = this.magnitude();
	if (m === 0) {
		return new tbVector(0, 0);
	}
	return new tbVector(this.x / m, this.y / m);
};

tbVector.prototype.normalizeDirect = function() {
	"use strict";
	var m = this.magnitude();
	if (m === 0) {
		this.x = 0; this.y = 0;
		return;
	}
	this.x /= m;
	this.y /= m;
};

tbVector.prototype.normal = function() {
	"use strict";
	return (this.perpendicular()).normalize();
};

tbVector.prototype.normalDirect = function() {
	"use strict";
	this.perpendicularDirect();
	this.normalizeDirect();
};

tbVector.prototype.draw = function(x, y, color) {
	"use strict";
	var sc = Math.min(8,this.length()/4),
		vec1 = this.subtract(this.normalize().scale(2*sc)),
		vec2 = vec1.add(this.normal().scale(sc)),
		vec3 = vec1.add(this.normal().scale(-sc)),
		context = tbGraphics.context;
	context.strokeStyle = color;
	context.beginPath();
	context.moveTo(x, y);
	context.lineTo(x + vec1.x, y + vec1.y);
	context.lineTo(x + vec2.x, y + vec2.y);
	context.lineTo(x + this.x, y + this.y);
	context.lineTo(x + vec3.x, y + vec3.y);
	context.lineTo(x + vec1.x, y + vec1.y);
	context.stroke();
};


//
// A random number generator class
// Uses a linear congruential generator using GCC's constants
//

var useOldRandomNumberConstants = false;

// The constructor
var tbRandom = function(seed) {
	"use strict";
	if (useOldRandomNumberConstants) {
		// This version does not work correctly because JavaScript does not support 64-bit integers
		this.m = 0x80000000;		// 2**31;
		this.a = 1103515245;
		this.c = 12345;
	} else {
		this.m = 4294967296;		// 2**32;
		this.a = 1664525;
		this.c = 1013904223;
	}
	if (seed === undefined) {
		this.state = Math.floor(Math.random() * (this.m-1));
	} else {
		this.state = seed;
	}
};

// returns integer in range [0,2^31> (but with weak randomness in lower bits). Don't use directly
tbRandom.prototype._next = function() {
	"use strict";
	this.state = (this.a * this.state + this.c) % this.m;
	return this.state;
};

// returns a clone of the object
tbRandom.prototype.clone = function() {
	"use strict";
	var res = new tbRandom();
	res.m = this.m;
	res.a = this.a;
	res.c = this.c;
	res.state = this.state;
	return res;
};

// returns real in range [0,n>
tbRandom.prototype.random = function(n) {
	"use strict";
	var nn = 1;
	if (n !== undefined) { nn = n; }
	return nn*(this._next() / this.m);
};

// returns integer in range [0,n]
tbRandom.prototype.iRandom = function(n) {
	"use strict";
	var nn = 1;
	if (n !== undefined) { nn = n; }
	return Math.floor(this.random(nn+1));
};

// returns real in range [n1,n2>
tbRandom.prototype.randomRange = function(n1,n2) {
	"use strict";
	return n1 + this.random(n2-n1);
};

// returns integer in range [n1,n2]
tbRandom.prototype.iRandomRange = function(n1,n2) {
	"use strict";
	return n1 + this.iRandom(n2-n1);
};

// Returns randomly one of the arguments
tbRandom.prototype.choice = function() {
	"use strict";
	if (arguments.length === 0) { return 0; }
	return arguments[this.iRandomRange(0, arguments.length-1)];
};

// We define one global random number generator
var defaultRandom = new tbRandom();
/////////////////////////////////////////////////////////////
// tbPlatforms: Contains objects for device detection and
//              platform specific options
//
// Copyright 2013-2014 CoolGames
// Last Changed: 16-7-2014
/////////////////////////////////////////////////////////////


var tbPlatforms = {

	// Enable or disable platform specific hacks
	// TODO: default is true, but it should be based on detected device
	Hacks: {
		// On our Android 4.1 Sony test device, the context is not properly reset each frame
		// therefore, we add a hack to the tbGraphics.clear function by drawing an invisible
		// line
		ANDROID_41_CONTEXT_RESET_BUG: true,

		// If we use Cordova to build an app on iOS, the game becomes slow if images are loaded
		// that are not used. This hack enabled immediate use of an image after it is loaded
		DRAW_IMAGE_AFTER_LOADING: false
	}
};/////////////////////////////////////////////////////////////
// tbLoader: The engine part dealing with loading
//
// Copyright 2013-2015 CoolGames
// Last Changed: 9-6-2015
/////////////////////////////////////////////////////////////

// The constructor for the loader object
var TBLoader = function() {
	"use strict";
	this._location = "";				// Location of the data files
	this._loading = [];					// Whether this moment is being loaded or has been loaded before
	this._total = [];					// Total number of items to be loaded for each moment
	this._loaded  = [];					// Number of items that are loaded for each moment
	this._failed = [];					// Number of items that failed for each moment
	this._items = [];					// The items to be loaded for each moment
	this.addMoment("start");
	this.addMoment("load");
	this.addMoment("game");
};

// Set the data location
TBLoader.prototype.setDataLocation = function(location) { 
	"use strict";
	this._location = location;
	if (this._location !== "" && this._location[this._location.length-1] !== "/") {
		this._location += "/";
	}
};

// Get the data location
TBLoader.prototype.getDataLocation = function() { 
	"use strict";
	return this._location;
};

// Initialize a moment
TBLoader.prototype.addMoment = function(moment) { 
	"use strict";
	if (this._items[moment]) { return; }			// It already exists
	this._total[moment] = 0;
	this._loaded[moment] = 0;
	this._failed[moment] = 0;
	this._items[moment] = [];
	this._loading[moment] = false;
};

// Return total number of items to load for the moment
TBLoader.prototype.total = function(moment) { 
	"use strict";
	if (!this._items[moment]) { return 0; }
	return this._total[moment];
};

// Return number of loaded items for the moment
TBLoader.prototype.loaded = function(moment) { 
	"use strict";
	if (!this._items[moment]) { return 0; }
	return this._loaded[moment];
};

// Return number of failed items for the moment
TBLoader.prototype.failed = function(moment) { 
	"use strict";
	if (!this._items[moment]) { return 0; }
	return this._failed[moment];
};

// Return whether all items are loaded for the moment
TBLoader.prototype.complete = function(moment) { 
	"use strict";
	if (!this._items[moment]) { return true; }
	return (this._loaded[moment] + this._failed[moment] === this._total[moment]);
};

// Return percentage of items that are loaded for the moment
TBLoader.prototype.percentage = function(moment) { 
	"use strict";
	if (!this._items[moment]) { return 100; }
	return (100*(this._loaded[moment] + this._failed[moment]) / this._total[moment]);
};

// Report that a resource is correctly loaded
TBLoader.prototype.loadComplete = function(moment) {
	"use strict";
	this._loaded[moment] += 1;
	if (this.complete(moment)) {
		tbGame.addSpecial("Load Complete", { moment: moment} ); 
	}
};

// Report that a resource failed to load
TBLoader.prototype.loadFailed = function(moment) {
	"use strict";
	this._failed[moment] += 1;
	tbGame.addSpecial("Load Failed", { moment: moment} ); 
};

// Add a resource to be loaded, number indicated the number of subresources
TBLoader.prototype.addResource = function(resource, moment, number) {
	"use strict";
	if (!this._items[moment]) {
		this.addMoment(moment);
	}
	this._items[moment].push(resource);
	this._total[moment] += number;
};

// start the actual loading for the moment
TBLoader.prototype.startLoading = function(moment) {
	"use strict";
	var i;
	// Check whether it is or has already been loaded
	if (this._loading[moment]) { return; }
	this._loading[moment] = true;
	// If nothing to load, generate event and return
	if (!this._items[moment] || this._items[moment].length === 0) {
		tbGame.addSpecial("Load Complete", { moment: moment} );
		return;
	}
	// Start loading the items
	for (i =0 ; i < this._items[moment].length; i += 1) {
		this._items[moment][i].startLoading(moment, this._location);
	}
};
	
// Create the loader
var tbLoader = new TBLoader();
/////////////////////////////////////////////////////////////
// tbGraphics: The engine part dealing with graphics
//
// Copyright 2013-2015 CoolGames
// Last Changed: 28-06-2015
/////////////////////////////////////////////////////////////

//
// GRAPHICS
//

// The constructor for the graphics object
var TBGraphics = function(mainCanvas) {
	"use strict";
	this.canvas = undefined;					// The current draw canvas
	this.context = undefined;					// The current drawing context
	this.width = 0;								// The width of the current canvas
	this.height = 0;							// The height of the current canvas
	if (mainCanvas) {
		this.setCanvas(mainCanvas);
	}
};

// Set the current canvas by id
TBGraphics.prototype.setCanvasId = function(id) {
	"use strict";
	this.canvas = document.getElementById(id);
	this.setCanvas(this.canvas);
};

// Set the current canvas
TBGraphics.prototype.setCanvas = function(canvas) {
	"use strict";
	this.canvas = canvas;
	this.context = canvas.getContext("2d");
	this.width = canvas.width;
	this.height = canvas.height;
};

// Clear the current canvas to transparent
TBGraphics.prototype.clear = function() {
	"use strict";
	this.context.clearRect(0, 0, this.width, this.height);
	// On Android 4.1 do a hack to force clearing
	if (tbPlatforms.Hacks.ANDROID_41_CONTEXT_RESET_BUG) {
		this.context.beginPath();
		this.context.moveTo(0, 0);
		this.context.lineTo(-1, -1);
		this.context.closePath();
		this.context.stroke();
	}
};

// Clear the current canvas to the indicated color
TBGraphics.prototype.clearColor = function(color) {
	"use strict";
	var oldColor = this.context.fillStyle;
	this.context.fillStyle = color;
	this.context.fillRect(0, 0, this.width, this.height);
	this.context.fillStyle = oldColor;
};

// Draw a rectangle
TBGraphics.prototype.drawRectangle = function(x, y, w, h, fillColor, strokeColor, width) {
	"use strict";
	this.context.save();
	// Compatibility with the past
	if (strokeColor === false) {
		this.context.fillStyle = fillColor;
		this.context.fillRect(x, y, w, h);
	} else if (strokeColor === true) {
		this.context.strokeStyle = fillColor;
		this.context.strokeRect(x, y, w, h);
	} else {
		// New method
		if (fillColor !== undefined) {
			this.context.fillStyle = fillColor;
			this.context.fillRect(x, y, w, h);
		}
		if (strokeColor !== undefined) {
			if (width) { this.context.lineWidth = width; }
			this.context.strokeStyle = strokeColor;
			this.context.strokeRect(x, y, w, h);
		}
	}
	this.context.restore();
};

// Draw a rounded rectangle
TBGraphics.prototype.drawRoundedRectangle = function(x, y, w, h, r, fillColor, strokeColor, width) {
	"use strict";
	this.context.save();
	if (r === undefined) { r = 8; }
	if (w < 2 * r) { r = Math.floor(w / 2); }
	if (h < 2 * r) { r = Math.floor(h / 2); }
	this.context.beginPath();
	this.context.moveTo(x + r, y);
	this.context.arcTo(x + w, y, x + w, y + h, r);
	this.context.arcTo(x + w, y + h, x, y + h, r);
	this.context.arcTo(x, y + h, x, y, r);
	this.context.arcTo(x, y, x + w, y, r);
	this.context.closePath();
	// Compatibility with the past
	if (strokeColor === false) {
		this.context.fillStyle = fillColor;
		this.context.fill();
	} else if (strokeColor === true) {
		this.context.strokeStyle = fillColor;
		this.context.stroke();
	} else {
		// New method
		if (fillColor !== undefined) {
			this.context.fillStyle = fillColor;
			this.context.fill();
		}
		if (strokeColor !== undefined) {
			if (width) { this.context.lineWidth = width; }
			this.context.strokeStyle = strokeColor;
			this.context.stroke();
		}
	}
	this.context.restore();
};

// Draw a disk
TBGraphics.prototype.drawDisk = function(x, y, r, fillColor, strokeColor, width) {
	"use strict";
	this.context.save();
	this.context.beginPath();
	this.context.arc(x, y, r, 0, 2 * Math.PI, false);
	this.context.closePath();
	// Compatibility with the past
	if (strokeColor === false) {
		this.context.fillStyle = fillColor;
		this.context.fill();
	} else if (strokeColor === true) {
		this.context.strokeStyle = fillColor;
		this.context.stroke();
	} else {
		// New method
		if (fillColor !== undefined) {
			this.context.fillStyle = fillColor;
			this.context.fill();
		}
		if (strokeColor !== undefined) {
			if (width) { this.context.lineWidth = width; }
			this.context.strokeStyle = strokeColor;
			this.context.stroke();
		}
	}
	this.context.restore();
};

// Draw an ellipse
TBGraphics.prototype.drawEllipse = function(x, y, rx, ry, fillColor, strokeColor, width) {
	"use strict";
	// Create the path using transformations
	this.context.save();
	this.context.beginPath();
	this.context.translate(x - rx, y - ry);
	this.context.scale(rx, ry);
	this.context.arc(1, 1, 1, 0, 2 * Math.PI, false);
	this.context.restore();
	// Now draw it
	this.context.save();
	// Compatibility with the past
	if (strokeColor === false) {
		this.context.fillStyle = fillColor;
		this.context.fill();
	} else if (strokeColor === true) {
		this.context.strokeStyle = fillColor;
		this.context.stroke();
	} else {
		// New method
		if (fillColor !== undefined) {
			this.context.fillStyle = fillColor;
			this.context.fill();
		}
		if (strokeColor !== undefined) {
			if (width) { this.context.lineWidth = width; }
			this.context.strokeStyle = strokeColor;
			this.context.stroke();
		}
	}
	this.context.restore();
};

// Draw a line
TBGraphics.prototype.drawLine = function(x1, y1, x2, y2, strokeColor, width) {
	"use strict";
	this.context.save();
	this.context.beginPath();
	this.context.moveTo(x1, y1);
	this.context.lineTo(x2, y2);
	if (width) { this.context.lineWidth = width; }
	this.context.strokeStyle = strokeColor;
	this.context.stroke();
	this.context.restore();
};

// Draw a triangle
TBGraphics.prototype.drawTriangle = function(x1, y1, x2, y2, x3, y3, fillColor, strokeColor, width) {
	"use strict";
	this.drawPolygon([x1, x2, x3], [y1, y2, y3], fillColor, strokeColor, width);
};

// Draw a polygon
TBGraphics.prototype.drawPolygon = function(x, y, fillColor, strokeColor, width) {
	"use strict";
	var i;
	this.context.save();
	this.context.beginPath();
	this.context.moveTo(x[0], y[0]);
	for (i = 1; i < x.length; i += 1) {
		this.context.lineTo(x[i], y[i]);
	}
	this.context.closePath();
	// Compatibility with the past
	if (strokeColor === false) {
		this.context.fillStyle = fillColor;
		this.context.fill();
	} else if (strokeColor === true) {
		this.context.strokeStyle = fillColor;
		this.context.stroke();
	} else {
		// New method
		if (fillColor !== undefined) {
			this.context.fillStyle = fillColor;
			this.context.fill();
		}
		if (strokeColor !== undefined) {
			if (width) { this.context.lineWidth = width; }
			this.context.strokeStyle = strokeColor;
			this.context.stroke();
		}
	}
	this.context.restore();
};

// Draw a polyline
TBGraphics.prototype.drawPolyLine = function(x, y, strokeColor, width) {
	"use strict";
	var i;
	this.context.save();
	this.context.beginPath();
	this.context.moveTo(x[0], y[0]);
	for (i = 1; i < x.length; i += 1) {
		this.context.lineTo(x[i], y[i]);
	}
	if (width) { this.context.lineWidth = width; }
	this.context.strokeStyle = strokeColor;
	this.context.stroke();
	this.context.restore();
};

// Draw a text
TBGraphics.prototype.drawText = function(text, x, y, fillColor, font, strokeColor, width) {
	"use strict";
	this.context.save();
	this.context.font = font;
	// Compatibility with the past
	if (strokeColor === false) {
		this.context.fillStyle = fillColor;
		this.context.fillText(text, x, y);
	} else if (strokeColor === true) {
		this.context.strokeStyle = fillColor;
		this.context.strokeText(text, x, y);
	} else {
		// New method
		if (fillColor !== undefined) {
			this.context.fillStyle = fillColor;
			this.context.fillText(text, x, y);
		}
		if (strokeColor !== undefined) {
			if (width) { this.context.lineWidth = width; }
			this.context.strokeStyle = strokeColor;
			this.context.strokeText(text, x, y);
		}
	}
	this.context.restore();
};

// Return the width of a text
TBGraphics.prototype.textWidth = function(text, font) {
	"use strict";
	this.context.font = font;
	return this.context.measureText(text).width;
};


// Create the graphics object
var tbGraphics = new TBGraphics(mainCanvas);


//
// TEXTURES
//

// The constructor for the texture
var tbTexture = function(name, number, loading) {
	"use strict";
	this.name = name;
	this.number = number;
	this.loading = loading;
	this.bitmaps = [];
	this.filenames = [];
	tbLoader.addResource(this, this.loading, this.number);
};

// Callback when a bitmap is correctly loaded
tbTexture.prototype._bitmapLoaded = function(moment) {
	"use strict";
	tbLoader.loadComplete(moment);
};

// Callback when a bitmap failed to load
tbTexture.prototype._bitmapFailed = function(moment) {
	"use strict";
	tbLoader.loadFailed(moment);
};

// Start the loading of the texture, location is the added location part
tbTexture.prototype.startLoading = function(moment, location) {
	"use strict";
	var self = this,
		i, fname,
		bmLoad = function(e) {
			if (tbPlatforms.Hacks.DRAW_IMAGE_AFTER_LOADING) {
				tbGraphics.context.drawImage(this, 0, 0, 1, 1, -2, -2, 1, 1);
			}
			self._bitmapLoaded(moment);
		},
		bmFail = function(e) { self._bitmapFailed(moment); };
	for (i = 0; i<this.bitmaps.length; i += 1) {
		fname = this.filenames[i];
		if (fname.toLowerCase().indexOf("http:") !== 0 && fname.toLowerCase().indexOf("https:") !== 0) {
			fname = location + fname;
		}
		this.bitmaps[i].src = fname;
		this.bitmaps[i].addEventListener("load", bmLoad, false);
		this.bitmaps[i].addEventListener("error", bmFail, false);
	}
};

// Return whether correctly loaded
tbTexture.prototype.complete = function() {
	"use strict";
	var i;
	for (i = 0; i<this.bitmaps.length; i += 1) {
		if (!this.bitmaps[i].complete || this.bitmaps[i].width === 0) {
			return false;
		}
	}

	if (this.name == "LevelEndTexture") {
		showFullscreenAdOrVideo();
	}

	return true;
};

// Adds a bitmap to the texture
tbTexture.prototype.addBitmap = function(number, filename) {
	"use strict";
	if (number >= 0 && number < this.number) {
		this.bitmaps[number] = new Image();
		this.filenames[number] = filename;
	}
};

// Adds an existing image to the texture
tbTexture.prototype.addImage = function(number, image) {
	"use strict";
	if (number >= 0 && number < this.number) {
		this.bitmaps[number] = image;
		this.filenames[number] = "";
	}
};

// Draws the source part of the texture at the destination
tbTexture.prototype.drawPart = function(number, sx, sy, sw, sh, dx, dy, dw, dh) {
	"use strict";
	if (this.bitmaps[number] && this.bitmaps[number].complete) {
		if (dw === undefined) { dw = sw; }
		if (dh === undefined) { dh = sh; }
		// Solve problem with wrong sizes
		if (sw <= 0 || sh <= 0) { return; }
		if (Math.round(dw) === 0 || Math.round(dh) === 0) { return; }
		tbGraphics.context.drawImage(this.bitmaps[number], sx, sy, sw, sh, dx, dy, dw, dh);
	}
};


//
// IMAGES
//

// The constructor for the image
var tbImage = function(name, texture, number, width, height, xOrigin, yOrigin, combinedWidth, combinedHeight, perRow) {
	"use strict";
	this.name = name;
	this.texture = texture;
	this.number = number;
	this.width = width;
	this.height = height;
	this.xOrigin = xOrigin;
	this.yOrigin = yOrigin;
	this.combinedWidth = combinedWidth;
	this.combinedHeight = combinedHeight;
	this.perRow = perRow;
	this.subTexIndex = [];
	this.subX = [];
	this.subY = [];
	this.subW = [];
	this.subH = [];
	this.subXOff = [];
	this.subYOff = [];
};

// Adds a subimage for the image
tbImage.prototype.addImage = function(number, texnumb, x, y, w, h, xOff, yOff) {
	"use strict";
	if (number >= 0 && number < this.number) {
		this.subTexIndex[number] = texnumb;
		this.subX[number] = x;
		this.subY[number] = y;
		this.subW[number] = w;
		this.subH[number] = h;
		this.subXOff[number] = xOff;
		this.subYOff[number] = yOff;
	}
};

// Create an image, loaded from a file
function tbImageLoad(name, filename, width, height, xOrigin, yOrigin) {
	"use strict";
	var tex, img;
	tex = new tbTexture(name + "_Texture", 1, name);
	tex.addBitmap(0,filename);
	img = new tbImage(name, tex, 1, width, height, xOrigin, yOrigin, width, height, 1);
	img.addImage(0, 0, 0, 0, width, height, 0, 0);
	tbLoader.startLoading(name);
	return img;
}

// Create an image with subimages, loaded from a file
function tbImageLoadExt(name, filename, total, perRow, width, height, xOrigin, yOrigin) {
	"use strict";
	var tex, img, i;
	tex = new tbTexture(name + "_Texture", 1, name);
	tex.addBitmap(0,filename);
	img = new tbImage(name, tex, total, width, height, xOrigin, yOrigin, perRow * width, (1 + Math.floor((total-1) / perRow)) * height, perRow);
	for (i=0; i<total; i += 1) {
		img.addImage(i, 0, (i % perRow)*width, (Math.floor(i / perRow))*height, width, height, 0, 0);
	}
	tbLoader.startLoading(name);
	return img;
}

// Create an image, from an Image
function tbImageFromImage(name, image, width, height, xOrigin, yOrigin) {
	"use strict";
	var tex, img;
	tex = new tbTexture(name + "_Texture", 1, name);
	tex.addImage(0,image);
	img = new tbImage(name, tex, 1, width, height, xOrigin, yOrigin, width, height, 1);
	img.addImage(0, 0, 0, 0, width, height, 0, 0);
	return img;
}

// Create an image with subimages, from an Image
function tbImageFromImageExt(name, image, total, perRow, width, height, xOrigin, yOrigin) {
	"use strict";
	var tex, img, i;
	tex = new tbTexture(name + "_Texture", 1, name);
	tex.addImage(0,image);
	img = new tbImage(name, tex, total, width, height, xOrigin, yOrigin, perRow * width, (1 + Math.floor((total-1) / perRow)) * height, perRow);
	for (i=0; i<total; i += 1) {
		img.addImage(i, 0, (i % perRow)*width, (Math.floor(i / perRow))*height, width, height, 0, 0);
	}
	return img;
}



// Return whether correctly loaded
tbImage.prototype.complete = function() {
	"use strict";
	return this.texture.complete();
};

// Draws subimage number at the destination
tbImage.prototype.drawSimple = function(number, dx, dy) {
	"use strict";
	// Get the number in range
	number = (Math.round(number) % this.number + this.number) % this.number;
	// Draw it
	this.texture.drawPart(this.subTexIndex[number],
		this.subX[number], this.subY[number], this.subW[number], this.subH[number],
		dx-this.xOrigin+this.subXOff[number], dy-this.yOrigin+this.subYOff[number]);
};

// Draws subimage number at the destination with an alpha setting
tbImage.prototype.drawAlpha = function(number, dx, dy, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha;
	context.globalAlpha = alpha;
	// Get the number in range
	number = (Math.round(number) % this.number + this.number) % this.number;
	// Draw it
	this.texture.drawPart(this.subTexIndex[number],
		this.subX[number], this.subY[number], this.subW[number], this.subH[number],
		dx-this.xOrigin+this.subXOff[number], dy-this.yOrigin+this.subYOff[number]);
	// Restore alpha
	context.globalAlpha = oldalpha;
};

// Draws subimage number at the destination transformed and with an alpha setting
tbImage.prototype.drawExt = function(number, dx, dy, xScale, yScale, angle, alpha) {
	"use strict";
	var context = tbGraphics.context;
	// Solve problem with 0 scale
	if (Math.abs(xScale) < 0.0001 || Math.abs(yScale) < 0.0001) { return; }
	// Get the number in range
	number = (Math.round(number) % this.number + this.number) % this.number;
	// Set the transformation and alpha
	context.save();
	context.translate(dx,dy);
	context.rotate(-angle * Math.PI/180);     // from degrees to radians and counter-clockwise
	context.scale(xScale,yScale);
	context.globalAlpha = alpha;
	// Draw it
	this.texture.drawPart(this.subTexIndex[number],
		this.subX[number], this.subY[number], this.subW[number], this.subH[number],
		this.subXOff[number]-this.xOrigin, this.subYOff[number]-this.yOrigin);
	// Restore transformation and alpha
	context.restore();
};

// Draws subimage number in the region
tbImage.prototype.drawStretched = function(number, dx, dy, dw, dh, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha,
		scx, scy;
	if (this.width === 0 || this.height === 0) { return; }
	// Get the number in range
	number = (Math.round(number) % this.number + this.number) % this.number;
	// Set alpha
	context.globalAlpha = alpha;
	// Draw it
	scx = dw / this.width;
	scy = dh / this.height;
	this.texture.drawPart(this.subTexIndex[number],
		this.subX[number], this.subY[number], this.subW[number], this.subH[number],
		dx+scx*this.subXOff[number], dy+scy*this.subYOff[number], scx*this.subW[number], scy*this.subH[number]);
	// Restore alpha
	context.globalAlpha = oldalpha;
};


// Draws subimage number in nine-sliced to fill the region
tbImage.prototype.drawNineSlice = function(number, dx, dy, dw, dh, alpha, leftSize, rightSize, topSize, bottomSize) {
	"use strict";
	var sw0, sw1, sw2, sx0, sx1, sx2, sh0, sh1, sh2, sy0, sy1, sy2, sw, sh,
		dw0, dw1, dw2, dx0, dx1, dx2, dh0, dh1, dh2, dy0, dy1, dy2;
	if (this.width === 0 || this.height === 0) { return; }
	// Get the correct size of the pieces when not defined
	if (leftSize === undefined) { leftSize = Math.floor(this.width / 3); }
	if (rightSize === undefined) { rightSize = Math.floor(this.width / 3); }
	if (topSize === undefined) { topSize = Math.floor(this.height / 3); }
	if (bottomSize === undefined) { bottomSize = Math.floor(this.height / 3); }
	// Correct sizes when small
	if (dw < leftSize + rightSize) {
		leftSize = Math.round(leftSize * dw / (leftSize + rightSize));
		rightSize = dw - leftSize;
	}
	if (dh < topSize + bottomSize) {
		topSize = Math.round(topSize * dh / (topSize + bottomSize));
		bottomSize = dh - topSize;
	}
	// Determine positions and size of the pieces in the image
	sw = this.width; sw0 = leftSize; sw1 = this.width - leftSize - rightSize; sw2 = rightSize;
	sx0 = 0; sx1 = sw0; sx2 = sw0 + sw1;
	sh = this.height; sh0 = topSize; sh1 = this.height - topSize - bottomSize; sh2 = bottomSize;
	sy0 = 0; sy1 = sh0; sy2 = sh0 + sh1;
	// Determine positions and size of the pieces in the destination
	dw0 = leftSize; dw1 = dw - leftSize - rightSize; dw2 = rightSize;
	dx0 = dx; dx1 = dx + dw0; dx2 = dx + dw0 + dw1;
	dh0 = topSize; dh1 = dh - topSize - bottomSize; dh2 = bottomSize;
	dy0 = dy; dy1 = dy + dh0; dy2 = dy + dh0 + dh1;
	// Now draw it, looking at the various cases
	if (dw === this.width && dh === this.height) {
		this.drawAlpha(number, dx + this.xOrigin, dy + this.yOrigin, alpha);
	} else if (dh === this.height) {
		this.drawPartStretched(number, sx1, sy0, sw1, sh, dx1, dy0, dw1, dh, alpha);
		this.drawPart(number, sx0, sy0, sw0, sh, dx0, dy0, alpha);
		this.drawPart(number, sx2, sy0, sw2, sh, dx2, dy0, alpha);
	} else if (dw === this.width) {
		this.drawPartStretched(number, sx0, sy1, sw, sh1, dx0, dy1, dw, dh1, alpha);
		this.drawPart(number, sx0, sy0, sw, sh0, dx0, dy0, alpha);
		this.drawPart(number, sx0, sy2, sw, sh2, dx0, dy2, alpha);
	} else {
		// middle piece
		this.drawPartStretched(number, sx1, sy1, sw1, sh1, dx1, dy1, dw1, dh1, alpha); 
		// side pieces
		this.drawPartStretched(number, sx1, sy0, sw1, sh0, dx1, dy0, dw1, dh0, alpha);
		this.drawPartStretched(number, sx0, sy1, sw0, sh1, dx0, dy1, dw0, dh1, alpha);
		this.drawPartStretched(number, sx2, sy1, sw2, sh1, dx2, dy1, dw2, dh1, alpha);
		this.drawPartStretched(number, sx1, sy2, sw1, sh2, dx1, dy2, dw1, dh2, alpha);
		// corner pieces
		this.drawPart(number, sx0, sy0, sw0, sh0, dx0, dy0, alpha);
		this.drawPart(number, sx0, sy2, sw0, sh2, dx0, dy2, alpha);
		this.drawPart(number, sx2, sy0, sw2, sh0, dx2, dy0, alpha);
		this.drawPart(number, sx2, sy2, sw2, sh2, dx2, dy2, alpha);
	}
};

// Draw a number of copies of the image
tbImage.prototype.drawMultiple = function(number, hNumb, vNumb, dx, dy, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha,
		subx, suby, subw, subh, xx, yy, i, j;
	// Get the number in range
	number = (Math.round(number) % this.number + this.number) % this.number;
	// Set alpha
	context.globalAlpha = alpha;
	// Draw it
	subx = this.subX[number]; suby = this.subY[number]; subw = this.subW[number]; subh = this.subH[number];
	xx = dx-this.xOrigin+this.subXOff[number];
	yy = dy-this.yOrigin+this.subYOff[number];
	for (i=0; i<hNumb; i += 1) {
		for (j=0; j<vNumb; j += 1) {
			this.texture.drawPart(this.subTexIndex[number],subx,suby,subw,subh,xx+i*this.width,yy+j*this.height);
		}
	}
	// Restore alpha
	context.globalAlpha = oldalpha;
};

// Draw a number of copies of the image with a transformation
tbImage.prototype.drawMultipleExt = function(number, hNumb, vNumb, dx, dy, xScale, yScale, angle, alpha) {
	"use strict";
	var xinc = xScale*this.width,
		yinc = yScale*this.height,
		hxinc = xinc*Math.cos(angle*Math.PI/180),
		hyinc = -xinc*Math.sin(angle*Math.PI/180),
		vxinc = yinc*Math.sin(angle*Math.PI/180),
		vyinc = yinc*Math.cos(angle*Math.PI/180),
		i, j;
	for (i=0; i<hNumb; i += 1) {
		for (j=0; j<vNumb; j += 1) {
			this.drawExt(number,dx+i*hxinc+j*vxinc,dy+i*hyinc+j*vyinc,xScale,yScale,angle,alpha);
		}
	}
};

// Draw the image tiled in an area with an offset
tbImage.prototype.drawTiledOffset = function(number, xOff, yOff, dx, dy, dw, dh, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha,
		xx, yy, nx, ny, xdest, ydest, subx, suby, subw, subh, i, j;
	if (this.width === 0 || this.height === 0) { return; }
	// Get the number in range
	number = (Math.round(number) % this.number + this.number) % this.number;
	// Set alpha
	context.globalAlpha = alpha;
	// Draw it
	xx = Math.round(xOff-this.xOrigin) % this.width;
	if (xx > 0) { xx -= this.width; }
	yy = Math.round(yOff-this.yOrigin) % this.height;
	if (yy > 0) { yy -= this.height; }
	nx = Math.ceil((dw-xx)/this.width);
	ny = Math.ceil((dh-yy)/this.height);
	xx += dx+this.subXOff[number];
	yy += dy+this.subYOff[number];
	for (i=0; i<nx; i += 1) {
		for (j=0; j<ny; j += 1)
		{
			subx = this.subX[number]; suby = this.subY[number]; subw = this.subW[number]; subh = this.subH[number];
			xdest = xx+i*this.width;
			ydest = yy+j*this.height;
			if (xdest < dx) { subx += dx-xdest; subw -= dx-xdest; xdest = dx; }
			if (xdest+subw >= dx+dw) { subw = dx+dw-xdest; }
			if (ydest < dy) { suby += dy-ydest; subh -= dy-ydest; ydest = dy; }
			if (ydest+subh >= dy+dh) { subh = dy+dh-ydest; }
			if (subw > 0 && subh > 0) {
				this.texture.drawPart(this.subTexIndex[number],subx,suby,subw,subh,xdest,ydest);
			}
		}
	}
	// Restore alpha
	context.globalAlpha = oldalpha;
};

// Draw the image tiled in an area
tbImage.prototype.drawTiled = function(number, dx, dy, dw, dh, alpha) {
	"use strict";
	this.drawTiledOffset(number, 0, 0, dx, dy, dw, dh, alpha);
};

// Draws part of subimage number at the destination with an alpha setting
tbImage.prototype.drawPart = function(number, sx, sy, sw, sh, dx, dy, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha,
		subx, suby, subw, subh;
	// Get the number in range
	number = (Math.round(number) % this.number + this.number) % this.number;
	// Check whether there is anything to draw
	subx = this.subXOff[number]; suby = this.subYOff[number]; subw = this.subW[number]; subh = this.subH[number];
	sx -= subx; sy -= suby;
	if (sx+sw <= 0 || sy+sh <= 0 || sx >= subw || sy >= subh) { return; }
	// Handle case when sx,sy does not lie inside the area
	if (sx<0) { sw += sx; dx -= sx; sx = 0; }
	if (sy<0) { sh += sy; dy -= sy; sy = 0; }
	// Handle case when it sticks out of the area
	if (sx+sw > subw) { sw = subw-sx; }
	if (sy+sh > subh) { sh = subh-sy;	}
	// Set alpha
	context.globalAlpha = alpha;
	// Draw it
	this.texture.drawPart(this.subTexIndex[number],
		this.subX[number]+sx, this.subY[number]+sy, sw, sh, dx, dy);
	// Restore alpha
	context.globalAlpha = oldalpha;
};

// Draw the image part tiled in an area with an offset
tbImage.prototype.drawPartTiledOffset = function(number, xOff, yOff, sx, sy, sw, sh, dx, dy, dw, dh, alpha) {
	"use strict";
	var xx, yy, nx, ny, xdest, ydest, subx, suby, subw, subh, i, j;
	if (sw <= 0 || sh <= 0) { return; }
	xx = Math.round(xOff) % sw;
	if (xx > 0) { xx -= sw; }
	yy = Math.round(yOff) % sh;
	if (yy > 0) { yy -= sh; }
	nx = Math.ceil((dw-xx)/sw);
	ny = Math.ceil((dh-yy)/sh);
	xx += dx;
	yy += dy;
	for (i=0; i<nx; i += 1) {
		for (j=0; j<ny; j += 1) {
			subx = sx; suby = sy; subw = sw; subh = sh;
			xdest = xx+i*sw;
			ydest = yy+j*sh;
			if (xdest < dx) { subx += dx-xdest; subw -= dx-xdest; xdest = dx; }
			if (xdest+subw >= dx+dw) { subw = dx+dw-xdest; }
			if (ydest < dy) { suby += dy-ydest; subh -= dy-ydest; ydest = dy; }
			if (ydest+subh >= dy+dh) { subh = dy+dh-ydest; }
			if (subw > 0 && subh > 0) {
				this.drawPart(number,subx,suby,subw,subh,xdest,ydest,alpha);
			}
		}
	}
};

// Draw part of the image tiled in an area
tbImage.prototype.drawPartTiled = function(number, sx, sy, sw, sh, dx, dy, dw, dh, alpha) {
	"use strict";
	this.drawPartTiledOffset(number, 0, 0, sx, sy, sw, sh, dx, dy, dw, dh, alpha);
};

// Draws part of subimage number stretched in the destination rectangle with an alpha setting
tbImage.prototype.drawPartStretched = function(number, sx, sy, sw, sh, dx, dy, dw, dh, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha,
		scx, scy, subx, suby, subw, subh;
	// Get the number in range
	number = (Math.round(number) % this.number + this.number) % this.number;
	// Check whether there is anything to draw
	scx = dw / sw;
	scy = dh / sh;
	subx = this.subXOff[number]; suby = this.subYOff[number]; subw = this.subW[number]; subh = this.subH[number];
	sx -= subx; sy -= suby;
	if (sx+sw <= 0 || sy+sh <= 0 || sx >= subw || sy >= subh) { return; }
	// Handle case when sx,sy does not lie inside the area
	if (sx<0) { sw += sx; dw += scx*sx; dx -= scx*sx; sx = 0; }
	if (sy<0) { sh += sy; dh += scy*sy; dy -= scy*sy; sy = 0; }
	// Handle case when it sticks out of the area
	if (sx+sw > subw) {dw -= scx*(sw-subw+sx); sw = subw-sx; }
	if (sy+sh > subh) {dh -= scy*(sh-subh+sy); sh = subh-sy; }
	// Set alpha
	context.globalAlpha = alpha;
	// Draw it
	this.texture.drawPart(this.subTexIndex[number],
		this.subX[number]+sx, this.subY[number]+sy, sw, sh, dx, dy, dw, dh);
	// Restore alpha
	context.globalAlpha = oldalpha;
};

// Draws part of subimage number at the destination transformed with an alpha setting
tbImage.prototype.drawPartExt = function(number, sx, sy, sw, sh, dx, dy, xScale, yScale, angle, alpha) {
	"use strict";
	var context = tbGraphics.context,
		newx, newy, subx, suby, subw, subh;
	// Solve problem with 0 scale
	if (Math.round(sw) === 0 || Math.round(sh) === 0) { return; }
	if (Math.abs(xScale) < 0.0001 || Math.abs(yScale) < 0.0001) { return; }
	// Get the number in range
	number = (Math.round(number) % this.number + this.number) % this.number;
	// Check whether there is anything to draw
	subx = this.subXOff[number]; suby = this.subYOff[number]; subw = this.subW[number]; subh = this.subH[number];
	newx = 0; newy = 0;
	sx -= subx; sy -= suby;
	if (sx+sw <= 0 || sy+sh <= 0 || sx >= subw || sy >= subh) { return; }
	// Handle case when sx,sy does not lie inside the area
	if (sx<0) { sw += sx; newx -= sx; sx = 0; }
	if (sy<0) { sh += sy; newy -= sy; sy = 0; }
	// Handle case when it sticks out of the area
	if (sx+sw > subw) { sw = subw-sx; }
	if (sy+sh > subh) { sh = subh-sy;	}
	// Set the transformation and alpha
	context.save();
	context.translate(dx,dy);
	context.rotate(-angle * Math.PI/180);     // from degrees to radians and counter-clockwise
	context.scale(xScale,yScale);
	context.globalAlpha = alpha;
	// Draw it
	this.texture.drawPart(this.subTexIndex[number],
		this.subX[number]+sx, this.subY[number]+sy, sw, sh, newx, newy);
	// Restore transformation and alpha
	context.restore();
};

// Draws the combined at the destination
tbImage.prototype.drawCombinedSimple = function(dx, dy) {
	"use strict";
	var n, xx, yy;
	// Draw it
	for (n = 0; n < this.number; n += 1) {
		xx = dx + this.width * (n % this.perRow);
		yy = dy + this.height * Math.floor(n / this.perRow);
		this.texture.drawPart(this.subTexIndex[n],
			this.subX[n], this.subY[n], this.subW[n], this.subH[n],
			xx-this.xOrigin+this.subXOff[n], yy-this.yOrigin+this.subYOff[n]);
	}
};

// Draws the combined image at the destination with an alpha setting
tbImage.prototype.drawCombinedAlpha = function(dx, dy, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha,
		n, xx, yy;
	// Set the alpha
	context.globalAlpha = alpha;
	// Draw it
	for (n = 0; n < this.number; n += 1) {
		xx = dx + this.width * (n % this.perRow);
		yy = dy + this.height * Math.floor(n / this.perRow);
		this.texture.drawPart(this.subTexIndex[n],
			this.subX[n], this.subY[n], this.subW[n], this.subH[n],
			xx-this.xOrigin+this.subXOff[n], yy-this.yOrigin+this.subYOff[n]);
	}
	// Restore alpha
	context.globalAlpha = oldalpha;
};

// Draws the combined image at the destination transformed and with an alpha setting
tbImage.prototype.drawCombinedExt = function(dx, dy, xScale, yScale, angle, alpha) {
	"use strict";
	var context = tbGraphics.context;
	// Solve problem with 0 scale
	if (Math.abs(xScale) < 0.0001 || Math.abs(yScale) < 0.0001) { return; }
	// Set the transformation and alpha
	context.save();
	context.translate(dx, dy);
	context.rotate(-angle * Math.PI/180);     // from degrees to radians and counter-clockwise
	context.scale(xScale, yScale);
	context.globalAlpha = alpha;
	// Draw it
	this.drawCombinedSimple(0, 0);
	// Restore transformation
	context.restore();
};

// Draws the combined image in the region
tbImage.prototype.drawCombinedStretched = function(dx, dy, dw, dh, alpha) {
	"use strict";
	var scx, scy;
	if (this.combinedWidth === 0 || this.combinedHeight === 0) { return; }
	scx = dw / this.combinedWidth;
	scy = dh / this.combinedHeight;
	this.drawCombinedExt(dx+this.xOrigin*scx, dy+this.yOrigin*scy, scx, scy, 0, alpha);
};

// Draws part of the combined image at the destination with an alpha setting
tbImage.prototype.drawCombinedPart = function(sx, sy, sw, sh, dx, dy, alpha) {
	"use strict";
	var n, xx, yy;
	// Check whether there is anything to draw and, if so, call normal methods
	for (n = 0; n < this.number; n += 1) {
		xx = this.width * (n % this.perRow);
		yy = this.height * Math.floor(n / this.perRow);
		if (xx > sx + sw) { continue; }
		if (xx+this.width < sx) { continue; }
		if (yy > sy + sh) { continue; }
		if (yy+this.height < sy) { continue; }
		this.drawPart(n, sx-xx, sy-yy, sw, sh, dx, dy, alpha);
	}
};

// Draws part of the combined image stretched in the destination rectangle with an alpha setting
tbImage.prototype.drawCombinedPartStretched = function(sx, sy, sw, sh, dx, dy, dw, dh, alpha) {
	"use strict";
	var n, xx, yy;
	// Check whether there is anything to draw and, if so, call normal methods
	for (n = 0; n < this.number; n += 1) {
		xx = this.width * (n % this.perRow);
		yy = this.height * Math.floor(n / this.perRow);
		if (xx > sx + sw) { continue; }
		if (xx+this.width < sx) { continue; }
		if (yy > sy + sh) { continue; }
		if (yy+this.height < sy) { continue; }
		this.drawPartStretched(n, sx-xx, sy-yy, sw, sh, dx, dy, dw, dh, alpha);
	}
};


//
// SURFACES
//

// The constructor for the surface object
var tbSurface = function(width, height) {
	"use strict";
	this.canvas = document.createElement('canvas');
	this.context = this.canvas.getContext("2d");
	this.width = width;
	this.height = height;
	this.xOrigin = 0;
	this.yOrigin = 0;
	this.canvas.width = width;
	this.canvas.height = height;
	this.clear();
	this.oldCanvas = undefined;
};

// Change the size of the surface
tbSurface.prototype.changeSize = function(width, height) {
	"use strict";
	this.width = width;
	this.height = height;
	this.canvas.width = width;
	this.canvas.height = height;
	this.clear();
};

// Return a copy (clone) of the surface
tbSurface.prototype.clone = function() {
	"use strict";
	var surf = new tbSurface(this.width, this.height);
	surf.xOrigin = this.xOrigin;
	surf.yOrigin = this.yOrigin;
	surf.setTarget();
	this.drawSimple(0,0);
	surf.resetTarget();
	return surf;
};

// Set the surface as render target
tbSurface.prototype.setTarget = function() {
	"use strict";
	this.oldCanvas = tbGraphics.canvas;
	tbGraphics.setCanvas(this.canvas);
};

// Resets the render target to the previous one
tbSurface.prototype.resetTarget = function() {
	"use strict";
	if (tbGraphics.canvas !== this.canvas) { return; }
	if (this.oldCanvas === undefined) { return; }
	tbGraphics.setCanvas(this.oldCanvas);
	this.oldCanvas = undefined;
};

// Clear the surface to transparent
tbSurface.prototype.clear = function() {
	"use strict";
	this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
};

// Clear the surface to the indicated color
tbSurface.prototype.clearColor = function(color) {
	"use strict";
	this.context.fillStyle = color;
	this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
};

// Draws the surface at the destination location
tbSurface.prototype.drawSimple = function(dx,dy) {
	"use strict";
	tbGraphics.context.drawImage(this.canvas, dx - this.xOrigin, dy - this.yOrigin);
};

// Draws the surface at the destination with an alpha setting
tbSurface.prototype.drawAlpha = function(dx, dy, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha;
	context.globalAlpha = alpha;
	tbGraphics.context.drawImage(this.canvas, dx - this.xOrigin, dy - this.yOrigin);
	context.globalAlpha = oldalpha;
};

// Draws the surface at the destination transformed and with an alpha setting
tbSurface.prototype.drawExt = function(dx, dy, xScale, yScale, angle, alpha) {
	"use strict";
	var context = tbGraphics.context;
	// Solve problem with 0 scale
	if (Math.abs(xScale) < 0.0001 || Math.abs(yScale) < 0.0001) { return; }
	context.save();
	context.translate(dx, dy);
	context.rotate(-angle * Math.PI/180);
	context.scale(xScale, yScale);
	context.globalAlpha = alpha;
	tbGraphics.context.drawImage(this.canvas, -this.xOrigin, -this.yOrigin);
	context.restore();
};

// Draws the surface in the region
tbSurface.prototype.drawStretched = function(dx, dy, dw, dh, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha;
	if (this.width === 0 || this.height === 0) { return; }
	if (Math.round(dw) === 0 || Math.round(dh) === 0) { return; }
	context.globalAlpha = alpha;
	tbGraphics.context.drawImage(this.canvas, dx, dy, dw, dh);
	context.globalAlpha = oldalpha;
};



// Draws the surface in nine-sliced to fill the region
tbSurface.prototype.drawNineSlice = function(dx, dy, dw, dh, alpha, leftSize, rightSize, topSize, bottomSize) {
	"use strict";
	var sw0, sw1, sw2, sx0, sx1, sx2, sh0, sh1, sh2, sy0, sy1, sy2, sw, sh,
		dw0, dw1, dw2, dx0, dx1, dx2, dh0, dh1, dh2, dy0, dy1, dy2;
	if (this.width === 0 || this.height === 0) { return; }
	// Get the correct size of the pieces when not defined
	if (leftSize === undefined) { leftSize = Math.floor(this.width / 3); }
	if (rightSize === undefined) { rightSize = Math.floor(this.width / 3); }
	if (topSize === undefined) { topSize = Math.floor(this.height / 3); }
	if (bottomSize === undefined) { bottomSize = Math.floor(this.height / 3); }
	// Correct sizes when small
	if (dw < leftSize + rightSize) {
		leftSize = Math.round(leftSize * dw / (leftSize + rightSize));
		rightSize = dw - leftSize;
	}
	if (dh < topSize + bottomSize) {
		topSize = Math.round(topSize * dh / (topSize + bottomSize));
		bottomSize = dh - topSize;
	}
	// Determine positions and size of the pieces in the image
	sw = this.width; sw0 = leftSize; sw1 = this.width - leftSize - rightSize; sw2 = rightSize;
	sx0 = 0; sx1 = sw0; sx2 = sw0 + sw1;
	sh = this.height; sh0 = topSize; sh1 = this.height - topSize - bottomSize; sh2 = bottomSize;
	sy0 = 0; sy1 = sh0; sy2 = sh0 + sh1;
	// Determine positions and size of the pieces in the destination
	dw0 = leftSize; dw1 = dw - leftSize - rightSize; dw2 = rightSize;
	dx0 = dx; dx1 = dx + dw0; dx2 = dx + dw0 + dw1;
	dh0 = topSize; dh1 = dh - topSize - bottomSize; dh2 = bottomSize;
	dy0 = dy; dy1 = dy + dh0; dy2 = dy + dh0 + dh1;
	// Now draw it, looking at the various cases
	if (dw === this.width && dh === this.height) {
		this.drawAlpha(dx + this.xOrigin, dy + this.yOrigin, alpha);
	} else if (dh === this.height) {
		this.drawPartStretched(sx1, sy0, sw1, sh, dx1, dy0, dw1, dh, alpha);
		this.drawPart(sx0, sy0, sw0, sh, dx0, dy0, alpha);
		this.drawPart(sx2, sy0, sw2, sh, dx2, dy0, alpha);
	} else if (dw === this.width) {
		this.drawPartStretched(sx0, sy1, sw, sh1, dx0, dy1, dw, dh1, alpha);
		this.drawPart(sx0, sy0, sw, sh0, dx0, dy0, alpha);
		this.drawPart(sx0, sy2, sw, sh2, dx0, dy2, alpha);
	} else {
		// middle piece
		this.drawPartStretched(sx1, sy1, sw1, sh1, dx1, dy1, dw1, dh1, alpha); 
		// side pieces
		this.drawPartStretched(sx1, sy0, sw1, sh0, dx1, dy0, dw1, dh0, alpha);
		this.drawPartStretched(sx0, sy1, sw0, sh1, dx0, dy1, dw0, dh1, alpha);
		this.drawPartStretched(sx2, sy1, sw2, sh1, dx2, dy1, dw2, dh1, alpha);
		this.drawPartStretched(sx1, sy2, sw1, sh2, dx1, dy2, dw1, dh2, alpha);
		// corner pieces
		this.drawPart(sx0, sy0, sw0, sh0, dx0, dy0, alpha);
		this.drawPart(sx0, sy2, sw0, sh2, dx0, dy2, alpha);
		this.drawPart(sx2, sy0, sw2, sh0, dx2, dy0, alpha);
		this.drawPart(sx2, sy2, sw2, sh2, dx2, dy2, alpha);
	}
};

// Draw a number of copies of the surface
tbSurface.prototype.drawMultiple = function(hNumb, vNumb, dx, dy, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha,
		i, j;
	context.globalAlpha = alpha;
	for (i=0; i<hNumb; i += 1) {
		for (j=0; j<vNumb; j += 1) {
			tbGraphics.context.drawImage(this.canvas, 
				dx - this.xOrigin + i*this.width, dy - this.yOrigin + j*this.height);
		}
	}
	context.globalAlpha = oldalpha;
};

// Draw a number of copies of the surface with a transformation
tbSurface.prototype.drawMultipleExt = function(hNumb, vNumb, dx, dy, xScale, yScale, angle, alpha) {
	"use strict";
	var xinc = xScale*this.width,
		yinc = yScale*this.height,
		hxinc = xinc*Math.cos(angle*Math.PI/180),
		hyinc = -xinc*Math.sin(angle*Math.PI/180),
		vxinc = yinc*Math.sin(angle*Math.PI/180),
		vyinc = yinc*Math.cos(angle*Math.PI/180),
		i, j;
	for (i=0; i<hNumb; i += 1) {
		for (j=0; j<vNumb; j += 1) {
			this.drawExt(dx+i*hxinc+j*vxinc,dy+i*hyinc+j*vyinc,xScale,yScale,angle,alpha);
		}
	}
};

// Draws the surface tiled in an area with an offset
tbSurface.prototype.drawTiledOffset = function(xOff, yOff, dx, dy, dw, dh, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha,
		xx, yy, nx, ny, xdest, ydest, subx, suby, subw, subh, i, j;
	if (this.width === 0 || this.height === 0) { return; }
	context.globalAlpha = alpha;
	// Draw it
	xx = Math.round(xOff-this.xOrigin) % this.width;
	if (xx > 0) { xx -= this.width; }
	yy = Math.round(yOff-this.yOrigin) % this.height;
	if (yy > 0) { yy -= this.height; }
	nx = Math.ceil((dw-xx)/this.width);
	ny = Math.ceil((dh-yy)/this.height);
	xx += dx;
	yy += dy;
	for (i=0; i<nx; i += 1) {
		for (j=0; j<ny; j += 1) {
			subx = 0; suby = 0; subw = this.width; subh = this.height;
			xdest = xx+i*this.width;
			ydest = yy+j*this.height;
			if (xdest < dx) { subx += dx-xdest; subw -= dx-xdest; xdest = dx; }
			if (xdest+subw >= dx+dw) { subw = dx+dw-xdest; }
			if (ydest < dy) { suby += dy-ydest; subh -= dy-ydest; ydest = dy; }
			if (ydest+subh >= dy+dh) { subh = dy+dh-ydest; }
			if (subw > 0 && subh > 0) {
				tbGraphics.context.drawImage(this.canvas,subx,suby,subw,subh,xdest,ydest,subw,subh);
			}
		}
	}
	context.globalAlpha = oldalpha;
};

// Draws the surface tiles in an area
tbSurface.prototype.drawTiled = function(dx, dy, dw, dh, alpha) {
	"use strict";
	this.drawTiledOffset(0, 0, dx, dy, dw, dh, alpha);
};

// Draws part of the surface at the destination with an alpha setting
tbSurface.prototype.drawPart = function(sx, sy, sw, sh, dx, dy, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha;
	if (sw <= 0 || sh <= 0) { return; }
	if (sx+sw > this.width) { sw = this.width - sx; }
	if (sy+sh > this.height) { sh = this.height - sy; }
	context.globalAlpha = alpha;
	tbGraphics.context.drawImage(this.canvas,sx, sy, sw, sh, dx, dy, sw, sh);
	context.globalAlpha = oldalpha;
};

// Draw the surface part tiled in an area with an offset
tbSurface.prototype.drawPartTiledOffset = function(xOff, yOff, sx, sy, sw, sh, dx, dy, dw, dh, alpha) {
	"use strict";
	var xx, yy, nx, ny, xdest, ydest, subx, suby, subw, subh, i, j;
	if (sw <= 0 || sh <= 0) { return; }
	if (sx+sw > this.width) { sw = this.width - sx; }
	if (sy+sh > this.height) { sh = this.height - sy; }
	xx = Math.round(xOff) % sw;
	if (xx > 0) { xx -= sw; }
	yy = Math.round(yOff) % sh;
	if (yy > 0) { yy -= sh; }
	nx = Math.ceil((dw-xx)/sw);
	ny = Math.ceil((dh-yy)/sh);
	xx += dx;
	yy += dy;
	for (i=0; i<nx; i += 1) {
		for (j=0; j<ny; j += 1) {
			subx = sx; suby = sy; subw = sw; subh = sh;
			xdest = xx+i*sw;
			ydest = yy+j*sh;
			if (xdest < dx) { subx += dx-xdest; subw -= dx-xdest; xdest = dx; }
			if (xdest+subw >= dx+dw) { subw = dx+dw-xdest; }
			if (ydest < dy) { suby += dy-ydest; subh -= dy-ydest; ydest = dy; }
			if (ydest+subh >= dy+dh) { subh = dy+dh-ydest; }
			if (subw > 0 && subh > 0) {
				this.drawPart(subx,suby,subw,subh,xdest,ydest,alpha);
			}
		}
	}
};

// Draw part of the surface tiled in an area
tbSurface.prototype.drawPartTiled = function(sx, sy, sw, sh, dx, dy, dw, dh, alpha) {
	"use strict";
	this.drawPartTiledOffset(0, 0, sx, sy, sw, sh, dx, dy, dw, dh, alpha);
};

// Draws part of the surface stretched in the destination rectangle with an alpha setting
tbSurface.prototype.drawPartStretched = function(sx, sy, sw, sh, dx, dy, dw, dh, alpha) {
	"use strict";
	var context = tbGraphics.context,
		oldalpha = context.globalAlpha;
	if (sw <= 0 || sh <= 0) { return; }
	if (sx+sw > this.width) { sw = this.width - sx; }
	if (sy+sh > this.height) { sh = this.height - sy; }
	if (Math.round(dw) === 0 || Math.round(dh) === 0) { return; }
	context.globalAlpha = alpha;
	tbGraphics.context.drawImage(this.canvas,sx, sy, sw, sh, dx, dy, dw, dh);
	context.globalAlpha = oldalpha;
};

// Draws part of the surface at the destination transformed with an alpha setting
tbSurface.prototype.drawPartExt = function(sx, sy, sw, sh, dx, dy, xScale, yScale, angle, alpha) {
	"use strict";
	var context = tbGraphics.context;
	// Solve problem with 0 scale
	if (sw <= 0 || sh <= 0) { return; }
	if (sx+sw > this.width) { sw = this.width - sx; }
	if (sy+sh > this.height) { sh = this.height - sy; }
	if (Math.abs(xScale) < 0.0001 || Math.abs(yScale) < 0.0001) { return; }
	context.save();
	context.translate(dx,dy);
	context.rotate(-angle * Math.PI/180);
	context.scale(xScale, yScale);
	context.globalAlpha = alpha;
	tbGraphics.context.drawImage(this.canvas,sx, sy, sw, sh, 0, 0, sw, sh);
	context.restore();
};

/////////////////////////////////////////////////////////////
// tbFont: The engine part dealing with bitmap and vector fonts
//
// Copyright 2013-2014 CoolGames
// Last Changed: 16-07-2014
/////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////
// BITMAP FONTS
//////////////////////////////////////////////////////

var alignLeft = "left";
var alignCenter = "center";
var alignRight = "right";
var baselineTop = "top";
var baselineMiddle = "middle";
var baselineBase = "base";
var baselineBottom = "bottom";

// The constructor for the font
var tbBitmapFont = function(name) {
	"use strict";
	this.name = name;
	this.align = alignLeft;
	this.baseline = baselineBase;
	this.spacing = 0;
	this.tracking = 0;
};

// Return whether correctly loaded
tbBitmapFont.prototype.complete = function() {
	"use strict";
	return this.image.texture.complete();
};

// Split the string in lines with maximal width w
tbBitmapFont.prototype._split = function(str, w) {
	"use strict";
	// Split in lines
	var lines = [],
		ind, wl, ln, st;
	if (w === undefined) {
		lines = str.split('\n');
		return lines;
	}
	if (w < 0) { w = 0; }
	ind = 0;
	wl = 0;
	lines[0] = "";
	while (ind < str.length) {
		if (str[ind] === '\n') {
			lines.push("");
			wl = 0;
			ind += 1;
		} else {
			ln = lines.length-1;
			wl += this.width[str.charCodeAt(ind)];
			if (wl > w && lines[ln].length > 0) {
				st = lines[ln].length-1;
				while (st >= 0 && lines[ln][st] !== " ") { st -= 1; }
				if (st >= 0) {
					ind = ind - lines[ln].length + st + 1;
					lines[ln] = lines[ln].substr(0,st);
				}
				lines.push("");
				wl = 0;
			} else {
				lines[ln] += str[ind];
				wl += this.tracking;
				ind += 1;
			}
		}
	}
	return lines;
};

// Return the width of a line
tbBitmapFont.prototype._textWidth = function(line) {
	"use strict";
	var  wl = 0, i;
	for (i = line.length-1; i >= 0; i -= 1) {
		wl += this.width[line.charCodeAt(i)] + this.tracking;
	}
	return wl - this.tracking; // Remove the last tracking
};

// Return the width of the string
tbBitmapFont.prototype.textWidth = function(str, w) {
	"use strict";
	var lines = this._split(str, w), wmax = 0, j;
	for (j = lines.length-1; j >= 0; j -= 1) {
		wmax = Math.max(wmax, this._textWidth(lines[j]));
	}
	return wmax;
};

tbBitmapFont.prototype.textHeight = function(str, w) {
	"use strict";
	var lines = this._split(str, w);
	return lines.length * this.height + (lines.length-1) * this.spacing;
};

// Draws the string at the destination
tbBitmapFont.prototype.drawSimple = function(str, dx, dy, w) {
	"use strict";
	// Split in lines
	var lines = this._split(str, w),
		th = lines.length * this.height + (lines.length-1) * this.spacing,
		xst = dx, yst = dy,
		xx, yy, i, j, chr, ind;
	switch (this.baseline) {
		case baselineTop: yst -= this.top; break;
		case baselineMiddle: yst -= this.top + Math.round(th / 2); break;
		case baselineBase: yst -= this.base; break;
		case baselineBottom: yst -= this.top + th; break;
	}
	// Now draw the lines
	yy = yst;
	for (j = 0; j < lines.length; j += 1) {
		xx = xst;
		switch (this.align) {
			case alignLeft: xx = xst; break;
			case alignCenter: xx = xst - Math.round(this._textWidth(lines[j]) / 2); break;
			case alignRight: xx = xst - this._textWidth(lines[j]); break;
		}
		for (i = 0; i < lines[j].length; i += 1) {
			chr = lines[j].charCodeAt(i);
			ind = this.index[chr];
			if (ind >= 0) { this.image.drawSimple(ind, xx-this.left[chr], yy); }
			xx += this.width[chr] + this.tracking;
		}
		yy += this.height + this.spacing;
	}
};

// Draws the string at the destination with an alpha setting
tbBitmapFont.prototype.drawAlpha = function(str, dx, dy, alpha, w) {
	"use strict";
	var context = tbGraphics.context;
	context.save();
	context.globalAlpha = alpha;
	this.drawSimple(str, dx, dy, w);
	context.restore();
};

// Draws the string at the destination transformed and with an alpha setting
tbBitmapFont.prototype.drawExt = function(str, dx, dy, xScale, yScale, angle, alpha, w) {
	"use strict";
	var context = tbGraphics.context;
	if (Math.abs(xScale) < 0.0001 || Math.abs(yScale) < 0.0001) { return; } // Solve problem with 0 scale
	context.save();
	context.translate(dx,dy);
	context.rotate(-angle * Math.PI / 180);     // from degrees to radians and counter-clockwise
	context.scale(xScale,yScale);
	context.globalAlpha = alpha;
	this.drawSimple(str, 0, 0, w/xScale);
	context.restore();
};


//////////////////////////////////////////////////////
// VECTOR FONT FACES
//////////////////////////////////////////////////////

// Create a loader object that is responsible for loading the fontface
var tbVectorFontLoader = function(fontFace, woffPath, ttfPath, loadMoment) {
	"use strict";
	// Info
	this.fontFace = fontFace;
	this.woffPath = woffPath;
	this.ttfPath = ttfPath;
	// Measurement to check whether the font has been loaded
	this._fallbackMeasurements = [
		{ text: "MiHhX!@v&Qq", width: -1, font: "sans-serif" },
		{ text: "MiHhX!@v&Qq", width: -1, font: "serif" },
		{ text: "AaMm#@!Xx67", width: -1, font: "sans-serif" },
		{ text: "AaMm#@!Xx67", width: -1, font: "serif" }
	];
	this.success = false;
	// Add it to the loader
	tbLoader.addResource(this, loadMoment, 1);
};

// Compute the width of a text
tbVectorFontLoader.prototype._computeWidth = function(font, fallback, text) {
	"use strict";
	var width;
	tbGraphics.context.save();
	tbGraphics.context.font = "250pt " + font + ", " + fallback;
	width = tbGraphics.context.measureText(text).width;
	tbGraphics.context.restore();
	return width;
};

// Add the fontface to the style
tbVectorFontLoader.prototype._addToCss = function(location) {
	"use strict";
	// Define css
	var cssCode =	"@font-face {" +
						"font-family: " + this.fontFace + ";" +
						"src: url('" + location + this.woffPath + "') format('woff'), " +
							 "url('" + location + this.ttfPath  + "') format('truetype');" +
					"}",
	// Create CSS element
	styleElement = document.createElement("style");
	styleElement.id = this.fontFace + "_fontface";
	styleElement.type = "text/css";
	if (styleElement.styleSheet) {
		styleElement.styleSheet.cssText = cssCode;
	} else {
		styleElement.appendChild(document.createTextNode(cssCode));
	}
	// Add CSS element to head
	document.getElementsByTagName("head")[0].appendChild(styleElement);
};

// Add an element to the DOM to force loading the font
tbVectorFontLoader.prototype._addToDom = function() {
	"use strict";
	var i, measurement;
	// Create the DOM element to start the loading
	this.DOMElement = document.createElement("span");
	this.DOMElement.style.position = "absolute";
	this.DOMElement.style.left = "-9999px";
	this.DOMElement.style.top = "-9999px";
	this.DOMElement.style.visibility = "hidden";
	this.DOMElement.style.fontSize = "250pt";
	this.DOMElement.id = this.fontFace + "_loader";
	// Add the element to the DOM
	document.body.appendChild(this.DOMElement);
	// Do initial _fallbackMeasurements
	for (i = 0; i < this._fallbackMeasurements.length; i += 1)
	{
		measurement = this._fallbackMeasurements[i];
		measurement.width = this._computeWidth(measurement.font, measurement.font, measurement.text);
	}
};

// This loop checks whether the font is loaded
tbVectorFontLoader.prototype._cycle = function() {
	"use strict";
	var i, measurement, that, width;
	// Do the check
	for (i = 0; i < this._fallbackMeasurements.length; i += 1) {
		measurement = this._fallbackMeasurements[i];
		width = this._computeWidth(this.fontFace, measurement.font, measurement.text);
		// Check whether width is changed (then the font is loaded)
		if(measurement.width !== width) {
			tbLoader.loadComplete(this.loadMoment);
			document.body.removeChild(this.DOMElement);
			this.success = true;
			return;
		}
	}
	// If not loaded, loop
	that = this;
	window.setTimeout(function() { that._cycle(); }, 33);
};

// Start the loading (called by tbLoader) by adding the fontface and an element to the DOM and checking
tbVectorFontLoader.prototype.startLoading = function(moment, location) {
	"use strict";
	this._addToCss(location);
	this._addToDom();
	this.loadMoment = moment;
	this._cycle();
};

//Returns whether loading is complete (true)
tbVectorFontLoader.prototype.complete = function() {
	"use strict";
	return this.success;
};


//////////////////////////////////////////////////////
// VECTOR FONTS
//////////////////////////////////////////////////////

//
// Construction
//

// Constructor for a font with a given fontface and fallback font
var tbVectorFont = function (fontFace, fallbackFontFace) {
	"use strict";
	this.fontFace = fontFace;
	this.fallbackFontFace = fallbackFontFace;
	this.setDefault();
};

// Create a clone of the font with all the same property values
tbVectorFont.prototype.clone = function() {
	"use strict";
	var result = new tbVectorFont(this.fontFace, this.fallbackFontFace);
	//Font
	result.fontStyle = this.fontStyle;
	result.fontWeight = this.fontWeight;
	result.fontCase = this.fontCase;
	result.fontSize = this.fontSize;
	//Fill
	result.fill = this.fill;
	result.fillAlpha = this.fillAlpha;
	result.fillMode = this.fillMode;
	result.fillColor = this.fillColor;
	result.fillPattern = {image: this.fillPattern.image, repeatH: this.fillPattern.repeatH, repeatV: this.fillPattern.repeatV};
	result.fillGradient = {vertical: this.fillGradient.vertical, number:this.fillGradient.number, colors:this.fillGradient.colors.slice(0),
			size: this.fillGradient.size, offset: this.fillGradient.offset};
	result.fillStyle = this.fillStyle;
	//Stoke
	result.stroke = this.stroke;
	result.strokeAlpha = this.strokeAlpha;
	result.strokeMode = this.strokeMode;
	result.strokeColor = this.strokeColor;
	result.strokeStyle = this.strokeStyle;
	result.strokeWidth = this.strokeWidth;
	result.strokeBehind = this.strokeBehind;
	result.strokeJoin = this.strokeJoin;
	//Shadow
	result.shadow = { active: this.shadow.active, color:this.shadow.color, offsetX: this.shadow.offsetX, offsetY: this.shadow.offsetY, blur: this.shadow.blur };
	//Text Alignment
	result.align = this.align;
	result.baseline = this.baseline;
	result.offsetFactor = this.offsetFactor;
	result.spacing = this.spacing;
	return result;
};

//
// Settings
//

// Set all properties to default
tbVectorFont.prototype.setDefault = function() {
	"use strict";
	//Font
	this.fontStyle = "";
	this.fontWeight = "";
	this.fontCase = "normal";
	this.fontSize = 12;
	//Fill
	this.fill = true;
	this.fillAlpha = 1;
	this.fillMode = 0;
	this.fillColor = "black";
	this.fillPattern = {image: undefined, subImage: 0, repeatH: true, repeatV: true};
	this.fillGradient = {vertical: true, number:3, colors:["red","white","blue"], size: 0.6, offset: 0};
	this.fillStyle = undefined;
	//Stroke
	this.stroke = false;
	this.strokeAlpha = 1;
	this.strokeMode = 0;
	this.strokeColor = "black";
	this.strokeStyle = undefined;
	this.strokeWidth = 1.0;
	this.strokeBehind = false;
	this.strokeJoin = "miter";
	//Shadow
	this.shadow = { active: false, color:'rgba(10, 10, 10, 0.3)', offsetX: 3, offsetY: 3, blur: 1 };
	//Text Alignment
	this.align = "left";
	this.baseline = "top";
	this.offsetFactor = 0;
	this.spacing = 0;
};

// Set a number of properties at once
tbVectorFont.prototype.setProperties = function(properties) {
	"use strict";
	// Font Face
	if (properties.fontFace !== undefined) { this.fontFace = properties.fontFace; }
	if (properties.fallbackFontFace !== undefined) { this.fallbackFontFace = properties.fallbackFontFace; }
	//Font
	if (properties.fontStyle !== undefined) { this.fontStyle = properties.fontStyle; }
	if (properties.fontWeight !== undefined) { this.fontWeight = properties.fontWeight; }
	if (properties.fontCase !== undefined) { this.fontCase = properties.fontCase; }
	if (properties.fontSize !== undefined) { this.fontSize = properties.fontSize; }
	//Fill
	if (properties.fill !== undefined) { this.fill = properties.fill; }
	if (properties.fillAlpha !== undefined) { this.fillAlpha = properties.fillAlpha; }
	if (properties.fillColor !== undefined) { this.fillMode = 0; this.fillColor = properties.fillColor; }
	if (properties.fillPattern !== undefined) { this.fillMode = 1; this.fillPattern = properties.fillPattern; }
	if (properties.fillGradient !== undefined) { this.fillMode = 2; this.fillGradient = properties.fillGradient; }
	if (properties.fillStyle !== undefined) { this.fillMode = 3; this.fillStyle = properties.fillStyle; }
	//Stroke
	if (properties.stroke !== undefined) { this.stroke = properties.stroke; }
	if (properties.strokeAlpha !== undefined) { this.strokeAlpha = properties.strokeAlpha; }
	if (properties.strokeColor !== undefined) { this.strokeMode = 0; this.strokeColor = properties.strokeColor; }
	if (properties.strokeStyle !== undefined) { this.strokeMode = 3; this.strokeStyle = properties.strokeStyle; }
	if (properties.strokeWidth !== undefined) { this.strokeWidth = properties.strokeWidth; }
	if (properties.strokeBehind !== undefined) { this.strokeBehind = properties.strokeBehind; }
	if (properties.strokeJoin !== undefined) { this.strokeJoin = properties.strokeJoin; }
	//Shadow
	if (properties.shadow !== undefined) { this.shadow = properties.shadow; }
	//Text Alignment
	if (properties.align !== undefined) { this.align = properties.align; }
	if (properties.baseline !== undefined) { this.baseline = properties.baseline; }
	if (properties.offsetFactor !== undefined) { this.offsetFactor = properties.offsetFactor; }
	if (properties.spacing !== undefined) { this.spacing = properties.spacing; }
};

tbVectorFont.prototype.setFontFace = function(fontFace) {
	"use strict";
	this.fontFace = fontFace;
};

tbVectorFont.prototype.getFontFace = function() {
	"use strict";
	return this.fontFace;
};

tbVectorFont.prototype.setFallbackFontFace = function(fallbackFontFace) {
	"use strict";
	this.fallbackFontFace = fallbackFontFace;
};

tbVectorFont.prototype.getFallbackFontFace = function() {
	"use strict";
	return this.fallbackFontFace;
};

tbVectorFont.prototype.setFontStyle = function(fontStyle) {
	"use strict";
	this.fontStyle = (fontStyle === undefined) ? "" : fontStyle;
};

tbVectorFont.prototype.getFontStyle = function() {
	"use strict";
	return this.fontStyle;
};

tbVectorFont.prototype.setFontWeight = function(fontWeight) {
	"use strict";
	this.fontWeight = (fontWeight === undefined) ? "" : fontWeight;
};

tbVectorFont.prototype.getFontWeight = function() {
	"use strict";
	return this.fontWeight;
};

tbVectorFont.prototype.setFontCase = function(fontCase) {
	"use strict";
	this.fontCase = (fontCase === undefined) ? "normal" : fontCase;
};

tbVectorFont.prototype.getFontCase = function() {
	"use strict";
	return this.fontCase;
};

tbVectorFont.prototype.setFontSize = function(fontSize) {
	"use strict";
	this.fontSize = (fontSize === undefined) ? 12 : fontSize;
};

tbVectorFont.prototype.getFontSize = function() {
	"use strict";
	return this.fontSize;
};

tbVectorFont.prototype.setFill = function(fill) {
	"use strict";
	this.fill = (fill === undefined) ? true : fill;
};

tbVectorFont.prototype.getFill = function() {
	"use strict";
	return this.fill;
};

tbVectorFont.prototype.setFillAlpha = function(alpha) {
	"use strict";
	this.fillAlpha = (alpha === undefined) ? 1 : alpha;
};

tbVectorFont.prototype.getFillAlpha = function() {
	"use strict";
	return this.fillAlpha;
};

tbVectorFont.prototype.setFillColor = function(color) {
	"use strict";
	this.fillMode = 0;
	this.fillColor = (color === undefined) ? "black" : color;
};

tbVectorFont.prototype.getFillColor = function() {
	"use strict";
	return this.fillColor;
};

tbVectorFont.prototype.setFillPattern = function(obj, subImage, repeatH, repeatV) {
	"use strict";
	if (obj === undefined) { return; }
	this.fillMode = 1;
	if (obj instanceof tbImage) {
		this.fillPattern = {image: obj, subImage: subImage, repeatH: repeatH, repeatV: repeatV};
	} else {
		this.fillPattern = {image: obj.image, subImage: obj.subImage, repeatH: obj.repeatH, repeatV: obj.repeatV};
	}
};

tbVectorFont.prototype.getFillPattern = function() {
	"use strict";
	return {image: this.fillPattern.image, subImage: this.fillPattern.subImage, repeatH: this.fillPattern.repeatH, repeatV: this.fillPattern.repeatV	};
};

tbVectorFont.prototype.setFillGradient = function(obj, number, colors, size, offset) {
	"use strict";
	if (obj === undefined) { return; }
	this.fillMode = 2;
	if (obj instanceof Object)
	{
		this.fillGradient.vertical = obj.vertical;
		this.fillGradient.number = obj.number;
		this.fillGradient.colors = obj.colors.slice(0);
		this.fillGradient.size = obj.size;
		this.fillGradient.offset = obj.offset;
	} else {
		this.fillGradient.vertical = obj;
		this.fillGradient.number = number;
		this.fillGradient.colors = colors.slice(0);
		this.fillGradient.size = (size === undefined) ? 0.6 : size;
		this.fillGradient.offset = (offset === undefined) ? 0 : offset;
	}
};

tbVectorFont.prototype.getFillGradient = function() {
	"use strict";
	return {
		vertical: this.fillGradient.vertical,
		number: this.fillGradient.number,
		colors: this.fillGradient.colors.slice(0),
		size: this.fillGradient.size,
		offset: this.fillGradient.offset
	};
};

tbVectorFont.prototype.setFillStyle = function(style) {
	"use strict";
	this.fillMode = 3;
	this.fillStyle = (style === undefined) ? "black" : style;
};

tbVectorFont.prototype.getFillStyle = function() {
	"use strict";
	return this.fillStyle;
};

tbVectorFont.prototype.setStroke = function(stroke) {
	"use strict";
	this.stroke = (stroke === undefined) ? false : stroke;
};

tbVectorFont.prototype.getStroke = function() {
	"use strict";
	return this.stroke;
};

tbVectorFont.prototype.setStrokeAlpha = function(alpha) {
	"use strict";
	this.strokeAlpha = (alpha === undefined) ? 1 : alpha;
};

tbVectorFont.prototype.getStrokeAlpha = function() {
	"use strict";
	return this.strokeAlpha;
};

tbVectorFont.prototype.setStrokeColor = function(color) {
	"use strict";
	this.strokeMode = 0;
	this.strokeColor = (color === undefined) ? "black" : color;
};

tbVectorFont.prototype.getStrokeColor = function() {
	"use strict";
	return this.strokeColor;
};

tbVectorFont.prototype.setStrokeStyle = function(style) {
	"use strict";
	this.strokeMode = 3;
	this.strokeStyle = (style === undefined) ? "black" : style;
};

tbVectorFont.prototype.getStrokeStyle = function() {
	"use strict";
	return this.strokeStyle;
};

tbVectorFont.prototype.setStrokeWidth = function(width) {
	"use strict";
	this.strokeWidth = (width === undefined) ? 1 : width;
};

tbVectorFont.prototype.getStrokeWidth = function() {
	"use strict";
	return this.strokeWidth;
};

tbVectorFont.prototype.setStrokeBehind = function(behind) {
	"use strict";
	this.strokeBehind = (behind === undefined) ? false : behind;
};

tbVectorFont.prototype.getStrokeBehind  = function() {
	"use strict";
	return this.strokeBehind;
};

tbVectorFont.prototype.setStrokeJoin = function(join) {
	"use strict";
	this.strokeJoin = (join === undefined) ? "miter" : join;
};

tbVectorFont.prototype.getStrokeJoin = function() {
	"use strict";
	return this.strokeJoin;
};

tbVectorFont.prototype.setShadow = function(obj, color, offsetX, offsetY, blur) {
	"use strict";
	if (obj === undefined) {
		this.shadow = { active: false, color: 'rgba(10, 10, 10, 0.3)', offsetX: 3, offsetY: 3, blur: 1 };
	} else if (obj instanceof Object)
	{
		this.shadow = { active: obj.active, color: obj.color, offsetX: obj.offsetX, offsetY: obj.offsetY, blur: obj.blur };
	} else if (color === undefined) {
		this.shadow.active = obj;
	} else {
		this.shadow = { active: obj, color: color, offsetX: offsetX, offsetY: offsetY, blur: blur };
	}
};

tbVectorFont.prototype.getShadow = function() {
	"use strict";
	return { active: this.shadow.active, color: this.shadow.color, offsetX: this.shadow.offsetX, offsetY: this.shadow.offsetY, blur: this.shadow.blur };
};

tbVectorFont.prototype.setAlign = function(align) {
	"use strict";
	this.align = (align === undefined) ? "left" : align;
};

tbVectorFont.prototype.getAlign = function() {
	"use strict";
	return this.align;
};

tbVectorFont.prototype.setBaseline = function(baseline) {
	"use strict";
	this.baseline = (baseline === undefined) ? "top" : baseline;
};

tbVectorFont.prototype.getBaseline = function() {
	"use strict";
	return this.baseline;
};

tbVectorFont.prototype.setOffsetFactor = function(offsetFactor) {
	"use strict";
	this.offsetFactor = (offsetFactor === undefined) ? 0 : offsetFactor;
};

tbVectorFont.prototype.getOffsetFactor = function() {
	"use strict";
	return this.offsetFactor;
};

tbVectorFont.prototype.setLineSpacing = function(spacing) {
	"use strict";
	this.spacing = (spacing === undefined) ? 0 : spacing;
};

tbVectorFont.prototype.getLineSpacing = function() {
	"use strict";
	return this.spacing;
};


//
// Size
//

// Create the font string for the font
tbVectorFont.prototype._getFontString = function() {
	"use strict";
	return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + "px " + this.fontFace + ", " + this.fallbackFontFace;
};

// Compute the text width for the collection of lines
tbVectorFont.prototype._textWidth = function(lines) {
	"use strict";
	var largestWidth = 0, li;
	for (li = 0; li < lines.length; li += 1) {
		largestWidth = Math.max(largestWidth, lines[li].width);
	}
	return largestWidth;
};

// Compute the text height for the collection of lines
tbVectorFont.prototype._textHeight = function(lines) {
	"use strict";
	return this.fontSize * lines.length + this.spacing * (lines.length - 1);
};

// Compute the text box for the collection of lines placed at (x,y)
tbVectorFont.prototype._textBox = function(lines, x, y) {
	"use strict";
	var bx = x, by = y,
		bw = this._textWidth(lines),
		bh = this._textHeight(lines);
	switch (this.align){
		case 'right': bx += -bw; break;
		case 'center': bx += -bw/2; break;
	}
	switch (this.baseline){
		case 'base':
		case 'bottom': by += -bh + Math.round(this.offsetFactor * this.fontSize); break;
		case 'middle': by += -bh/2 + Math.round(this.offsetFactor * this.fontSize / 2); break;
	}
    return {x: bx, y: by, width: bw, height: bh};
};

// Split the text in lines at \n and using the optional width
tbVectorFont.prototype._splitText = function(text, width) {
	"use strict";
	var li, wi, currentLine, words, spaceWidth, wordWidth, currentWidth, lines, output = [],
		context = tbGraphics.context;
	context.font = this._getFontString();
	// Adapt case if required
	switch (this.fontCase) {
		case "upper" : text = text.toUpperCase(); break;
		case "lower" : text = text.toLowerCase(); break;
	}
	// Simple case
	if (width === undefined) {
		lines = text.split('\n');
		for (li = 0; li < lines.length; li += 1) {
			output.push({ text: lines[li], width: context.measureText(lines[li]).width });
		}
		return output;
	}
	// split on \n
	lines = text.split('\n');
	//split on width
	spaceWidth = context.measureText(' ').width;
	for (li = 0; li < lines.length; li += 1) {
		words = lines[li].split(' ');
		currentLine = words[0];
		currentWidth = context.measureText(words[0]).width;
		for (wi = 1; wi < words.length; wi += 1) {
			wordWidth = context.measureText(words[wi]).width;
			if (currentWidth + spaceWidth + wordWidth < width) {
				currentLine += ' ' + words[wi];
				currentWidth += spaceWidth + wordWidth;
			} else {
				output.push({ text: currentLine, width: currentWidth });
				currentLine = words[wi];
				currentWidth = wordWidth;
			}
		}
		output.push({ text: currentLine, width: currentWidth });
	}
	return output;
};

// Return the width of the textbox for the current font
tbVectorFont.prototype.textWidth = function(text, width) {
	"use strict";
	var w;
	tbGraphics.context.save();
	w = this._textWidth(this._splitText(text, width));
	tbGraphics.context.restore();
	return w;
};

// Return the height of the textbox for the current font
tbVectorFont.prototype.textHeight = function(text, width) {
	"use strict";
	var h;
	tbGraphics.context.save();
	h = this._textHeight(this._splitText(text, width));
	tbGraphics.context.restore();
	return h;
};

// Return the textbox for the current font when the text is place at x,y
tbVectorFont.prototype.textBox = function(text, x, y, width) {
	"use strict";
	var h;
	tbGraphics.context.save();
	h = this._textBox(this._splitText(text, width), x, y);
	tbGraphics.context.restore();
	return h;
};

// Return the largest font size for the text to fit the box. split indicated whether to split lines
tbVectorFont.prototype._textFitSize = function(size, text, width, height, split) {
	"use strict";
	var oldSize = this.fontSize, lines, result;
	this.fontSize = size;
	if (split) {
		lines = this._splitText(text, width);
	} else {
		lines = this._splitText(text);
	}
	result = this._textWidth(lines) <= width && this._textHeight(lines) <= height;
	this.fontSize = oldSize;
	return result;
};

// Return the largest font size for the text to fit the box. split indicated whether to split lines
tbVectorFont.prototype.textFitSize = function(text, width, height, split) {
	"use strict";
	var size = 0, increment = 32;
	if (split === undefined) { split = false; }
	tbGraphics.context.save();
	while (this._textFitSize(size+increment, text, width, height, split)) { size += increment; }
	while (increment >= 2) {
		increment /= 2;
		if (this._textFitSize(size+increment, text, width, height, split)) { size += increment; }
	}
	tbGraphics.context.restore();
	return Math.max(4, size);
};

//
// Drawing
//

// Create the pattern for drawing the text
tbVectorFont.prototype._createPattern = function() {
	"use strict";
	var img = this.fillPattern.image,
		surface = new tbSurface(img.width, img.height),
		h = this.fillPattern.repeatH,
		v = this.fillPattern.repeatV,
		repeat;
	if (h && v) {
		repeat = "repeat";
	} else if (h && !v) {
		repeat = "repeat-x";
	} else if (!h && v) {
		repeat = "repeat-y";
	} else if (!h && !v) {
		repeat = "no-repeat";
	}
	surface.setTarget();
	img.drawSimple(this.fillPattern.subImage, 0, 0);
	surface.resetTarget();
	return tbGraphics.context.createPattern(surface.canvas, repeat);
};

// Create the gradient for drawing
tbVectorFont.prototype._createGradient = function(bx, by, bw, bh) {
	"use strict";
	var size = Math.max(0.01, this.fillGradient.size),
		offset = this.fillGradient.offset,
		gradient, step, i;
	// Direction
	if (this.fillGradient.vertical) {
		offset = bh/2 + offset*bh;
		size *= 0.5*bh;
		gradient = tbGraphics.context.createLinearGradient(bx, by + offset-size, bx, by + offset+size);
	} else {
		offset = bw/2 + offset*bw;
		size *= 0.5*bw;
		gradient = tbGraphics.context.createLinearGradient(bx + offset-size, by, bx  + offset+size, by);
	}
	// Colors
	step = 1 / (this.fillGradient.number-1);
	for (i = 0; i < this.fillGradient.number; i += 1) {
		gradient.addColorStop(i*step, this.fillGradient.colors[i]);
	}
	return gradient;
};

// Draw the fill
tbVectorFont.prototype._drawFill = function(context, lines, bx, by, bw, bh, alpha) {
	"use strict";
	var li, xOffset, yOffset;
	//Setting the shadow
	if (this.shadow.active) {
		context.shadowColor = this.shadow.color;
		context.shadowOffsetX = this.shadow.offsetX;
		context.shadowOffsetY = this.shadow.offsetY;
		context.shadowBlur = this.shadow.blur;
	} else {
		context.shadowColor = undefined;
		context.shadowOffsetX = 0;
		context.shadowOffsetY = 0;
		context.shadowBlur = 0;
	}
	// Set alpha and fill mode
	context.globalAlpha = alpha * this.fillAlpha;
	switch (this.fillMode) {
		case 0:  context.fillStyle = this.fillColor; break;
		case 1:  context.fillStyle = this._createPattern(); break;
		case 2:  context.fillStyle = this._createGradient(bx, by, bw, bh); break;
		case 3:  context.fillStyle = this.fillStyle; break;
		default: context.fillStyle = this.fillColor; break;
	}
	// Draw the lines
	for (li = 0; li < lines.length; li += 1) {
		xOffset = 0;
		switch (this.align) {
			case 'right': xOffset = (bw - lines[li].width); break;
			case 'center': xOffset = (bw - lines[li].width)/2; break;
		}
		yOffset = this.fontSize * (li + 1) + this.spacing * li;
		if (this.fillMode === 2 && this.fillGradient.vertical) {
			context.fillStyle = this._createGradient(bx, by + yOffset - this.fontSize, bw, this.fontSize);
		}
		context.fillText(lines[li].text, bx + xOffset, by + yOffset);
	}
};

// Draw the stroke
tbVectorFont.prototype._drawStroke = function(context, lines, bx, by, bw, bh, alpha) {
	"use strict";
	var li, xOffset, yOffset;
	//Setting the shadow
	if (!this.fill && this.shadow.active) {
		context.shadowColor = this.shadow.color;
		context.shadowOffsetX = this.shadow.offsetX;
		context.shadowOffsetY = this.shadow.offsetY;
		context.shadowBlur = this.shadow.blur;
	} else {
		context.shadowColor = undefined;
		context.shadowOffsetX = 0;
		context.shadowOffsetY = 0;
		context.shadowBlur = 0;
	}
	// Set alpha and stroke mode
	context.globalAlpha = alpha * this.strokeAlpha;
	switch (this.strokeMode) {
		case 0: context.strokeStyle = this.strokeColor; break;
		case 3: context.strokeStyle = this.strokeStyle; break;
	}
	context.lineWidth = this.strokeWidth;
	context.lineJoin = this.strokeJoin;
	// Draw the lines
	for (li = 0; li < lines.length; li += 1) {
		xOffset = 0;
		switch (this.align) {
			case 'right': xOffset = (bw - lines[li].width); break;
			case 'center': xOffset = (bw - lines[li].width)/2; break;
		}
		yOffset = this.fontSize * (li + 1) + this.spacing * li;
		context.strokeText(lines[li].text, bx + xOffset, by + yOffset);
	}
};

// Do the actual drawing of the font
tbVectorFont.prototype._draw = function(context, text, x, y, alpha, width) {
	"use strict";
	var lines = this._splitText(text, width),
		bx = x, by = y,
		bw = this._textWidth(lines),
		bh = this._textHeight(lines);
	// Compute the correct position
	context.textAlign = 'left';
	context.textBaseline = 'bottom';
	switch (this.align){
		case 'right': bx += -bw; break;
		case 'center': bx += -bw/2; break;
	}
	switch (this.baseline){
		case 'base':
		case 'bottom': by += -bh + Math.round(this.offsetFactor * this.fontSize); break;
		case 'middle': by += -bh/2 + Math.round(this.offsetFactor * this.fontSize/2); break;
	}
	// Setting the font
	context.font = this._getFontString();
	// Now do the drawing
	if (this.stroke && this.strokeBehind) { this._drawStroke(context, lines, bx, by, bw, bh, alpha); }
	if (this.fill) { this._drawFill(context, lines, bx, by, bw, bh, alpha); }
	if (this.stroke && !this.strokeBehind) { this._drawStroke(context, lines, bx, by, bw, bh, alpha); }
};

// Draw simple
tbVectorFont.prototype.drawSimple = function(text, x, y, width) {
	"use strict";
	var context = tbGraphics.context;
	if (this.fill && this.fillMode === 1) {		// For patterns we must always use transformations
		this.drawExt(text, x, y, 1, 1, 0, 1, width);
	} else {
		context.save();
		this._draw(context, text, x, y, 1, width);
		context.restore();
	}
};

// Draw with alpha
tbVectorFont.prototype.drawAlpha = function(text, x, y, alpha, width) {
	"use strict";
	var context = tbGraphics.context;
	if (this.fill && this.fillMode === 1) {		// For patterns we must always use transformations
		this.drawExt(text, x, y, 1, 1, 0, alpha, width);
	} else {
		context.save();
		this._draw(context, text, x, y, alpha, width);
		context.restore();
	}
};

// Draw with transformation
tbVectorFont.prototype.drawExt = function(text, x, y, xScale, yScale, angle, alpha, width) {
	"use strict";
	var context = tbGraphics.context;
	context.save();
	context.translate(x, y);
	context.rotate(-angle * Math.PI/180);
	context.scale(xScale, yScale);
	try {
		this._draw(context, text, 0, 0, alpha, width);
	} catch (e) {
	}
	context.restore();
};
/////////////////////////////////////////////////////////////
// tbAudio: The engine part dealing with audio and sounds
//
// Copyright 2013-2015 CoolGames
// Last Changed: 26-11-2015
/////////////////////////////////////////////////////////////

var TBAudio = function() {
	"use strict";
    //settings
    this.maxNoOfChannels = 10;
    this._maxConSnds = -1;
	this._maxConSndsPolicy = "stop_lowest_prio";
    //determine audio support
    this.usingWebAudio = false;
    this.usingHTMLAudio = false;
    this.audioSupported = false;
	
    //check webAudio
    var audioObj, self = this,
        ContextClass = (typeof AudioContext !== 'undefined')? AudioContext : ((typeof webkitAudioContext !== 'undefined')? webkitAudioContext : undefined);
    if(ContextClass){
        this.usingWebAudio = true;
    }//check html5 audio
    else if(typeof Audio !== 'undefined'){
        try{
            if(typeof (new Audio()).canPlayType !== 'undefined'){
                this.usingHTMLAudio = true;
            }
        }catch(ignore){}
    }
	this.audioSupported = this.usingWebAudio || this.usingHTMLAudio;
	if(this.usingHTMLAudio && tbBrowser.browser.stockandroid){
		this.maxConcurrentSounds(1);
	}
	
    //check browser codec support
    if(this.audioSupported){
        try{
			audioObj = new Audio();
			this._codecs = {
				'ogg': !!audioObj.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
				'mp3': !!audioObj.canPlayType('audio/mpeg;').replace(/^no$/, ''),
				'opus': !!audioObj.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
				'wav': !!audioObj.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
				'm4a': !!(audioObj.canPlayType('audio/x-m4a;') || audioObj.canPlayType('audio/aac;')).replace(/^no$/, ''),
				'mp4': !!(audioObj.canPlayType('audio/x-mp4;') || audioObj.canPlayType('audio/aac;')).replace(/^no$/, ''),
				'weba': !!audioObj.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '')
			};
        }catch(ignore){
			// To solve an issue with the Edge browser on which Audio does not seem to be supported
			this._codecs = {
				'ogg': false,
				'mp3': true,
				'opus': false,
				'wav': false,
				'm4a': false,
				'mp4': false,
				'weba': false
			};
			if (testMode) { console.log("Cannot create Audio object to determine codec support. Only supporting MP3."); }
		}
   }

    //initialise context
    this._activeInstances = [];
    this._inactiveSources = {};
    this._tagVolumeMap = {};
    this._tagVolumeMapBackup = {};
    this._fadingTags = [];
    this._noPlayingInstances = 0;
	if(this.usingWebAudio){
	   //set-up AudioContext
		this._context = new ContextClass();
		this._createGain = (typeof this._context.createGain === "function")? function(){return self._context.createGain();} : ((typeof this._context.createGainNode === "function")? function(){return self._context.createGainNode();} : function(){});
		this._gainNodes = {};
		//create master gain to which all other nodes connect
		this._masterGain = this._createGain();
		if(this._masterGain === undefined){
			this.usingHTMLAudio = true;
			this._loadAudioFile = TBAudio.prototype._loadHTMLAudio;
			return;
		}
		this._masterGain.connect(this._context.destination);
		this._gainNodes["master"] = this._masterGain;

		//set-up loading function
		this._loadAudioFile = TBAudio.prototype._loadWebAudio;
    }else if(this.usingHTMLAudio){
        this._loadAudioFile = TBAudio.prototype._loadHTMLAudio;
    }
    else{
        this._loadAudioFile = function(){};
    }
};

TBAudio.prototype.maxConcurrentSounds = function(max){
    "use strict";
    if(max !== undefined){
        this._maxConSnds = max;
	}
    return this._maxConSnds;
};

TBAudio.prototype.maxConcurrentSoundsPolicy = function(policy){
    "use strict";
    if(policy !== undefined){
        this._maxConSndsPolicy = policy;
    }
    return this._maxConSndsPolicy;
};

TBAudio.prototype._handleStep = function(timePassed){
    "use strict";
    var i, instance, handler, tag, value;
    for(i=0; i<this._activeInstances.length; i+=1){
        instance = this._activeInstances[i];
        if(instance && instance.enginePaused === 0){
            if(!instance.paused){
                instance._timer += timePassed;
                //if instance playback is delayed, check if delay has passed
                if(instance._delayed && instance._timer >= instance.startDelay){
                    instance._delayed = false;
                    this._startPlaying(instance, instance._startOffset);
                }//if instance has reached end sound loop or deactivate
                //not required for web audio because of "onended" event
                else if(instance.playing && this.usingHTMLAudio){
                    if(this.getPosition(instance.id) >= instance.duration ){
                        if(!instance.looping){
                        	instance._source.pause();
                        	tbAudio._handleEndSound(instance);
                    	}else {
                            //web audio is looped automatically, for HTML audio playing pointer has to be reset to start of sound
                        	//check and when necessary wait till audio is in "canPlayThrough" state before updating position
                        	try{
                            	instance._source.pause();
                            	instance._source.currentTime = instance._startOffset/1000;
								if(instance._source.readyState === 4){
									instance._source.play();
								}else{
									handler = (function(){
										var inst = instance;
										return {
											ready: function(){
												inst._source.play();
												inst._source.removeEventListener("canplaythrough", handler.ready, false);
											}
										};
									}());
									instance._source.addEventListener("canplaythrough", handler.ready, false);
								}
							}catch(e){
								if(testMode){
									console.log("error in step when position > duration: " + e.name + ", " + e.message);
								}
							}
                        }
                    }
                }
            }//if instance paused for specific duration, check if duration has passed
            else if(instance._pauseDuration) {
                instance._pauseTimer += timePassed;
                if(instance._pauseTimer >= instance._pauseDuration){
                    this.resume(instance.id);
                }
            }
        }
    }

    //update gain on sounds that are fading
    for(i=this._fadingTags.length-1; i>=0; i-=1){
        tag = this._fadingTags[i];
		if(!this.isPaused(tag.id) && tag.enginePaused === 0){
			tag.timer += timePassed;
			if(tag.timer >= tag.duration){
				tbAudio.setGain(tag.id, tag.targetValue);
				if(this._tagVolumeMapBackup[tag.id] !== undefined){
					this._tagVolumeMapBackup[tag.id] = tag.targetValue;
				}
				if(tag.callback){
					tag.callback();
				}
				this._fadingTags.splice(i, 1);
			}else{
				value = tag.ease(tag.timer, tag.start, tag.targetValue - tag.start, tag.duration);
				tbAudio.setGain(tag.id, value);
				if(this._tagVolumeMapBackup[tag.id] !== undefined){
					this._tagVolumeMapBackup[tag.id] = value;
				}
			}
		}
    }
};

TBAudio.prototype._deactivateInstance = function(instance){
    "use strict";
    //add audio object to inactive sound queue for reuse (without loading)
    if(!this._inactiveSources[instance.sound.sprite.name]){
        this._inactiveSources[instance.sound.sprite.name] = [instance._source];
    }else if(this._inactiveSources[instance.sound.sprite.name].length < this.maxNoOfChannels){
        this._inactiveSources[instance.sound.sprite.name].push(instance._source);
    }
};

TBAudio.prototype._findActiveInstances = function(tag){
    "use strict";
    var i, instance,retVal;
    retVal = [];
    for(i=0; i<this._activeInstances.length; i+=1){
        instance = this._activeInstances[i];
        if(instance){
            if(instance.tags.indexOf(tag) >= 0){
                retVal.push(instance);
            }
        }
    }
    return retVal;
};

TBAudio.prototype._checkPlayPrio = function(sound){
    "use strict";
    if(this._maxConSnds > 0 && this._noPlayingInstances >= this._maxConSnds){
    	switch(this._maxConSndsPolicy){
            case "cancel_new":
                return false;
            case "stop_lowest_prio":
                var i, inst, lowest;
                //find currently playing
                for(i=0; i<this._activeInstances.length; i+=1){
                    inst = this._activeInstances[i];
                    if(inst && inst.playing && !inst.paused){
                        if(lowest === undefined || lowest.priority < inst.priority){
                            lowest = inst;
                        }
                    }
                }
                if(lowest.priority > sound._priority){
                    this.stop(lowest.id);
                    return true;
                }
                return false;
            break;
        }
    }
    return true;
};

TBAudio.prototype._connectWebAudioNode = function(instance){
    "use strict";
	var t, node, totGain = 1;
	for(t=0; t<instance.tags.length; t+=1){
		if(tbAudio._tagVolumeMap[instance.tags[t]] !== undefined){
			totGain *= tbAudio._tagVolumeMap[instance.tags[t]];
		}
	}
	node = this._createGain();
	node.gain.value = totGain;
    node.connect(this._masterGain);
    this._gainNodes[instance.id] = node;
    instance._source.connect(node);
 };

TBAudio.prototype._disconnectWebAudioNode = function(instance){
    "use strict";
    instance._source.disconnect(0);
    if(this._gainNodes[instance.id]){
        this._gainNodes[instance.id].disconnect(0);
        delete this._gainNodes[instance.id];
    }
};

TBAudio.prototype._createSoundSourceInstance = function(sound){
	"use strict";
	var source;
	if(!sound.sprite || !sound.sprite.audio){
		return;
	}
	if(this.usingWebAudio){
		 //create a new source node and add the node to the graph
		source = this._context.createBufferSource();
		source.buffer = sound.sprite.audio;
		source.loopStart = sound.startOffset/1000;
		source.loopEnd = (sound.startOffset + sound.duration)/1000;
		return source;
	}
	if(this.usingHTMLAudio){
		//clone audio node
		source = sound.sprite.audio.cloneNode(true);
		source.volume = 0;
		return source;
		
	}
};

TBAudio.prototype._createSoundInstance = function(sound){
    "use strict";
    var i, instance, sources, s;
    if(this.usingWebAudio){
        s = this._createSoundSourceInstance(sound);
        if(s){
        	instance = new tbSoundInstance(sound,s);
        }
    }else if(this.usingHTMLAudio){
        //check if any audio sources are currently unused,
        //otherwise create new audio source
    	sources = this._inactiveSources[sound.sprite.name];
    	if(!sources){
    		return;
    	}
    	if(sources.length > 0 ){
    		instance = new tbSoundInstance(sound, sources.pop());            
		}else{
			s = this._createSoundSourceInstance(sound);
			if(s){
				instance = new tbSoundInstance(sound, s);
			}
        }         
    }

    //add sound instance to activeInstance array
    if(instance){
        if(this.usingWebAudio){
        	this._connectWebAudioNode(instance);
        }
    	for(i=0; i<this._activeInstances.length; i+=1){
            if(this._activeInstances[i] === undefined){
                this._activeInstances[i] = instance;
                return instance;
            }
        }
        this._activeInstances.push(instance);
    }
	return instance;
};

TBAudio.prototype._selectFormat = function(filenames){
    "use strict";
    var i, ext;
    for(i=0; i<filenames.length; i+=1){
        ext = filenames[i].split('.').pop();
        if(this._codecs[ext]){
            return filenames[i];
        }
    }
    return false;
};

TBAudio.prototype._loadHTMLAudio = function(sprite, urls, moment){
    "use strict";
    var url = tbAudio._selectFormat(urls),
        onerror = function(){
    		tbLoader.loadFailed(moment);
        },
        onload = function(){
        	var audioObjClone;
        	sprite.loaded = true;
        	tbLoader.loadComplete(moment);
        	//round up the duration when using HTML5 Audio to account for the lower precision
        	sprite.duration = Math.ceil(sprite.audio.duration * 1000);
            //remove event handlers
            sprite.audio.removeEventListener("canplaythrough", onload, false);
            sprite.audio.removeEventListener("error", onerror, false);
            //already create one copy of source so it will be pre loaded
            audioObjClone = sprite.audio.cloneNode(true);
            tbAudio._inactiveSources[sprite.name].push(audioObjClone);
        };
    if(url){
    	sprite.audio = new Audio();
    	sprite.audio.src = url;
    	sprite.audio.autoplay = false;
    	sprite.audio.preload = "auto";
    	sprite.audio.addEventListener("canplaythrough", onload, false);
    	sprite.audio.addEventListener("error", onerror, false);
    	sprite.audio.load();
    }else{
        onerror();
    }
};

TBAudio.prototype._loadWebAudio = function(sprite, urls, moment){
    "use strict";
    var url = tbAudio._selectFormat(urls),
        onerror = function(){
            tbLoader.loadFailed(moment);
        },
        onload = function(buffer){
        	sprite.audio = buffer;
            sprite.duration = buffer.duration*1000;
            sprite.loaded = true;
            tbLoader.loadComplete(moment);
        },
        request = new XMLHttpRequest();
     // load the buffer from the URL
    request.open("GET", url, true);
    request.responseType = "arraybuffer";
    request.onload = function() {
        // decode the buffer into an audio source
        tbAudio._context.decodeAudioData(
            request.response,
            function(buffer) {
                if(buffer) {
                    onload(buffer);
                }
            },
            function() {
              onerror();
            }
        );
    };
    request.onerror = function() {
      // if there is an error, switch the sound to HTML Audio
        if(typeof Audio !== "undefined") {
            tbAudio.usingWebAudio = false;
            tbAudio.usingHTMLAudio = true;
            tbAudio._loadAudioFile = TBAudio.prototype._loadHTMLAudio;
            //TODO RELOAD ALL EARLIER SOUNDS AGAIN??
            tbAudio._loadAudioFile(sprite, urls, moment);
        }
    };
    try {
        request.send();
    } catch (e) {}
};

//create and play a new soundInstance
TBAudio.prototype.play = function(item, delay, fadeDuration, fadeEase){
    "use strict";
    if(item instanceof tbSound){
    	if(this._checkPlayPrio(item)){
    		var instance = this._createSoundInstance(item);
    		if(!instance){
    			return -1;
    		}
            instance.startDelay = delay || 0;
            instance._delayed = (delay > 0);
            instance.fadeDuration = fadeDuration || 0;
            instance.fadeEase = fadeEase || function(t,b,c,d){return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;};
            if(!instance._delayed){
            	this._startPlaying(instance, instance._startOffset);
            }
            return instance.id;
    	}
    	return -1;
    }
};

TBAudio.prototype._startPlaying = function(instance, offset){
    "use strict";
    var position;
    if(typeof offset !== "number"){
		offset = 0;
	}
    this._updateGain(instance.id);
    
	if(instance.fadeDuration > 0){
        var gain = this.getTagGain(instance.id);
        this.setGain(instance.id, 0);
        this.fade(instance.id, gain, instance.fadeDuration, instance.fadeEase);
        instance.fadeDuration = 0;
        instance.fadeEase = undefined;
    }
    if(this.usingWebAudio){
        position = offset - instance._startOffset;
    	instance._startTime = this._context.currentTime*1000 - position;
        //instance._source.loop = instance.looping;
        instance._source.onended = function(){tbAudio._handleEndSound(instance);};
        try{
			//check for old function calls as well as new ones
        	if(instance._source.start){
				instance._source.start(0, offset/1000, (instance.duration - position)/1000);
			}else if(instance._source.noteGrainOn){
				instance._source.noteGrainOn(0, offset/1000, (instance.duration - position)/1000);
			}
			instance._started = true;
			instance.playing = true;
			this._noPlayingInstances += 1;
			//must be called after starting sound for Chrome 42
			instance._source.loop = instance.looping;
		}catch(e){
			if(testMode){
				console.log("error in starting sound: " + e.name + ", " + e.message);
			}
		}
    }else if(this.usingHTMLAudio){
    	if(instance._source.readyState !== 4){
			//if not yet ready to play, wait till can play through then play
    		var handler = (function(){
				var inst = instance;
				return {
					ready: function(){
						inst._source.currentTime = offset/1000;
						inst._source.play();
						inst._started = true;
						inst._source.removeEventListener("canplaythrough", handler.ready, false);
					}
				};
			}());
			instance._source.addEventListener("canplaythrough", handler.ready, false);
		}else{
			//already ready so play immediately
			instance._source.currentTime = offset/1000;
			instance._source.play();
			instance._started = true;
		}
		instance.playing = true;
		this._noPlayingInstances += 1;
    }
};

//resume (or start) active instances that match tag
TBAudio.prototype.resume = function(tag, fadeDuration, fadeEase, enginePause){
    "use strict";
    var i, instance, gain, tag, fadingTag, source,
        items = this._findActiveInstances(tag);
    for(i=0; i<items.length; i+=1){
        instance = items[i];
        if(((instance.paused || !instance.playing) && !enginePause) || (!instance.paused && enginePause)){
            if(!enginePause){
				
                //check to see if instance was already fading before pause
            	for(i=this._fadingTags.length-1; i>=0; i-=1){
                    tag = this._fadingTags[i];
            		if(tag.id === instance.id){
            			fadingTag = tag;
            			fadeDuration = 0;
            			fadeEase = undefined;
            			break;
            		}
            	}
            	instance.paused = false;
				instance.fadeDuration = fadeDuration || 0;
				instance.fadeEase = fadeEase || function(t,b,c,d){return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;};
				if(instance._fadedOnPause){
					if(fadeDuration === undefined){
						instance.fadeDuration = instance._fadedOnPause.duration;
					}
					if(fadeEase === undefined){
						instance.fadeEase = instance._fadedOnPause.ease;
					}
					gain = instance._fadedOnPause.gain;
					instance._fadedOnPause = undefined;
				}
			}
            if(this.usingWebAudio){
            	//audio node must be recreated, after sound being stopped on pause it cannot be restarted
            	source = this._createSoundSourceInstance(instance.sound);
            	if(source){
                	instance._source = source;
                    this._connectWebAudioNode(instance);
            	}
            }
            if(gain !== undefined){
            	tbAudio.setGain(instance.id, gain);
            }
            
            //the progress in the sound already made before pausing must be given as a parameter
        	this._startPlaying(instance, instance._startOffset + (instance._pausedPosition || 0));
            
            if(fadingTag !== undefined){
            	tbAudio.setGain(instance.id, fadingTag.ease(fadingTag.timer, fadingTag.start, fadingTag.targetValue - fadingTag.start, fadingTag.duration));
            	tbAudio.fade(instance.id, fadingTag.targetValue, fadingTag.duration - fadingTag.timer, fadingTag.ease, fadingTag.callback);
            }
        }
    }
};

//pause playing active instances that match tag
TBAudio.prototype.pause = function(tag, duration, fadeDuration, fadeEase, enginePause){
    "use strict";
    showFullscreenAdOrVideo();
    var i, instance, position,
        items = this._findActiveInstances(tag);
    for(i=0; i<items.length; i+=1){
        instance = items[i];
        if(!instance.paused){
			instance.fadeDuration = fadeDuration || 0;
            if(instance.fadeDuration > 0){
				instance.fadeEase = fadeEase || function(t,b,c,d){return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;};
				//remember gain previous to fading so it can be reset on resume
				instance._fadedOnPause = {gain : tbAudio.getGain(instance.id), duration : instance.fadeDuration, ease: instance.fadeEase};
				tbAudio.fade(instance.id, 0, instance.fadeDuration, instance.fadeEase, function(){tbAudio.pause(instance.id, duration);});
            }else{
            	position = this.getPosition(instance.id);
            	instance._pausedPosition = position;
            	if(!enginePause){
					instance.paused = true;
					instance._pauseTimer = 0;
					instance._pauseDuration = duration;
					this._noPlayingInstances -= 1;
				}
				if(this.usingWebAudio){
					instance._source.onended = function(){};
					if(instance.playing){
						if(instance._started){
							try{
								if(instance._source.stop){
									instance._source.stop(0);
								}else if(instance._source.noteOff){
									instance._source.noteOff(0);
								}
							}catch(e){
								if(testMode){
									console.log("error in stopping sound for pause: "+ e.name + ", " + e.message);								
								}
							}
							instance._started = false;
						}
					}
					this._disconnectWebAudioNode(instance);
				}
				else if(this.usingHTMLAudio){
					instance._source.pause();
				}
			}
        }
    }
};

TBAudio.prototype._handleEndSound = function(instance){
    "use strict";
	if(this._tagVolumeMap[instance.id]){
		delete this._tagVolumeMap[instance.id];
	}
	if(!instance.paused){
		this._noPlayingInstances -= 1;
	}
	if(this.usingWebAudio){
		instance._started = false;
		instance.playing = false;
		this._disconnectWebAudioNode(instance);
	}
	else if(this.usingHTMLAudio){
		//store source for future use
		this._deactivateInstance(instance);
	}
	//remove instance from active instances list
	this._activeInstances[this._activeInstances.indexOf(instance)] = undefined;
};

TBAudio.prototype.stop = function(tag, fadeDuration, fadeEase){
    "use strict";
    var i, instance,
        items = this._findActiveInstances(tag);
    for(i=0; i<items.length; i+=1){
        instance = items[i];
        instance.fadeDuration = fadeDuration || 0;
		if(instance.fadeDuration > 0){
			instance.fadeEase = fadeEase || function(t,b,c,d){return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;};
			tbAudio.fade(instance.id, 0, instance.fadeDuration, instance.fadeEase, function(){tbAudio.stop(instance.id);});
		}else{
			//remove instances from volume map
			if(this._tagVolumeMap[instance.id]){
				delete this._tagVolumeMap[instance.id];
			}
			//update number of sounds playing
			if(instance.playing && !instance.paused){
				this._noPlayingInstances -= 1;
			}
			if(this.usingWebAudio){
				if(instance.playing && !instance.paused && !instance._delayed){
					//make sure sound has already started otherwise an error may occur
					if(instance._started){
						try{
							if(instance._source.stop){
								instance._source.stop(0);
							} else if(instance._source.noteOff){
								instance._source.noteOff(0);
							}
						}catch(e){
							if(testMode){
								console.log("error in stopping sound: " + e.name +", " + e.message);
							}
						}
						instance._started = false;
					}
					this._disconnectWebAudioNode(instance);
				}
			}
			else if(this.usingHTMLAudio){
			    if(!instance._delayed){
			    	instance._source.pause();
			    }
				//reset instance and store for future use
				this._deactivateInstance(instance);
			}
			//remove instance from active instances list
			this._activeInstances[this._activeInstances.indexOf(instance)] = undefined;
			instance.playing = false;
		}
    }
};

TBAudio.prototype.enginePause = function(tag){
    "use strict";
    var i, instance,
        items = this._findActiveInstances(tag);
    for(i=0; i<items.length; i+=1){
        instance = items[i];
		if(instance.enginePaused === 0){
			tbAudio.pause(instance.id, 0, 0, null, true);
		}
		instance.enginePaused += 1;
    }
	for(i=0; i<this._fadingTags.length; i+=1){
        if(tag === 'master' || this._fadingTags[i].id === tag){
            this._fadingTags[i].enginePaused += 1;
		}
    }
};

TBAudio.prototype.engineResume = function(tag){
    "use strict";
    var i, instance,
        items = this._findActiveInstances(tag);
    for(i=0; i<items.length; i+=1){
        instance = items[i];
		instance.enginePaused = Math.max(instance.enginePaused - 1, 0);
		if(instance.enginePaused === 0){
			tbAudio.resume(instance.id, 0, null, true);
		}
	}
	for(i=0; i<this._fadingTags.length; i+=1){
        if(tag === 'master' || this._fadingTags[i].id === tag){
            this._fadingTags[i].enginePaused = Math.max(this._fadingTags[i].enginePaused - 1, 0);
		}
    }
};

TBAudio.prototype.engineResumeForced = function(tag){
    "use strict";
    var i,
        items = this._findActiveInstances(tag);
    for(i=0; i<items.length; i+=1){
        items[i].enginePaused = 0;
		tbAudio.resume(items[i].id, 0, null, true);
    }
	for(i=0; i<this._fadingTags.length; i+=1){
        if(tag === 'master' || this._fadingTags[i].id === tag){
            this._fadingTags[i].enginePaused = 0;
		}
    }
};


TBAudio.prototype.fade = function(tag, targetValue, duration, easeFunction, callback){
    "use strict";
    var i;
    for(i=0; i<this._fadingTags.length; i+=1){
        if(this._fadingTags[i].id === tag){
            this._fadingTags.splice(i, 1);
            break;
        }
    }
    this._fadingTags.push({id:tag, targetValue:targetValue, ease:easeFunction || function(t,b,c,d){return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;},
            duration:duration, timer:0, start:this.getTagGain(tag), callback: callback, enginePaused: 0});
};

TBAudio.prototype.mute = function(tag){
    "use strict";
    var oldVolume;
    if(this._tagVolumeMapBackup[tag] === undefined){
    	oldVolume = (this._tagVolumeMap[tag] !== undefined)?  this._tagVolumeMap[tag] : 1;
    	//set tag gain value to 0
        this.setGain(tag, 0);
    	//store previous gain value of tag
    	this._tagVolumeMapBackup[tag] = oldVolume;
    }
};

TBAudio.prototype.unmute = function(tag){
    "use strict";
    //if a previous gain value was stored, reset tag gain to this value
    if(this._tagVolumeMapBackup[tag] !== undefined){
        this.setGain(tag, this._tagVolumeMapBackup[tag]);
        delete this._tagVolumeMapBackup[tag];
    }
};

TBAudio.prototype.position = function(tag, position){
    "use strict";
    var i, instance, source,
        setPos,
        items = this._findActiveInstances(tag);
    if(!isNaN(position) && position >= 0){
    	for(i=0; i<items.length; i++){
    		instance = items[i];
    		position = position % instance.duration;
            if(this.usingWebAudio){
            	 //cannot go back in buffer so stop current buffer and create new one that starts at given position
            	if(!instance.paused){
            		instance._source.onended = function(){};
            		//make sure sound is already started before trying to stop it
                	if(instance._started){
						try{
							if(instance._source.stop){
								instance._source.stop(0);
							} else if(instance._source.noteOff){
								instance._source.noteOff(0);
							}
						}
						catch(e){
							if(testMode){
								console.log("error in stopping sound for position: " + e.name + ", " +e.message);  
							}
						}
						instance._started = false;
					}
                    this._disconnectWebAudioNode(instance);
                    this._noPlayingInstances -= 1;
                    //create new buffer and start playing from requested position
                    source = this._createSoundSourceInstance(instance.sound);
                    if(source){
                        instance._source = source;
                        this._connectWebAudioNode(instance);
                        this._startPlaying(instance, instance._startOffset + position);
                    }
                }else{
                    instance._pausedPosition = position;
                }
            }else if(this.usingHTMLAudio){
                //check and when necessary wait for sound to be "canPlayThrough" then jump to requested position
            	if(instance._source.readyState === 4){
                    instance._source.currentTime = (instance._startOffset + position)/1000;
                }else{
                    (setPos = function(){
                        var inst = instance,
                            pos = position;
                        return{
                            handler: function(){
                                inst._source.currentTime = (inst._startOffset + pos)/1000;
                                inst._source.removeEventListener("canplaythrough", setPos.handler, false);
                            }
                        };
                    }());
                    instance._source.addEventListener("canplaythrough", setPos.handler, false);
                }
            }
        }
    }
};

TBAudio.prototype.rewind = function(tag){
    "use strict";
    tbAudio.position(tag, 0);
};

TBAudio.prototype.setLooping = function(tag, looping){
    "use strict";
    var i,
        items = this._findActiveInstances(tag);
    for(i=0; i<items.length; i+=1){
        items[i].looping = looping;
		if(this.usingWebAudio){
			//set property on buffer so webaudio api will automatically take care of the looping
			items[i]._source.loop = looping;
		}
    }
};

TBAudio.prototype.setPriority = function(tag, priority){
    "use strict";
    var i,
        items = this._findActiveInstances(tag);
    for(i=0; i<items.length; i+=1){
        items[i].priority = priority;
    }
};

TBAudio.prototype.getInstances = function(tag){
    "use strict";
     var i, instance,
        retVal = [];
    for(i=0; i<this._activeInstances.length; i+=1){
        instance = this._activeInstances[i];
        if(instance){
            if(instance.tags.indexOf(tag) >= 0){
                retVal.push(instance.id);
            }
        }
    }
    return retVal;
};

TBAudio.prototype.getTagGain = function(tag){
    "use strict";
    if(this._tagVolumeMap[tag] !== undefined){
        return this._tagVolumeMap[tag];
    }
    return 1;
};

TBAudio.prototype.getGain = function(id){
    "use strict";
    var t,
        totGain = 1,
        instance = this._findActiveInstances(id)[0];
    if(instance){
        for(t=0; t<instance.tags.length; t+=1){
            if(this._tagVolumeMap[instance.tags[t]] !== undefined){
				totGain *= this._tagVolumeMap[instance.tags[t]];
			}
        }
    }
    return Math.round(100*totGain)/100;
};

TBAudio.prototype.setGain = function(tag, volume){
    "use strict";
    var i, instance, t,
		totGain = 1,
        items = this._findActiveInstances(tag);
    //update tagVolumeMap
    this._tagVolumeMap[tag] = volume;
    //unmute sound if was muted
    if(this._tagVolumeMapBackup[tag]){
    	delete this._tagVolumeMapBackup[tag];
    }
    //update volume of all instances that have tag
    for(i=0; i<items.length; i+=1){
    	instance = items[i];
    	if(instance.tags.indexOf(tag) >= 0){
    		for(t=0; t<instance.tags.length; t+=1){
                if(this._tagVolumeMap[instance.tags[t]] !== undefined){
    				totGain *= this._tagVolumeMap[instance.tags[t]];
    			}
            }
            totGain = Math.round(100*totGain)/100;
            if(this.usingWebAudio){
                this._gainNodes[instance.id].gain.value = totGain;
            }else if(this.usingHTMLAudio){
                instance._source.volume = totGain;
            }
    	}
    }
};

TBAudio.prototype._updateGain = function(tag){
	"use strict";
    var i, instance, t,
	totGain = 1,
    items = this._findActiveInstances(tag);
    
    //update volume of all instances that have tag
    for(i=0; i<items.length; i+=1){
    	instance = items[i];
		for(t=0; t<instance.tags.length; t+=1){
            if(this._tagVolumeMap[instance.tags[t]] !== undefined){
				totGain *= this._tagVolumeMap[instance.tags[t]];
			}
        }
        totGain = Math.round(100*totGain)/100;
        if(this.usingWebAudio){
            this._gainNodes[instance.id].gain.value = totGain;
        }else if(this.usingHTMLAudio){
            instance._source.volume = totGain;
        }
	}
};

TBAudio.prototype.getTags = function(id){
    "use strict";
    var i, instance, t, tag,
        items = this._findActiveInstances(id),
        retVal = [];
    for(i=0; i<items.length; i+=1){
        instance = items[i];
        for(t=0; t<instance.tags.length; t+=1){
            tag = instance.tags[t];
            if(retVal.indexOf(tag) < 0){
                retVal.push(tag);
            }
        }
    }
    return retVal;
};

TBAudio.prototype.addTags = function(id, tags){
    "use strict";
    var i, instance, t,
        items = this._findActiveInstances(id);
    for(i=0; i<items.length; i+=1){
        instance = items[i];
        tags = [].concat(tags);
        for(t=0; t<tags.length; t+=1){
            if(instance.tags.indexOf(tags[t]) < 0){
                instance.tags.push(tags[t]);
            }
        }
    }
    this._updateGain(id);
};

TBAudio.prototype.removeTags = function(id, tags){
    "use strict";
    var i, instance, t, tag, idx,
        items = this._findActiveInstances(id);
    for(i=0; i<items.length; i+=1){
        instance = items[i];
        tags = [].concat(tags);
        for(t=0; t<tags.length; t+=1){
            tag = tags[t];
            if(tag !== instance.id && tag !== 'master'){
                idx = instance.tags.indexOf(tag);
                if(idx >= 0){
                    instance.tags.splice(idx, 1);
                }
            }
        }
    }
    return instance.tags;
};


TBAudio.prototype.isPaused = function(id){
    "use strict";
    var instance = this._findActiveInstances(id)[0];
    if(instance){
        return instance.paused;
    }
};

TBAudio.prototype.isPlaying = function(id){
    "use strict";
    var instance = this._findActiveInstances(id)[0];
    if(instance){
        return instance.playing;
    }
};

TBAudio.prototype.isActive = function(id){
    "use strict";
    var instance = this._findActiveInstances(id)[0];
    if(instance){
        return true;
    }
    return false;
};

TBAudio.prototype.isLooping = function(id){
    "use strict";
    var instance = this._findActiveInstances(id)[0];
    if(instance){
        return instance.looping;
    }
};

TBAudio.prototype.getFading = function(id){
    "use strict";
    var i;
    for(i=0; i<this._fadingTags.length; i+=1){
        if(this._fadingTags[i].id === id){
            return this._fadingTags[i].targetValue;
        }
    }
    return -1;
};

TBAudio.prototype.getPriority = function(id){
    "use strict";
    var instance = this._findActiveInstances(id)[0];
    if(instance){
        return instance.priority;
    }
};

TBAudio.prototype.getDuration = function(id){
    "use strict";
    var instance = this._findActiveInstances(id)[0];
    if(instance){
        return instance.sound.duration;
    }
};

TBAudio.prototype.getPosition = function(id){
    "use strict";
    var instance = this._findActiveInstances(id)[0];
    if(instance){
        if(this.usingWebAudio){
            if(instance.paused){
                return instance._pausedPosition;
            }
            return (tbAudio._context.currentTime*1000 - instance._startTime)%instance.duration;
        }
        if(tbAudio.usingHTMLAudio){
            return Math.ceil(instance._source.currentTime*1000 - instance._startOffset);
        }   
    }
};

//create the tbAudio object
var tbAudio = new TBAudio();

//
// AudioSprites
//

//The constructor for a tbAudioSprite object
var tbAudioSprite = function(name, mp3Name, oggName, loading){
	"use strict";
	this.name = name;
	this.mp3Name = mp3Name;
	this.oggName = oggName;
	this.loadingMoment = loading;
    this.loaded = false;
    this.audio = null;
    tbLoader.addResource(this, this.loadingMoment, 1);
};

tbAudioSprite.prototype.startLoading = function(moment, location){
	"use strict";
	var fnameMp3, fnameOgg;
	fnameMp3 = this.mp3Name;
	if (fnameMp3.toLowerCase().indexOf("http:") !== 0 && fnameMp3.toLowerCase().indexOf("https:") !== 0) {
		fnameMp3 = location + fnameMp3;
	}
	fnameOgg = this.oggName;
	if (fnameOgg.toLowerCase().indexOf("http:") !== 0 && fnameOgg.toLowerCase().indexOf("https:") !== 0) {
		fnameOgg = location + fnameOgg;
	}
	tbAudio._inactiveSources[this.name] = [];
    tbAudio._loadAudioFile(this, [fnameOgg, fnameMp3], moment);
};

tbAudioSprite.prototype.complete = function(){
	"use strict";
	return this.loaded;
};

//
// Sounds
//

// The constructor for a tbSound object
var tbSound = function(name, sprite, offset, duration, gain, priority, tags) {
	"use strict";
	// Copy the arguments
	this.name = name;
	this.sprite = sprite;
	this.startOffset = offset;
	this.duration = duration;

    tbAudio.setGain(this.name, ((gain !== undefined)? gain: 1));
    this._priority = (priority !== undefined)? priority : 10;
    this.tags = [];
    if(tags){
        this.tags = this.tags.concat(tags);
    }
    if(this.tags.indexOf(this.name) < 0){
        this.tags.push(this.name);
    }
};

tbSound.prototype.complete = function(){
	"use strict";
	return this.sprite.complete();
};

// Gets or Sets the priority of the sound object
tbSound.prototype.priority = function(priority) {
	"use strict";
	if(priority !== undefined){
		this._priority = priority;
	}
	return this._priority;
};

// Gets the tags of the sound object
tbSound.prototype.getTags = function() {
	"use strict";
	//return shallow copy of array
	return this.tags.slice(0);
};

// Adds tags to the sound object
tbSound.prototype.addTags = function(tags) {
	"use strict";
	var t;
	tags = [].concat(tags);
	for(t=0; t<tags.length; t+=1){
		if(this.tags.indexOf(tags[t]) < 0){
			this.tags.push(tags[t]);
		}
	}
};

// Removes tags from the sound object
tbSound.prototype.removeTags = function(tags) {
	"use strict";
	var t, tag, idx;
	tags = [].concat(tags);
	for(t=0; t<tags.length; t+=1){
		tag = tags[t];
		if(tag !== this.name){
			idx = this.tags.indexOf(tag);
			if(idx >= 0){
				this.tags.splice(idx, 1);
			}
		}
	}
};

//
// SoundInstances
//

// The constructor for a soundInstance
var tbSoundInstance = function(sound, source) {
	"use strict";
	this.sound = sound;
    this._startOffset = this.sound.startOffset;
    this._endTime = this._startOffset + this.sound.duration;
    this._source = source;
    this.duration = this.sound.duration;
    this._init();
};

tbSoundInstance.prototype._init = function(){
    "use strict";
    this.id =  Math.round(Date.now() * Math.random()) + "";
    this.tags = ["master", this.id].concat(this.sound.tags);
    this.priority = (this.sound._priority !== undefined)? this.sound._priority : 10;
    this.looping = false;
    this.playing = false;
    this.paused = false;
	this.enginePaused = 0;
    this._timer = 0;
    this._delayed = false;
	this._started = false;
	this._pausedPosition = 0;
    this.startDelay = 0;

	//set initial gain
	var t, totGain = 1;
	for(t=0; t<this.tags.length; t+=1){
		if(tbAudio._tagVolumeMap[this.tags[t]] !== undefined){
			totGain *= tbAudio._tagVolumeMap[this.tags[t]];
		}
	}
	if(tbAudio.usingWebAudio){
		//tbAudio._gainNodes[this.id].gain.value = totGain;
	}else if(tbAudio.usingHTMLAudio){
		this._source.volume = totGain;
	}
};/////////////////////////////////////////////////////////////
// tbData: The engine part dealing with data files
//
// Copyright 2013 CoolGames
// Last Changed: 9-9-2013
/////////////////////////////////////////////////////////////

// The constructor for the data file object
var tbDataFile = function(name, fileName, info) {
	"use strict";
	this.name = name;
	this.fileName = fileName;
	this.info = info;
};


// The constructor for the text object
var tbText = function(name) {
	"use strict";
	this.name = name;
	this.text = "";						// The text
	this.complete = false;
	this.failed = false;
};

// Loading state changed
tbText.prototype._loaded = function(request) {
	"use strict";
	if (request.readyState === 4) {
		this.complete = true;
		this.failed = (request.status !== 200);
		if (this.failed) {
			tbGame.addSpecial("Get Failed", {name: this.name} );
		} else {
			this.text = request.responseText;
			tbGame.addSpecial("Get Complete", {name: this.name} );
		}
	}
};

// Posting state changed
tbText.prototype._posted = function(request) {
	"use strict";
	if (request.readyState === 4) {
		this.complete = true;
		this.failed = (request.status !== 200);
		if (this.failed) {
			tbGame.addSpecial("Post Failed", {name: this.name} );
		} else {
			tbGame.addSpecial("Post Complete", {name: this.name} );
		}
	}
};

// Get the text from an url
tbText.prototype.get = function(url) {
	"use strict";
	var self = this,
		request = new XMLHttpRequest(),
		ready = function() { self._loaded(request); };
	this.complete = false;
	request.open("GET", url);
	request.onreadystatechange = ready;
	request.send(null);
};

// Post the text to an url
tbText.prototype.post = function(url) {
	"use strict";
	var self = this,
		request = new XMLHttpRequest(),
		ready = function() { self._posted(request); };
	this.complete = false;
	request.open("POST", url);
	request.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
	request.onreadystatechange = ready;
	request.send(this.text);
};

// Get the text from an url synchronous
tbText.prototype.getSynchronous = function(url) {
	"use strict";
	var request = new XMLHttpRequest();
	request.open("GET", url, false);
	try {
		request.send();
	} catch (e) {
		return false;
	}
	this.complete = true;
	this.failed = (request.status !== 200);
	if (this.failed) {
		return false;
	}
	this.text = request.responseText;
	return true;
};

// Post the text to an url synchronous
tbText.prototype.postSynchronous = function(url) {
	"use strict";
	var request = new XMLHttpRequest();
	request.open("POST", url);
	request.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
	try {
		request.send(this.text);
	} catch(e) {
		return false;
	}
	this.complete = true;
	this.failed = (request.status !== 200);
	return (!this.failed);
};

// Parse the text as a JSON object
tbText.prototype.parseJSON = function() {
	"use strict";
	if (JSON === undefined) {
		return ({ });
	} else {
		return JSON.parse(this.text);
	}
};

// Stringify an object into a JSON text
tbText.prototype.stringifyJSON = function(obj) {
	"use strict";
	if (JSON === undefined) {
		this.text = "";
	} else {
		this.text = JSON.stringify(obj);
	}
};

tbText.prototype._browserSupportsLocalStorage = function() {
	try {
		return 'localStorage' in window && window['localStorage'] !== null;
	} catch (e) {
		return false;
	}
};

tbText.prototype.localStorageStore = function(key) {
	"use strict";

	if (this._browserSupportsLocalStorage()) {
		var localStorage = window.localStorage;
		localStorage.setItem(key || this.name, this.text);
	}
};

tbText.prototype.localStorageRetrieve = function(key) {
	"use strict";

	if (this._browserSupportsLocalStorage()) {
		var localStorage = window.localStorage;
		this.text = localStorage.getItem(key || this.name);
	}
	else {
		this.text = null;
	}
};

/////////////////////////////////////////////////////////////
// tbGame: The game object that handles the main loop and
// all the event processing
//
// Copyright 2013-2015 CoolGames
// Last Changed: 3-9-2015
/////////////////////////////////////////////////////////////

var TBGame = function(mainCanvas) {
	"use strict";
	if (mainCanvas) { this.mainCanvas = mainCanvas; }
	// Initialize the tokens
	this.clear();
	// Initialize the event handlers
	var self = this;
	this._initEventCounters();
	this._initClick(self);
	this._initTouch(self);
	this._initKeyboard(self);
	this._initAlarm(self);
	this._initSpecial(self);
	this._initPause(self);
	this._initLoop(self);
};

// Clears the game state, removing all tokens and elements
TBGame.prototype.clear = function() {
	"use strict";
	this._tokens = [];
	this._tokenOrderChanged = false;
	this._elements = [];
	this._elementOrderChanged = false;
};

// Clears all events
TBGame.prototype.clearAllEvents = function() {
	"use strict";
	this.clearClickEvents();
	this.clearTouchEvents();
	this.clearKeyboardEvents();
	this.clearAlarmEvents();
	this.clearSpecialEvents();
};

// Sets the main canvas (required for finding touch event positions)
TBGame.prototype.setMainCanvas = function(mainCanvas) {
	"use strict";
	this.mainCanvas = mainCanvas;
};

// ********************************************
// ** Event counters
// ** For each class of events we maintain the number of tokens that
// ** use it. We only run through the array when this number is positive
// ********************************************

// Initialize the event counters
TBGame.prototype._initEventCounters = function() {
	"use strict";
	this._numberBeginStepEvents = 0;
	this._numberClickEvents = 0;
	this._numberTouchEvents = 0;
	this._numberKeyEvents = 0;
	this._numberAlarmEvents = 0;
	this._numberSpecialEvents = 0;
	this._numberEndStepEvents = 0;
	this._numberImmediateClickEvents = 0;
	this._numberImmediateTouchEvents = 0;
	this._numberImmediateKeyEvents = 0;
	this._numberImmediateSpecialEvents = 0;
};

// Add to the event counters
TBGame.prototype._addEventCounters = function(token) {
	"use strict";
	if (token.handleBeginStep) { this._numberBeginStepEvents += 1; }
	if (token.handleClick) { this._numberClickEvents += 1; }
	if (token.handleTouchDown || token.handleTouchUp) { this._numberTouchEvents += 1; }
	if (token.handleMouseWheel) { this._numberTouchEvents += 1; }
	if (token.handleKeyDown || token.handleKeyUp) { this._numberKeyEvents += 1; }
	if (token.handleAlarm) { this._numberAlarmEvents += 1; }
	if (token.handleSpecial) { this._numberSpecialEvents += 1; }
	if (token.handleEndStep) { this._numberEndStepEvents += 1; }
	if (token.handleImmediateClick) { this._numberImmediateClickEvents += 1; }
	if (token.handleImmediateTouchDown || token.handleImmediateTouchUp) { this._numberImmediateTouchEvents += 1; }
	if (token.handleImmediateMouseWheel) { this._numberImmediateTouchEvents += 1; }
	if (token.handleImmediateKeyDown || token.handleImmediateKeyUp) { this._numberImmediateKeyEvents += 1; }
	if (token.handleImmediateSpecial) { this._numberImmediateSpecialEvents += 1; }
};

// Subtract from the event counters
TBGame.prototype._subtractEventCounters = function(token) {
	"use strict";
	if (token.handleBeginStep) { this._numberBeginStepEvents -= 1; }
	if (token.handleClick) { this._numberClickEvents -= 1; }
	if (token.handleTouchDown || token.handleTouchUp) { this._numberTouchEvents -= 1; }
	if (token.handleMouseWheel) { this._numberTouchEvents -= 1; }
	if (token.handleKeyDown || token.handleKeyUp) { this._numberKeyEvents -= 1; }
	if (token.handleAlarm) { this._numberAlarmEvents -= 1; }
	if (token.handleSpecial) { this._numberSpecialEvents -= 1; }
	if (token.handleEndStep) { this._numberEndStepEvents -= 1; }
	if (token.handleImmediateClick) { this._numberImmediateClickEvents -= 1; }
	if (token.handleImmediateTouchDown || token.handleImmediateTouchUp) { this._numberImmediateTouchEvents -= 1; }
	if (token.handleImmediateMouseWheel) { this._numberImmediateTouchEvents -= 1; }
	if (token.handleImmediateKeyDown || token.handleImmediateKeyUp) { this._numberImmediateKeyEvents -= 1; }
	if (token.handleImmediateSpecial) { this._numberImmediateSpecialEvents -= 1; }
};

// ********************************************
// ** Dealing with the click
// ********************************************

// Initialize the click handling
TBGame.prototype._initClick = function(self) {
	"use strict";
	window.addEventListener('click', function(e) {self._doClick(e); } , false);
	this.clearClickEvents();
};

// Clears the click events
TBGame.prototype.clearClickEvents = function() {
	"use strict";
	this._clickInfo = {x:0, y:0};
	this._clickAction = [];				// The clicks since the last step
};

// Add a click event
TBGame.prototype.addClickEvent = function(x, y) {
	"use strict";
	var i, tok, handled;
	this._clickInfo.x = x;
	this._clickInfo.y = y;
	this._clickAction.push( { x: this._clickInfo.x, y: this._clickInfo.y } );
	// Handle the immediate events
	if (this._numberImmediateClickEvents > 0) {
		for (i = this._tokens.length-1; i >= 0; i -= 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && tok.handleImmediateClick) {
				handled = tok.handleImmediateClick(this._clickInfo.x, this._clickInfo.y);
				if (handled === true) { break; }
			}
		}
	}
};

// Handle a click event
TBGame.prototype._doClick = function(e) {
	"use strict";
	var canvas, bbox, x, y;
	if (this.mainCanvas === undefined) { return; }
	if (this._paused > 0) { return; }
	canvas = this.mainCanvas;
	bbox = canvas.getBoundingClientRect();
	x = (e.clientX - bbox.left) * (canvas.width / bbox.width);
	y = (e.clientY - bbox.top) * (canvas.height / bbox.height);
	e.preventDefault();
	this.addClickEvent(x, y);
};

// Send the correct click events to the tokens
TBGame.prototype._handleClickEvents = function() {
	"use strict";
	var c, i, tok, act;
	if (this._clickAction.length === 0) { return; }
	// Send the events to the tokens
	if (this._numberClickEvents > 0) {
		for (i = this._tokens.length-1; i >= 0; i -= 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && tok.handleClick) {
				for (c = 0; c < this._clickAction.length; c += 1) {
					act = this._clickAction[c];
					if (act.handled !== true) {
						act.handled = tok.handleClick(act.x, act.y);
					}
				}
			}
		}
	}
	// Clear the click events
	this._clickAction = [];
};

// Return the click x position
TBGame.prototype.clickX = function() {
	"use strict";
	return this._clickInfo.x;
};

// Return the click y position
TBGame.prototype.clickY = function() {
	"use strict";
	return this._clickInfo.y;
};


// ********************************************
// ** Dealing with the touch
// ********************************************

// Initialize the touch handling
TBGame.prototype._initTouch = function(self) {
	"use strict";
	window.addEventListener('mousedown', function(e) {self._doMouseDown(e); } , false);
	window.addEventListener('mouseup', function(e) {self._doMouseUp(e); } , false);
	window.addEventListener('mousemove', function(e) {self._doMouseMove(e); } , false);
	window.addEventListener('touchstart', function(e) {self._doTouchStart(e); } , false);
	window.addEventListener('touchend', function(e) {self._doTouchEnd(e); } , false);
	window.addEventListener('touchmove', function(e) {self._doTouchMove(e); } , false);
	window.addEventListener('touchleave', function(e) {self._doTouchLeave(e); } , false);
	window.addEventListener('touchcancel', function(e) {self._doTouchCancel(e); } , false);
	window.addEventListener("mousewheel", function(e) {self._doMouseWheel(e); } , false);     // mouse wheel IE9, Chrome, Safari, Opera
	window.addEventListener("DOMMouseScroll", function(e) {self._doMouseWheel(e); } , false); // Firefox

	this.clearTouchEvents();
	// Hack to avoid touch event also firing mouse events
	this._lastTouchDown = 0;
	this._lastTouchUp = 0;
};

// Clears the touch events
TBGame.prototype.clearTouchEvents = function() {
	"use strict";
	var i;
	this._touchInfo = [];				// The information about the touch event
	for (i=0; i < 16; i += 1) {
		this._touchInfo[i] = {id: -1, down: false, x: 0, y: 0};
	}
	this._touchAction = [];				// The finger that were pressed or released since the last step
};

// We have to determine the finger ourselves as it turns out
// devices like iPad do not follow the numbering standards
// for touch identifiers.
TBGame.prototype._findFinger = function(id) {
	"use strict";
	var finger = -1,
		i;
	// Check whether it exists
	for (i=0; i<16; i += 1) {
		if (this._touchInfo[i].id === id) {
			finger = i;
			break;
		}
	}
	// If not, find first one that is not down
	if (finger === -1) {
		for (i=0; i<16; i += 1) {
			if (!this._touchInfo[i].down) {
				finger = i;
				this._touchInfo[i].id = id;
				break;
			}
		}
	}
	return finger;
};

// Add a touch move event
TBGame.prototype._addTouchMove = function(id, x, y) {
	"use strict";
	var finger, canvas, bbox;
	if (this.mainCanvas === undefined) { return; }
	finger = this._findFinger(id);
	if (finger === -1) { return; }
	canvas = this.mainCanvas;
	bbox = canvas.getBoundingClientRect();
	this._touchInfo[finger].x = (x - bbox.left) * (canvas.width / bbox.width);
	this._touchInfo[finger].y = (y - bbox.top) * (canvas.height / bbox.height);
};

// Add a touch down event
TBGame.prototype._addTouchDownEvent = function(id) {
	"use strict";
	var finger = this._findFinger(id),
		i, tok, handled;
	if (finger === -1) { return; }
	if (this._touchInfo[finger].down) { return; }
	this._touchAction.push( { finger: finger, x: this._touchInfo[finger].x, y: this._touchInfo[finger].y, down: true } );
	this._touchInfo[finger].down = true;
	// Handle the immediate events
	if (this._numberImmediateTouchEvents > 0) {
		for (i = this._tokens.length-1; i >= 0; i -= 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && tok.handleImmediateTouchDown) {
				handled = tok.handleImmediateTouchDown(finger, this._touchInfo[finger].x, this._touchInfo[finger].y);
				if (handled === true) { break; }
			}
		}
	}
};

// Add a touch up event
TBGame.prototype._addTouchUpEvent = function(id) {
	"use strict";
	var finger = this._findFinger(id),
		i, tok, handled;
	if (finger === -1) { return; }
	if (!this._touchInfo[finger].down) { return; }
	this._touchAction.push( { finger: finger, x: this._touchInfo[finger].x, y: this._touchInfo[finger].y, down: false } );
	this._touchInfo[finger].down = false;
	// Handle the immediate events
	if (this._numberImmediateTouchEvents > 0) {
		for (i = this._tokens.length-1; i >= 0; i -= 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && tok.handleImmediateTouchUp) {
				handled = tok.handleImmediateTouchUp(finger, this._touchInfo[finger].x, this._touchInfo[finger].y);
				if (handled === true) { break; }
			}
		}
	}
};

// Add a touch down event for a finger (rather than an id)
TBGame.prototype.addTouchDownEvent = function(finger) {
	"use strict";
	this._addTouchDownEvent(this._touchInfo[finger].id);
};

// Add a touch up event for a finger (rather than an id)
TBGame.prototype.addTouchUpEvent = function(finger) {
	"use strict";
	this._addTouchUpEvent(this._touchInfo[finger].id);
};

//Add a mouse wheel event
TBGame.prototype.addMouseWheelEvent = function(delta) {
	"use strict";
	var finger = 0,
		i, tok, handled;
	this._touchAction.push( { finger: finger, x: this._touchInfo[finger].x, y: this._touchInfo[finger].y, wheelDelta: delta } );
	// Handle the immediate events
	if (this._numberImmediateTouchEvents > 0) {
		for (i = this._tokens.length-1; i >= 0; i -= 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && tok.handleImmediateMouseWheel) {
				handled = tok.handleImmediateMouseWheel(delta, this._touchInfo[finger].x, this._touchInfo[finger].y);
				if (handled === true) { break; }
			}
		}
	}
};

// Handle a mouse button down event
TBGame.prototype._doMouseDown = function(e) {
	"use strict";
	if (this._paused > 0) { return; }
	e.preventDefault();
	window.focus();					// Because we cancel this with the previous command
	if (this._lastTouchDown >= Date.now()-1000) { return; }	// Hack to avoid a mouse down soon after a touch down event
	this._addTouchMove(0,e.clientX,e.clientY);
	this._addTouchDownEvent(0);
};

// Handle a mouse up event
TBGame.prototype._doMouseUp = function(e) {
	"use strict";
	if (this._paused > 0) { return; }
	e.preventDefault();
	if (this._lastTouchUp >= Date.now()-1000) { return; }	// Hack to avoid a mouse down soon after a touch up event
	this._addTouchMove(0,e.clientX,e.clientY);
	this._addTouchUpEvent(0);
};

// Handle a mouse move event
TBGame.prototype._doMouseMove = function(e) {
	"use strict";
	if (this._paused > 0) { return; }
	e.preventDefault();
	this._addTouchMove(0,e.clientX,e.clientY);
};

// Handle a mouse wheel event
TBGame.prototype._doMouseWheel = function(e) {
	"use strict";
	var delta;
	if (this._paused > 0) { return; }
	e.preventDefault();
	window.focus();					// Because we cancel this with the previous command
	delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
	this.addMouseWheelEvent(delta);
};

// Handle a touch start event
TBGame.prototype._doTouchStart = function(e) {
	"use strict";
	var touches = e.changedTouches,
		i;
	this._lastTouchDown = Date.now();
	if (this._paused > 0) { return; }
	e.preventDefault();
	window.focus();					// Because we cancel this with the previous command
	for (i=0; i<touches.length; i += 1) {
		this._addTouchMove(touches[i].identifier,touches[i].clientX,touches[i].clientY);
		this._addTouchDownEvent(touches[i].identifier);
	}
};

// Handle a touch end event
TBGame.prototype._doTouchEnd = function(e) {
	"use strict";
	var touches = e.changedTouches,
		i;
	this._lastTouchUp = Date.now();
	if (this._paused > 0) { return; }
	e.preventDefault();
	for (i=0; i<touches.length; i += 1)	{
		this._addTouchMove(touches[i].identifier,touches[i].clientX,touches[i].clientY);
		this._addTouchUpEvent(touches[i].identifier);
	}
};

// Handle a touch leave event
TBGame.prototype._doTouchLeave = function(e) {
	"use strict";
	var touches = e.changedTouches,
		i;
	this._lastTouchUp = Date.now();
	if (this._paused > 0) { return; }
	e.preventDefault();
	for (i=0; i<touches.length; i += 1)	{
		this._addTouchMove(touches[i].identifier,touches[i].clientX,touches[i].clientY);
		this._addTouchUpEvent(touches[i].identifier);
	}
};

// Handle a touch cancel event
TBGame.prototype._doTouchCancel = function(e) {
	"use strict";
	var touches = e.changedTouches,
		i;
	this._lastTouchUp = Date.now();
	if (this._paused > 0) { return; }
	e.preventDefault();
	for (i=0; i<touches.length; i += 1)	{
		this._addTouchMove(touches[i].identifier,touches[i].clientX,touches[i].clientY);
		this._addTouchUpEvent(touches[i].identifier);
	}
};

// Handle a touch move event
TBGame.prototype._doTouchMove = function(e) {
	"use strict";
	var touches = e.changedTouches,
		i;
	if (this._paused > 0) { return; }
	e.preventDefault();
	for (i=0; i<touches.length; i += 1)	{
		this._addTouchMove(touches[i].identifier,touches[i].clientX,touches[i].clientY);
	}
};

// Send the correct touch events to the tokens
TBGame.prototype._handleTouchEvents = function() {
	"use strict";
	var c, i, tok, act;
	if (this._touchAction.length === 0) { return; }
	// Send the events to the tokens
	if (this._numberTouchEvents > 0) {
		for (i = this._tokens.length-1; i >= 0; i -= 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && (tok.handleTouchDown || tok.handleTouchUp || tok.handleMouseWheel)) {
				for (c = 0; c < this._touchAction.length; c += 1) {
					act = this._touchAction[c];
					if (act.handled !== true) {
						if (act.wheelDelta !== undefined && tok.handleMouseWheel) {
							act.handled = tok.handleMouseWheel(act.wheelDelta, act.x, act.y);
						} else if (act.down && tok.handleTouchDown) {
							act.handled = tok.handleTouchDown(act.finger, act.x, act.y);
						} else if (!act.down && tok.handleTouchUp) {
							act.handled = tok.handleTouchUp(act.finger, act.x, act.y);
						}
					}
				}
			}
		}
	}
	// Clear the touch events
	this._touchAction = [];
};

// Check whether a touch finger is down
TBGame.prototype.touchDown = function(finger) {
	"use strict";
	return this._touchInfo[finger].down;
};

// Returns the touch id
TBGame.prototype.touchId = function(finger) {
	"use strict";
	return this._touchInfo[finger].id;
};

// Return the touch x position
TBGame.prototype.touchX = function(finger) {
	"use strict";
	return this._touchInfo[finger].x;
};

// Return the touch y position
TBGame.prototype.touchY = function(finger) {
	"use strict";
	return this._touchInfo[finger].y;
};


// ********************************************
// ** Dealing with the keyboard
// ********************************************

// Initialize the keyboard handling
TBGame.prototype._initKeyboard = function(self) {
	"use strict";
	window.addEventListener('keydown', function(e) {self._doKeyDown(e); } , false);
	window.addEventListener('keyup', function(e) {self._doKeyUp(e); } , false);
	this.clearKeyboardEvents();
};

// Clears the keyboard handling
TBGame.prototype.clearKeyboardEvents = function() {
	"use strict";
	var i;
	this._keyDown = [];							// Whether the key is currently down
	for (i=0; i< 256; i += 1) {
		this._keyDown[i] = false;
	}
	this._keyAction = [];						// The keys that were pressed or released since the last step
};

// Add a key down event
TBGame.prototype.addKeyDownEvent = function(keyCode) {
	"use strict";
	var i, tok, handled;
	if (this._keyDown[keyCode]) { return; }
	this._keyAction.push( { key: keyCode, down: true } );
	this._keyDown[keyCode] = true;
	// Handle the immediate events
	if (this._numberImmediateKeyEvents > 0) {
		for (i = 0; i < this._tokens.length; i += 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && tok.handleImmediateKeyDown) {
				handled = tok.handleImmediateKeyDown(keyCode);
				if (handled === true) { break; }
			}
		}
	}
};

// Add a key up event
TBGame.prototype.addKeyUpEvent = function(keyCode) {
	"use strict";
	var i, tok, handled;
	if (!this._keyDown[keyCode]) { return; }
	this._keyAction.push( { key: keyCode, down: false } );
	this._keyDown[keyCode] = false;
	// Handle the immediate events
	if (this._numberImmediateKeyEvents > 0) {
		for (i = 0; i < this._tokens.length; i += 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && tok.handleImmediateKeyUp) {
				handled = tok.handleImmediateKeyUp(keyCode);
				if (handled === true) { break; }
			}
		}
	}
};

// Handle a key down event
TBGame.prototype._doKeyDown = function(e) {
	"use strict";
	if (this._paused > 0) { return; }
	if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
		e.preventDefault();
	}
	this.addKeyDownEvent(e.keyCode);
};

// Handle a key up event
TBGame.prototype._doKeyUp = function(e) {
	"use strict";
	if (this._paused > 0) { return; }
	if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
		e.preventDefault();
	}
	this.addKeyUpEvent(e.keyCode);
};

// Send the correct key events to the tokens
TBGame.prototype._handleKeyEvents = function() {
	"use strict";
	var c, i, tok, act;
	if (this._keyAction.length === 0) { return; }
	// Send the events to the tokens
	if (this._numberKeyEvents > 0) {
		for (i=0; i<this._tokens.length; i += 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && (tok.handleKeyDown || tok.handleKeyUp)) {
				for (c=0; c<this._keyAction.length; c += 1) {
					act = this._keyAction[c];
					if (act.handled !== true) {
						if (act.down && tok.handleKeyDown) {
							act.handled = tok.handleKeyDown(act.key);
						} else if (!act.down && tok.handleKeyUp) {
							act.handled = tok.handleKeyUp(act.key);
						}
					}
				}
			}
		}
	}
	// Clear the keyboard events
	this._keyAction = [];
};

// Check whether a key is down
TBGame.prototype.keyboardKeyDown = function(keyCode) {
	"use strict";
	return this._keyDown[keyCode];
};


// ********************************************
// ** Dealing with step events
// ********************************************

// Send a begin step event to the tokens
TBGame.prototype._handleBeginStepEvents = function() {
	"use strict";
	var i, tok;
	if (this._numberBeginStepEvents > 0) {
		for (i=0; i<this._tokens.length; i += 1) {
			tok = this._tokens[i];
			if (tok && tok.handleBeginStep && tok.active && tok._paused <= 0) {
				if (tok.handleBeginStep(this.stepTime) === true) { return; }
			}
		}
	}
};

// Send an end step event to the tokens
TBGame.prototype._handleEndStepEvents = function() {
	"use strict";
	var i, tok;
	if (this._numberEndStepEvents > 0) {
		for (i=0; i<this._tokens.length; i += 1) {
			tok = this._tokens[i];
			if (tok && tok.handleEndStep && tok.active && tok._paused <= 0) {
				if (tok.handleEndStep(this.stepTime) === true) { return; }
			}
		}
	}
};

// ********************************************
// ** Dealing with alarm events
// ********************************************

// Initialize the alarm events
TBGame.prototype._initAlarm = function(self) {
	"use strict";
	this._alarmId = 0;
	this.clearAlarmEvents();
};

// Clears the alarm events
TBGame.prototype.clearAlarmEvents = function() {
	"use strict";
	this._alarmInfo = [];
	this._alarmAction = [];
};

// Find an alarm index
TBGame.prototype._findAlarmIndex = function(id, token) {
	"use strict";
	var i;
	if (token === undefined) { token = null; }
	for (i = 0; i < this._alarmInfo.length; i += 1) {
		if (this._alarmInfo[i].id === id && this._alarmInfo[i].token === token) { return i; }
	}
	return -1;
};

// Add a new alarm
TBGame.prototype.addAlarm = function(time, repeats, token) {
	"use strict";
	if (repeats === undefined) { repeats = 1; }
	if (token === undefined) { token = null; }
	while (this.existsAlarm(this._alarmId, token)) { this._alarmId += 1; }
	this._alarmInfo.push( { id: this._alarmId, time: time, repeats: repeats,
							token: token, timeLeft: time, repeatsLeft: repeats-1, paused: 0 } );
	this._alarmId += 1;
	return this._alarmId-1;
};

// Remove an existing alarm
TBGame.prototype.removeAlarm = function(id, token) {
	"use strict";
	var ind = this._findAlarmIndex(id, token);
	if (ind >= 0) { this._alarmInfo[ind].id = undefined; }
};

// Checks whether an alarm with the id exists
TBGame.prototype.existsAlarm = function(id, token) {
	"use strict";
	var ind = this._findAlarmIndex(id, token);
	return ind >= 0;
};

// Set a new or existing alarm
TBGame.prototype.setAlarm = function(id, time, repeats, token) {
	"use strict";
	var n = this._alarmInfo.length,
		i;
	if (repeats === undefined) { repeats = 1; }
	if (token === undefined) { token = null; }
	// Check whether it exists
	for (i = 0; i < this._alarmInfo.length; i += 1) {
		if (this._alarmInfo[i].id === id && this._alarmInfo[i].token === token) { n = i; }
	}
	// Find an unused spot
	if (n === this._alarmInfo.length) {
		for (i = 0; i < this._alarmInfo.length; i += 1) {
			if (this._alarmInfo[i].id === undefined) { n = i; }
		}
	}
	this._alarmInfo[n] = { id: id, time: time, repeats: repeats,
							token: token, timeLeft: time, repeatsLeft: repeats-1, paused: 0 };
};

// Clear an existing alarm
TBGame.prototype.clearAlarm = function(id, token) {
	"use strict";
	var ind = this._findAlarmIndex(id, token);
	if (ind >= 0) {
		this._alarmInfo[ind].timeLeft = 0;
		this._alarmInfo[ind].repeatsLeft = 0;
	}
};

// Clear all alarms
TBGame.prototype.clearAllAlarms = function() {
	"use strict";
	var i;
	for (i = 0; i < this._alarmInfo.length; i += 1) {
		this._alarmInfo[i].timeLeft = 0;
		this._alarmInfo[i].repeatsLeft = 0;
	}
};

// Get an existing alarm
TBGame.prototype.getAlarm = function(id, token) {
	"use strict";
	var ind = this._findAlarmIndex(id, token);
	if (ind >= 0) { return this._alarmInfo[ind].timeLeft; } else { return undefined; }
};

// Get an existing alarm percentage
TBGame.prototype.getAlarmPercentage = function(id, token) {
	"use strict";
	var ind = this._findAlarmIndex(id, token);
	if (ind >= 0) { return 100*this._alarmInfo[ind].timeLeft/this._alarmInfo[ind].time; } else { return undefined; }
};

// Pauses an alarm
TBGame.prototype.pauseAlarm = function(id, token) {
	"use strict";
	var ind = this._findAlarmIndex(id, token);
	if (ind >= 0) { this._alarmInfo[ind].paused += 1; }
};

// Resumes an alarm
TBGame.prototype.resumeAlarm = function(id, token) {
	"use strict";
	var ind = this._findAlarmIndex(id, token);
	if (ind >= 0) { this._alarmInfo[ind].paused = Math.max(0, this._alarmInfo[ind].paused-1); }
};

// Resumes an alarm forced
TBGame.prototype.resumeForcedAlarm = function(id, token) {
	"use strict";
	var ind = this._findAlarmIndex(id, token);
	if (ind >= 0) { this._alarmInfo[ind].paused = 0; }
};

// Returns whether the alarm is paused
TBGame.prototype.isPausedAlarm = function(id, token) {
	"use strict";
	var ind = this._findAlarmIndex(id, token);
	if (ind >= 0) { return this._alarmInfo[ind].paused > 0; } else { return false; }
};

// Pause all alarms
TBGame.prototype.pauseAllAlarms = function() {
	"use strict";
	var i;
	for (i = 0; i < this._alarmInfo.length; i += 1) {
		this._alarmInfo[i].paused += 1;
	}
};

// Resume all alarms
TBGame.prototype.resumeAllAlarms = function() {
	"use strict";
	var i;
	for (i = 0; i < this._alarmInfo.length; i += 1) {
		this._alarmInfo[i].paused = Math.max(0, this._alarmInfo[i].paused-1);
	}
};

// Resume all alarms forced
TBGame.prototype.resumeForcedAllAlarms = function() {
	"use strict";
	var i;
	for (i = 0; i < this._alarmInfo.length; i += 1) {
		this._alarmInfo[i].paused = 0;
	}
};

// Update the alarms
TBGame.prototype._updateAlarms = function(timePassed) {
	"use strict";
	var i, alarm;
	this._alarmAction.length = 0;
	for (i=0; i< this._alarmInfo.length; i += 1) {
		alarm = this._alarmInfo[i];
		if (alarm.id !== undefined && alarm.paused === 0 && (alarm.timeLeft > 0 || alarm.repeatsLeft > 0)) {
			alarm.timeLeft -= timePassed;
			if (alarm.timeLeft <= 0) {
				this._alarmAction.push({id: alarm.id, token: alarm.token});
				if (alarm.repeatsLeft > 0) {
					alarm.repeatsLeft -= 1;
					alarm.timeLeft += alarm.time;
				} else {
					alarm.timeLeft = 0;
				}
			}
		}
	}
};

// Send alarm events to the tokens
TBGame.prototype._handleAlarmEvents = function() {
	"use strict";
	var i, tok, j, act;
	this._updateAlarms(this.stepTime);
	if (this._numberAlarmEvents > 0 && this._alarmAction.length > 0) {
		for (i = 0; i < this._tokens.length; i += 1) {
			tok = this._tokens[i];
			if (tok && tok.handleAlarm && tok.active) {
				for (j = 0; j < this._alarmAction.length; j += 1) {
					act = this._alarmAction[j];
					if (act.handled !== true && (act.token === null || act.token === tok)) {
						act.handled = tok.handleAlarm(act.id);
					}
				}
			}
		}
	}
};


// ********************************************
// ** Dealing with special events
// ********************************************

// Initialize the special events
TBGame.prototype._initSpecial = function(self) {
	"use strict";
	this.clearSpecialEvents();
};

// Clear the special events
TBGame.prototype.clearSpecialEvents = function() {
	"use strict";
	this._specialAction = [];
};

// Add a special event
TBGame.prototype.addSpecial = function(id, args, token) {
	"use strict";
	var i, tok, handled;
	if (token === undefined) { token = null; }
	this._specialAction.push( {id: id, args: args, token: token } );
	// Handle the immediate events
	if (this._numberImmediateSpecialEvents > 0) {
		for (i = 0; i < this._tokens.length; i += 1) {
			tok = this._tokens[i];
			if (tok && tok.active && tok._paused <= 0 && tok.handleImmediateSpecial && (token === null || token === tok)) {
				handled = tok.handleImmediateSpecial(id, args);
				if (handled === true) { break; }
			}
		}
	}
};

// Send special events to the tokens
TBGame.prototype._handleSpecialEvents = function() {
	"use strict";
	var i, j, tok, act;
	if (this._numberSpecialEvents > 0 && this._specialAction.length > 0) {
		for (i = 0; i < this._tokens.length; i += 1) {
			tok = this._tokens[i];
			if (tok && tok.handleSpecial && tok.active && tok._paused <= 0) {
				for (j = 0; j < this._specialAction.length; j += 1) {
					act = this._specialAction[j];
					if (act.handled !== true && (act.token === null || act.token === tok)) {
						act.handled = tok.handleSpecial(act.id, act.args);
					}
				}
			}
		}
	}
	this._specialAction.length = 0;
};


// ********************************************
// ** Dealing with drawing events
// ********************************************

// Draws an element
TBGame.prototype._drawElement = function(ind) {
	"use strict";
	var element = this._elements[ind];
	if (!element.visible) { return; }
	// Set the correct canvas
	if (element.canvas !== undefined && element.canvas !== tbGraphics.canvas) {
		tbGraphics.setCanvas(element.canvas);
	}
	// Now draw it if required
	if (tbGraphics.canvas.drawTokens === false && element.forceDraw !== true) { return; }
	if (element._kind === 0) {	// Image
		if (element._paused <= 0) { element.subImage += element.animSpeed*this.stepTime/1000; }
		if (element.xscale === 1 && element.yscale === 1 && element.angle === 0) {
			if (element.alpha === 1) {
				element.image.drawSimple(element.subImage, element.x, element.y);
			} else {
				element.image.drawAlpha(element.subImage, element.x, element.y, element.alpha);
			}
		} else {
			element.image.drawExt(element.subImage, element.x, element.y, element.xscale, element.yscale, element.angle, element.alpha);
		}
	}
	if (element._kind === 1) {	// Text
		if (element.xscale === 1 && element.yscale === 1 && element.angle === 0) {
			if (element.alpha === 1) {
				element.font.drawSimple(element.text, element.x, element.y);
			} else {
				element.font.drawAlpha(element.text, element.x, element.y, element.alpha);
			}
		} else {
			element.font.drawExt(element.text, element.x, element.y, element.xscale, element.yscale, element.angle, element.alpha);
		}
	}
};

// Draws a token
TBGame.prototype._drawToken = function(ind) {
	"use strict";
	var tok = this._tokens[ind];
	if (!tok.visible) { return; }
	// Set the correct canvas
	if (tok.canvas !== undefined && tok.canvas !== tbGraphics.canvas) {
		tbGraphics.setCanvas(tok.canvas);
	}
	// Now draw it if required
	if (tbGraphics.canvas.drawTokens === false && tok.forceDraw !== true) { return; }
	if (tok.handleDraw) { return tok.handleDraw(); }
};

// Handle the drawing and send draw events to the tokens
TBGame.prototype._handleDrawEvents = function() {
	"use strict";
	var nt = 0, ne = 0;
	while (nt < this._tokens.length || ne < this._elements.length) {
		if (ne === this._elements.length) {
			if (this._drawToken(nt) === true) { return; }
			nt += 1;
		} else if (nt === this._tokens.length) {
			this._drawElement(ne);
			ne += 1;
		} else if (this._elements[ne].layer > this._tokens[nt].layer ||
					(this._elements[ne].layer === this._tokens[nt].layer &&
						this._elements[ne].depth > this._tokens[nt].depth)) {
			this._drawElement(ne);
			ne += 1;
		} else {
			if (this._drawToken(nt) === true) { return; }
			nt += 1;
		}
	}
};


// ********************************************
// ** Dealing with pausing
// ********************************************

// Initialize the pausing
TBGame.prototype._initPause = function(self) {
	"use strict";
	this._paused = 0;
	this._pausedDraw = false;
};

// Pause the loop
TBGame.prototype.pause = function(pausedDraw) {
	"use strict";
	this._paused += 1;
	if (pausedDraw === undefined) { pausedDraw = false; }
	this._pausedDraw = pausedDraw;
};

// Resume the loop
TBGame.prototype.resume = function() {
	"use strict";
	if (this._paused === 0) { return; }
	this.lastTime = Date.now(); // To avoid jumps in game time and big step time
	this._paused -= 1;
};

// Resume the loop
TBGame.prototype.resumeForced = function() {
	"use strict";
	if (this._paused === 0) { return; }
	this.lastTime = Date.now(); // To avoid jumps in game time and big step time
	this._paused = 0;
};

// Returns whether the loop is paused
TBGame.prototype.isPaused = function() {
	"use strict";
	return this._paused > 0;
};


// ********************************************
// ** Dealing with the global game loop
// ********************************************

window.__timingStartTime = 0;			// The time just before the step is started
window.__timingFinishTime = 0;			// The time just after the step is finished
window.__timingStepTime = 0;			// The time the step took
window.__timingBetweenTime = 0;			// The time between the start of the current step and the finish of the previous
window.__timingWaitTime = 0;			// The wait time when using setTimeout
window.__timingFrames = 60;				// The desired number of frames per second when using setTimeout
window.__timingInterval = 0;			// The minimal interval used in setTimeout (to give the system some time for processing)
window.__timingForceTimeout = false;	// Whether to force using setTimeout (and not requestAnimationFrame)

// Define the callback function to be called in each step
window.__timingDoAStep = function () {
	"use strict";
	// Remember the current time
	window.__timingStartTime = Date.now();
	window.__timingBetweenTime = window.__timingStartTime - window.__timingFinishTime;
	// Perform a step in the loop
	tbGame._stepLoop();
	// Remember the time when it is finished
	window.__timingFinishTime = Date.now();
	window.__timingStepTime = window.__timingFinishTime - window.__timingStartTime;
	// Set the correct wait time and requestthe next frame
	window.__timingWaitTime = Math.max(window.__timingInterval, 1000/window.__timingFrames - window.__timingStepTime);
	window.__timingRequestNextAnimationFrame(window.__timingDoAStep);
} ;

// Define our own request animation frame function
(function() {
	"use strict";
	// Default use the timeout function
	window.__timingRequestNextAnimationFrame =
		function(callback) {
			window.setTimeout(callback, window.__timingWaitTime);
		};
	// If request animation frame is supported, use that instead
	if (!window.__timingForceTimeout) {
		window.__timingRequestNextAnimationFrame = window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.__timingRequestNextAnimationFrame;
	}
}());

TBGame.prototype.supportsRequestAnimationFrame = function () {
// Returns whether the system supports the use of request animation frame (in some form)
	"use strict";
	return window.requestAnimationFrame !== undefined ||
		window.webkitRequestAnimationFrame !== undefined ||
		window.mozRequestAnimationFrame !== undefined ||
		window.msRequestAnimationFrame !== undefined ||
		window.oRequestAnimationFrame !== undefined;
};

TBGame.prototype.forceUseTimeout = function (force) {
// forces the use of the timeout function instead of request animation frame (or not)
	"use strict";
	window.__timingForceTimeout = force;
	window.__timingDefineFunction();
};

TBGame.prototype.setLoopSpeed = function (framesPerSecond) {
// Sets the number of frames per second (when requestAnimationFrame does not exist)
	"use strict";
	window.__timingFrames = framesPerSecond;
};

TBGame.prototype.setLoopInterval = function (interval) {
// Sets the minimal interval for setTimeout (when requestAnimationFrame does not exist)
	"use strict";
	window.__timingInterval = interval;
};

// Initialize the loop
TBGame.prototype._initLoop = function(self) {
	"use strict";
	// Initialize time (all in milliseconds)
	this.startTime = Date.now();				// The time the game started
	this.lastTime = this.startTime;				// The time for the last step
	this.gameTime = 0;							// The time the game has run so far (sum of step times)
	this.stepTime = 0;							// The time of the last step
	this.maxStepTime = 200;						// The maximal step time passed back in the step events
	this.totalSteps = 0;						// The total number of steps since the start
	// Start the start loading
	this.loadingMoment = "";
	// Set the first loop call using out own version of window.requestNext AnimationFram
	window.__timingRequestNextAnimationFrame(window.__timingDoAStep);
};

// Function to order the tokens and elements and clean them up
TBGame.prototype._order = function() {
	"use strict";

	function sortfunction(a, b){
		return (a.layer === b.layer) ? b.depth-a.depth :((a.layer > b.layer) ? -1 : 1);
	}

	var i, n;
	// Handle the tokens
	n = 0;
	for (i=0; i<this._tokens.length; i += 1) {
		if (this._tokens[i]) {
			// activate when new
			if (this._tokens[i]._activateNew) {
				this._tokens[i]._activateNew = false;
				this._tokens[i].active = true;
			}
			//shift it in the array
			this._tokens[n] = this._tokens[i];
			n += 1;
		}
	}
	this._tokens.length = n;
	if (this._tokenOrderChanged) {
		this._tokens.sort(sortfunction);
	}
	this._tokenOrderChanged = false;
	// Handle the elements
	n = 0;
	for (i=0; i<this._elements.length; i += 1) {
		if (this._elements[i]) {
			this._elements[n] = this._elements[i];
			n += 1;
		}
	}
	this._elements.length = n;
	if (this._elementOrderChanged) {
		this._elements.sort(sortfunction);
	}
	this._elementOrderChanged = false;
};

// Handle a time step in the loop
TBGame.prototype._stepLoop = function() {
	"use strict";
	var newTime;
	// Handle paused mode
	if (this._paused > 0) {
		if (this._pausedDraw) {
			this._order();
			this._handleDrawEvents();
		}
		return;
	}
	// Calculate the time passed
	newTime = Date.now();
	// Solve a strange bugin which the time passed becomes NaN
	if(typeof newTime !== "number"){
		newTime = this.lastTime;
	}
	this.stepTime = Math.min(this.maxStepTime, newTime - this.lastTime);
	this.gameTime += this.stepTime;
	this.totalSteps += 1;
	// Deal with loading
	if (this.loadingMoment === "") {
		this.loadingMoment = "start";
		tbLoader.startLoading(this.loadingMoment);
	}
	if (this.loadingMoment === "start" && tbLoader.complete(this.loadingMoment)) {
		this.loadingMoment = "load";
		tbLoader.startLoading(this.loadingMoment);
	}
	if (this.loadingMoment === "load" && tbLoader.complete(this.loadingMoment)) {
		this.loadingMoment = "game";
		tbLoader.startLoading(this.loadingMoment);
	}
	// Handle the sounds
	if (typeof tbAudio !== "undefined") {
		tbAudio._handleStep(this.stepTime);
	}
	// Handle the events
	this._handleBeginStepEvents();
	this._handleClickEvents();
	this._handleTouchEvents();
	this._handleKeyEvents();
	this._handleAlarmEvents();
	this._handleSpecialEvents();
	this._handleEndStepEvents();
	// Order and clean up
	this._order();
	// Finally draw
	this._handleDrawEvents();
	// Update the time
	this.lastTime = newTime;
};

// ********************************************
// ** Adding and removing tokens
// ********************************************

// Add a token to the game; the optional activate argument indicates whether to activate it immediately
TBGame.prototype.addToken = function(token, activate) {
	"use strict";
	// Fill in properties if they are missing
	if (token.group === undefined) { token.group = 0; }
	if (token.visible === undefined) { token.visible = true; }
	if (token.active === undefined) { token.active = true; }
	if (token.depth === undefined) { token.depth = 0; }
	if (token.layer === undefined) { token.layer = 0; }
	if (token._paused === undefined) { token._paused = 0; }
	if (token._tags === undefined) { token._tags = []; }
	// Set activation
	token._activateNew = false;
	if (activate !== undefined && activate === false) {
		token._activateNew = true;
		token.active = false;
	}
	this._tokens.push(token);
	this._tokenOrderChanged = true;
	this._addEventCounters(token);
	// Add it to the array
	if (token.handleAdd) {
		token.handleAdd();
	}
};

// Change the depth of a token (also when it is not in the game!)
TBGame.prototype.setTokenDepth = function(token, depth) {
	"use strict";
	if (token.depth !== depth) { this._tokenOrderChanged = true; }
	token.depth = depth;
};

// Change the layer of a token (also when it is not in the game!)
TBGame.prototype.setTokenLayer = function(token, layer) {
	"use strict";
	if (token.layer !== layer) { this._tokenOrderChanged = true; }
	token.layer = layer;
};

// Clears the tags of a token
TBGame.prototype.clearTokenTags = function(token) {
	"use strict";
	token._tags = [];
};

// Returns (a copy of) the tags of a token
TBGame.prototype.getTokenTags = function(token) {
	"use strict";
	var t, tags = [];
	if (token._tags === undefined) { token._tags = []; }
	for (t = token._tags.length-1; t >= 0; t -= 1) { tags.push(token._tags[t]); }
	return tags;
};

// Add tags to a token
TBGame.prototype.addTokenTags = function(token, tags) {
	"use strict";
	var t;
	tags = [].concat(tags);				// Such that it also works for a single value
	if (token._tags === undefined) { token._tags = []; }
	for (t = tags.length-1; t >= 0; t -= 1) {
		if (token._tags.indexOf(tags[t]) < 0) {
			token._tags.push(tags[t]);
		}
	}
};

// Remove tags from a token
TBGame.prototype.removeTokenTags = function(token, tags) {
	"use strict";
	var t, ind;
	tags = [].concat(tags);				// Such that it also works for a single value
	if (token._tags === undefined) { token._tags = []; }
	for (t = tags.length-1; t >= 0; t -= 1) {
		ind = token._tags.indexOf(tags[t]);
		if (ind >= 0) { token._tags.splice(ind, 1); }
	}
};

// Returns all tokens that contain the tag or satisfy the select function
TBGame.prototype.findTokens = function (arg) {
	"use strict";
	var tokens = [],
		i, token;
	if (arg === undefined || arg === "all" || arg === "master") {
		for (i = 0; i < this._tokens.length; i += 1) {
			token = this._tokens[i];
			if (token !== undefined) { tokens.push(token); }
		}
	} else if (typeof arg === "function" ) {
		for (i = 0; i < this._tokens.length; i += 1) {
			token = this._tokens[i];
			if (token !== undefined && arg(token)) { tokens.push(token); }
		}
	} else {
		for (i = 0; i < this._tokens.length; i += 1) {
			token = this._tokens[i];
			if (token !== undefined && token._tags.indexOf(arg) >= 0) { tokens.push(token); }
		}
	}
	return tokens;
};

// Find all tokens (for compatibility)
TBGame.prototype.findAllTokens = function () {
	"use strict";
	return this.findTokens();
};

// Pause a single token
TBGame.prototype.pauseToken = function(token) {
	"use strict";
	token._paused += 1;
};

// Pause a number of tokens
TBGame.prototype.pauseTokens = function(arg) {
	"use strict";
	var i, tokens = this.findTokens(arg);
	for (i = 0; i < tokens.length; i += 1) { this.pauseToken(tokens[i]); }
};

// Resume a single token
TBGame.prototype.resumeToken = function(token) {
	"use strict";
	token._paused = Math.max(0, token._paused-1);
};

// Resume a number of tokens
TBGame.prototype.resumeTokens = function(arg) {
	"use strict";
	var i, tokens = this.findTokens(arg);
	for (i = 0; i < tokens.length; i += 1) { this.resumeToken(tokens[i]); }
};

// Force resume a single token
TBGame.prototype.resumeForcedToken = function(token) {
	"use strict";
	token._paused = 0;
};

// Force resume a number of tokens
TBGame.prototype.resumeForcedTokens = function(arg) {
	"use strict";
	var i, tokens = this.findTokens(arg);
	for (i = 0; i < tokens.length; i += 1) { this.resumeForcedToken(tokens[i]); }
};

// Remove a token from the game
TBGame.prototype.removeToken = function(token) {
	"use strict";
	var ind = this._tokens.indexOf(token);
	if (ind < 0) { return; }
	if (this._tokens[ind].handleRemove) {
		this._tokens[ind].handleRemove();
	}
	this._subtractEventCounters(this._tokens[ind]);
	this._tokens[ind] = undefined;
};

// Removes all tokens that satisfy the argument (tag or function or nothing)
TBGame.prototype.removeTokens = function (arg) {
	"use strict";
	var i, tokens = this.findTokens(arg);
	for (i = 0; i < tokens.length; i += 1) { this.removeToken(tokens[i]); }
};

// Remove all tokens (for compatibility)
TBGame.prototype.removeAllTokens = function () {
	"use strict";
	this.removeTokens();
};

// Counting all tokens that satisfy the argument (tag or function or nothing)
TBGame.prototype.countTokens = function (arg) {
	"use strict";
	var tokens = this.findTokens(arg);
	return tokens.length;
};

// Count all tokens (for compatibility)
TBGame.prototype.countAllTokens = function () {
	"use strict";
	this.countTokens();
};


// ********************************************
// ** Adding and removing images
// ********************************************

// Add an image to the game
TBGame.prototype.addImage = function(image, subImage, animSpeed, x, y, depth, layer) {
	"use strict";
	return this.addImageExt(image, subImage, animSpeed, x, y, 1, 1, 0, 1, depth, layer);
};

// Add a simple image to the game
TBGame.prototype.addImageSimple = function(image, x, y, depth, layer) {
	"use strict";
	return this.addImageExt(image, 0, 0, x, y, 1, 1, 0, 1, depth, layer);
};

// Add an image with alpha value to the game
TBGame.prototype.addImageAlpha = function(image, subImage, animSpeed, x, y, alpha, depth, layer) {
	"use strict";
	return this.addImageExt(image, subImage, animSpeed, x, y, 1, 1, 0, alpha, depth, layer);
};

// Add an image with alpha and transformation to the game
TBGame.prototype.addImageExt = function(image, subImage, animSpeed, x, y, xscale, yscale, angle, alpha, depth, layer) {
	"use strict";
	if (layer === undefined) { layer = 0; }
	this._elements.push({ _kind: 0, image: image, subImage: subImage, animSpeed: animSpeed, visible: true,
						x: x, y: y, xscale: xscale, yscale: yscale, angle: angle, alpha: alpha, depth: depth, layer: layer,
						_paused: 0, _tags: [] });
	this._elementOrderChanged = true;
	return this._elements[this._elements.length-1];
};

// Add an existing image token to the game
TBGame.prototype.addImageToken = function(imageToken) {
	"use strict";
	this._elements.push(imageToken);
	this._elementOrderChanged = true;
};

// Change the depth of an image token
TBGame.prototype.setImageDepth = function(imageToken, depth) {
	"use strict";
	this._elementOrderChanged = (imageToken.depth !== depth);
	imageToken.depth = depth;
};

// Change the layer of an image token
TBGame.prototype.setImageLayer = function(imageToken, layer) {
	"use strict";
	this._elementOrderChanged = (imageToken.layer !== layer);
	imageToken.layer = layer;
};

// Clears the tags of an image token
TBGame.prototype.clearImageTags = function(imageToken) {
	"use strict";
	imageToken._tags = [];
};

// Returns (a copy of) the tags of an image token
TBGame.prototype.getImageTags = function(imageToken) {
	"use strict";
	var t, tags = [];
	if (imageToken._tags === undefined) { imageToken._tags = []; }
	for (t = imageToken._tags.length-1; t >= 0; t -= 1) { tags.push(imageToken._tags[t]); }
	return tags;
};

// Add tags to an image token
TBGame.prototype.addImageTags = function(imageToken, tags) {
	"use strict";
	var t;
	tags = [].concat(tags);				// Such that it also works for a single value
	if (imageToken._tags === undefined) { imageToken._tags = []; }
	for (t = tags.length-1; t >= 0; t -= 1) {
		if (imageToken._tags.indexOf(tags[t]) < 0) {
			imageToken._tags.push(tags[t]);
		}
	}
};

// Remove tags from an image token
TBGame.prototype.removeImageTags = function(imageToken, tags) {
	"use strict";
	var t, ind;
	tags = [].concat(tags);				// Such that it also works for a single value
	if (imageToken._tags === undefined) { imageToken._tags = []; }
	for (t = tags.length-1; t >= 0; t -= 1) {
		ind = imageToken._tags.indexOf(tags[t]);
		if (ind >= 0) { imageToken._tags.splice(ind, 1); }
	}
};

// Returns all images that contain the tag or satisfy the select function
TBGame.prototype.findImages = function (arg) {
	"use strict";
	var imageTokens = [],
		i, imageToken;
	if (arg === undefined || arg === "all" || arg === "master") {
		for (i = 0; i < this._elements.length; i += 1) {
			imageToken = this._elements[i];
			if (imageToken !== undefined && imageToken._kind === 0) { imageTokens.push(imageToken); }
		}
	} else if (typeof arg === "function" ) {
		for (i = 0; i < this._elements.length; i += 1) {
			imageToken = this._elements[i];
			if (imageToken !== undefined && imageToken._kind === 0 && arg(imageToken)) { imageTokens.push(imageToken); }
		}
	} else {
		for (i = 0; i < this._elements.length; i += 1) {
			imageToken = this._elements[i];
			if (imageToken !== undefined && imageToken._kind === 0 && imageToken._tags.indexOf(arg) >= 0) { imageTokens.push(imageToken); }
		}
	}
	return imageTokens;
};

// Find all image tokens (for compatibility)
TBGame.prototype.findAllImages = function () {
	"use strict";
	return this.findImages();
};

// Pause a single image token
TBGame.prototype.pauseImage = function(imageToken) {
	"use strict";
	imageToken._paused += 1;
};

// Pause a number of image tokens
TBGame.prototype.pauseImages = function(arg) {
	"use strict";
	var i, imageTokens = this.findImages(arg);
	for (i = 0; i < imageTokens.length; i += 1) { this.pauseImage(imageTokens[i]); }
};

// Resume a single image token
TBGame.prototype.resumeImage = function(imageToken) {
	"use strict";
	imageToken._paused = Math.max(0, imageToken._paused-1);
};

// Resume a number of image tokens
TBGame.prototype.resumeImages = function(arg) {
	"use strict";
	var i, imageTokens = this.findImages(arg);
	for (i = 0; i < imageTokens.length; i += 1) { this.resumeImage(imageTokens[i]); }
};

// Force resume a single image token
TBGame.prototype.resumeForcedImage= function(imageToken) {
	"use strict";
	imageToken._paused = 0;
};

// Force resume a number of images token
TBGame.prototype.resumeForcedImages = function(arg) {
	"use strict";
	var i, imageTokens = this.findImages(arg);
	for (i = 0; i < imageTokens.length; i += 1) { this.resumeForcedImage(imageTokens[i]); }
};

// Remove an image token from the game
TBGame.prototype.removeImage = function(imageToken) {
	"use strict";
	var ind = this._elements.indexOf(imageToken);
	if (ind < 0) { return; }
	this._elements[ind] = undefined;
};

// Removes all image tokens that satisfy the argument (tag or function or nothing)
TBGame.prototype.removeImages = function (arg) {
	"use strict";
	var i, imageTokens = this.findImages(arg);
	for (i = 0; i < imageTokens.length; i += 1) { this.removeImage(imageTokens[i]); }
};

// Remove all image tokens (for compatibility)
TBGame.prototype.removeAllImages = function () {
	"use strict";
	this.removeImages();
};

// Counting all image tokens that satisfy the argument (tag or function or nothing)
TBGame.prototype.countImages = function (arg) {
	"use strict";
	var imageTokens = this.findImages(arg);
	return imageTokens.length;
};

// Count all image tokens (for compatibility)
TBGame.prototype.countAllImages = function () {
	"use strict";
	this.countImages();
};

// ********************************************
// ** Adding and removing texts
// ********************************************

// Add a simple text to the game
TBGame.prototype.addTextSimple = function(text, font, x, y, depth, layer) {
	"use strict";
	return this.addTextExt(text, font, x, y, 1, 1, 0, 1, depth, layer);
};

// Add a text with alpha value to the game
TBGame.prototype.addTextAlpha = function(text, font, x, y, alpha, depth, layer) {
	"use strict";
	return this.addTextExt(text, font, x, y, 1, 1, 0, alpha, depth, layer);
};

// Add a text with alpha and transformation to the game
TBGame.prototype.addTextExt = function(text, font, x, y, xscale, yscale, angle, alpha, depth, layer) {
	"use strict";
	if (layer === undefined) { layer = 0; }
	this._elements.push({ _kind: 1, text: text, font: font, visible: true,
						x: x, y: y, xscale: xscale, yscale: yscale, angle: angle, alpha: alpha, depth: depth, layer: layer,
						_tags: [] });
	this._elementOrderChanged = true;
	return this._elements[this._elements.length-1];
};

// Add an existing text token to the game
TBGame.prototype.addTextToken = function(textToken) {
	"use strict";
	this._elements.push(textToken);
	this._elementOrderChanged = true;
};

// Change the depth of a text token
TBGame.prototype.setTextDepth = function(textToken, depth) {
	"use strict";
	this._elementOrderChanged = (textToken.depth !== depth);
	textToken.depth = depth;
};

// Change the layer of a text token
TBGame.prototype.setTextLayer = function(textToken, layer) {
	"use strict";
	this._elementOrderChanged = (textToken.layer !== layer);
	textToken.layer = layer;
};

// Clears the tags of a text token
TBGame.prototype.clearTextTags = function(textToken) {
	"use strict";
	textToken._tags = [];
};

// Returns (a copy of) the tags of a text token
TBGame.prototype.getTextTags = function(textToken) {
	"use strict";
	var t, tags = [];
	if (textToken._tags === undefined) { textToken._tags = []; }
	for (t = textToken._tags.length-1; t >= 0; t -= 1) { tags.push(textToken._tags[t]); }
	return tags;
};

// Add tags to a text token
TBGame.prototype.addTextTags = function(textToken, tags) {
	"use strict";
	var t;
	tags = [].concat(tags);				// Such that it also works for a single value
	if (textToken._tags === undefined) { textToken._tags = []; }
	for (t = tags.length-1; t >= 0; t -= 1) {
		if (textToken._tags.indexOf(tags[t]) < 0) {
			textToken._tags.push(tags[t]);
		}
	}
};

// Remove tags from a text token
TBGame.prototype.removeTextTags = function(textToken, tags) {
	"use strict";
	var t, ind;
	tags = [].concat(tags);				// Such that it also works for a single value
	if (textToken._tags === undefined) { textToken._tags = []; }
	for (t = tags.length-1; t >= 0; t -= 1) {
		ind = textToken._tags.indexOf(tags[t]);
		if (ind >= 0) { textToken._tags.splice(ind, 1); }
	}
};

// Returns all texts that contain the tag or satisfy the select function
TBGame.prototype.findTexts = function (arg) {
	"use strict";
	var textTokens = [],
		i, textToken;
	if (arg === undefined || arg === "all" || arg === "master") {
		for (i = 0; i < this._elements.length; i += 1) {
			textToken = this._elements[i];
			if (textToken !== undefined && textToken._kind === 1) { textTokens.push(textToken); }
		}
	} else if (typeof arg === "function" ) {
		for (i = 0; i < this._elements.length; i += 1) {
			textToken = this._elements[i];
			if (textToken !== undefined && textToken._kind === 1 && arg(textToken)) { textTokens.push(textToken); }
		}
	} else {
		for (i = 0; i < this._elements.length; i += 1) {
			textToken = this._elements[i];
			if (textToken !== undefined && textToken._kind === 1 && textToken._tags.indexOf(arg) >= 0) { textTokens.push(textToken); }
		}
	}
	return textTokens;
};

// Find all text tokens (for compatibility)
TBGame.prototype.findAllTexts = function () {
	"use strict";
	return this.findTexts();
};

// Remove a text token from the game
TBGame.prototype.removeText = function(textToken) {
	"use strict";
	var ind = this._elements.indexOf(textToken);
	if (ind < 0) { return; }
	this._elements[ind] = undefined;
};

// Removes all text tokens that satisfy the argument (tag or function or nothing)
TBGame.prototype.removeTexts = function (arg) {
	"use strict";
	var i, textTokens = this.findTexts(arg);
	for (i = 0; i < textTokens.length; i += 1) { this.removeText(textTokens[i]); }
};

// Remove all text tokens (for compatibility)
TBGame.prototype.removeAllTexts = function () {
	"use strict";
	this.removeTexts();
};

// Counting all text tokens that satisfy the argument (tag or function or nothing)
TBGame.prototype.countTexts = function (arg) {
	"use strict";
	var textTokens = this.findTexts(arg);
	return textTokens.length;
};

// Count all text tokens (for compatibility)
TBGame.prototype.countAllTexts = function () {
	"use strict";
	this.countTexts();
};


// Now generate the tbGame object
var tbGame = new TBGame(mainCanvas);
/////////////////////////////////////////////////////////////
// tbConstants: The engine part dealing constants and basic functions
//
// Copyright 2013 CoolGames
// Last Changed: 14-5-2013
/////////////////////////////////////////////////////////////


var tbKeyCodes = {
	vkCancel: 3,
	vkHelp: 6,
	vkBackspace: 8,
	vkTab: 9,
	vkClear: 12,
	vkReturn: 13,
	vkEnter: 14,
	vkShift: 16,
	vkControl: 17,
	vkAlt: 18,
	vkPause: 19,
	vkCapslock: 20,
	vkEscape: 27,
	vkSpace: 32,
	vkPageup: 33,
	vkPagedown: 34,
	vkEnd: 35,
	vkHome: 36,
	vkLeft: 37,
	vkUp: 38,
	vkRight: 39,
	vkDown: 40,
	vkPrintscreen: 44,
	vkInsert: 45,
	vkDelete: 46,
	vk0: 48,
	vk1: 49,
	vk2: 50,
	vk3: 51,
	vk4: 52,
	vk5: 53,
	vk6: 54,
	vk7: 55,
	vk8: 56,
	vk9: 57,
	vkSemicolon: 59,
	vkEquals: 61,
	vkA: 65,
	vkB: 66,
	vkC: 67,
	vkD: 68,
	vkE: 69,
	vkF: 70,
	vkG: 71,
	vkH: 72,
	vkI: 73,
	vkJ: 74,
	vkK: 75,
	vkL: 76,
	vkM: 77,
	vkN: 78,
	vkO: 79,
	vkP: 80,
	vkQ: 81,
	vkR: 82,
	vkS: 83,
	vkT: 84,
	vkU: 85,
	vkV: 86,
	vkW: 87,
	vkX: 88,
	vkY: 89,
	vkZ: 90,
	vkContextmenu: 93,
	vkNumpad0: 96,
	vkNumpad1: 97,
	vkNumpad2: 98,
	vkNumpad3: 99,
	vkNumpad4: 100,
	vkNumpad5: 101,
	vkNumpad6: 102,
	vkNumpad7: 103,
	vkNumpad8: 104,
	vkNumpad9: 105,
	vkMultiply: 106,
	vkAdd: 107,
	vkSeparator: 108,
	vkSubtract: 109,
	vkDecimal: 110,
	vkDivide: 111,
	vkF1: 112,
	vkF2: 113,
	vkF3: 114,
	vkF4: 115,
	vkF5: 116,
	vkF6: 117,
	vkF7: 118,
	vkF8: 119,
	vkF9: 120,
	vkF10: 121,
	vkF11: 122,
	vkF12: 123,
	vkF13: 124,
	vkF14: 125,
	vkF15: 126,
	vkF16: 127,
	vkF17: 128,
	vkF18: 129,
	vkF19: 130,
	vkF20: 131,
	vkF21: 132,
	vkF22: 133,
	vkF23: 134,
	vkF24: 135,
	vkNumlock: 144,
	vkScrolllock: 145,
	vkComma: 188,
	vkPeriod: 190,
	vkSlash: 191,
	vkBackquote: 192,
	vkOpenbracket: 219,
	vkBackslash: 220,
	vkClosebracket: 221,
	vkQuote: 222,
	vkMeta: 224
};
/////////////////////////////////////////////////////////////
// tbMasks: The engine part dealing collision masks
//
// Copyright 2013 CoolGames
// Last Changed: 9-9-2013
/////////////////////////////////////////////////////////////

// The mask constants
var maskUndefined = -1;
var maskPoint = 0;
var maskLine = 1;
var maskRectangle = 2;
var maskDisk = 3;
var maskPolygon = 4;

// The constructor for the mask
var tbMask = function(kind, args) {
	"use strict";
	var i;
	this.kind = kind;									// The kind of mask
	this.polygon = null;								// The mask area object (depending on the kind)
	switch (this.kind) {
		case maskPoint:
			this.polygon = {x: [args.x], y: [args.y]};
			this.bBoxLeft = args.x;
			this.bBoxTop = args.y;
			this.bBoxRight = args.x;
			this.bBoxBottom = args.y;
			break;
		case maskRectangle:
			this.polygon = {x: [args.x, args.x+args.w-1, args.x+args.w-1, args.x, args.x],
								y: [args.y, args.y, args.y+args.h-1, args.y+args.h-1, args.y]};
			this.bBoxLeft = args.x;
			this.bBoxTop = args.y;
			this.bBoxRight = args.x+args.w-1;
			this.bBoxBottom = args.y+args.h-1;
			break;
		case maskDisk:
			this.polygon = {x: [], y: []};
			this.bBoxLeft = args.x-args.r;
			this.bBoxTop = args.y-args.r;
			this.bBoxRight = args.x+args.r;
			this.bBoxBottom = args.y+args.r;
			break;
		case maskLine:
			this.polygon = {x: [args.x1, args.x2], y: [args.y1, args.y2]};
			this.bBoxLeft = Math.min(args.x1, args.x2);
			this.bBoxTop = Math.min(args.y1, args.y2);
			this.bBoxRight = Math.max(args.x1, args.x2);
			this.bBoxBottom = Math.max(args.y1, args.y2);
			break;
		case maskPolygon:
			this.polygon = {x: [], y: []};
			this.bBoxLeft = args.x[0]; this.bBoxTop = args.y[0]; this.bBoxRight = args.x[0]; this.bBoxBottom = args.y[0];
			for (i=0; i< args.x.length; i += 1) {
				this.polygon.x.push(args.x[i]);
				this.polygon.y.push(args.y[i]);
				this.bBoxLeft = Math.min(this.bBoxLeft,args.x[i]);
				this.bBoxTop = Math.min(this.bBoxTop,args.y[i]);
				this.bBoxRight = Math.max(this.bBoxRight,args.x[i]);
				this.bBoxBottom = Math.max(this.bBoxBottom,args.y[i]);
			}
			this.polygon.x.push(args.x[0]);
			this.polygon.y.push(args.y[0]);
			break;
		default:
			this.bBoxLeft = 0;
			this.bBoxTop = 0;
			this.bBoxRight = -1;
			this.bBoxBottom = -1;
	}
};

// Create a point mask
var tbMaskPoint = function(x, y) {
	"use strict";
	return new tbMask(maskPoint, {x: x, y: y});
};

// Create a rectangle mask
var tbMaskRectangle = function(x, y, w, h) {
	"use strict";
	return new tbMask(maskRectangle, {x: x, y: y, w: w, h: h});
};

// Create an disk mask
var tbMaskDisk = function(x, y, r) {
	"use strict";
	return new tbMask(maskDisk, {x: x, y: y, r: r});
};

// Create a line segment mask
var tbMaskLine = function(x1, y1, x2, y2) {
	"use strict";
	return new tbMask(maskLine, {x1: x1, y1: y1, x2: x2, y2: y2});
};

// Create a triangular mask
var tbMaskTriangle = function(x1, y1, x2, y2, x3, y3) {
	"use strict";
	return new tbMask(maskPolygon, {x: [x1, x2, x3], y: [y1, y2, y3] });
};

// Create a polygonal mask
var tbMaskPolygon = function(x, y) {
	"use strict";
	return new tbMask(maskPolygon, {x: x, y: y});
};

// Create a rectangle mask for a sub-image
var tbMaskSubImage = function(image, number) {
	"use strict";
	// Get the number in range
	number = (Math.round(number) % image.number + image.number) % image.number;
	// Compute the mask
	return new tbMask(maskRectangle, {x: image.subXOff[number]-image.xOrigin,
										y: image.subYOff[number]-image.yOrigin,
										w: image.subW[number],
										h: image.subH[number]});
};

// Create a rectangle mask for an image
var tbMaskImage = function(image) {
	"use strict";
	var x1 = 1000000, x2 = -1000000, y1 = 1000000, y2 = -1000000,
		number, nx1, nx2, ny1, ny2;
	for (number=0; number<image.number; number += 1) {
		nx1 = image.subXOff[number]-image.xOrigin;
		nx2 = nx1 + image.subW[number] - 1;
		ny1 = image.subYOff[number]-image.yOrigin;
		ny2 = ny1 + image.subH[number] - 1;
		if (nx1 < x1) { x1 = nx1; }
		if (nx2 > x2) { x2 = nx2; }
		if (ny1 < y1) { y1 = ny1; }
		if (ny2 > y2) { y2 = ny2; }
	}
	return new tbMask(maskRectangle, {x: x1, y: y1, w: x2-x1+1, h:y2-y1+1});
};


//
// Transformations. All these methods return a new mask. They do not change the current mask
//

tbMask.prototype.clone = function() {
	"use strict";
	var mask = new tbMask(maskUndefined,{ }),
		i;
	mask.kind = this.kind;
	mask.bBoxLeft = this.bBoxLeft;
	mask.bBoxRight = this.bBoxRight;
	mask.bBoxTop = this.bBoxTop;
	mask.bBoxBottom = this.bBoxBottom;
	mask.polygon = {x: [], y: []};
	for (i=0; i<this.polygon.x.length; i += 1) { mask.polygon.x[i] = this.polygon.x[i]; }
	for (i=0; i<this.polygon.y.length; i += 1) { mask.polygon.y[i] = this.polygon.y[i]; }
	return mask;
};

tbMask.prototype.translate = function(tx, ty) {
	"use strict";
	var mask = this.clone(),
		i;
	mask.bBoxLeft += tx;
	mask.bBoxRight += tx;
	mask.bBoxTop += ty;
	mask.bBoxBottom += ty;
	for (i=0; i<mask.polygon.x.length; i += 1) { mask.polygon.x[i] += tx; }
	for (i=0; i<mask.polygon.y.length; i += 1) { mask.polygon.y[i] += ty; }
	return mask;
};

tbMask.prototype.scale = function(sc) {
	"use strict";
	var mask = this.clone(),
		i;
	mask.bBoxLeft *= sc;
	mask.bBoxRight *= sc;
	mask.bBoxTop *= sc;
	mask.bBoxBottom *= sc;
	for (i=0; i<mask.polygon.x.length; i += 1) { mask.polygon.x[i] *= sc; }
	for (i=0; i<mask.polygon.y.length; i += 1) { mask.polygon.y[i] *= sc; }
	return mask;
};

tbMask.prototype.rotate = function(angle) {
	"use strict";
	var point0, point1, r, center, pointx, pointy, i;
	switch (this.kind) {
		case maskPoint:
			point0 = new tbVector(this.polygon.x[0],this.polygon.y[0]);
			point0 = point0.rotate(angle);
			return tbMaskPoint(point0.x,point0.y);
			break;
		case maskLine:
			point0 = new tbVector(this.polygon.x[0],this.polygon.y[0]);
			point0 = point0.rotate(angle);
			point1 = new tbVector(this.polygon.x[1],this.polygon.y[1]);
			point1 = point1.rotate(angle);
			return tbMaskLine(point0.x,point0.y,point1.x,point1.y);
			break;
		case maskDisk:
			r = (this.bBoxRight-this.bBoxLeft)/2;
			center = new tbVector(this.bBoxLeft+r,this.bBoxTop+r);
			center = center.rotate(angle);
			return tbMaskDisk(center.x,center.y,r);
			break;
		default:
			pointx = [];
			pointy = [];
			for (i=0; i<this.polygon.x.length-1; i += 1) {
				point0 = new tbVector(this.polygon.x[i],this.polygon.y[i]);
				point0 = point0.rotate(angle);
				pointx.push(point0.x);
				pointy.push(point0.y);
			}
			return tbMaskPolygon(pointx,pointy);
			break;
	}
};


//
// Collision checking, using SAT method
//

// Project a polygonal mask placed at x,y on the vector
tbMask.prototype._project = function(x,y,axis) {
	"use strict";
	var v = new tbVector(0,0),
		scalar,
		minVal = 1000000000,
		maxVal = -10000000000,
		i;
	for (i=0; i < this.polygon.x.length; i += 1) {
		v.x = x + this.polygon.x[i];
		v.y = y + this.polygon.y[i];
		scalar = v.dot(axis);
		minVal = Math.min(minVal,scalar);
		maxVal = Math.max(maxVal,scalar);
	}
	return {min: minVal, max:maxVal};
};

// Return the axis for the polygon mask
tbMask.prototype._getAxes = function() {
	"use strict";
	var v1 = new tbVector(0,0),
		v2 = new tbVector(0,0),
		axes = [],
		i;
	for (i=0; i < this.polygon.x.length-1; i += 1) {
		v1.x = this.polygon.x[i];
		v1.y = this.polygon.y[i];
		v2.x = this.polygon.x[i+1];
		v2.y = this.polygon.y[i+1];
		axes.push(v1.subtract(v2).normal());
	}
	return axes;
};

// Determines whether this mask at position x,y collides with mask at position mX, mY
tbMask.prototype.collisionMask = function(x, y, mask, mX, mY) {
	"use strict";
	var r, axes, pr1, pr2, i;
	// First check the bounding box
	if (mX + mask.bBoxRight < x+this.bBoxLeft || mX + mask.bBoxLeft > x+this.bBoxRight) { return false; }
	if (mY + mask.bBoxBottom < y+this.bBoxTop || mY + mask.bBoxTop > y+this.bBoxBottom) { return false; }
	// Now do the easy cases
	if (this.kind === maskRectangle && mask.kind === maskRectangle) {
		return true;
	}
	if (mask.kind === maskDisk) {
		r = (mask.bBoxRight-mask.bBoxLeft)/2;
		return this.collisionDisk(x,y,mX+mask.bBoxLeft+r,mY+mask.bBoxTop+r,r);
	}
	if (this.kind === maskDisk) {
		r = (this.bBoxRight-this.bBoxLeft)/2;
		return mask.collisionDisk(mX,mY,x+this.bBoxLeft+r,y+this.bBoxTop+r,r);
	}
	if (mask.kind === maskPoint) {
		return this.collisionPoint(x,y,mX+mask.bBoxLeft,mY+mask.bBoxTop);
	}
	if (this.kind === maskPoint) {
		return mask.collisionPoint(mX,mY,x+this.bBoxLeft,y+this.bBoxTop);
	}
	// General case
	axes = this._getAxes().concat(mask._getAxes());
	for (i=0; i<axes.length; i += 1) {
		pr1 = this._project(x,y,axes[i]);
		pr2 = mask._project(mX,mY,axes[i]);
		if (pr1.max < pr2.min || pr2.max < pr1.min) { return false; }
	}
	return true;
};

// Determine whether the mask at position x,y collides with a disk
tbMask.prototype.collisionDisk = function(x, y, colX, colY, colR) {
	"use strict";
	var dx, dy, r, axes, nx, ny, nd, i, dist, v1, v2, scalar, pr1, pr2;
	// First check the bounding box
	if (colX+colR < x+this.bBoxLeft || colX-colR > x+this.bBoxRight) { return false; }
	if (colY+colR < y+this.bBoxTop || colY-colR > y+this.bBoxBottom) { return false; }
	// Now do precise checking
	switch (this.kind) {
		case maskPoint:
			dx = colX-(x+this.bBoxLeft);
			dy = colY-(y+this.bBoxTop);
			return dx*dx+dy*dy <= colR*colR;
			break;
		case maskDisk:
			r = (this.bBoxRight-this.bBoxLeft)/2;
			dx = colX-(x+this.bBoxLeft+r);
			dy = colY-(y+this.bBoxTop+r);
			return dx*dx+dy*dy <= (r+colR)*(r+colR);
			break;
		default:
			axes = this._getAxes();
			// Find nearest point on polygon
			nx = 0; ny = 0; nd = 1000000000;
			for (i=0; i< this.polygon.x.length; i += 1)
			{
				dx = x+this.polygon.x[i] - colX;
				dy = y+this.polygon.y[i] - colY;
				dist = dx*dx+dy*dy;
				if (dist<=nd) { nx = x+this.polygon.x[i]; ny = y+this.polygon.y[i]; nd = dist; }
			}
			v1 = new tbVector(colX,colY);
			v2 = new tbVector(nx,ny);
			axes.push(v1.subtract(v2).normalize());
			// Now do the projections
			for (i=0; i<axes.length; i += 1) {
				scalar = v1.dot(axes[i]);
				pr1 = {min: scalar-colR, max:scalar+colR};
				pr2 = this._project(x,y,axes[i]);
				if (pr1.max < pr2.min || pr2.max < pr1.min) { return false; }
			}
			return true;
			break;
	}
};

// Determine whether the mask at position x,y collides with a point
tbMask.prototype.collisionPoint = function(x, y, colX, colY) {
	"use strict";
	var r, dx, dy, x1, y1, x2, y2, yy, axes, v, pr1, pr2, i;
	// First check the bounding box
	if (colX < x+this.bBoxLeft || colX > x+this.bBoxRight) { return false; }
	if (colY < y+this.bBoxTop || colY > y+this.bBoxBottom) { return false; }
 	// Now do precise checking
	switch (this.kind) {
		case maskPoint:
		case maskRectangle:
			return true;
			break;
		case maskDisk:
			r = (this.bBoxRight-this.bBoxLeft)/2;
			dx = colX-(x+this.bBoxLeft+r);
			dy = colY-(y+this.bBoxTop+r);
			return dx*dx+dy*dy <= r*r;
			break;
		case maskLine:
			x1 = x + this.polygon.x[0];
			y1 = y + this.polygon.y[0];
			x2 = x + this.polygon.x[1];
			y2 = y + this.polygon.y[1];
			if (colX === x1) { return (colY === y1); }
			if (colX === x2) { return (colY === y2); }
			yy = y1 + (colX-x1)*(y2-y1)/(x2-x1);
			return (Math.abs(yy-colY) < 1);
			break;
		case maskPolygon:
			axes = this._getAxes();
			for (i=0; i<axes.length; i += 1) {
				v = new tbVector(colX,colY);
				pr1 = v.dot(axes[i]);
				pr2 = this._project(x,y,axes[i]);
				if (pr1 < pr2.min || pr2.max < pr1) { return false; }
			}
			return true;
			break;
		default:
			return false;
	}
};

// Draw the mask (for testing)
tbMask.prototype.draw = function(x, y, color) {
	"use strict";
	var context = tbGraphics.context,
		r, i;
	context.fillStyle = color;
	context.strokeStyle = color;
	switch (this.kind) {
		case maskPoint:
			context.fillRect(x+this.bBoxLeft-1, y+this.bBoxTop-1, 3, 3);
			break;
		case maskRectangle:
			context.fillRect(x+this.bBoxLeft, y+this.bBoxTop, this.bBoxRight-this.bBoxLeft+1, this.bBoxBottom-this.bBoxTop+1);
			break;
		case maskDisk:
			r = (this.bBoxRight-this.bBoxLeft)/2;
			context.beginPath();
			context.arc(x+this.bBoxLeft+r,y+this.bBoxTop+r,r,0,2 * Math.PI, false);
			context.closePath();
			context.fill();
			break;
		case maskLine:
			context.beginPath();
			context.moveTo(x + this.polygon.x[0],y + this.polygon.y[0]);
			context.lineTo(x + this.polygon.x[1],y + this.polygon.y[1]);
			context.stroke();
			break;
		case maskPolygon:
			context.beginPath();
			context.moveTo(x + this.polygon.x[0],y + this.polygon.y[0]);
			for (i=1; i<this.polygon.x.length-1; i += 1) {
				context.lineTo(x + this.polygon.x[i],y + this.polygon.y[i]);
			}
			context.closePath();
			context.fill();
			break;
	}
};

// Draw the bounding box of the mask (for testing)
tbMask.prototype.drawBox = function(x, y, color) {
	"use strict";
	var context = tbGraphics.context;
	context.strokeStyle = color;
	context.strokeRect(x+this.bBoxLeft, y+this.bBoxTop, this.bBoxRight-this.bBoxLeft+1, this.bBoxBottom-this.bBoxTop+1);
};


/////////////////////////////////////////////////////////////
// tbTimeLine: The engine part dealing with time lines that
// can perform actions at certain moments in time.
//
// Copyright 2013 CoolGames
// Last Changed: 9-9-2013
/////////////////////////////////////////////////////////////


var tbTimeLine = function() {
// The constructor for the time line object
	// A time line is a token so we nee some properties used by the engine
	"use strict";
	this.depth = 10000000;				// Handle as early as possible
	this.visible = false;
	this.active = true;
	this.group = "Engine";
	// Own properties
	this._moments = [];					// The moments at which actions must be performed
	this._running = false;				// Whether the time line is running
	this._paused = false;				// Whether the time line is paused
	this._loop = false;					// Whether to loop
	this._speed = 1;					// Speed with which to run
	this._lastTime = -1;				// The previously handled time
	this._nextMoment = -1000000;		// The next moment to handle
};


//
// Help methods
//

tbTimeLine.prototype._sort = function() {
// Function to sort the moments
	"use strict";

	var sortfunction = function (a, b) {
		return (a.moment - b.moment);
	};
	
	this._moments.sort(sortfunction);
};


//
// Maintaining the time line
//

tbTimeLine.prototype.clone = function() {
// Returns a clone of the time line
	"use strict";
	var res = new tbTimeLine(),
		i;
	for (i = 0; i < this._moments.length; i += 1) {
		res._moments.push( { moment: this._moments[i].moment, action: this._moments[i].action } );
	}
	res._loop = this._loop;
	return res;
};

tbTimeLine.prototype.merge = function(timeLine) {
// Merges the moments of the time line into the current one
	"use strict";
	var i;
	for (i = 0; i < timeLine._moments.length; i += 1) {
		this._moments.push( { moment: timeLine._moments[i].moment, action: timeLine._moments[i].action } );
	}
	this._sort();
	this._nextMoment = -1000000;  // invalidate next moment
};

tbTimeLine.prototype.addMoment = function(moment, action) {
// Adds a moment to the time line
	"use strict";
	var ind, i;
	if (this._moments.length === 0 || this._moments[this._moments.length-1].moment <= moment) {
		this._moments.push({ moment: moment, action: action });
	} else {
		ind = 0;
		while (this._moments[ind].moment <= moment) { ind += 1; }
		for (i = this._moments.length; i > ind; i -= 1) { 
			this._moments[i] = this._moments[i-1];
		}
		this._moments[ind] = { moment: moment, action: action };
	}
	this._nextMoment = -1000000;  // invalidate next moment
};

tbTimeLine.prototype.changeMoment = function(moment, action) {
// Changes the action at a moment in the time line
	"use strict";
	this.deleteMoment(moment);
	this.addMoment(moment, action);
};

tbTimeLine.prototype.deleteMoment = function(moment) {
// Removes all moments at the given moment
	"use strict";
	this.deleteRange(moment, moment);
};

tbTimeLine.prototype.shiftMoment = function(moment, amount) {
// Shift all moments at the given moment
	"use strict";
	this.shiftRange(moment, moment, amount);
};

tbTimeLine.prototype.duplicateMoment = function(moment, newMoment) {
// Duplicates all moments at the given moment
	"use strict";
	this.duplicateRange(moment, moment, newMoment);
};

tbTimeLine.prototype.deleteRange = function(moment0, moment1) {
// Removes all moments in the range
	"use strict";
	var ind = 0,
		i;
	for (i = 0; i < this._moments.length; i += 1) {
		if (this._moments[i].moment < moment0) {
			ind += 1;
		} else if (this._moments[i].moment > moment1) {
			this._moments[ind] = this._moments[i];
			ind += 1;
		}
	}
	this._moments.length = ind;
	this._nextMoment = -1000000;  // invalidate next moment
};

tbTimeLine.prototype.shiftRange = function(moment0, moment1, amount) {
// Shifts all moments in the range
	"use strict";
	var i;
	for (i = 0; i < this._moments.length; i += 1) {
		if (this._moments[i].moment >= moment0 && this._moments[i].moment <= moment1) {
			this._moments[i].moment += amount;
		}
	}
	this._sort();
	this._nextMoment = -1000000;  // invalidate next moment
};

tbTimeLine.prototype.duplicateRange = function(moment0, moment1, newMoment) {
// Duplicates all moments in the range starting at the new moment
	"use strict";
	var shift = newMoment - moment0,
		i;
	for (i = 0; i < this._moments.length; i += 1) {
		if (this._moments[i].moment >= moment0 && this._moments[i].moment <= moment1) {
			this._moments.push( { moment: this._moments[i].moment + shift, action: this._moments[i].action } );
		}
	}
	this._sort();
	this._nextMoment = -1000000;  // invalidate next moment
};

tbTimeLine.prototype.stretchRange = function(moment0, moment1, factor) {
// Stretches all moments in the range
	"use strict";
	var shift = (moment1-moment0) * (factor-1),   // Amount to shift moments after the range
		i;
	for (i = 0; i < this._moments.length; i += 1) {
		if (this._moments[i].moment >= moment0 && this._moments[i].moment <= moment1) {
			this._moments[i].moment = moment0 + (this._moments[i].moment-moment0) * factor;
		} else if (this._moments[i].moment > moment1) {
			this._moments[i].moment += shift;
		}
	}
	this._sort();
	this._nextMoment = -1000000;  // invalidate next moment
};

tbTimeLine.prototype.reverseRange = function(moment0, moment1) {
// Reverses all moments in the range
	"use strict";
	var i;
	for (i = 0; i < this._moments.length; i += 1) {
		if (this._moments[i].moment >= moment0 && this._moments[i].moment <= moment1) {
			this._moments[i].moment = moment1 - (this._moments[i].moment-moment0);
		}
	}
	this._sort();
	this._nextMoment = -1000000;  // invalidate next moment
};

tbTimeLine.prototype.deleteAll = function() {
// Removes all moments
	"use strict";
	if (this._moments.length > 0) {
		this.deleteRange(0, this._moments[this._moments.length-1].moment);
	}
};

tbTimeLine.prototype.shiftAll = function(amount) {
// Shifts all moments
	"use strict";
	if (this._moments.length > 0) {
		this.shiftRange(0, this._moments[this._moments.length-1].moment, amount);
	}
};

tbTimeLine.prototype.duplicateAll = function(newMoment) {
// Duplicates all moments starting at the new moment
	"use strict";
	if (this._moments.length > 0) {
		this.duplicateRange(0, this._moments[this._moments.length-1].moment, newMoment);
	}
};

tbTimeLine.prototype.stretchAll = function(factor) {
// Stretches all moments
	"use strict";
	if (this._moments.length > 0) {
		this.stretchRange(0, this._moments[this._moments.length-1].moment, factor);
	}
};

tbTimeLine.prototype.reverseAll = function() {
// Reverses all moments
	"use strict";
	if (this._moments.length > 0) {
		this.stretchRange(0, this._moments[this._moments.length-1].moment);
	}
};


//
// Running the time line
//

tbTimeLine.prototype.start = function() {
// Start the time line to run at the start
	"use strict";
	this._running = true;
	this._paused = false;
	if (this._speed < 0 && this._moments.length > 0) {
		this._lastTime = this._moments[this._moments.length-1].moment + 1;
	} else {
		this._lastTime = -1;
	}
	this._nextMoment = -1000000;
	// Add it to the game (removing it first when it already exists)
	tbGame.removeToken(this);
	tbGame.addToken(this);
};
	
tbTimeLine.prototype.startMoment = function(moment) {
// Start the time line to run at the indicated moment
	"use strict";
	this.start();
	this.setMoment(moment);
};
	
tbTimeLine.prototype.setMoment = function(moment) {
// 	Set the moment from where to run
	"use strict";
	if (this._speed < 0) {
		this._lastTime = moment + 1;
	} else {
		this._lastTime = moment - 1;
	}
	this._nextMoment = -1000000;
};

tbTimeLine.prototype.getMoment = function() {
// 	Returns the current time moment
	"use strict";
	return this._lastTime;
};
	
tbTimeLine.prototype.rewind = function() {
// 	Set the moment from where to run to the start
	"use strict";
	if (this._speed < 0 && this._moments.length > 0) {
		this.setMoment(this._moments[this._moments.length-1].moment);
	} else {
		this.setMoment(0);
	}
};
	
tbTimeLine.prototype.stop = function() {
// Stop the time line
	"use strict";
	this._running = false;
	tbGame.removeToken(this);
};
	
tbTimeLine.prototype.running = function() {
// Returns whether the time line is running
	"use strict";
	return this._running;
};
	
tbTimeLine.prototype.pause = function() {
// Pause the time line
	"use strict";
	this._paused = true;
	tbGame.removeToken(this);
};
	
tbTimeLine.prototype.resume = function() {
// Resumes the time line
	"use strict";
	this._paused = false;
	// Add it to the game (removing it first when it already exists)
	tbGame.removeToken(this);
	tbGame.addToken(this);
};
	
tbTimeLine.prototype.paused = function() {
// Returns whether the time line is paused
	"use strict";
	return (this._running && this._paused);
};
	
tbTimeLine.prototype.setLooping = function(loop) {
// Set whether to loop
	"use strict";
	this._loop = loop;
};
	
tbTimeLine.prototype.getLooping = function() {
// Return whether to loop
	"use strict";
	return this._loop ;
};
	
tbTimeLine.prototype.setSpeed = function(speed) {
// 	Set the speed with which to run
	"use strict";
	this._speed = speed;
};

tbTimeLine.prototype.getSpeed = function() {
// 	Returns the speed with which to run
	"use strict";
	return this._speed;
};
	
//
// Callback method to handle all
//

tbTimeLine.prototype.handleMoments = function(timePassed) { 
// This is where the time line does its work
	"use strict";
	if (!this._running || this._paused) { return; }
	if (this._speed === 0) { return; }
	if (this._speed > 0) {
		// Skip moment that did lie in the past
		if (this._nextMoment < 0) { this._nextMoment = 0; }
		while (this._nextMoment < this._moments.length && this._moments[this._nextMoment].moment <= this._lastTime) {
			this._nextMoment += 1;
		}
		// Handle moments that where passed
		this._lastTime += this._speed * timePassed;
		while (this._nextMoment >= 0 && this._nextMoment < this._moments.length && this._moments[this._nextMoment].moment <= this._lastTime) {
			this._moments[this._nextMoment].action(this._moments[this._nextMoment].moment, this);
			this._nextMoment += 1;
		}
		// See whether we are done
		if (this._nextMoment >= this._moments.length) {
			if (this._loop) {
				this.rewind();
			} else {
				this.stop();
			}
		}
	} else {
		// Skip moment that did lie in the past
		if (this._nextMoment < 0) { this._nextMoment = this._moments.length-1; }
		while (this._nextMoment >= 0 && this._moments[this._nextMoment].moment >= this._lastTime) { 
			this._nextMoment -= 1;
		}
		// Handle moments that where passed
		this._lastTime += this._speed * timePassed;
		while (this._nextMoment >= 0 && this._moments[this._nextMoment].moment >= this._lastTime) {
			this._moments[this._nextMoment].action(this._moments[this._nextMoment].moment, this);
			this._nextMoment -= 1;
		}
		// See whether we are done
		if (this._nextMoment < 0 && this._lastTime <= 0) {
			if (this._loop) {
				this.rewind();
			} else {
				this.stop();
			}
		}
	}
};

tbTimeLine.prototype.handleBeginStep = function(timePassed) { 
// You can override this but make sure you at least include this call
	"use strict";
	this.handleMoments(timePassed);
};
/////////////////////////////////////////////////////////////
// tbKeyAreas: The engine part dealing with virtual key
// code areas that can be used to simulate key presses
//
// Copyright 2013 CoolGames
// Last Changed: 9-9-2013
/////////////////////////////////////////////////////////////

// The constructor for the key area object
var tbKeyArea = function () {
	"use strict";
	// Properties used by the engine
	this.depth = 10000000;				// Handle as early as possible
	this.visible = false;
	this.active = true;
	this.group = "Engine";
	// Own properties
	this._areas = [];
	this._fingerIndex = [];
	this.clear();
	this.sliding = false;
	// Add it to the game engine
	tbGame.addToken(this);
};

//
// help methods
//

// Check whether the area contains a point
tbKeyArea.prototype._containsPoint = function(area,x,y) { 
	"use strict";
	if (!area) { return false; }
	return area.mask.collisionPoint(0, 0, x, y);
};

//
// The event handlers
//

// handleBeginStep is called each step before processing other events.
tbKeyArea.prototype.handleBeginStep = function(timePassed) { 
	"use strict";
	var finger, x, y, ind, area;
	if (!this.sliding) { return; }
	for (finger = 0; finger < 16; finger += 1) {
		if (tbGame.touchDown(finger)) {
			x = tbGame.touchX(finger);
			y = tbGame.touchY(finger);
			ind = this._fingerIndex[finger];
			area = this._areas[ind];
			// Check whether a finger moved out of a region
			if (ind >= 0 && area && area.selected && !this._containsPoint(area,x,y)) {
				tbGame.addKeyUpEvent(area.keyCode);
				area.selected = false;
				this._fingerIndex[finger] = -1;
			}		
			// Check whether the finger moved into a region
			this.handleTouchDown(finger,x,y);
		}
	}	
};

// handleTouchDown is called when a touch is started or if a mouse button is pressed.
tbKeyArea.prototype.handleTouchDown = function(finger, x, y) { 
	"use strict";
	var i;
	if (this._fingerIndex[finger] >= 0) { return; }
	for (i=0; i<this._areas.length; i += 1) {
		if (this._areas[i] && this._containsPoint(this._areas[i],x,y) && !this._areas[i].selected) {
			tbGame.addKeyDownEvent(this._areas[i].keyCode);
			this._areas[i].selected = true;
			this._fingerIndex[finger] = i;
			return;
		}
	}
}
;
// handleTouchUp is called when a touch is ended or if a mouse button is released.
tbKeyArea.prototype.handleTouchUp = function(finger, x, y) { 
	"use strict";
	var ind = this._fingerIndex[finger];
	if (ind >= 0 && this._areas[ind] && this._areas[ind].selected) {
		tbGame.addKeyUpEvent(this._areas[ind].keyCode);
		this._areas[ind].selected = false;
	}		
	this._fingerIndex[finger] = -1;
};

//
// The user methods
//

// Add a rectangle with the given id
tbKeyArea.prototype.addRectangle = function(id, x, y, w, h, keyCode) {
	"use strict";
	var mask = tbMaskRectangle(x, y, w, h);
	this._areas.push( { keyCode: keyCode, mask: mask, id:id, selected: false } );
};

// Add a disk with the given id
tbKeyArea.prototype.addDisk = function(id, x, y, r, keyCode) {
	"use strict";
	var mask = tbMaskDisk(x, y, r);
	this._areas.push( { keyCode: keyCode, mask: mask, id:id, selected: false } );
};

// Add a triangle with the given id
tbKeyArea.prototype.addTriangle = function(id, x1, y1, x2, y2, x3, y3, keyCode) {
	"use strict";
	var mask = tbMaskTriangle(x1, y1, x2, y2, x3, y3);
	this._areas.push( { keyCode: keyCode, mask: mask, id:id, selected: false } );
};

// Add a polygon with the given id
tbKeyArea.prototype.addPolygon = function(id, x, y, keyCode) {
	"use strict";
	var mask = tbMaskPolygon(x, y);
	this._areas.push( { keyCode: keyCode, mask: mask, id:id, selected: false } );
};

// Add a mask at a location with the given id
tbKeyArea.prototype.addMask = function(id, x, y, mask, keyCode) {
	"use strict";
	this._areas.push( { keyCode: keyCode, mask: mask.translate(x,y), id:id, selected: false } );
};

// Remove an area
tbKeyArea.prototype.removeArea = function(areaId) {
	"use strict";
	var i;
	for (i=0; i<this._areas.length; i += 1) {
		if (this._areas[i].id === areaId) {
			this._areas[i] = null;
		}
	}
};

// Remove a key code
tbKeyArea.prototype.removeKeyCode = function(keyCode) {
	"use strict";
	var i;
	for (i=0; i<this._areas.length; i += 1) {
		if (this._areas[i].keyCode === keyCode) { 
			this._areas[i] = null;
		}
	}
};

// Remove all (only moment we actually delete entries in the array!)
tbKeyArea.prototype.clear = function() {
	"use strict";
	var i;
	this._areas.length = 0;
	for (i=0; i<16; i += 1) {
		this._fingerIndex[i] = -1;
	}
};

tbKeyArea.prototype.draw = function(colUp, colDown, colText) {
	"use strict";
	var i, area, xx, yy;
	for (i=0; i<this._areas.length; i += 1) {
		area = this._areas[i];
		if (area) { 
			if (area.selected) {
				area.mask.draw(0,0,colDown); 
			} else {
				area.mask.draw(0,0,colUp);
			}
			xx = (area.mask.bBoxLeft+area.mask.bBoxRight)/2;
			yy = (area.mask.bBoxTop+area.mask.bBoxBottom)/2;
			tbGraphics.drawText("id: " + area.id, xx - 20, yy - 10, colText, "16px Arial");
			tbGraphics.drawText("key: " + area.keyCode, xx - 20, yy + 10, colText, "16px Arial");
		}
	}
};


/////////////////////////////////////////////////////////////
// tbParticles: This engine component deals with particle systems
//
// This is a complete rewrite, replacing the old particle engine
//
// Copyright 2014 CoolGames
// Last Changed: 16-07-2014
/////////////////////////////////////////////////////////////


var tbParticle = {};

tbParticle.generator = new tbRandom();			// The random number generator we use
tbParticle.particlePool = [];					// The pool of particles that can be reused


// ********************************************
// ** Distribution functions
// ********************************************

tbParticle.distributionRandom = function(min, max) {
	"use strict";
	return tbParticle.generator.randomRange(min, max);
};

tbParticle.distributionIRandom = function(min, max) {
	"use strict";
	return tbParticle.generator.iRandomRange(min, max);
};

tbParticle.distributionRounded = function(min, max, step) {
	"use strict";
	return step * tbParticle.generator.iRandomRange(min/step, max/step);
};


// ********************************************
// ** Support functions
// ********************************************

// Clone a distribution value
tbParticle.cloneDistributionValue = function(value) {
	"use strict";
	if (typeof value !== "object" || value === null || value.min === undefined) {
		if (Array.isArray(value)) {
			return value.slice();
		}
		return value;
	}
	return { min: value.min, max: value.max, distribution: value.distribution, parameter: value.parameter };
};

// Compute a value from a distribution object
tbParticle.computeDistributionValue = function(value) {
	"use strict";
	if (typeof value !== "object" || value === null || value.min === undefined) {
		if (Array.isArray(value)) {
			return value[tbParticle.generator.iRandomRange(0, value.length-1)];
		}
		return value;
	}
	if (value.max === undefined) {
		if (Array.isArray(value.min)) {
			return value.min[tbParticle.generator.iRandomRange(0, value.min.length-1)];
		}
		return value.min;
	}
	if (value.distribution === undefined) {
		return tbParticle.generator.randomRange(value.min, value.max);
	}
	return value.distribution(value.min, value.max, value.parameter);
};

// Creates a value for a particle type
tbParticle.createInterpolationValue = function(begin, change, interpolation, cycle, absolute, parameter) {
	"use strict";
	if (change === undefined) { return begin; }
	if (interpolation === undefined) { return { begin: begin, change: change }; }
	if (cycle === undefined) { cycle = 1; }
	if (absolute === undefined) { absolute = false; }
	return { begin: begin, change: change, interpolation: interpolation, cycle: cycle, absolute: absolute, parameter: parameter };
};

// Clone a value for a particle type
tbParticle.cloneInterpolationValue = function(value) {
	"use strict";
	if (typeof value !== "object" || value === null || value.begin === undefined) {
		return tbParticle.cloneDistributionValue(value);
	}
	return {
		begin: value.begin === undefined ? undefined : tbParticle.cloneDistributionValue(value.begin),
		change: value.change === undefined ? undefined : tbParticle.cloneDistributionValue(value.change),
		interpolation: value.interpolation,
		cycle: value.cycle === undefined ? undefined : tbParticle.cloneDistributionValue(value.cycle),
		absolute: value.absolute,
		parameter: value.parameter === undefined ? undefined : tbParticle.cloneDistributionValue(value.parameter)
	};
};

// Initializes a value for a particle, based on the value in the particle type
tbParticle.initInterpolationValue = function(value) {
	"use strict";
	var val;
	if (typeof value !== "object" || value === null || value.begin === undefined) {
		return { value: tbParticle.computeDistributionValue(value) };
	}
	val = tbParticle.computeDistributionValue(value.begin);
	if (value.change === undefined) {
		return { value: val };
	}
	return {
		value: val,
		begin: val,
		change: tbParticle.computeDistributionValue(value.change),
		interpolation: value.interpolation,
		cycle: value.cycle === undefined ? 1 : tbParticle.computeDistributionValue(value.cycle),
		absolute: value.absolute === undefined ? false : value.absolute,
		parameter: tbParticle.computeDistributionValue(value.parameter)
	};
};

// Updates a value for a particle, based on the current time and duration
tbParticle.updateInterpolationValue = function(value, time, duration) {
	"use strict";
	if (value.begin === undefined) { return; }			// value is constant
	if (value.interpolation === undefined) {			// simple linear interpolation
		value.value = value.begin + time*value.change/duration;
	} else {
		if (!value.absolute) { time /= duration; }
		time = time % value.cycle;
		value.value = value.interpolation(time, value.begin, value.change, value.cycle, value.parameter);
	}
};


// ********************************************
// ** Defining particles
// ********************************************

// The constructor for a particle
tbParticle.Particle = function() {
	"use strict";
};

// The constructor for a particle
tbParticle.Particle.prototype.init = function(token, pType, x, y) {
	"use strict";
	this.token = token;
	this.pType = pType;
	// Settings related to the image
	this.shape = tbParticle.initInterpolationValue(pType.shape).value;
	this.image = tbParticle.initInterpolationValue(pType.image).value;
	this.subImage = tbParticle.initInterpolationValue(pType.subImage);
	this.autoSubImage = pType.autoSubImage;
	this.absoluteSubImage = pType.absoluteSubImage;
	this.alpha = tbParticle.initInterpolationValue(pType.alpha);
	this.imageColorMode = pType.imageColorMode;
	this.colorMode = pType.colorMode;
	this.colorRed = tbParticle.initInterpolationValue(pType.colorRed);
	this.colorGreen = tbParticle.initInterpolationValue(pType.colorGreen);
	this.colorBlue = tbParticle.initInterpolationValue(pType.colorBlue);
	this.colorHue = tbParticle.initInterpolationValue(pType.colorHue);
	this.colorSaturation = tbParticle.initInterpolationValue(pType.colorSaturation);
	this.colorLight = tbParticle.initInterpolationValue(pType.colorLight);
	this.additive = pType.additive;
	this.drawFunction = pType.drawFunction;
	if (this.shape === "image" && (this.image !== undefined || this.image !== null) && this.imageColorMode !== "none") {
		this.surf = new tbSurface(this.image.width, this.image.height);
	}
	// Settings related to the lifeTime
	this.delay = tbParticle.initInterpolationValue(pType.delay).value;
	this.lifeTime = tbParticle.initInterpolationValue(pType.lifeTime).value;
	this.stepBeginFunction = pType.stepBeginFunction;
	this.stepEndFunction = pType.stepEndFunction;
	this.time = 0;
	this.alive = true;
	// Settings related to secondary particles
	this.emitType = pType.emitType;
	if (this.emitType !== null) {
		this.emitAmount = tbParticle.initInterpolationValue(pType.emitAmount);
		this.emitAtEnd = pType.emitAtEnd;
		this.emitNumber = tbParticle.computeDistributionValue(pType.emitNumber);
		this.emitDelay = tbParticle.computeDistributionValue(pType.emitDelay);
		this.emitInterval = tbParticle.initInterpolationValue(pType.emitInterval);
		this.emitCreated = 0;
		this.emitNext = 0;
	}
	this.effectType = pType.effectType;
	if (this.effectType !== null) {
		this.effectAmount = tbParticle.initInterpolationValue(pType.effectAmount);
		this.effectAtEnd = pType.effectAtEnd;
		this.effectNumber = tbParticle.computeDistributionValue(pType.effectNumber);
		this.effectDelay = tbParticle.computeDistributionValue(pType.effectDelay);
		this.effectInterval = tbParticle.initInterpolationValue(pType.effectInterval);
		this.effectCreated = 0;
		this.effectNext = 0;
	}
	// Settings related to the motion
	this.x = x;
	this.y = y;
	this.followEffect = pType.followEffect;
	this.positionX = tbParticle.initInterpolationValue(pType.positionX);
	this.positionY = tbParticle.initInterpolationValue(pType.positionY);
	this.speed = tbParticle.initInterpolationValue(pType.speed);
	this.direction = tbParticle.initInterpolationValue(pType.direction);
	this.forceDirection = tbParticle.initInterpolationValue(pType.forceDirection);
	this.forceMagnitude = tbParticle.initInterpolationValue(pType.forceMagnitude);
	this.forceX = 0;
	this.forceY = 0;
	this.moveX = 0;
	this.moveY = 0;
	this.currentX = this.x + this.positionX.value;
	this.currentY = this.y + this.positionY.value;
	this.previousX = this.currentX;
	this.previousY = this.currentY;
	// Settings related to the appearance
	this.autoOrientation = pType.autoOrientation;
	this.orientation = tbParticle.initInterpolationValue(pType.orientation);
	this.size = tbParticle.initInterpolationValue(pType.size);
	this.scaleX = tbParticle.initInterpolationValue(pType.scaleX);
	this.scaleY = tbParticle.initInterpolationValue(pType.scaleY);
};

// Create secondary particles
tbParticle.Particle.prototype.createEmit = function() {
	"use strict";
	var t, numb, j, pType, xx, yy, particle;
	if (this.emitType === null) { return; }
	// Determine the number of particles to create
	tbParticle.updateInterpolationValue(this.emitAmount, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.emitInterval, this.time, this.lifeTime);
	if (this.time >= this.lifeTime) {
		if (!this.emitAtEnd) { return; }
		numb =  this.emitAmount.value*(this.emitNumber - this.emitCreated);
	} else {
		numb = 0;
		t = this.time - this.emitDelay;
		while (t >= this.emitNext && numb < this.emitNumber - this.emitCreated) {
			numb +=  this.emitAmount.value;
			this.emitNext += this.emitInterval.value;
		}
	}
	// Now create the particles
	for (j = 0; j < numb; j += 1) {
		pType = tbParticle.computeDistributionValue(this.emitType);
		xx = this.currentX;
		yy = this.currentY;
		if (this.followEffect) {
			xx += this.token.x;
			yy += this.token.y;
		}
		particle = new tbParticle.Particle();
		particle.init(this.token, pType,xx, yy);
		this.token.particles.push(particle);
	}
	this.emitCreated += numb;
	// Remove when finished
	if (this.emitCreated >= this.emitNumber) { this.emitType = null; }
};

tbParticle.Particle.prototype.createEffect = function() {
	"use strict";
	var t, numb, j, eType, xx, yy;
	if (this.effectType === null) { return; }
	// Determine the number of effects to create
	tbParticle.updateInterpolationValue(this.effectAmount, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.effectInterval, this.time, this.lifeTime);
	if (this.time >= this.lifeTime) {
		if (!this.effectAtEnd) { return; }
		numb = this.effectAmount.value*(this.effectNumber - this.effectCreated);
	} else {
		numb = 0;
		t = this.time - this.effectDelay;
		while (t >= this.effectNext && numb < this.effectNumber - this.effectCreated) {
			numb += this.effectAmount.value;
			this.effectNext += this.effectInterval.value;
		}
	}
	// Now create the effects
	for (j = 0; j < numb; j += 1) {
		eType = tbParticle.computeDistributionValue(this.effectType);
		xx = this.currentX;
		yy = this.currentY;
		if (this.followEffect) {
			xx += this.token.x;
			yy += this.token.y;
		}
		tbParticle.showEffect(eType,xx, yy, this.token.layer, this.token.depth, tbGame.getTokenTags(this.token));
	}
	this.effectCreated += numb;
	// Remove when finished
	if (this.effectCreated >= this.effectNumber) { this.effectType = null; }
};


// Update the particle
tbParticle.Particle.prototype.update = function(timePassed) {
	"use strict";
	var dir;
	// Update the life time
	if (this.delay > 0) {
		this.delay -= timePassed;
		if (this.delay < 0) { this.time = -this.delay; }
	} else {
		this.time += timePassed;
	}
	if (this.delay > 0) { return; }
	if (this.time >= this.lifeTime) {
		this.createEmit();
		this.createEffect();
		this.alive = false;
		return;
	}
	if (this.stepBeginFunction !== null) { this.stepBeginFunction(this, this.time, this.lifeTime); }
	// Settings related to the motion
	this.previousX = this.currentX;
	this.previousY = this.currentY;
	tbParticle.updateInterpolationValue(this.positionX, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.positionY, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.speed, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.direction, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.forceDirection, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.forceMagnitude, this.time, this.lifeTime);
	this.forceX += timePassed * tbMath.projectionX(this.forceDirection.value, this.forceMagnitude.value);
	this.forceY += timePassed * tbMath.projectionY(this.forceDirection.value, this.forceMagnitude.value);
	this.moveX += timePassed * (tbMath.projectionX(this.direction.value, this.speed.value) + this.forceX);
	this.moveY += timePassed * (tbMath.projectionY(this.direction.value, this.speed.value) + this.forceY);
	this.currentX = this.x + this.positionX.value + this.moveX;
	this.currentY = this.y + this.positionY.value + this.moveY;
	// Settings related to the appearance
	tbParticle.updateInterpolationValue(this.orientation, this.time, this.lifeTime);
	if (this.autoOrientation) {
		dir = tbMath.direction(this.previousX, this.previousY, this.currentX, this.currentY);
		this.orientation.value = dir;
	}
	tbParticle.updateInterpolationValue(this.size, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.scaleX, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.scaleY, this.time, this.lifeTime);
	// Settings related to the image or shape
	tbParticle.updateInterpolationValue(this.colorRed, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.colorGreen, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.colorBlue, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.colorHue, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.colorSaturation, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.colorLight, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.subImage, this.time, this.lifeTime);
	tbParticle.updateInterpolationValue(this.alpha, this.time, this.lifeTime);
	if (this.autoSubImage) {
		dir = tbMath.direction(this.previousX, this.previousY, this.currentX, this.currentY);
		this.subImage.value = this.image.number * this.direction / 360;
	}
	// Create secondary particles
	this.createEmit();
	this.createEffect();
	// Call step end function
	if (this.stepEndFunction !== null) { this.stepEndFunction(this, this.time, this.lifeTime, timePassed); }
};

// Draw the particle
tbParticle.Particle.prototype.draw = function() {
	"use strict";
	var xx = this.currentX,
		yy = this.currentY,
		sub = this.subImage.value,
		scaleX = this.size.value * this.scaleX.value,
		scaleY = this.size.value * this.scaleX.value,
		orient = this.orientation.value,
		alpha = this.alpha.value,
		color = "white",
		context = tbGraphics.context,
		img = this.image;
	// See if anything must be drawn
	if (!this.alive) { return; }
	if (this.delay > 0) { return; }
	if (Math.abs(scaleX) < 0.0001 || Math.abs(scaleY) < 0.0001) { return; }
	// Follow the token, if required
	if (this.followEffect) {
		xx += this.token.x; yy += this.token.y;
	}
	// Set the color
	if (this.colorMode === "hsl") {
		color = "hsl(" + Math.round(this.colorHue.value).toString() + "," +
					Math.round(this.colorSaturation.value).toString() + "%,"  +
					Math.round(this.colorLight.value).toString() + "%)";
	} else {
		color = "rgb(" + Math.round(this.colorRed.value).toString() + "," +
					Math.round(this.colorGreen.value).toString() + ","  +
					Math.round(this.colorBlue.value).toString() + ")";
	}
	// Set the transformation and alpha
	context.save();
	context.translate(xx, yy);
	context.rotate(-orient * Math.PI/180);
	context.scale(scaleX, scaleY);
	if (this.additive) { context.globalCompositeOperation = "lighter"; }
	// Now draw it
	switch (this.shape) {
		case "function":
			if (this.drawFunction !== undefined && this.drawFunction !== null) {
				this.drawFunction(this, color, alpha);
			}
			break;
		case "rectangle":
			context.globalAlpha = alpha;
			tbGraphics.drawRectangle(-0.5, -0.5, 1, 1, color);
			break;
		case "disk":
			context.globalAlpha = alpha;
			tbGraphics.drawDisk(0, 0, 0.5, color);
			break;
		default:
			context.globalAlpha = alpha;
			if (this.image !== undefined && this.image !== null) {
				if (this.imageColorMode === "color" || this.imageColorMode === "merge") {
					this.surf.clearColor(color);
					this.surf.setTarget();
					this.surf.context.globalCompositeOperation = "destination-in";
					if (this.image instanceof tbImage) {
						this.image.drawSimple(0, this.image.xOrigin, this.image.yOrigin);
					} else {
						this.image.drawSimple(0, 0);
					}
					if (this.imageColorMode === "merge") {
						this.surf.context.globalCompositeOperation = "lighter";
						if (this.image instanceof tbImage) {
							this.image.drawSimple(0, this.image.xOrigin, this.image.yOrigin);
						} else {
							this.image.drawSimple(0, 0);
						}
					}
					this.surf.resetTarget();
					img = this.surf;
				}
				if (img instanceof tbImage) {
					if (!this.absoluteSubImage) { sub *= img.number-0.0001; }
					sub = Math.floor(sub);
					if (this.autoSubImage) { orient = 0; }
					img.drawAlpha(sub, 0,0);
				} else {
					img.drawAlpha(-img.width/2, -img.height/2);
				}
			}
			break;
	}
	// Restore the transformation
	context.restore();
};


// ********************************************
// ** Defining particle types
// ********************************************

// The default particle type
tbParticle.defaultParticleType = {
	// Settings related to the image
	shape : "image",
	image : null,
	subImage : 0,
	autoSubImage : false,
	absoluteSubImage : true,
	alpha : 1,
	imageColorMode : "none",
	colorMode : "rgb",
	colorRed : 255,
	colorGreen : 255,
	colorBlue: 255,
	colorHue : 0,
	colorSaturation : 100,
	colorLight : 50,
	additive : false,
	drawFunction : null,
	// Settings related to the life time
	delay : 0,
	lifeTime : 10000000,
	stepBeginFunction : null,
	stepEndFunction : null,
	//Settings related to secondary particles
	emitType : null,
	emitAtEnd : true,
	emitAmount : 1,
	emitNumber : 1,
	emitDelay : 10000000,
	emitInterval : 0,
	effectType : null,
	effectAtEnd : true,
	effectAmount : 1,
	effectNumber : 1,
	effectDelay : 10000000,
	effectInterval : 0,
	// Settings related to the position
	positionX : 0,
	positionY : 0,
	speed : 0,
	direction : 0,
	forceDirection : 0,
	forceMagnitude : 0,
	followEffect : false,
	// Settings related to the transformation
	autoOrientation : false,
	orientation : 0,
	size : 1,
	scaleX : 1,
	scaleY : 1
};

// Return a clone of a particle type; if properties is defined these are put in the particle type
tbParticle.cloneParticleType = function (pType, properties) {
	"use strict";
	var attr, newType = {};
	for (attr in pType) {
		if (pType.hasOwnProperty(attr)) {
			newType[attr] = tbParticle.cloneInterpolationValue(pType[attr]);
		}
	}
	if (properties !== undefined) {
		tbParticle.changeParticleType(newType, properties);
	}
	return newType;
};

// Set a number of properties in the particle type
tbParticle.changeParticleType = function (pType, properties) {
	"use strict";
	var attr;
	for (attr in properties) {
		if (properties.hasOwnProperty(attr)) {
			pType[attr] = tbParticle.cloneInterpolationValue(properties[attr]);
		}
	}
	return pType;
};

// Return a default particle type; if properties is defined these are put in the particle type
tbParticle.createParticleType = function (properties) {
	"use strict";
	return tbParticle.cloneParticleType(tbParticle.defaultParticleType, properties);
};


// ********************************************
// ** Defining particle effects
// ********************************************

tbParticle.createParticleEffect = function() {
	"use strict";
	return { emitters: [] };
};

// Add a particle emitter for a particular type during a particular time, after a delay
tbParticle.addEmitter = function(effect, pType, x, y, number, delay, interval, properties ) {
	"use strict";
	var newType = tbParticle.cloneParticleType(pType);
	if (properties !== undefined) { tbParticle.changeParticleType(newType, properties); }
	effect.emitters.push({ pType: newType, x: x, y: y, number: number, delay: delay, interval: interval });
};

// Add a single particle a particular type, after a delay
tbParticle.addSingle = function(effect, pType, x, y, delay, properties ) {
	"use strict";
	var newType = tbParticle.cloneParticleType(pType);
	if (properties !== undefined) { tbParticle.changeParticleType(newType, properties); }
	effect.emitters.push({ pType: newType, x: x, y: y, number: 1, delay: delay, interval: 0 });
};

// Add multiple particles of a particular type, after a delay
tbParticle.addMultiple = function(effect, pType, x, y, number, delay, properties ) {
	"use strict";
	var newType = tbParticle.cloneParticleType(pType);
	if (properties !== undefined) { tbParticle.changeParticleType(newType, properties); }
	effect.emitters.push({ pType: newType, x: x, y: y, number: number, delay: delay, interval: 0 });
};

// Show a particle effect. Returns the corresponding token.
tbParticle.showEffect = function(effect, x, y, layer, depth, tags) {
	"use strict";
	return new tbParticle.ParticleToken(effect, x, y, layer, depth, tags);
};


// ********************************************
// ** Defining particle tokens (used internally)
// ********************************************

// Constructor for a particle token
tbParticle.ParticleToken = function(pEffect, x, y, layer, depth, tags) {
	"use strict";
	var i, emitter;
	// Token properties used by the engine
	if (layer === undefined) { layer = 0; }
	if (depth === undefined) { depth = 0; }
	this.layer = layer;
	this.depth = depth;
	this.visible = true;
	this.active = true;
	this.group = 0;
	// Own properties
	this.x = x;
	this.y = y;
	this.effect = pEffect;
	this.lifeTime = 0;
	// Create the emitters
	this.emitters = [];
	for (i = 0; i < this.effect.emitters.length; i += 1) {
		emitter = this.effect.emitters[i];
		this.emitters.push({
			pType: emitter.pType,
			x: emitter.x, y: emitter.y,
			number: tbParticle.computeDistributionValue(emitter.number),
			delay: tbParticle.computeDistributionValue(emitter.delay),
			interval: emitter.interval, created: 0, next: 0
		});
	}
	// Create the particles
	this.particles = [];
	// Add it to the game engine
	tbGame.addToken(this);
	if (tags !== undefined) { tbGame.addTokenTags(this, tags); }
};

tbParticle.ParticleToken.prototype.removeParticles = function() {
// Remove all particles from the system
	"use strict";
	var i;
	for (i = 0; i < this.particles.length; i += 1) {
		tbParticle.particlePool.push(this.particles[i]);
	}
	this.particles.length = 0;
};

tbParticle.ParticleToken.prototype.particleCount = function() {
// Returns the number of particles
	"use strict";
	return this.particles.length;
};

// Handles the step event, updating all particles and creating new ones
tbParticle.ParticleToken.prototype.handleEndStep = function(timePassed) {
	"use strict";
	var i, j, n, t, numb, particle, emitter, pType;
	this.lifeTime += timePassed/1000;
	// Update the current particles, also removing dead ones
	n = 0;
	for (i = 0; i < this.particles.length; i += 1) {
		particle = this.particles[i];
		particle.update(timePassed/1000);
		if (particle.alive) {
			this.particles[n] = particle;
			n += 1;
		} else {
			tbParticle.particlePool.push(particle);
		}
	}
	this.particles.length = n;
	// Create new particles based on the emitters, and remove emitters that are finished
	n = 0;
	for (i = 0; i < this.emitters.length; i += 1) {
		emitter = this.emitters[i];
		t = this.lifeTime - emitter.delay;
		numb = 0;
		// Determine the number of particles to create
		while (t >= emitter.next && numb < emitter.number - emitter.created) { numb += 1; emitter.next += tbParticle.computeDistributionValue(emitter.interval); }
		// Now create the particles
		for (j = 0; j < numb; j += 1) {
			pType = tbParticle.computeDistributionValue(emitter.pType);
			if (tbParticle.particlePool.length > 0) {
				particle = tbParticle.particlePool.pop();
			} else {
				particle = new tbParticle.Particle();
			}
			if (pType.followEffect) {
				particle.init(this, pType, tbParticle.computeDistributionValue(emitter.x), tbParticle.computeDistributionValue(emitter.y));
			} else {
				particle.init(this, pType, this.x + tbParticle.computeDistributionValue(emitter.x), this.y + tbParticle.computeDistributionValue(emitter.y));
			}
			this.particles.push(particle);
		}
		emitter.created += numb;
		// Keep it when not finished
		if (emitter.created < emitter.number) {
			this.emitters[n] = emitter;
			n += 1;
		}
	}
	this.emitters.length = n;
	// remove the token when done
	if (this.emitters.length === 0 && this.particles.length === 0) { tbGame.removeToken(this); }
};

// Handles the draw event, drawing all particles
tbParticle.ParticleToken.prototype.handleDraw = function() {
	"use strict";
	var i;
	for (i = 0; i < this.particles.length; i += 1) {
		if (this.particles[i] !== undefined) {
			this.particles[i].draw();
		}
	}
};
/////////////////////////////////////////////////////////////
// tbAnimation: Contains objects and methods useful for animations
//
// Currently it contains a collection of easy functions and 
// the tbAnimator class.
//
// Copyright 2013-2015 CoolGames
// Last Changed: 17-11-2015
/////////////////////////////////////////////////////////////


// *******************************
// Ease Functions
// *******************************

var tbEase = {

//
// Basic ease functions
//

	easeConstant: function (time, begin, change, duration) {
		"use strict";
		return begin;
	},
	
	easeLinear: function (time, begin, change, duration) {
		"use strict";
		var val = time/duration;
		return begin + change * val;
	},
	
	easeInPower: function (time, begin, change, duration, power) {
		"use strict";
		var val;
		if (power === undefined) { power = 3; }
		val = Math.pow(time/duration, power);
		return begin + change * val;
	},
	
	easeOutPower: function (time, begin, change, duration, power) {
		"use strict";
		var val = tbEase.easeInPower(duration-time, 1, -1, duration, power);
		return begin + change * val;
	},
	
	easeInOutPower: function (time, begin, change, duration, power) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInPower(time, 0, 0.5, duration/2, power);
		} else {
			val = tbEase.easeInPower(duration-time, 1, -0.5, duration/2, power);
		}
		return begin + change * val;
	},
	
	easeOutInPower: function (time, begin, change, duration, power) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInPower(duration/2-time, 0.5, -0.5, duration/2, power);
		} else {
			val = tbEase.easeInPower(time-duration/2, 0.5, 0.5, duration/2, power);
		}
		return begin + change * val;
	},
	
	easeInQuadratic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeInPower(time, begin, change, duration, 2);
	},
	
	easeOutQuadratic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeOutPower(time, begin, change, duration, 2);
	},
	
	easeInOutQuadratic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeInOutPower(time, begin, change, duration, 2);
	},
	
	easeOutInQuadratic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeOutInPower(time, begin, change, duration, 2);
	},
	
	easeInCubic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeInPower(time, begin, change, duration, 3);
	},
	
	easeOutCubic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeOutPower(time, begin, change, duration, 3);
	},
	
	easeInOutCubic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeInOutPower(time, begin, change, duration, 3);
	},
	
	easeOutInCubic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeOutInPower(time, begin, change, duration, 3);
	},
	
	easeInQuartic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeInPower(time, begin, change, duration, 4);
	},
	
	easeOutQuartic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeOutPower(time, begin, change, duration, 4);
	},
	
	easeInOutQuartic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeInOutPower(time, begin, change, duration, 4);
	},
	
	easeOutInQuartic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeOutInPower(time, begin, change, duration, 4);
	},
	
	easeInQuintic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeInPower(time, begin, change, duration, 5);
	},
	
	easeOutQuintic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeOutPower(time, begin, change, duration, 5);
	},
	
	easeInOutQuintic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeInOutPower(time, begin, change, duration, 5);
	},
	
	easeOutInQuintic: function (time, begin, change, duration) {
		"use strict";
		return tbEase.easeOutInPower(time, begin, change, duration, 5);
	},
	
	easeInExponential: function (time, begin, change, duration, power) {
		"use strict";
		var val, base;
		if (power === undefined) { power = 8; }
		base = Math.pow(2, -power);			// The exponential function will not cover the whole range from 0-1 so we must correct it
		val = (Math.pow(2, power * time/duration - power) - base) / (1-base);
		return begin + change * val;
	},
	
	easeOutExponential: function (time, begin, change, duration, power) {
		"use strict";
		var val = tbEase.easeInExponential(duration-time, 1, -1, duration, power);
		return begin + change * val;
	},
	
	easeInOutExponential: function (time, begin, change, duration, power) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInExponential(time, 0, 0.5, duration/2, power);
		} else {
			val = tbEase.easeInExponential(duration-time, 1, -0.5, duration/2, power);
		}
		return begin + change * val;
	},
	
	easeOutInExponential: function (time, begin, change, duration, power) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInExponential(duration/2-time, 0.5, -0.5, duration/2, power);
		} else {
			val = tbEase.easeInExponential(time-duration/2, 0.5, 0.5, duration/2, power);
		}
		return begin + change * val;
	},
	
	easeInSine: function (time, begin, change, duration) {
		"use strict";
		var val = 1 - Math.cos(time/duration * Math.PI/2);
		return begin + change * val;
	},
	
	easeOutSine: function (time, begin, change, duration) {
		"use strict";
		var val = tbEase.easeInSine(duration-time, 1, -1, duration);
		return begin + change * val;
	},
	
	easeInOutSine: function (time, begin, change, duration) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInSine(time, 0, 0.5, duration/2);
		} else {
			val = tbEase.easeInSine(duration-time, 1, -0.5, duration/2);
		}
		return begin + change * val;
	},
	
	easeOutInSine: function (time, begin, change, duration) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInSine(duration/2-time, 0.5, -0.5, duration/2);
		} else {
			val = tbEase.easeInSine(time-duration/2, 0.5, 0.5, duration/2);
		}
		return begin + change * val;
	},
	
	easeInCircular: function (time, begin, change, duration) {
		"use strict";
		var val = 1 - Math.sqrt(1 - Math.pow(time/duration, 2));
		return begin + change * val;
	},
	
	easeOutCircular: function (time, begin, change, duration) {
		"use strict";
		var val = tbEase.easeInCircular(duration-time, 1, -1, duration);
		return begin + change * val;
	},
	
	easeInOutCircular: function (time, begin, change, duration) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInCircular(time, 0, 0.5, duration/2);
		} else {
			val = tbEase.easeInCircular(duration-time, 1, -0.5, duration/2);
		}
		return begin + change * val;
	},
	
	easeOutInCircular: function (time, begin, change, duration) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInCircular(duration/2-time, 0.5, -0.5, duration/2);
		} else {
			val = tbEase.easeInCircular(time-duration/2, 0.5, 0.5, duration/2);
		}
		return begin + change * val;
	},
	
	easeInElastic: function (time, begin, change, duration, oscillations, stiffness) {
		"use strict";
		var val;
		if (oscillations === undefined) { oscillations = 3; }
		if (stiffness === undefined) { stiffness = 8; }
		val = Math.sin((1-time/duration)*2*Math.PI*oscillations + Math.PI/2);			// Create the correct sign
		val *= tbEase.easeInExponential(time, 0, 1, duration, stiffness);				// Multiply with an exponential ease in
		return begin + change * val;
	},

	easeOutElastic: function (time, begin, change, duration, oscillations, stiffness) {
		"use strict";
		var val = tbEase.easeInElastic(duration-time, 1, -1, duration, oscillations, stiffness);
		return begin + change * val;
	},
	
	easeInOutElastic: function (time, begin, change, duration, oscillations, stiffness) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInElastic(time, 0, 0.5, duration/2, oscillations, stiffness);
		} else {
			val = tbEase.easeInElastic(duration-time, 1, -0.5, duration/2, oscillations, stiffness);
		}
		return begin + change * val;
	},
	
	easeOutInElastic: function (time, begin, change, duration, oscillations, stiffness) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInElastic(duration/2-time, 0.5, -0.5, duration/2, oscillations, stiffness);
		} else {
			val = tbEase.easeInElastic(time-duration/2, 0.5, 0.5, duration/2, oscillations, stiffness);
		}
		return begin + change * val;
	},
	
	easeInOvershoot: function (time, begin, change, duration, overshoot) {
		"use strict";
		var val;
		if (overshoot === undefined) { overshoot = 1.70158; }
		val = (1+overshoot) * Math.pow(time/duration, 3) - overshoot * Math.pow(time/duration, 2);
		return begin + change * val;

	},
	
	easeOutOvershoot: function (time, begin, change, duration, overshoot) {
		"use strict";
		var val = tbEase.easeInOvershoot(duration-time, 1, -1, duration, overshoot);
		return begin + change * val;
	},
	
	easeInOutOvershoot: function (time, begin, change, duration, overshoot) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInOvershoot(time, 0, 0.5, duration/2, overshoot);
		} else {
			val = tbEase.easeInOvershoot(duration-time, 1, -0.5, duration/2, overshoot);
		}
		return begin + change * val;
	},
	
	easeOutInOvershoot: function (time, begin, change, duration, overshoot) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInOvershoot(duration/2-time, 0.5, -0.5, duration/2, overshoot);
		} else {
			val = tbEase.easeInOvershoot(time-duration/2, 0.5, 0.5, duration/2, overshoot);
		}
		return begin + change * val;
	},

	easeInBounce: function (time, begin, change, duration, number, factor) {
		"use strict";
		var bounces, i, w, width, height, val;
		// Correct the arguments
		if (number === undefined) { number = 4; }
		if (factor === undefined) { factor = 2; } else { factor = Math.sqrt(factor); }
		// Create the list of bounces
		bounces = [1];
		width = 1;
		for (i = 1; i < number; i += 1) {
			bounces.push(bounces[i-1]*factor);
			width += bounces[i];
		}
		// Compute total size
		width -= bounces[number-1]/2;		// We don't use the last half bounce
		height = Math.pow(bounces[number-1],2);
		time = time/duration * width;
		// Find the correct bounce
		w = 0;
		for (i = 0; i < number; i += 1) {
			if (time > bounces[i]) { time -= bounces[i];} else { w = bounces[i]; break; }
		}
		// Now compute the value
		val = -4 * Math.pow(time-w/2,2) + w * w;
		return begin + change * val / height;
	},

	easeOutBounce: function (time, begin, change, duration, number, factor) {
		"use strict";
		var val = tbEase.easeInBounce(duration-time, 1, -1, duration, number, factor);
		return begin + change * val;
	},
	
	easeInOutBounce: function (time, begin, change, duration, number, factor) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInBounce(time, 0, 0.5, duration/2, number, factor);
		} else {
			val = tbEase.easeInBounce(duration-time, 1, -0.5, duration/2, number, factor);
		}
		return begin + change * val;
	},
	
	easeOutInBounce: function (time, begin, change, duration, number, factor) {
		"use strict";
		var val;
		if (time < duration/2) {
			val = tbEase.easeInBounce(duration/2-time, 0.5, -0.5, duration/2, number, factor);
		} else {
			val = tbEase.easeInBounce(time-duration/2, 0.5, 0.5, duration/2, number, factor);
		}
		return begin + change * val;
	},
	
//
// Creating repeated ease functions
//

	repeatConstant : 0,
	repeatRepeat : 1,
	repeatMirror : 2,
	repeatFlip : 3,
	repeatContinuous : 4,
	repeatContinuousMirror : 5,

	easeCreateRepeat: function (func, repeat) {
		"use strict";
		switch (repeat) {
			case tbEase.repeatConstant:
				return function (time, begin, change, duration, arg0, arg1, arg2) {
					if (time < 0) { return begin; }
					if (time > duration) { return begin + change; }
					return func(time, begin, change, duration, arg0, arg1, arg2);
				};
			case tbEase.repeatRepeat:
				return function (time, begin, change, duration, arg0, arg1, arg2) {
					return func(time - Math.floor(time/duration)*duration, begin, change, duration, arg0, arg1, arg2);
				};
			case tbEase.repeatMirror:
				return function (time, begin, change, duration, arg0, arg1, arg2) {
					var val;
					if (Math.floor(time/duration) % 2 === 0) {
						val = func(time - Math.floor(time/duration)*duration, 0, 1, duration, arg0, arg1, arg2);
					} else {
						val = func(duration - time + Math.floor(time/duration)*duration, 0, 1, duration, arg0, arg1, arg2);
					}
					return begin + change * val;
				};
			case tbEase.repeatFlip:
				return function (time, begin, change, duration, arg0, arg1, arg2) {
					var val = func(time - Math.floor(time/duration)*duration, 0, 1, duration, arg0, arg1, arg2);
					if (Math.floor(time/duration) % 2 !== 0) {val = 1-val; }
					return begin + change * val;
				};
			case tbEase.repeatContinuous:
				return function (time, begin, change, duration, arg0, arg1, arg2) {
					var offset = Math.floor(time/duration),
						val = func(time - Math.floor(time/duration)*duration, 0, 1, duration, arg0, arg1, arg2);
					return begin + change * (offset + val);
				};
			case tbEase.repeatContinuousMirror:
				return function (time, begin, change, duration, arg0, arg1, arg2) {
					var val, offset = Math.floor(time/duration);
					if (Math.floor(time/duration) % 2 === 0) {
						val = func(time - Math.floor(time/duration)*duration, 0, 1, duration, arg0, arg1, arg2);
					} else {
						val = func(duration - time + Math.floor(time/duration)*duration, 1, -1, duration, arg0, arg1, arg2);
					}
					return begin + change * (offset + val);
				};
			default:
				return function (time, begin, change, duration, arg0, arg1, arg2) {
					return func(time, begin, change, duration, arg0, arg1, arg2);
				};
		}
	},

//
// Creating ease functions
//

	_easeCreate: function (kind, coef5, coef4, coef3, coef2, coef1, normalize) {
		"use strict";
		var tot;
		if (coef1 === undefined) { coef1 = 0; }
		if (coef2 === undefined) { coef2 = 0; }
		if (coef3 === undefined) { coef3 = 0; }
		if (coef4 === undefined) { coef4 = 0; }
		if (coef5 === undefined) { coef5 = 0; }
		if (normalize === undefined) { normalize = true; }
		tot = coef1 + coef2 + coef3 + coef4 + coef5;
		if (tot === 0) { tot = 1; }
		if (!normalize) { tot = 1; }
		
		switch (kind) {
			case 0:	return function(time, begin, change, duration) {
						var t = time/duration,
							val = coef5 * Math.pow(t, 5) + coef4 * Math.pow(t, 4) + coef3 * Math.pow(t, 3) + coef2 * Math.pow(t, 2) + coef1 * t; 
						return begin + change * val/tot;
					};
			case 1:return function(time, begin, change, duration) {
						var t = (duration - time)/duration,
							val = 1 - (coef5 * Math.pow(t, 5) + coef4 * Math.pow(t, 4) + coef3 * Math.pow(t, 3) + coef2 * Math.pow(t, 2) + coef1 * t); 
						return begin + change * val/tot;
					};
			case 2:	return function(time, begin, change, duration) {
						var t, val;
						if (time < duration/2) {
							t = time/(duration/2);
							val = 0.5 * (coef5 * Math.pow(t, 5) + coef4 * Math.pow(t, 4) + coef3 * Math.pow(t, 3) + coef2 * Math.pow(t, 2) + coef1 * t); 
						} else {
							t = (duration-time)/(duration/2);
							val = 1 - 0.5 * (coef5 * Math.pow(t, 5) + coef4 * Math.pow(t, 4) + coef3 * Math.pow(t, 3) + coef2 * Math.pow(t, 2) + coef1 * t); 
						
						}
						return begin + change * val/tot;
					};
			case 3:	return function(time, begin, change, duration) {
						var t, val;
						if (time < duration/2) {
							t = 1-time/(duration/2);
							val = 0.5 - 0.5 * (coef5 * Math.pow(t, 5) + coef4 * Math.pow(t, 4) + coef3 * Math.pow(t, 3) + coef2 * Math.pow(t, 2) + coef1 * t); 
						} else {
							t = time/(duration/2) - 1;
							val = 0.5 + 0.5 * (coef5 * Math.pow(t, 5) + coef4 * Math.pow(t, 4) + coef3 * Math.pow(t, 3) + coef2 * Math.pow(t, 2) + coef1 * t); 
						
						}
						return begin + change * val/tot;
					};
		}
	},
	
	easeCreateIn: function (coef5, coef4, coef3, coef2, coef1, normalize) {
		"use strict";
		return tbEase._easeCreate(0, coef5, coef4, coef3, coef2, coef1, normalize);
	},
	
	easeCreateOut: function (coef5, coef4, coef3, coef2, coef1, normalize) {
		"use strict";
		return tbEase._easeCreate(1, coef5, coef4, coef3, coef2, coef1, normalize);
	},
	
	easeCreateInOut: function (coef5, coef4, coef3, coef2, coef1, normalize) {
		"use strict";
		return tbEase._easeCreate(2, coef5, coef4, coef3, coef2, coef1, normalize);
	},
	
	easeCreateOutIn: function (coef5, coef4, coef3, coef2, coef1, normalize) {
		"use strict";
		return tbEase._easeCreate(3, coef5, coef4, coef3, coef2, coef1, normalize);
	},

//
// Combined ease functions
//

	easeCreateCombined: function (funcs, flips, lengths) {
		"use strict";
		var j, ww = 0, hh, maxHeight = 1, startHeight = [0], startWidth = [0];
		// Make sure the flips array is correct
		if (flips === undefined) { flips = []; }
		while (flips.length < funcs.length) { flips.push(false); }
		// Make sure the lengths array is correct
		if (lengths === undefined) { lengths = []; }
		while (lengths.length < funcs.length) { lengths.push(1/funcs.length); }
		for (j = 0; j < funcs.length; j += 1) { ww += lengths[j]; }
		for (j = 0; j < funcs.length; j += 1) { lengths[j] /= ww; }
		// Compute the start width, height and maximal height
		for (j = 0; j < funcs.length; j += 1) {
			startWidth.push(startWidth[j] + lengths[j]);
			if (funcs[j] === tbEase.easeConstant) { hh = 0; }
			else if (flips[j]) { hh = -1; } 
			else { hh = 1; }
			startHeight.push(startHeight[j] + hh);
			maxHeight = Math.max(maxHeight, startHeight[j+1]);
		}
		
		return function(time, begin, change, duration, arg0, arg1, arg2) {
			var ind, i, val;
			// Compute the function index
			ind = funcs.length-1;
			for (i = 0; i < funcs.length; i += 1) {
				if (time/duration <= startWidth[i+1]) { ind = i; break; }
			}
			// Now compute the value
			val = funcs[ind](time/duration - startWidth[ind], 0, 1, lengths[ind], arg0, arg1, arg2);
			if (flips[ind]) { val = -val; }
			return begin + (startHeight[ind] + val) * change / maxHeight; 
		};
	}

};


/////////////////////////////////////////////////////////////
// tbAnimator: The engine part dealing with animating values over
// time, which can be used for e.g. creating animations.
/////////////////////////////////////////////////////////////

// The constructor for the tbAnimator object
/**
 * @constructor
 */
var tbAnimator = function(target, tracks, events) {
	"use strict";
	this.paused = 0;				// How often paused
	this.currentTime = 0;			// Current time in milliseconds (or whatever the user uses)
	this.speed = 1;					// The speed (multiplication factor)
	this.looping = false;			// Whether to loop the global animator
	this.target = target;			// The target object (often a token)
	this.duration = 0;				// The total duration of the animator
	this.tracks = [];				// The tracks
	this.events = [];				// The events
	if (tracks !== undefined) { this.addTracks(tracks); }
	if (events !== undefined) { this.addTEvents(events); }
};


// *****************************
// Dealing with tracks
// *****************************

// Add a collection of tracks
tbAnimator.prototype.addTracks = function(tracks) {
	"use strict";
	var i;
	if (tracks !== undefined) {
		tracks = [].concat(tracks);
		for (i = 0; i < tracks.length; i += 1) {
			this.addTrack(tracks[i].kind, tracks[i].target, tracks[i].func, tracks[i].arg, tracks[i].keys);
		}
	}
};

// Add a track; returns the id
tbAnimator.prototype.addTrack = function(kind, target, func, arg, keys) {
	"use strict";
	var result;
	this.tracks.push({kind: kind, target: target, func: func, arg: arg,
		keys: [], looping: false, rounding: "none", onlyChanged: true, lastValue: undefined});
	result = this.tracks[this.tracks.length-1];
	if (keys !== undefined) { this.addKeys(result, keys); }
	return result;	
};

// Remove a track
tbAnimator.prototype.removeTrack = function(track) {
	"use strict";
	var ind = this.tracks.indexOf(track);
	if (ind < 0) { return; }
	this.tracks.splice(ind);
};

// Remove all tracks from the animator
tbAnimator.prototype.removeAllTracks = function() {
	"use strict";
	this.tracks = [];
};

// Set whether a track loops
tbAnimator.prototype.setTrackLooping = function(track, looping) {
	"use strict";
	track.looping = looping;
};

// Set the rounding for a track
tbAnimator.prototype.setTrackRounding = function(track, rounding) {
	"use strict";
	track.rounding = rounding;
};

// Set whether a track loops
tbAnimator.prototype.setTrackOnlyChanged = function(track, onlyChanged) {
	"use strict";
	track.onlyChanged = onlyChanged;
};

// Returns the duration of the track
tbAnimator.prototype.getTrackDuration = function(track) {
	"use strict";
	var len;
	len = track.keys.length;
	if (len === 0) { return 0; }
	return track.keys[len-1].time;
};

// Computes the total duration of the animator
tbAnimator.prototype._computeDuration = function() {
	"use strict";
	var i;
	this.duration = 0;
	for (i = 0; i < this.tracks.length; i += 1) {
		this.duration = Math.max(this.duration, this.getTrackDuration(this.tracks[i]));
	}
	this.duration = Math.max(this.duration, this.getEventsDuration());
};

// Returns the value of the track at the given time
tbAnimator.prototype.getTrackValue = function(track, time) {
	"use strict";
	var theValue, len, ind, key1, key2;
	len = track.keys.length;
	if (len === 0) { return 0; }
	// Deal with looping
	if (track.looping) {
		time = time % track.keys[len-1].time;
		if (time < 0) { time += track.keys[len-1].time; }
	}
	// Find the value
	if (time <= track.keys[0].time) {
		theValue = track.keys[0].value;
	} else if (time >= track.keys[len-1].time) {
		theValue = track.keys[len-1].value;
	} else {
		ind = 0;
		while (track.keys[ind].time < time) { ind += 1; }
		key1 = track.keys[ind-1];
		key2 = track.keys[ind];
		theValue = key1.ease(time-key1.time, key1.value, key2.value-key1.value, key2.time-key1.time);
	}
	// Deal with rounding
	switch (track.rounding) {
		case "round": theValue = Math.round(theValue); break;
		case "floor": theValue = Math.floor(theValue); break;
		case "ceil": theValue = Math.ceil(theValue); break;
	}
	// Ready
	return theValue;
};

// Apply the value in the track
tbAnimator.prototype._applyValue = function(track, time) {
	"use strict";
	var theValue, target;
	if (track.keys.length === 0) { return; }
	theValue = this.getTrackValue(track, time);
	// Check whether changed
	if (theValue === track.lastValue && track.onlyChanged) {
		return;
	}		
	// Apply the value
	target = track.target === undefined ? this.target : track.target;
	if (target === undefined && track.kind !== "function") { return; }
	switch (track.kind) {
		case "image": target.image = theValue; break;
		case "subImage": target.subImage = theValue; break;
		case "alpha": target.alpha = theValue; break;
		case "xScale": target.xScale = theValue; break;
		case "yScale": target.yScale = theValue; break;
		case "scale": target.scale = theValue; break;
		case "angle": target.angle = theValue; break;
		case "x": target.x = theValue; break;
		case "y": target.y = theValue; break;
		case "speed": target.speed = theValue; break;
		case "function":
			if (target === undefined) {
				track.func(theValue, track.arg);
			} else {
				track.func.call(target, theValue, track.arg);
			}
			break;
	}
};


// *****************************
// Dealing with keys
// *****************************

// Add a collection of keys to a track, time is now an absolute property
tbAnimator.prototype.addKeys = function(track, keys) {
	"use strict";
	var i;
	if (keys !== undefined) {
		keys = [].concat(keys);
		for (i = 0; i < keys.length; i += 1) {
			this.addKey(track, keys[i].time, keys[i].value, keys[i].ease, keys[i].arg);
		}
	}
};

// Add a key to a track, time is now an absolute property
tbAnimator.prototype.addKey = function(track, time, value, ease, arg) {
	"use strict";
	var result;
	if (ease === undefined) { ease = tbEase.easeLinear; }
	track.keys.push( {time: time, value: value, ease: ease, arg: arg} );
	result = track.keys[track.keys.length-1];
	this._sortKeys(track);
	this._computeDuration();
	return result;
};

// Append a collection of keys to a track, time is now a relative property
tbAnimator.prototype.appendKeys = function(track, keys) {
	"use strict";
	var i;
	if (keys !== undefined) {
		keys = [].concat(keys);
		for (i = 0; i < keys.length; i += 1) {
			this.appendKey(track, keys[i].time, keys[i].value, keys[i].ease, keys[i].arg);
		}
	}
};

// Append a key to a track, time is now a relative property
tbAnimator.prototype.appendKey = function(track, time, value, ease, arg) {
	"use strict";
	var result, lastTime;
	lastTime = track.keys.length === 0 ? 0 : track.keys[track.keys.length-1].time;
	if (ease === undefined) { ease = tbEase.easeLinear; }
	track.keys.push( {time: lastTime + time, value: value, ease: ease, arg: arg} );
	result = track.keys[track.keys.length-1];
	this._computeDuration();
	return result;
};

// Remove a key
tbAnimator.prototype.removeKey = function(track, key) {
	"use strict";
	var ind = track.indexOf(key);
	if (ind < 0) { return; }
	track.splice(ind);
	this._computeDuration();
};

// Remove all keys (in an interval) from the track
tbAnimator.prototype.removeKeys = function(track, startTime, endTime) {
	"use strict";
	var i;
	if (startTime === undefined) { startTime = -99999999; }
	if (endTime === undefined) { endTime = 99999999; }
	for (i = track.keys.length - 1; i >= 0; i -= 1) {
		if (track.keys[i].time >= startTime && track.keys[i].time <= endTime) {
			track.keys.splice(i);
		}
	}
	this._computeDuration();
};

// Remove all keys (in an interval) from all tracks
tbAnimator.prototype.removeAllKeys = function(startTime, endTime) {
	"use strict";
	var i;
	for (i = 0; i < this.tracks.length; i += 1) {
		this.removeKeys(this.tracks[i], startTime, endTime);
	}
};

// Shift all keys (in an interval) in the track by a particular amount of time
tbAnimator.prototype.shiftKeys = function(track, amount, startTime, endTime) {
	"use strict";
	var i;
	if (startTime === undefined) { startTime = -99999999; }
	if (endTime === undefined) { endTime = 99999999; }
	for (i = 0; i < track.keys.length; i += 1) {
		if (track.keys[i].time >= startTime && track.keys[i].time <= endTime) {
			track.keys[i].time += amount;
			if (track.keys[i].time < 0) { track.keys[i].time = 0; }
		}
	}
	this._sortKeys(track);
	this._computeDuration();
};

// Shift all keys (in an interval) in all tracks
tbAnimator.prototype.shiftAllKeys = function(amount, startTime, endTime) {
	"use strict";
	var i;
	for (i = 0; i < this.tracks.length; i += 1) {
		this.shiftKeys(this.tracks[i], amount, startTime, endTime);
	}
};

// Stretch all keys (in an interval) in the track by multiplying the time with a factor
tbAnimator.prototype.stretchKeys = function(track, factor, startTime, endTime) {
	"use strict";
	var i;
	if (factor < 0) { return; }
	if (startTime === undefined) { startTime = -99999999; }
	if (endTime === undefined) { endTime = 99999999; }
	for (i = 0; i < track.keys.length; i += 1) {
		if (track.keys[i].time >= startTime && track.keys[i].time <= endTime) {
			track.keys[i].time *= factor;
		}
	}
	this._sortKeys(track);
	this._computeDuration();
};

// Stretch all keys (in an interval) in all tracks
tbAnimator.prototype.stretchAllKeys = function(factor, startTime, endTime) {
	"use strict";
	var i;
	for (i = 0; i < this.tracks.length; i += 1) {
		this.stretchKeys(this.tracks[i], factor, startTime, endTime);
	}
};

// Sort the keys in the track by time
tbAnimator.prototype._sortKeys = function(track) {
	"use strict";
	track.keys.sort( function(a, b) { return a.time - b.time; } );
};


// *****************************
// Dealing with events
//		- When an event returns true, is stops the progress of time
// *****************************

// Add a collection of events
tbAnimator.prototype.addEvents = function(events) {
	"use strict";
	var i;
	if (events !== undefined) {
		events = [].concat(events);
		for (i = 0; i < events.length; i += 1) {
			this.addEvent(events[i].target, events[i].time, events[i].callback, events[i].arg);
		}
	}
};

// Add an event; Returns the event object
tbAnimator.prototype.addEvent = function(target, time, callback, arg) {
	"use strict";
	var result;
	this.events.push( {target: target, time: time, callback: callback, arg: arg} ) ;
	result = this.events[this.events.length-1];
	this._sortEvents();
	this._computeDuration();
	return result;
};

// Append a collection of events, time is now a relative property
tbAnimator.prototype.appendEvents = function(events) {
	"use strict";
	var i;
	if (events !== undefined) {
		events = [].concat(events);
		for (i = 0; i < events.length; i += 1) {
			this.appendEvent(events[i].target, events[i].time, events[i].callback, events[i].arg);
		}
	}
};

tbAnimator.prototype.appendEvent = function(target, time, callback, arg) {
	"use strict";
	var result, lastTime;
	lastTime = this.events.length === 0 ? 0 : this.events[this.events.length-1].time;
	this.events.push( {target: target, time: lastTime + time, callback: callback, arg: arg} ) ;
	result = this.events[this.events.length-1];
	this._computeDuration();
	return result;
};

// Remove an event
tbAnimator.prototype.removeEvent = function(event) {
	"use strict";
	var ind = this.events.indexOf(event);
	if (ind >= 0) { this.events.splice(ind); }
	this._computeDuration();
};

// Remove all events (in a time interval) from the animator
tbAnimator.prototype.removeEvents = function(startTime, endTime) {
	"use strict";
	var i;
	if (startTime === undefined) { startTime = -99999999; }
	if (endTime === undefined) { endTime = 99999999; }
	for (i = this.events.length - 1; i >= 0; i -= 1) {
		if (this.events[i].time >= startTime && this.events[i].time <= endTime) {
			this.events.splice(i);
		}
	}
	this._computeDuration();
};

// Shift all events (in an interval) by a particular amount of time
tbAnimator.prototype.shiftEvents = function(time, startTime, endTime) {
	"use strict";
	var  i;
	if (startTime === undefined) { startTime = -99999999; }
	if (endTime === undefined) { endTime = 99999999; }
	for (i = 0; i < this.events.length; i += 1) {
		if (this.events[i].time >= startTime && this.events[i].time <= endTime) {
			this.events[i].time += time;
		}
	}
	this._sortEvents();
	this._computeDuration();
};

// Stretch all events (in an interval) by multiplying the time with a factor
tbAnimator.prototype.stretchEvents = function(factor, startTime, endTime) {
	"use strict";
	var i;
	if (startTime === undefined) { startTime = -99999999; }
	if (endTime === undefined) { endTime = 99999999; }
	for (i = 0; i < this.events.length; i += 1) {
		if (this.events[i].time >= startTime && this.events[i].time <=endTime) {
			this.events[i].time *= factor;
		}
	}
	this._sortEvents();
	this._computeDuration();
};

// Returns the duration of the events
tbAnimator.prototype.getEventsDuration = function() {
	"use strict";
	var len;
	len = this.events.length;
	if (len === 0) { return 0; }
	return this.events[len-1].time;
};


// Sort the events by time
tbAnimator.prototype._sortEvents = function() {
	"use strict";
	this.events.sort( function(a, b) { return a.time - b.time; } );
};

// Find all events in the time interval (taking speed sign and looping into account)
// Do not report events at the startTime to avoid double execution
tbAnimator.prototype._findEvents = function(startTime, endTime) {
	"use strict";
	var i, result = [];
	if (this.speed > 0) {
		if (endTime >= startTime) {
			for (i = 0; i < this.events.length; i += 1) {
				if (this.events[i].time > startTime && this.events[i].time <= endTime) { 
					result.push(this.events[i]); 
				}
			}
		} else {
			for (i = 0; i < this.events.length; i += 1) {
				if (this.events[i].time > startTime) { 
					result.push(this.events[i]); 
				}
			}
			for (i = 0; i < this.events.length; i += 1) {
				if (this.events[i].time <= endTime) { 
					result.push(this.events[i]); 
				}
			}
		}
	} else {
		if (endTime <= startTime) {
			for (i = this.events.length-1; i >= 0; i -= 1) {
				if (this.events[i].time < startTime && this.events[i].time >= endTime) { 
					result.push(this.events[i]); 
				}
			}
		} else {
			for (i = this.events.length-1; i >= 0; i -= 1) {
				if (this.events[i].time < startTime) { 
					result.push(this.events[i]); 
				}
			}
			for (i = this.events.length-1; i >= 0; i -= 1) {
				if (this.events[i].time >= endTime) { 
					result.push(this.events[i]); 
				}
			}
		}
	}
	return result;
};

// Executes an event; returns whether to break
tbAnimator.prototype._executeEvent = function(event) {
	"use strict";
	var target, result;
	target = event.target === undefined ? this.target : event.target;
	if (target === undefined) {
		result = event.callback(event.arg);
	} else {
		result = event.callback.call(target, event.arg);
	}
	return result;
};


// *****************************
// Pausing and resuming
// *****************************

// Pause the animator (these stack)
tbAnimator.prototype.pause = function() {
	"use strict";
	this.paused += 1;
};

// Resumes the animator
tbAnimator.prototype.resume = function() {
	"use strict";
	this.paused -= 1;
};

// Resumes the animator immediately
tbAnimator.prototype.resumeForced = function() {
	"use strict";
	this.paused = 0;
};

// Returns whether the animator is paused
tbAnimator.prototype.isPaused = function() {
	"use strict";
	return this.paused > 0;
};

// Set the speed
tbAnimator.prototype.setSpeed = function(speed) {
	"use strict";
	this.speed = speed;
};

// Returns the speed
tbAnimator.prototype.getSpeed = function() {
	"use strict";
	return this.speed;
};

// Set the looping
tbAnimator.prototype.setLooping = function(looping) {
	"use strict";
	this.looping = looping;
};

// Returns the looping
tbAnimator.prototype.getLooping = function() {
	"use strict";
	return this.looping;
};

// Returns the total duration
tbAnimator.prototype.getDuration = function() {
	"use strict";
	return this.duration;
};


// *****************************
// Changing time
// *****************************

// Correct the time, taking looping into account
tbAnimator.prototype._correctTime = function(time) {
	"use strict";
	if (this.looping) {
		time = time % this.duration;
		if (time < 0) { time += this.duration; }
	} else {
		time = Math.max(0, Math.min(this.duration, time));
	}
	return time;
};

// Sets the time, changing all values (unless not allowed) but NOT calling events
tbAnimator.prototype.setTime = function(newTime, noChange) {
	"use strict";
	var i;
	this.currentTime = this._correctTime(newTime);
	if (noChange) { return; }
	for (i = 0; i < this.tracks.length; i += 1) {
		this._applyValue(this.tracks[i], this.currentTime);
	}
};

// Update the time, changing all values and calling events and checking breakpoints
tbAnimator.prototype.updateTime = function(timePassed) {
	"use strict";
	var newTime, events, i;
	if (this.paused > 0) { return; }
	// Compute the new time
	newTime = this._correctTime(this.currentTime + this.speed * timePassed);
	// Handle events
	events = this._findEvents(this.currentTime, newTime);
	for (i = 0; i < events.length; i += 1) {
		this.setTime(events[i].time);
		if (this._executeEvent(events[i])) { 
			this.currentTime = events[i].time - 0.0000001 * Math.sign(this.speed);	// To make sure it is tested again the next step
			return;
		}
	}
	// Set the new time
	this.setTime(newTime);
};




/////////////////////////////////////////////////////////////
// tbSpine: The engine part dealing with spine animations
//
// Copyright 2016 CoolGames
// Last Changed: 22-3-2016
/////////////////////////////////////////////////////////////

// Note that we reference the various methods and properties in the spine runtime
// by string, to avoid problems with obfuscation. The spine runtime cannot be obfuscated.

var tbSpine = function(animationJson, namespace) {
// The constructor for the spine object
	"use strict";
	this.animationJson = animationJson;
	this.setNamespace(namespace);
	this.skeleton = null;
	this.skeletonData = null;
	this.state = null;
	this.stateDate = null;
	this._isPaused = 0;
	this.speed = 1;
	this._events = [];
	this._loadSkeleton(this.animationJson);
	this._onComplete = null;
};

// Clones the spine (such that you can use multiple at the same moment)
tbSpine.prototype.clone = function() {
	"use strict";
	return new tbSpine(this.animationJson, this.namespace);
};

// Sets the namespace (such that we can change the visuals without redoing changing the animation)
tbSpine.prototype.setNamespace = function(namespace) {
	"use strict";
	if(namespace === undefined){namespace = window;}
	this.namespace = namespace;
};


// *****************************
// Dealing with animations
// *****************************

// Sets the animation to play
tbSpine.prototype.setAnimation = function(animation, loop) {
	"use strict";
	if(this.state){
		this.state["setAnimationByName"](0, animation, loop);
	}
};

// Add an animation to be played after the current animation
tbSpine.prototype.addAnimation = function(animation, loop, delay) {
	"use strict";
	if(delay === undefined || delay < 0){ delay = 0;}
	if(this.state){
		this.state["addAnimationByName"](0, animation, loop, delay);
	}
};

// Sets transition smoothness of two animations
tbSpine.prototype.mixAnimations = function(firstAnimation, secondAnimation, duration){
	"use strict";
	if(duration === undefined){ duration = 0.2;}
	if(this.stateData){
		this.stateData["setMixByName"](firstAnimation, secondAnimation, duration);
	}
};


// *****************************
// Setting properties
// *****************************

// Sets the speed with which to play (1 is default, must be >= 0)
tbSpine.prototype.setSpeed = function(speed) {
	"use strict";
	if(speed === undefined){ speed = 1; }
	if(speed < 0) { speed = 0; }
	this.speed = speed;
};

// Returns the speed with which to play
tbSpine.prototype.getSpeed = function() {
	"use strict";
	return this.speed;
};


// *****************************
// Dealing with events
// *****************************

// Sets an event to call a particular callback
tbSpine.prototype.setEventCallback = function(event, callback) {
	"use strict";
	var i;
	var self = this;
	// Check whether it already exists
	for(i = self._events.length-1; i >= 0 ; i -= 1){
		if(self._events[i].event === event){
			self._events[i].callback = callback;
			return;
		}
	}
	this._events.push({event: event, callback: callback});
};

// Get the callback for a particular event
// Get the callback for a particular event
tbSpine.prototype.getEventCallback = function(event) {
	"use strict";
	var i, _callback;
	var self = this;
	for(i = self._events.length-1; i >= 0 ; i -= 1){
		if(self._events[i].event === event){
			_callback = self._events[i].callback;
		}
	}
	return _callback;
};

// Clear the event callback
tbSpine.prototype.clearEventCallback = function(event) {
	"use strict";
	var i;
	var self = this;
	for(i = self._events.length-1; i >= 0 ; i -= 1){
		if(self._events[i].event === event){
			self._events.splice(i, 1);
		}
	}
};

// Clear all event callbacks
tbSpine.prototype.clearAllEventCallbacks = function() {
	"use strict";
	this._events = [];
};

// Sets the callback to be called on complete
tbSpine.prototype.setOnComplete = function(callback) {
	"use strict";
	this._onComplete = callback;
};

// Returns the callback on complete
tbSpine.prototype.getOnComplete = function() {
	"use strict";
	return this._onComplete;
};

// Clears the callback on complete
tbSpine.prototype.clearOnComplete = function() {
	"use strict";
	this._onComplete = null;
};

//Initialize spines callback functions
tbSpine.prototype._initEvents = function(){
	"use strict";
	var self = this;
	if(this.state){
		this.state["onEvent"] = function(trackIndex, event){
			var i;
			for(i = 0; i < self._events.length; i += 1){
				if(self._events[i].event === event["data"]["name"]){
					if (self._events[i].callback) {self._events[i].callback();}
				}
			}
		};
		this.state["onComplete"] = function(trackIndex, count){
			if(self._onComplete){self._onComplete();}
		};
	}
};


// *****************************
// Pausing and resuming
// *****************************

// Pauses the animation, that is, no updates to the time are applied. This method stacks, so multiple pauses must be followed by multiple resumes
tbSpine.prototype.pause = function() {
	"use strict";
	this._isPaused += 1;
};

// Resumes the animation. This method stacks, so multiple pauses must be followed by multiple resumes
tbSpine.prototype.resume = function() {
	"use strict";
	this._isPaused -= 1;
};

// Resumes the animation immediately, ignoring the stacking of pauses
tbSpine.prototype.resumeForced = function() {
	"use strict";
	this._isPaused = 0;
};

// Returns whether the animation is paused
tbSpine.prototype.isPaused = function() {
	"use strict";
	return this._isPaused > 0;
};


// *****************************
// Changing time
// *****************************

// Update the time, changing all values and calling events
tbSpine.prototype.updateTime = function(timePassed) {
	"use strict";
	if(this._isPaused > 0){return;}
	this.state["update"]((timePassed / 1000) * this.speed);
	this.state["apply"](this.skeleton);
	this.skeleton["updateWorldTransform"]();
};


// *****************************
// Drawing
// *****************************

// Draw at a position
tbSpine.prototype.drawSimple = function(mX, mY) {
	"use strict";
	this.drawExt(mX, mY, undefined, undefined, undefined , undefined);
};

// Draw at a position with an alpha value
tbSpine.prototype.drawAlpha = function(mX, mY, alpha) {
	"use strict";
	this.drawExt(mX, mY, undefined, undefined, undefined , alpha);
};

// Draw at a position with a transformation and an alpha value
tbSpine.prototype.drawExt = function(mX, mY, xScale, yScale, angle, alpha) {
	"use strict";
	var context = tbGraphics.context,
		drawOrder = this.skeleton["drawOrder"],
		i, slot, attachment, bone, x, y, rotation, img;
	// COrrect the values
	if(mX === undefined){ mX = 0; }
	if(mY === undefined){ mY = 0; }
	if(alpha === undefined){ alpha = 1; }
	if(xScale === undefined){ xScale = 1;}
	if(yScale === undefined){ yScale = 1;}
	if(angle === undefined){angle = 0;}
	if(alpha === undefined){alpha = 1;}
	// Set the global transformation
	context.save();
	context.translate(mX, mY);
	context.scale(xScale,yScale);
	context.rotate(angle);
	// Now draw the skeleton
	for (i = 0; i < drawOrder.length; i += 1) {
		slot = drawOrder[i];
		attachment = slot["attachment"];
		if (!(attachment instanceof spine["RegionAttachment"])) { continue; }
		bone = slot["bone"];
		// Find the position, etc.
		x = bone["worldX"] + attachment["x"] * bone["m00"] + attachment["y"] * bone["m01"];
		y = bone["worldY"] + attachment["x"] * bone["m10"] + attachment["y"] * bone["m11"];
		rotation = -(bone["worldRotation"] + attachment["rotation"]) * Math.PI / 180;
		img = this.namespace[attachment["name"]];
		// Now transfrom and draw
		context.save();
		context.translate(imageScalePercentage * x / 100, imageScalePercentage * y / 100);
		context.globalAlpha = alpha * slot["a"];
		context.scale(attachment["scaleX"], attachment["scaleY"]);
		context.rotate(rotation);
		img.drawSimple(0,-img.width / 2, -img.height/2);
		context.restore();
	}
	context.restore();
};

// *****************************
// Internal Functions
// *****************************

//Loading the skeleton
tbSpine.prototype._loadSkeleton = function(skeletonText){
	"use strict";
	// Create the json
	var json = new spine["SkeletonJson"]({
		"newRegionAttachment": function (skin, name, path) {
			var attachment = new spine["RegionAttachment"](name);
			attachment["rendererObject"] = undefined;
			return attachment;
		},
		"newBoundingBoxAttachment": function (skin, name) {
			return new spine["BoundingBoxAttachment"](name);
		}
	});
	// Create the skeleton data
	this.skeletonData = json["readSkeletonData"](JSON.parse(skeletonText));
	// Mirror the vertical direction
	spine["Bone"]["yDown"] = true;
	// Create the skeleton 
	this.skeleton = new spine["Skeleton"](this.skeletonData);
	this.skeleton["updateWorldTransform"]();
	// Create the space
	this.stateData = new spine["AnimationStateData"](this.skeletonData);
	this.state = new spine["AnimationState"](this.stateData);
	
	// Initialize the events
	this._initEvents();
};


var Module = window['Module'];

Module.getCache = Module['getCache'];
Module.wrapPointer = Module['wrapPointer'];
Module.castObject = Module['castObject'];
Module.NULL = Module['wrapPointer'](0);
Module.destroy = Module['destroy'];
Module.compare = Module['compare'];
Module.getPointer = Module['getPointer'];
Module.getClass = Module['getClass'];
Module.allocate = Module['allocate'];
Module.ALLOC_STACK = Module['ALLOC_STACK'];
Module.setValue = Module['setValue'];

var Box2D = Module;

Module.JSDestructionListener = Module['JSDestructionListener'];
Module.JSDestructionListener.prototype.SayGoodbyeJoint = Module.JSDestructionListener.prototype['SayGoodbyeJoint'];
Module.JSDestructionListener.prototype.SayGoodbyeFixture = Module.JSDestructionListener.prototype['SayGoodbyeFixture'];
Module.JSDestructionListener.prototype.__destroy__ = Module.JSDestructionListener.prototype['__destroy__'];
Module.b2ContactImpulse = Module['b2ContactImpulse'];
Module.b2ContactImpulse.prototype.get_count = Module.b2ContactImpulse.prototype['get_count'];
Module.b2ContactImpulse.prototype.set_count = Module.b2ContactImpulse.prototype['set_count'];
Module.b2ContactImpulse.prototype.__destroy__ = Module.b2ContactImpulse.prototype['__destroy__'];
Module.b2DistanceJoint = Module['b2DistanceJoint'];
Module.b2DistanceJoint.prototype.GetLocalAnchorA = Module.b2DistanceJoint.prototype['GetLocalAnchorA'];
Module.b2DistanceJoint.prototype.GetLocalAnchorB = Module.b2DistanceJoint.prototype['GetLocalAnchorB'];
Module.b2DistanceJoint.prototype.SetLength = Module.b2DistanceJoint.prototype['SetLength'];
Module.b2DistanceJoint.prototype.GetLength = Module.b2DistanceJoint.prototype['GetLength'];
Module.b2DistanceJoint.prototype.SetFrequency = Module.b2DistanceJoint.prototype['SetFrequency'];
Module.b2DistanceJoint.prototype.GetFrequency = Module.b2DistanceJoint.prototype['GetFrequency'];
Module.b2DistanceJoint.prototype.SetDampingRatio = Module.b2DistanceJoint.prototype['SetDampingRatio'];
Module.b2DistanceJoint.prototype.GetDampingRatio = Module.b2DistanceJoint.prototype['GetDampingRatio'];
Module.b2DistanceJoint.prototype.GetType = Module.b2DistanceJoint.prototype['GetType'];
Module.b2DistanceJoint.prototype.GetBodyA = Module.b2DistanceJoint.prototype['GetBodyA'];
Module.b2DistanceJoint.prototype.GetBodyB = Module.b2DistanceJoint.prototype['GetBodyB'];
Module.b2DistanceJoint.prototype.GetAnchorA = Module.b2DistanceJoint.prototype['GetAnchorA'];
Module.b2DistanceJoint.prototype.GetAnchorB = Module.b2DistanceJoint.prototype['GetAnchorB'];
Module.b2DistanceJoint.prototype.GetReactionForce = Module.b2DistanceJoint.prototype['GetReactionForce'];
Module.b2DistanceJoint.prototype.GetReactionTorque = Module.b2DistanceJoint.prototype['GetReactionTorque'];
Module.b2DistanceJoint.prototype.GetNext = Module.b2DistanceJoint.prototype['GetNext'];
Module.b2DistanceJoint.prototype.GetUserData = Module.b2DistanceJoint.prototype['GetUserData'];
Module.b2DistanceJoint.prototype.SetUserData = Module.b2DistanceJoint.prototype['SetUserData'];
Module.b2DistanceJoint.prototype.IsActive = Module.b2DistanceJoint.prototype['IsActive'];
Module.b2DistanceJoint.prototype.GetCollideConnected = Module.b2DistanceJoint.prototype['GetCollideConnected'];
Module.b2DistanceJoint.prototype.__destroy__ = Module.b2DistanceJoint.prototype['__destroy__'];
Module.b2Mat33 = Module['b2Mat33'];
Module.b2Mat33.prototype.SetZero = Module.b2Mat33.prototype['SetZero'];
Module.b2Mat33.prototype.Solve33 = Module.b2Mat33.prototype['Solve33'];
Module.b2Mat33.prototype.Solve22 = Module.b2Mat33.prototype['Solve22'];
Module.b2Mat33.prototype.GetInverse22 = Module.b2Mat33.prototype['GetInverse22'];
Module.b2Mat33.prototype.GetSymInverse33 = Module.b2Mat33.prototype['GetSymInverse33'];
Module.b2Mat33.prototype.get_ex = Module.b2Mat33.prototype['get_ex'];
Module.b2Mat33.prototype.set_ex = Module.b2Mat33.prototype['set_ex'];
Module.b2Mat33.prototype.get_ey = Module.b2Mat33.prototype['get_ey'];
Module.b2Mat33.prototype.set_ey = Module.b2Mat33.prototype['set_ey'];
Module.b2Mat33.prototype.get_ez = Module.b2Mat33.prototype['get_ez'];
Module.b2Mat33.prototype.set_ez = Module.b2Mat33.prototype['set_ez'];
Module.b2Mat33.prototype.__destroy__ = Module.b2Mat33.prototype['__destroy__'];
Module.b2Fixture = Module['b2Fixture'];
Module.b2Fixture.prototype.GetType = Module.b2Fixture.prototype['GetType'];
Module.b2Fixture.prototype.GetShape = Module.b2Fixture.prototype['GetShape'];
Module.b2Fixture.prototype.SetSensor = Module.b2Fixture.prototype['SetSensor'];
Module.b2Fixture.prototype.IsSensor = Module.b2Fixture.prototype['IsSensor'];
Module.b2Fixture.prototype.SetFilterData = Module.b2Fixture.prototype['SetFilterData'];
Module.b2Fixture.prototype.GetFilterData = Module.b2Fixture.prototype['GetFilterData'];
Module.b2Fixture.prototype.Refilter = Module.b2Fixture.prototype['Refilter'];
Module.b2Fixture.prototype.GetBody = Module.b2Fixture.prototype['GetBody'];
Module.b2Fixture.prototype.GetNext = Module.b2Fixture.prototype['GetNext'];
Module.b2Fixture.prototype.GetUserData = Module.b2Fixture.prototype['GetUserData'];
Module.b2Fixture.prototype.SetUserData = Module.b2Fixture.prototype['SetUserData'];
Module.b2Fixture.prototype.TestPoint = Module.b2Fixture.prototype['TestPoint'];
Module.b2Fixture.prototype.RayCast = Module.b2Fixture.prototype['RayCast'];
Module.b2Fixture.prototype.GetMassData = Module.b2Fixture.prototype['GetMassData'];
Module.b2Fixture.prototype.SetDensity = Module.b2Fixture.prototype['SetDensity'];
Module.b2Fixture.prototype.GetDensity = Module.b2Fixture.prototype['GetDensity'];
Module.b2Fixture.prototype.GetFriction = Module.b2Fixture.prototype['GetFriction'];
Module.b2Fixture.prototype.SetFriction = Module.b2Fixture.prototype['SetFriction'];
Module.b2Fixture.prototype.GetRestitution = Module.b2Fixture.prototype['GetRestitution'];
Module.b2Fixture.prototype.SetRestitution = Module.b2Fixture.prototype['SetRestitution'];
Module.b2Fixture.prototype.GetAABB = Module.b2Fixture.prototype['GetAABB'];
Module.b2Fixture.prototype.Dump = Module.b2Fixture.prototype['Dump'];
Module.b2Fixture.prototype.__destroy__ = Module.b2Fixture.prototype['__destroy__'];
Module.b2Filter = Module['b2Filter'];
Module.b2Filter.prototype.get_categoryBits = Module.b2Filter.prototype['get_categoryBits'];
Module.b2Filter.prototype.set_categoryBits = Module.b2Filter.prototype['set_categoryBits'];
Module.b2Filter.prototype.get_maskBits = Module.b2Filter.prototype['get_maskBits'];
Module.b2Filter.prototype.set_maskBits = Module.b2Filter.prototype['set_maskBits'];
Module.b2Filter.prototype.get_groupIndex = Module.b2Filter.prototype['get_groupIndex'];
Module.b2Filter.prototype.set_groupIndex = Module.b2Filter.prototype['set_groupIndex'];
Module.b2Filter.prototype.__destroy__ = Module.b2Filter.prototype['__destroy__'];
Module.JSQueryCallback = Module['JSQueryCallback'];
Module.JSQueryCallback.prototype.ReportFixture = Module.JSQueryCallback.prototype['ReportFixture'];
Module.JSQueryCallback.prototype.__destroy__ = Module.JSQueryCallback.prototype['__destroy__'];
Module.b2MouseJoint = Module['b2MouseJoint'];
Module.b2MouseJoint.prototype.SetTarget = Module.b2MouseJoint.prototype['SetTarget'];
Module.b2MouseJoint.prototype.GetTarget = Module.b2MouseJoint.prototype['GetTarget'];
Module.b2MouseJoint.prototype.SetMaxForce = Module.b2MouseJoint.prototype['SetMaxForce'];
Module.b2MouseJoint.prototype.GetMaxForce = Module.b2MouseJoint.prototype['GetMaxForce'];
Module.b2MouseJoint.prototype.SetFrequency = Module.b2MouseJoint.prototype['SetFrequency'];
Module.b2MouseJoint.prototype.GetFrequency = Module.b2MouseJoint.prototype['GetFrequency'];
Module.b2MouseJoint.prototype.SetDampingRatio = Module.b2MouseJoint.prototype['SetDampingRatio'];
Module.b2MouseJoint.prototype.GetDampingRatio = Module.b2MouseJoint.prototype['GetDampingRatio'];
Module.b2MouseJoint.prototype.GetType = Module.b2MouseJoint.prototype['GetType'];
Module.b2MouseJoint.prototype.GetBodyA = Module.b2MouseJoint.prototype['GetBodyA'];
Module.b2MouseJoint.prototype.GetBodyB = Module.b2MouseJoint.prototype['GetBodyB'];
Module.b2MouseJoint.prototype.GetAnchorA = Module.b2MouseJoint.prototype['GetAnchorA'];
Module.b2MouseJoint.prototype.GetAnchorB = Module.b2MouseJoint.prototype['GetAnchorB'];
Module.b2MouseJoint.prototype.GetReactionForce = Module.b2MouseJoint.prototype['GetReactionForce'];
Module.b2MouseJoint.prototype.GetReactionTorque = Module.b2MouseJoint.prototype['GetReactionTorque'];
Module.b2MouseJoint.prototype.GetNext = Module.b2MouseJoint.prototype['GetNext'];
Module.b2MouseJoint.prototype.GetUserData = Module.b2MouseJoint.prototype['GetUserData'];
Module.b2MouseJoint.prototype.SetUserData = Module.b2MouseJoint.prototype['SetUserData'];
Module.b2MouseJoint.prototype.IsActive = Module.b2MouseJoint.prototype['IsActive'];
Module.b2MouseJoint.prototype.GetCollideConnected = Module.b2MouseJoint.prototype['GetCollideConnected'];
Module.b2MouseJoint.prototype.__destroy__ = Module.b2MouseJoint.prototype['__destroy__'];
Module.b2Rot = Module['b2Rot'];
Module.b2Rot.prototype.Set = Module.b2Rot.prototype['Set'];
Module.b2Rot.prototype.SetIdentity = Module.b2Rot.prototype['SetIdentity'];
Module.b2Rot.prototype.GetAngle = Module.b2Rot.prototype['GetAngle'];
Module.b2Rot.prototype.GetXAxis = Module.b2Rot.prototype['GetXAxis'];
Module.b2Rot.prototype.GetYAxis = Module.b2Rot.prototype['GetYAxis'];
Module.b2Rot.prototype.get_s = Module.b2Rot.prototype['get_s'];
Module.b2Rot.prototype.set_s = Module.b2Rot.prototype['set_s'];
Module.b2Rot.prototype.get_c = Module.b2Rot.prototype['get_c'];
Module.b2Rot.prototype.set_c = Module.b2Rot.prototype['set_c'];
Module.b2Rot.prototype.__destroy__ = Module.b2Rot.prototype['__destroy__'];
Module.b2Profile = Module['b2Profile'];
Module.b2Profile.prototype.get_step = Module.b2Profile.prototype['get_step'];
Module.b2Profile.prototype.set_step = Module.b2Profile.prototype['set_step'];
Module.b2Profile.prototype.get_collide = Module.b2Profile.prototype['get_collide'];
Module.b2Profile.prototype.set_collide = Module.b2Profile.prototype['set_collide'];
Module.b2Profile.prototype.get_solve = Module.b2Profile.prototype['get_solve'];
Module.b2Profile.prototype.set_solve = Module.b2Profile.prototype['set_solve'];
Module.b2Profile.prototype.get_solveInit = Module.b2Profile.prototype['get_solveInit'];
Module.b2Profile.prototype.set_solveInit = Module.b2Profile.prototype['set_solveInit'];
Module.b2Profile.prototype.get_solveVelocity = Module.b2Profile.prototype['get_solveVelocity'];
Module.b2Profile.prototype.set_solveVelocity = Module.b2Profile.prototype['set_solveVelocity'];
Module.b2Profile.prototype.get_solvePosition = Module.b2Profile.prototype['get_solvePosition'];
Module.b2Profile.prototype.set_solvePosition = Module.b2Profile.prototype['set_solvePosition'];
Module.b2Profile.prototype.get_broadphase = Module.b2Profile.prototype['get_broadphase'];
Module.b2Profile.prototype.set_broadphase = Module.b2Profile.prototype['set_broadphase'];
Module.b2Profile.prototype.get_solveTOI = Module.b2Profile.prototype['get_solveTOI'];
Module.b2Profile.prototype.set_solveTOI = Module.b2Profile.prototype['set_solveTOI'];
Module.b2Profile.prototype.__destroy__ = Module.b2Profile.prototype['__destroy__'];
Module.VoidPtr = Module['VoidPtr'];
Module.VoidPtr.prototype.__destroy__ = Module.VoidPtr.prototype['__destroy__'];
Module.b2BodyDef = Module['b2BodyDef'];
Module.b2BodyDef.prototype.get_type = Module.b2BodyDef.prototype['get_type'];
Module.b2BodyDef.prototype.set_type = Module.b2BodyDef.prototype['set_type'];
Module.b2BodyDef.prototype.get_position = Module.b2BodyDef.prototype['get_position'];
Module.b2BodyDef.prototype.set_position = Module.b2BodyDef.prototype['set_position'];
Module.b2BodyDef.prototype.get_angle = Module.b2BodyDef.prototype['get_angle'];
Module.b2BodyDef.prototype.set_angle = Module.b2BodyDef.prototype['set_angle'];
Module.b2BodyDef.prototype.get_linearVelocity = Module.b2BodyDef.prototype['get_linearVelocity'];
Module.b2BodyDef.prototype.set_linearVelocity = Module.b2BodyDef.prototype['set_linearVelocity'];
Module.b2BodyDef.prototype.get_angularVelocity = Module.b2BodyDef.prototype['get_angularVelocity'];
Module.b2BodyDef.prototype.set_angularVelocity = Module.b2BodyDef.prototype['set_angularVelocity'];
Module.b2BodyDef.prototype.get_linearDamping = Module.b2BodyDef.prototype['get_linearDamping'];
Module.b2BodyDef.prototype.set_linearDamping = Module.b2BodyDef.prototype['set_linearDamping'];
Module.b2BodyDef.prototype.get_angularDamping = Module.b2BodyDef.prototype['get_angularDamping'];
Module.b2BodyDef.prototype.set_angularDamping = Module.b2BodyDef.prototype['set_angularDamping'];
Module.b2BodyDef.prototype.get_allowSleep = Module.b2BodyDef.prototype['get_allowSleep'];
Module.b2BodyDef.prototype.set_allowSleep = Module.b2BodyDef.prototype['set_allowSleep'];
Module.b2BodyDef.prototype.get_awake = Module.b2BodyDef.prototype['get_awake'];
Module.b2BodyDef.prototype.set_awake = Module.b2BodyDef.prototype['set_awake'];
Module.b2BodyDef.prototype.get_fixedRotation = Module.b2BodyDef.prototype['get_fixedRotation'];
Module.b2BodyDef.prototype.set_fixedRotation = Module.b2BodyDef.prototype['set_fixedRotation'];
Module.b2BodyDef.prototype.get_bullet = Module.b2BodyDef.prototype['get_bullet'];
Module.b2BodyDef.prototype.set_bullet = Module.b2BodyDef.prototype['set_bullet'];
Module.b2BodyDef.prototype.get_active = Module.b2BodyDef.prototype['get_active'];
Module.b2BodyDef.prototype.set_active = Module.b2BodyDef.prototype['set_active'];
Module.b2BodyDef.prototype.get_userData = Module.b2BodyDef.prototype['get_userData'];
Module.b2BodyDef.prototype.set_userData = Module.b2BodyDef.prototype['set_userData'];
Module.b2BodyDef.prototype.get_gravityScale = Module.b2BodyDef.prototype['get_gravityScale'];
Module.b2BodyDef.prototype.set_gravityScale = Module.b2BodyDef.prototype['set_gravityScale'];
Module.b2BodyDef.prototype.__destroy__ = Module.b2BodyDef.prototype['__destroy__'];
Module.JSRayCastCallback = Module['JSRayCastCallback'];
Module.JSRayCastCallback.prototype.ReportFixture = Module.JSRayCastCallback.prototype['ReportFixture'];
Module.JSRayCastCallback.prototype.__destroy__ = Module.JSRayCastCallback.prototype['__destroy__'];
Module.b2ContactFeature = Module['b2ContactFeature'];
Module.b2ContactFeature.prototype.get_indexA = Module.b2ContactFeature.prototype['get_indexA'];
Module.b2ContactFeature.prototype.set_indexA = Module.b2ContactFeature.prototype['set_indexA'];
Module.b2ContactFeature.prototype.get_indexB = Module.b2ContactFeature.prototype['get_indexB'];
Module.b2ContactFeature.prototype.set_indexB = Module.b2ContactFeature.prototype['set_indexB'];
Module.b2ContactFeature.prototype.get_typeA = Module.b2ContactFeature.prototype['get_typeA'];
Module.b2ContactFeature.prototype.set_typeA = Module.b2ContactFeature.prototype['set_typeA'];
Module.b2ContactFeature.prototype.get_typeB = Module.b2ContactFeature.prototype['get_typeB'];
Module.b2ContactFeature.prototype.set_typeB = Module.b2ContactFeature.prototype['set_typeB'];
Module.b2ContactFeature.prototype.__destroy__ = Module.b2ContactFeature.prototype['__destroy__'];
Module.b2Vec2 = Module['b2Vec2'];
Module.b2Vec2.prototype.SetZero = Module.b2Vec2.prototype['SetZero'];
Module.b2Vec2.prototype.Set = Module.b2Vec2.prototype['Set'];
Module.b2Vec2.prototype.op_add = Module.b2Vec2.prototype['op_add'];
Module.b2Vec2.prototype.op_sub = Module.b2Vec2.prototype['op_sub'];
Module.b2Vec2.prototype.op_mul = Module.b2Vec2.prototype['op_mul'];
Module.b2Vec2.prototype.Length = Module.b2Vec2.prototype['Length'];
Module.b2Vec2.prototype.LengthSquared = Module.b2Vec2.prototype['LengthSquared'];
Module.b2Vec2.prototype.Normalize = Module.b2Vec2.prototype['Normalize'];
Module.b2Vec2.prototype.IsValid = Module.b2Vec2.prototype['IsValid'];
Module.b2Vec2.prototype.Skew = Module.b2Vec2.prototype['Skew'];
Module.b2Vec2.prototype.get_x = Module.b2Vec2.prototype['get_x'];
Module.b2Vec2.prototype.set_x = Module.b2Vec2.prototype['set_x'];
Module.b2Vec2.prototype.get_y = Module.b2Vec2.prototype['get_y'];
Module.b2Vec2.prototype.set_y = Module.b2Vec2.prototype['set_y'];
Module.b2Vec2.prototype.__destroy__ = Module.b2Vec2.prototype['__destroy__'];
Module.b2Vec3 = Module['b2Vec3'];
Module.b2Vec3.prototype.SetZero = Module.b2Vec3.prototype['SetZero'];
Module.b2Vec3.prototype.Set = Module.b2Vec3.prototype['Set'];
Module.b2Vec3.prototype.op_add = Module.b2Vec3.prototype['op_add'];
Module.b2Vec3.prototype.op_sub = Module.b2Vec3.prototype['op_sub'];
Module.b2Vec3.prototype.op_mul = Module.b2Vec3.prototype['op_mul'];
Module.b2Vec3.prototype.get_x = Module.b2Vec3.prototype['get_x'];
Module.b2Vec3.prototype.set_x = Module.b2Vec3.prototype['set_x'];
Module.b2Vec3.prototype.get_y = Module.b2Vec3.prototype['get_y'];
Module.b2Vec3.prototype.set_y = Module.b2Vec3.prototype['set_y'];
Module.b2Vec3.prototype.get_z = Module.b2Vec3.prototype['get_z'];
Module.b2Vec3.prototype.set_z = Module.b2Vec3.prototype['set_z'];
Module.b2Vec3.prototype.__destroy__ = Module.b2Vec3.prototype['__destroy__'];
Module.b2AABB = Module['b2AABB'];
Module.b2AABB.prototype.IsValid = Module.b2AABB.prototype['IsValid'];
Module.b2AABB.prototype.GetCenter = Module.b2AABB.prototype['GetCenter'];
Module.b2AABB.prototype.GetExtents = Module.b2AABB.prototype['GetExtents'];
Module.b2AABB.prototype.GetPerimeter = Module.b2AABB.prototype['GetPerimeter'];
Module.b2AABB.prototype.Combine = Module.b2AABB.prototype['Combine'];
Module.b2AABB.prototype.Contains = Module.b2AABB.prototype['Contains'];
Module.b2AABB.prototype.RayCast = Module.b2AABB.prototype['RayCast'];
Module.b2AABB.prototype.get_lowerBound = Module.b2AABB.prototype['get_lowerBound'];
Module.b2AABB.prototype.set_lowerBound = Module.b2AABB.prototype['set_lowerBound'];
Module.b2AABB.prototype.get_upperBound = Module.b2AABB.prototype['get_upperBound'];
Module.b2AABB.prototype.set_upperBound = Module.b2AABB.prototype['set_upperBound'];
Module.b2AABB.prototype.__destroy__ = Module.b2AABB.prototype['__destroy__'];
Module.b2FixtureDef = Module['b2FixtureDef'];
Module.b2FixtureDef.prototype.get_shape = Module.b2FixtureDef.prototype['get_shape'];
Module.b2FixtureDef.prototype.set_shape = Module.b2FixtureDef.prototype['set_shape'];
Module.b2FixtureDef.prototype.get_userData = Module.b2FixtureDef.prototype['get_userData'];
Module.b2FixtureDef.prototype.set_userData = Module.b2FixtureDef.prototype['set_userData'];
Module.b2FixtureDef.prototype.get_friction = Module.b2FixtureDef.prototype['get_friction'];
Module.b2FixtureDef.prototype.set_friction = Module.b2FixtureDef.prototype['set_friction'];
Module.b2FixtureDef.prototype.get_restitution = Module.b2FixtureDef.prototype['get_restitution'];
Module.b2FixtureDef.prototype.set_restitution = Module.b2FixtureDef.prototype['set_restitution'];
Module.b2FixtureDef.prototype.get_density = Module.b2FixtureDef.prototype['get_density'];
Module.b2FixtureDef.prototype.set_density = Module.b2FixtureDef.prototype['set_density'];
Module.b2FixtureDef.prototype.get_isSensor = Module.b2FixtureDef.prototype['get_isSensor'];
Module.b2FixtureDef.prototype.set_isSensor = Module.b2FixtureDef.prototype['set_isSensor'];
Module.b2FixtureDef.prototype.get_filter = Module.b2FixtureDef.prototype['get_filter'];
Module.b2FixtureDef.prototype.set_filter = Module.b2FixtureDef.prototype['set_filter'];
Module.b2FixtureDef.prototype.__destroy__ = Module.b2FixtureDef.prototype['__destroy__'];
Module.b2FrictionJointDef = Module['b2FrictionJointDef'];
Module.b2FrictionJointDef.prototype.Initialize = Module.b2FrictionJointDef.prototype['Initialize'];
Module.b2FrictionJointDef.prototype.get_localAnchorA = Module.b2FrictionJointDef.prototype['get_localAnchorA'];
Module.b2FrictionJointDef.prototype.set_localAnchorA = Module.b2FrictionJointDef.prototype['set_localAnchorA'];
Module.b2FrictionJointDef.prototype.get_localAnchorB = Module.b2FrictionJointDef.prototype['get_localAnchorB'];
Module.b2FrictionJointDef.prototype.set_localAnchorB = Module.b2FrictionJointDef.prototype['set_localAnchorB'];
Module.b2FrictionJointDef.prototype.get_maxForce = Module.b2FrictionJointDef.prototype['get_maxForce'];
Module.b2FrictionJointDef.prototype.set_maxForce = Module.b2FrictionJointDef.prototype['set_maxForce'];
Module.b2FrictionJointDef.prototype.get_maxTorque = Module.b2FrictionJointDef.prototype['get_maxTorque'];
Module.b2FrictionJointDef.prototype.set_maxTorque = Module.b2FrictionJointDef.prototype['set_maxTorque'];
Module.b2FrictionJointDef.prototype.get_type = Module.b2FrictionJointDef.prototype['get_type'];
Module.b2FrictionJointDef.prototype.set_type = Module.b2FrictionJointDef.prototype['set_type'];
Module.b2FrictionJointDef.prototype.get_userData = Module.b2FrictionJointDef.prototype['get_userData'];
Module.b2FrictionJointDef.prototype.set_userData = Module.b2FrictionJointDef.prototype['set_userData'];
Module.b2FrictionJointDef.prototype.get_bodyA = Module.b2FrictionJointDef.prototype['get_bodyA'];
Module.b2FrictionJointDef.prototype.set_bodyA = Module.b2FrictionJointDef.prototype['set_bodyA'];
Module.b2FrictionJointDef.prototype.get_bodyB = Module.b2FrictionJointDef.prototype['get_bodyB'];
Module.b2FrictionJointDef.prototype.set_bodyB = Module.b2FrictionJointDef.prototype['set_bodyB'];
Module.b2FrictionJointDef.prototype.get_collideConnected = Module.b2FrictionJointDef.prototype['get_collideConnected'];
Module.b2FrictionJointDef.prototype.set_collideConnected = Module.b2FrictionJointDef.prototype['set_collideConnected'];
Module.b2FrictionJointDef.prototype.__destroy__ = Module.b2FrictionJointDef.prototype['__destroy__'];
Module.b2Manifold = Module['b2Manifold'];
Module.b2Manifold.prototype.get_localNormal = Module.b2Manifold.prototype['get_localNormal'];
Module.b2Manifold.prototype.set_localNormal = Module.b2Manifold.prototype['set_localNormal'];
Module.b2Manifold.prototype.get_localPoint = Module.b2Manifold.prototype['get_localPoint'];
Module.b2Manifold.prototype.set_localPoint = Module.b2Manifold.prototype['set_localPoint'];
Module.b2Manifold.prototype.get_type = Module.b2Manifold.prototype['get_type'];
Module.b2Manifold.prototype.set_type = Module.b2Manifold.prototype['set_type'];
Module.b2Manifold.prototype.get_pointCount = Module.b2Manifold.prototype['get_pointCount'];
Module.b2Manifold.prototype.set_pointCount = Module.b2Manifold.prototype['set_pointCount'];
Module.b2Manifold.prototype.__destroy__ = Module.b2Manifold.prototype['__destroy__'];
Module.b2PrismaticJointDef = Module['b2PrismaticJointDef'];
Module.b2PrismaticJointDef.prototype.Initialize = Module.b2PrismaticJointDef.prototype['Initialize'];
Module.b2PrismaticJointDef.prototype.get_localAnchorA = Module.b2PrismaticJointDef.prototype['get_localAnchorA'];
Module.b2PrismaticJointDef.prototype.set_localAnchorA = Module.b2PrismaticJointDef.prototype['set_localAnchorA'];
Module.b2PrismaticJointDef.prototype.get_localAnchorB = Module.b2PrismaticJointDef.prototype['get_localAnchorB'];
Module.b2PrismaticJointDef.prototype.set_localAnchorB = Module.b2PrismaticJointDef.prototype['set_localAnchorB'];
Module.b2PrismaticJointDef.prototype.get_localAxisA = Module.b2PrismaticJointDef.prototype['get_localAxisA'];
Module.b2PrismaticJointDef.prototype.set_localAxisA = Module.b2PrismaticJointDef.prototype['set_localAxisA'];
Module.b2PrismaticJointDef.prototype.get_referenceAngle = Module.b2PrismaticJointDef.prototype['get_referenceAngle'];
Module.b2PrismaticJointDef.prototype.set_referenceAngle = Module.b2PrismaticJointDef.prototype['set_referenceAngle'];
Module.b2PrismaticJointDef.prototype.get_enableLimit = Module.b2PrismaticJointDef.prototype['get_enableLimit'];
Module.b2PrismaticJointDef.prototype.set_enableLimit = Module.b2PrismaticJointDef.prototype['set_enableLimit'];
Module.b2PrismaticJointDef.prototype.get_lowerTranslation = Module.b2PrismaticJointDef.prototype['get_lowerTranslation'];
Module.b2PrismaticJointDef.prototype.set_lowerTranslation = Module.b2PrismaticJointDef.prototype['set_lowerTranslation'];
Module.b2PrismaticJointDef.prototype.get_upperTranslation = Module.b2PrismaticJointDef.prototype['get_upperTranslation'];
Module.b2PrismaticJointDef.prototype.set_upperTranslation = Module.b2PrismaticJointDef.prototype['set_upperTranslation'];
Module.b2PrismaticJointDef.prototype.get_enableMotor = Module.b2PrismaticJointDef.prototype['get_enableMotor'];
Module.b2PrismaticJointDef.prototype.set_enableMotor = Module.b2PrismaticJointDef.prototype['set_enableMotor'];
Module.b2PrismaticJointDef.prototype.get_maxMotorForce = Module.b2PrismaticJointDef.prototype['get_maxMotorForce'];
Module.b2PrismaticJointDef.prototype.set_maxMotorForce = Module.b2PrismaticJointDef.prototype['set_maxMotorForce'];
Module.b2PrismaticJointDef.prototype.get_motorSpeed = Module.b2PrismaticJointDef.prototype['get_motorSpeed'];
Module.b2PrismaticJointDef.prototype.set_motorSpeed = Module.b2PrismaticJointDef.prototype['set_motorSpeed'];
Module.b2PrismaticJointDef.prototype.get_type = Module.b2PrismaticJointDef.prototype['get_type'];
Module.b2PrismaticJointDef.prototype.set_type = Module.b2PrismaticJointDef.prototype['set_type'];
Module.b2PrismaticJointDef.prototype.get_userData = Module.b2PrismaticJointDef.prototype['get_userData'];
Module.b2PrismaticJointDef.prototype.set_userData = Module.b2PrismaticJointDef.prototype['set_userData'];
Module.b2PrismaticJointDef.prototype.get_bodyA = Module.b2PrismaticJointDef.prototype['get_bodyA'];
Module.b2PrismaticJointDef.prototype.set_bodyA = Module.b2PrismaticJointDef.prototype['set_bodyA'];
Module.b2PrismaticJointDef.prototype.get_bodyB = Module.b2PrismaticJointDef.prototype['get_bodyB'];
Module.b2PrismaticJointDef.prototype.set_bodyB = Module.b2PrismaticJointDef.prototype['set_bodyB'];
Module.b2PrismaticJointDef.prototype.get_collideConnected = Module.b2PrismaticJointDef.prototype['get_collideConnected'];
Module.b2PrismaticJointDef.prototype.set_collideConnected = Module.b2PrismaticJointDef.prototype['set_collideConnected'];
Module.b2PrismaticJointDef.prototype.__destroy__ = Module.b2PrismaticJointDef.prototype['__destroy__'];
Module.b2World = Module['b2World'];
Module.b2World.prototype.SetDestructionListener = Module.b2World.prototype['SetDestructionListener'];
Module.b2World.prototype.SetContactListener = Module.b2World.prototype['SetContactListener'];
Module.b2World.prototype.SetDebugDraw = Module.b2World.prototype['SetDebugDraw'];
Module.b2World.prototype.CreateBody = Module.b2World.prototype['CreateBody'];
Module.b2World.prototype.DestroyBody = Module.b2World.prototype['DestroyBody'];
Module.b2World.prototype.CreateJoint = Module.b2World.prototype['CreateJoint'];
Module.b2World.prototype.DestroyJoint = Module.b2World.prototype['DestroyJoint'];
Module.b2World.prototype.Step = Module.b2World.prototype['Step'];
Module.b2World.prototype.ClearForces = Module.b2World.prototype['ClearForces'];
Module.b2World.prototype.DrawDebugData = Module.b2World.prototype['DrawDebugData'];
Module.b2World.prototype.QueryAABB = Module.b2World.prototype['QueryAABB'];
Module.b2World.prototype.RayCast = Module.b2World.prototype['RayCast'];
Module.b2World.prototype.GetBodyList = Module.b2World.prototype['GetBodyList'];
Module.b2World.prototype.GetJointList = Module.b2World.prototype['GetJointList'];
Module.b2World.prototype.GetContactList = Module.b2World.prototype['GetContactList'];
Module.b2World.prototype.SetAllowSleeping = Module.b2World.prototype['SetAllowSleeping'];
Module.b2World.prototype.GetAllowSleeping = Module.b2World.prototype['GetAllowSleeping'];
Module.b2World.prototype.SetWarmStarting = Module.b2World.prototype['SetWarmStarting'];
Module.b2World.prototype.GetWarmStarting = Module.b2World.prototype['GetWarmStarting'];
Module.b2World.prototype.SetContinuousPhysics = Module.b2World.prototype['SetContinuousPhysics'];
Module.b2World.prototype.GetContinuousPhysics = Module.b2World.prototype['GetContinuousPhysics'];
Module.b2World.prototype.SetSubStepping = Module.b2World.prototype['SetSubStepping'];
Module.b2World.prototype.GetSubStepping = Module.b2World.prototype['GetSubStepping'];
Module.b2World.prototype.GetProxyCount = Module.b2World.prototype['GetProxyCount'];
Module.b2World.prototype.GetBodyCount = Module.b2World.prototype['GetBodyCount'];
Module.b2World.prototype.GetJointCount = Module.b2World.prototype['GetJointCount'];
Module.b2World.prototype.GetContactCount = Module.b2World.prototype['GetContactCount'];
Module.b2World.prototype.GetTreeHeight = Module.b2World.prototype['GetTreeHeight'];
Module.b2World.prototype.GetTreeBalance = Module.b2World.prototype['GetTreeBalance'];
Module.b2World.prototype.GetTreeQuality = Module.b2World.prototype['GetTreeQuality'];
Module.b2World.prototype.SetGravity = Module.b2World.prototype['SetGravity'];
Module.b2World.prototype.GetGravity = Module.b2World.prototype['GetGravity'];
Module.b2World.prototype.IsLocked = Module.b2World.prototype['IsLocked'];
Module.b2World.prototype.SetAutoClearForces = Module.b2World.prototype['SetAutoClearForces'];
Module.b2World.prototype.GetAutoClearForces = Module.b2World.prototype['GetAutoClearForces'];
Module.b2World.prototype.GetProfile = Module.b2World.prototype['GetProfile'];
Module.b2World.prototype.Dump = Module.b2World.prototype['Dump'];
Module.b2World.prototype.__destroy__ = Module.b2World.prototype['__destroy__'];
Module.b2PrismaticJoint = Module['b2PrismaticJoint'];
Module.b2PrismaticJoint.prototype.GetLocalAnchorA = Module.b2PrismaticJoint.prototype['GetLocalAnchorA'];
Module.b2PrismaticJoint.prototype.GetLocalAnchorB = Module.b2PrismaticJoint.prototype['GetLocalAnchorB'];
Module.b2PrismaticJoint.prototype.GetLocalAxisA = Module.b2PrismaticJoint.prototype['GetLocalAxisA'];
Module.b2PrismaticJoint.prototype.GetReferenceAngle = Module.b2PrismaticJoint.prototype['GetReferenceAngle'];
Module.b2PrismaticJoint.prototype.GetJointTranslation = Module.b2PrismaticJoint.prototype['GetJointTranslation'];
Module.b2PrismaticJoint.prototype.GetJointSpeed = Module.b2PrismaticJoint.prototype['GetJointSpeed'];
Module.b2PrismaticJoint.prototype.IsLimitEnabled = Module.b2PrismaticJoint.prototype['IsLimitEnabled'];
Module.b2PrismaticJoint.prototype.EnableLimit = Module.b2PrismaticJoint.prototype['EnableLimit'];
Module.b2PrismaticJoint.prototype.GetLowerLimit = Module.b2PrismaticJoint.prototype['GetLowerLimit'];
Module.b2PrismaticJoint.prototype.GetUpperLimit = Module.b2PrismaticJoint.prototype['GetUpperLimit'];
Module.b2PrismaticJoint.prototype.SetLimits = Module.b2PrismaticJoint.prototype['SetLimits'];
Module.b2PrismaticJoint.prototype.IsMotorEnabled = Module.b2PrismaticJoint.prototype['IsMotorEnabled'];
Module.b2PrismaticJoint.prototype.EnableMotor = Module.b2PrismaticJoint.prototype['EnableMotor'];
Module.b2PrismaticJoint.prototype.SetMotorSpeed = Module.b2PrismaticJoint.prototype['SetMotorSpeed'];
Module.b2PrismaticJoint.prototype.GetMotorSpeed = Module.b2PrismaticJoint.prototype['GetMotorSpeed'];
Module.b2PrismaticJoint.prototype.SetMaxMotorForce = Module.b2PrismaticJoint.prototype['SetMaxMotorForce'];
Module.b2PrismaticJoint.prototype.GetMaxMotorForce = Module.b2PrismaticJoint.prototype['GetMaxMotorForce'];
Module.b2PrismaticJoint.prototype.GetMotorForce = Module.b2PrismaticJoint.prototype['GetMotorForce'];
Module.b2PrismaticJoint.prototype.GetType = Module.b2PrismaticJoint.prototype['GetType'];
Module.b2PrismaticJoint.prototype.GetBodyA = Module.b2PrismaticJoint.prototype['GetBodyA'];
Module.b2PrismaticJoint.prototype.GetBodyB = Module.b2PrismaticJoint.prototype['GetBodyB'];
Module.b2PrismaticJoint.prototype.GetAnchorA = Module.b2PrismaticJoint.prototype['GetAnchorA'];
Module.b2PrismaticJoint.prototype.GetAnchorB = Module.b2PrismaticJoint.prototype['GetAnchorB'];
Module.b2PrismaticJoint.prototype.GetReactionForce = Module.b2PrismaticJoint.prototype['GetReactionForce'];
Module.b2PrismaticJoint.prototype.GetReactionTorque = Module.b2PrismaticJoint.prototype['GetReactionTorque'];
Module.b2PrismaticJoint.prototype.GetNext = Module.b2PrismaticJoint.prototype['GetNext'];
Module.b2PrismaticJoint.prototype.GetUserData = Module.b2PrismaticJoint.prototype['GetUserData'];
Module.b2PrismaticJoint.prototype.SetUserData = Module.b2PrismaticJoint.prototype['SetUserData'];
Module.b2PrismaticJoint.prototype.IsActive = Module.b2PrismaticJoint.prototype['IsActive'];
Module.b2PrismaticJoint.prototype.GetCollideConnected = Module.b2PrismaticJoint.prototype['GetCollideConnected'];
Module.b2PrismaticJoint.prototype.__destroy__ = Module.b2PrismaticJoint.prototype['__destroy__'];
Module.b2RayCastOutput = Module['b2RayCastOutput'];
Module.b2RayCastOutput.prototype.get_normal = Module.b2RayCastOutput.prototype['get_normal'];
Module.b2RayCastOutput.prototype.set_normal = Module.b2RayCastOutput.prototype['set_normal'];
Module.b2RayCastOutput.prototype.get_fraction = Module.b2RayCastOutput.prototype['get_fraction'];
Module.b2RayCastOutput.prototype.set_fraction = Module.b2RayCastOutput.prototype['set_fraction'];
Module.b2RayCastOutput.prototype.__destroy__ = Module.b2RayCastOutput.prototype['__destroy__'];
Module.b2ContactID = Module['b2ContactID'];
Module.b2ContactID.prototype.get_cf = Module.b2ContactID.prototype['get_cf'];
Module.b2ContactID.prototype.set_cf = Module.b2ContactID.prototype['set_cf'];
Module.b2ContactID.prototype.get_key = Module.b2ContactID.prototype['get_key'];
Module.b2ContactID.prototype.set_key = Module.b2ContactID.prototype['set_key'];
Module.b2ContactID.prototype.__destroy__ = Module.b2ContactID.prototype['__destroy__'];
Module.b2DestructionListenerWrapper = Module['b2DestructionListenerWrapper'];
Module.b2DestructionListenerWrapper.prototype.__destroy__ = Module.b2DestructionListenerWrapper.prototype['__destroy__'];
Module.JSContactListener = Module['JSContactListener'];
Module.JSContactListener.prototype.BeginContact = Module.JSContactListener.prototype['BeginContact'];
Module.JSContactListener.prototype.EndContact = Module.JSContactListener.prototype['EndContact'];
Module.JSContactListener.prototype.PreSolve = Module.JSContactListener.prototype['PreSolve'];
Module.JSContactListener.prototype.PostSolve = Module.JSContactListener.prototype['PostSolve'];
Module.JSContactListener.prototype.__destroy__ = Module.JSContactListener.prototype['__destroy__'];
Module.b2Mat22 = Module['b2Mat22'];
Module.b2Mat22.prototype.Set = Module.b2Mat22.prototype['Set'];
Module.b2Mat22.prototype.SetIdentity = Module.b2Mat22.prototype['SetIdentity'];
Module.b2Mat22.prototype.SetZero = Module.b2Mat22.prototype['SetZero'];
Module.b2Mat22.prototype.GetInverse = Module.b2Mat22.prototype['GetInverse'];
Module.b2Mat22.prototype.Solve = Module.b2Mat22.prototype['Solve'];
Module.b2Mat22.prototype.get_ex = Module.b2Mat22.prototype['get_ex'];
Module.b2Mat22.prototype.set_ex = Module.b2Mat22.prototype['set_ex'];
Module.b2Mat22.prototype.get_ey = Module.b2Mat22.prototype['get_ey'];
Module.b2Mat22.prototype.set_ey = Module.b2Mat22.prototype['set_ey'];
Module.b2Mat22.prototype.__destroy__ = Module.b2Mat22.prototype['__destroy__'];
Module.b2WheelJointDef = Module['b2WheelJointDef'];
Module.b2WheelJointDef.prototype.Initialize = Module.b2WheelJointDef.prototype['Initialize'];
Module.b2WheelJointDef.prototype.get_localAnchorA = Module.b2WheelJointDef.prototype['get_localAnchorA'];
Module.b2WheelJointDef.prototype.set_localAnchorA = Module.b2WheelJointDef.prototype['set_localAnchorA'];
Module.b2WheelJointDef.prototype.get_localAnchorB = Module.b2WheelJointDef.prototype['get_localAnchorB'];
Module.b2WheelJointDef.prototype.set_localAnchorB = Module.b2WheelJointDef.prototype['set_localAnchorB'];
Module.b2WheelJointDef.prototype.get_localAxisA = Module.b2WheelJointDef.prototype['get_localAxisA'];
Module.b2WheelJointDef.prototype.set_localAxisA = Module.b2WheelJointDef.prototype['set_localAxisA'];
Module.b2WheelJointDef.prototype.get_enableMotor = Module.b2WheelJointDef.prototype['get_enableMotor'];
Module.b2WheelJointDef.prototype.set_enableMotor = Module.b2WheelJointDef.prototype['set_enableMotor'];
Module.b2WheelJointDef.prototype.get_maxMotorTorque = Module.b2WheelJointDef.prototype['get_maxMotorTorque'];
Module.b2WheelJointDef.prototype.set_maxMotorTorque = Module.b2WheelJointDef.prototype['set_maxMotorTorque'];
Module.b2WheelJointDef.prototype.get_motorSpeed = Module.b2WheelJointDef.prototype['get_motorSpeed'];
Module.b2WheelJointDef.prototype.set_motorSpeed = Module.b2WheelJointDef.prototype['set_motorSpeed'];
Module.b2WheelJointDef.prototype.get_frequencyHz = Module.b2WheelJointDef.prototype['get_frequencyHz'];
Module.b2WheelJointDef.prototype.set_frequencyHz = Module.b2WheelJointDef.prototype['set_frequencyHz'];
Module.b2WheelJointDef.prototype.get_dampingRatio = Module.b2WheelJointDef.prototype['get_dampingRatio'];
Module.b2WheelJointDef.prototype.set_dampingRatio = Module.b2WheelJointDef.prototype['set_dampingRatio'];
Module.b2WheelJointDef.prototype.get_type = Module.b2WheelJointDef.prototype['get_type'];
Module.b2WheelJointDef.prototype.set_type = Module.b2WheelJointDef.prototype['set_type'];
Module.b2WheelJointDef.prototype.get_userData = Module.b2WheelJointDef.prototype['get_userData'];
Module.b2WheelJointDef.prototype.set_userData = Module.b2WheelJointDef.prototype['set_userData'];
Module.b2WheelJointDef.prototype.get_bodyA = Module.b2WheelJointDef.prototype['get_bodyA'];
Module.b2WheelJointDef.prototype.set_bodyA = Module.b2WheelJointDef.prototype['set_bodyA'];
Module.b2WheelJointDef.prototype.get_bodyB = Module.b2WheelJointDef.prototype['get_bodyB'];
Module.b2WheelJointDef.prototype.set_bodyB = Module.b2WheelJointDef.prototype['set_bodyB'];
Module.b2WheelJointDef.prototype.get_collideConnected = Module.b2WheelJointDef.prototype['get_collideConnected'];
Module.b2WheelJointDef.prototype.set_collideConnected = Module.b2WheelJointDef.prototype['set_collideConnected'];
Module.b2WheelJointDef.prototype.__destroy__ = Module.b2WheelJointDef.prototype['__destroy__'];
Module.b2CircleShape = Module['b2CircleShape'];
Module.b2CircleShape.prototype.GetType = Module.b2CircleShape.prototype['GetType'];
Module.b2CircleShape.prototype.GetChildCount = Module.b2CircleShape.prototype['GetChildCount'];
Module.b2CircleShape.prototype.TestPoint = Module.b2CircleShape.prototype['TestPoint'];
Module.b2CircleShape.prototype.RayCast = Module.b2CircleShape.prototype['RayCast'];
Module.b2CircleShape.prototype.ComputeAABB = Module.b2CircleShape.prototype['ComputeAABB'];
Module.b2CircleShape.prototype.ComputeMass = Module.b2CircleShape.prototype['ComputeMass'];
Module.b2CircleShape.prototype.get_m_p = Module.b2CircleShape.prototype['get_m_p'];
Module.b2CircleShape.prototype.set_m_p = Module.b2CircleShape.prototype['set_m_p'];
Module.b2CircleShape.prototype.get_m_type = Module.b2CircleShape.prototype['get_m_type'];
Module.b2CircleShape.prototype.set_m_type = Module.b2CircleShape.prototype['set_m_type'];
Module.b2CircleShape.prototype.get_m_radius = Module.b2CircleShape.prototype['get_m_radius'];
Module.b2CircleShape.prototype.set_m_radius = Module.b2CircleShape.prototype['set_m_radius'];
Module.b2CircleShape.prototype.__destroy__ = Module.b2CircleShape.prototype['__destroy__'];
Module.b2WeldJointDef = Module['b2WeldJointDef'];
Module.b2WeldJointDef.prototype.Initialize = Module.b2WeldJointDef.prototype['Initialize'];
Module.b2WeldJointDef.prototype.get_localAnchorA = Module.b2WeldJointDef.prototype['get_localAnchorA'];
Module.b2WeldJointDef.prototype.set_localAnchorA = Module.b2WeldJointDef.prototype['set_localAnchorA'];
Module.b2WeldJointDef.prototype.get_localAnchorB = Module.b2WeldJointDef.prototype['get_localAnchorB'];
Module.b2WeldJointDef.prototype.set_localAnchorB = Module.b2WeldJointDef.prototype['set_localAnchorB'];
Module.b2WeldJointDef.prototype.get_referenceAngle = Module.b2WeldJointDef.prototype['get_referenceAngle'];
Module.b2WeldJointDef.prototype.set_referenceAngle = Module.b2WeldJointDef.prototype['set_referenceAngle'];
Module.b2WeldJointDef.prototype.get_frequencyHz = Module.b2WeldJointDef.prototype['get_frequencyHz'];
Module.b2WeldJointDef.prototype.set_frequencyHz = Module.b2WeldJointDef.prototype['set_frequencyHz'];
Module.b2WeldJointDef.prototype.get_dampingRatio = Module.b2WeldJointDef.prototype['get_dampingRatio'];
Module.b2WeldJointDef.prototype.set_dampingRatio = Module.b2WeldJointDef.prototype['set_dampingRatio'];
Module.b2WeldJointDef.prototype.get_type = Module.b2WeldJointDef.prototype['get_type'];
Module.b2WeldJointDef.prototype.set_type = Module.b2WeldJointDef.prototype['set_type'];
Module.b2WeldJointDef.prototype.get_userData = Module.b2WeldJointDef.prototype['get_userData'];
Module.b2WeldJointDef.prototype.set_userData = Module.b2WeldJointDef.prototype['set_userData'];
Module.b2WeldJointDef.prototype.get_bodyA = Module.b2WeldJointDef.prototype['get_bodyA'];
Module.b2WeldJointDef.prototype.set_bodyA = Module.b2WeldJointDef.prototype['set_bodyA'];
Module.b2WeldJointDef.prototype.get_bodyB = Module.b2WeldJointDef.prototype['get_bodyB'];
Module.b2WeldJointDef.prototype.set_bodyB = Module.b2WeldJointDef.prototype['set_bodyB'];
Module.b2WeldJointDef.prototype.get_collideConnected = Module.b2WeldJointDef.prototype['get_collideConnected'];
Module.b2WeldJointDef.prototype.set_collideConnected = Module.b2WeldJointDef.prototype['set_collideConnected'];
Module.b2WeldJointDef.prototype.__destroy__ = Module.b2WeldJointDef.prototype['__destroy__'];
Module.b2Draw = Module['b2Draw'];
Module.b2Draw.prototype.SetFlags = Module.b2Draw.prototype['SetFlags'];
Module.b2Draw.prototype.GetFlags = Module.b2Draw.prototype['GetFlags'];
Module.b2Draw.prototype.AppendFlags = Module.b2Draw.prototype['AppendFlags'];
Module.b2Draw.prototype.ClearFlags = Module.b2Draw.prototype['ClearFlags'];
Module.b2Draw.prototype.__destroy__ = Module.b2Draw.prototype['__destroy__'];
Module.b2MassData = Module['b2MassData'];
Module.b2MassData.prototype.get_mass = Module.b2MassData.prototype['get_mass'];
Module.b2MassData.prototype.set_mass = Module.b2MassData.prototype['set_mass'];
Module.b2MassData.prototype.get_center = Module.b2MassData.prototype['get_center'];
Module.b2MassData.prototype.set_center = Module.b2MassData.prototype['set_center'];
Module.b2MassData.prototype.get_I = Module.b2MassData.prototype['get_I'];
Module.b2MassData.prototype.set_I = Module.b2MassData.prototype['set_I'];
Module.b2MassData.prototype.__destroy__ = Module.b2MassData.prototype['__destroy__'];
Module.b2Joint = Module['b2Joint'];
Module.b2Joint.prototype.GetType = Module.b2Joint.prototype['GetType'];
Module.b2Joint.prototype.GetBodyA = Module.b2Joint.prototype['GetBodyA'];
Module.b2Joint.prototype.GetBodyB = Module.b2Joint.prototype['GetBodyB'];
Module.b2Joint.prototype.GetAnchorA = Module.b2Joint.prototype['GetAnchorA'];
Module.b2Joint.prototype.GetAnchorB = Module.b2Joint.prototype['GetAnchorB'];
Module.b2Joint.prototype.GetReactionForce = Module.b2Joint.prototype['GetReactionForce'];
Module.b2Joint.prototype.GetReactionTorque = Module.b2Joint.prototype['GetReactionTorque'];
Module.b2Joint.prototype.GetNext = Module.b2Joint.prototype['GetNext'];
Module.b2Joint.prototype.GetUserData = Module.b2Joint.prototype['GetUserData'];
Module.b2Joint.prototype.SetUserData = Module.b2Joint.prototype['SetUserData'];
Module.b2Joint.prototype.IsActive = Module.b2Joint.prototype['IsActive'];
Module.b2Joint.prototype.GetCollideConnected = Module.b2Joint.prototype['GetCollideConnected'];
Module.b2Joint.prototype.Dump = Module.b2Joint.prototype['Dump'];
Module.b2GearJoint = Module['b2GearJoint'];
Module.b2GearJoint.prototype.GetJoint1 = Module.b2GearJoint.prototype['GetJoint1'];
Module.b2GearJoint.prototype.GetJoint2 = Module.b2GearJoint.prototype['GetJoint2'];
Module.b2GearJoint.prototype.SetRatio = Module.b2GearJoint.prototype['SetRatio'];
Module.b2GearJoint.prototype.GetRatio = Module.b2GearJoint.prototype['GetRatio'];
Module.b2GearJoint.prototype.GetType = Module.b2GearJoint.prototype['GetType'];
Module.b2GearJoint.prototype.GetBodyA = Module.b2GearJoint.prototype['GetBodyA'];
Module.b2GearJoint.prototype.GetBodyB = Module.b2GearJoint.prototype['GetBodyB'];
Module.b2GearJoint.prototype.GetAnchorA = Module.b2GearJoint.prototype['GetAnchorA'];
Module.b2GearJoint.prototype.GetAnchorB = Module.b2GearJoint.prototype['GetAnchorB'];
Module.b2GearJoint.prototype.GetReactionForce = Module.b2GearJoint.prototype['GetReactionForce'];
Module.b2GearJoint.prototype.GetReactionTorque = Module.b2GearJoint.prototype['GetReactionTorque'];
Module.b2GearJoint.prototype.GetNext = Module.b2GearJoint.prototype['GetNext'];
Module.b2GearJoint.prototype.GetUserData = Module.b2GearJoint.prototype['GetUserData'];
Module.b2GearJoint.prototype.SetUserData = Module.b2GearJoint.prototype['SetUserData'];
Module.b2GearJoint.prototype.IsActive = Module.b2GearJoint.prototype['IsActive'];
Module.b2GearJoint.prototype.GetCollideConnected = Module.b2GearJoint.prototype['GetCollideConnected'];
Module.b2GearJoint.prototype.__destroy__ = Module.b2GearJoint.prototype['__destroy__'];
Module.b2RayCastCallback = Module['b2RayCastCallback'];
Module.b2RayCastCallback.prototype.__destroy__ = Module.b2RayCastCallback.prototype['__destroy__'];
Module.b2WeldJoint = Module['b2WeldJoint'];
Module.b2WeldJoint.prototype.GetLocalAnchorA = Module.b2WeldJoint.prototype['GetLocalAnchorA'];
Module.b2WeldJoint.prototype.GetLocalAnchorB = Module.b2WeldJoint.prototype['GetLocalAnchorB'];
Module.b2WeldJoint.prototype.SetFrequency = Module.b2WeldJoint.prototype['SetFrequency'];
Module.b2WeldJoint.prototype.GetFrequency = Module.b2WeldJoint.prototype['GetFrequency'];
Module.b2WeldJoint.prototype.SetDampingRatio = Module.b2WeldJoint.prototype['SetDampingRatio'];
Module.b2WeldJoint.prototype.GetDampingRatio = Module.b2WeldJoint.prototype['GetDampingRatio'];
Module.b2WeldJoint.prototype.Dump = Module.b2WeldJoint.prototype['Dump'];
Module.b2WeldJoint.prototype.GetType = Module.b2WeldJoint.prototype['GetType'];
Module.b2WeldJoint.prototype.GetBodyA = Module.b2WeldJoint.prototype['GetBodyA'];
Module.b2WeldJoint.prototype.GetBodyB = Module.b2WeldJoint.prototype['GetBodyB'];
Module.b2WeldJoint.prototype.GetAnchorA = Module.b2WeldJoint.prototype['GetAnchorA'];
Module.b2WeldJoint.prototype.GetAnchorB = Module.b2WeldJoint.prototype['GetAnchorB'];
Module.b2WeldJoint.prototype.GetReactionForce = Module.b2WeldJoint.prototype['GetReactionForce'];
Module.b2WeldJoint.prototype.GetReactionTorque = Module.b2WeldJoint.prototype['GetReactionTorque'];
Module.b2WeldJoint.prototype.GetNext = Module.b2WeldJoint.prototype['GetNext'];
Module.b2WeldJoint.prototype.GetUserData = Module.b2WeldJoint.prototype['GetUserData'];
Module.b2WeldJoint.prototype.SetUserData = Module.b2WeldJoint.prototype['SetUserData'];
Module.b2WeldJoint.prototype.IsActive = Module.b2WeldJoint.prototype['IsActive'];
Module.b2WeldJoint.prototype.GetCollideConnected = Module.b2WeldJoint.prototype['GetCollideConnected'];
Module.b2WeldJoint.prototype.__destroy__ = Module.b2WeldJoint.prototype['__destroy__'];
Module.b2JointEdge = Module['b2JointEdge'];
Module.b2JointEdge.prototype.get_other = Module.b2JointEdge.prototype['get_other'];
Module.b2JointEdge.prototype.set_other = Module.b2JointEdge.prototype['set_other'];
Module.b2JointEdge.prototype.get_joint = Module.b2JointEdge.prototype['get_joint'];
Module.b2JointEdge.prototype.set_joint = Module.b2JointEdge.prototype['set_joint'];
Module.b2JointEdge.prototype.get_prev = Module.b2JointEdge.prototype['get_prev'];
Module.b2JointEdge.prototype.set_prev = Module.b2JointEdge.prototype['set_prev'];
Module.b2JointEdge.prototype.get_next = Module.b2JointEdge.prototype['get_next'];
Module.b2JointEdge.prototype.set_next = Module.b2JointEdge.prototype['set_next'];
Module.b2JointEdge.prototype.__destroy__ = Module.b2JointEdge.prototype['__destroy__'];
Module.b2PulleyJointDef = Module['b2PulleyJointDef'];
Module.b2PulleyJointDef.prototype.Initialize = Module.b2PulleyJointDef.prototype['Initialize'];
Module.b2PulleyJointDef.prototype.get_groundAnchorA = Module.b2PulleyJointDef.prototype['get_groundAnchorA'];
Module.b2PulleyJointDef.prototype.set_groundAnchorA = Module.b2PulleyJointDef.prototype['set_groundAnchorA'];
Module.b2PulleyJointDef.prototype.get_groundAnchorB = Module.b2PulleyJointDef.prototype['get_groundAnchorB'];
Module.b2PulleyJointDef.prototype.set_groundAnchorB = Module.b2PulleyJointDef.prototype['set_groundAnchorB'];
Module.b2PulleyJointDef.prototype.get_localAnchorA = Module.b2PulleyJointDef.prototype['get_localAnchorA'];
Module.b2PulleyJointDef.prototype.set_localAnchorA = Module.b2PulleyJointDef.prototype['set_localAnchorA'];
Module.b2PulleyJointDef.prototype.get_localAnchorB = Module.b2PulleyJointDef.prototype['get_localAnchorB'];
Module.b2PulleyJointDef.prototype.set_localAnchorB = Module.b2PulleyJointDef.prototype['set_localAnchorB'];
Module.b2PulleyJointDef.prototype.get_lengthA = Module.b2PulleyJointDef.prototype['get_lengthA'];
Module.b2PulleyJointDef.prototype.set_lengthA = Module.b2PulleyJointDef.prototype['set_lengthA'];
Module.b2PulleyJointDef.prototype.get_lengthB = Module.b2PulleyJointDef.prototype['get_lengthB'];
Module.b2PulleyJointDef.prototype.set_lengthB = Module.b2PulleyJointDef.prototype['set_lengthB'];
Module.b2PulleyJointDef.prototype.get_ratio = Module.b2PulleyJointDef.prototype['get_ratio'];
Module.b2PulleyJointDef.prototype.set_ratio = Module.b2PulleyJointDef.prototype['set_ratio'];
Module.b2PulleyJointDef.prototype.get_type = Module.b2PulleyJointDef.prototype['get_type'];
Module.b2PulleyJointDef.prototype.set_type = Module.b2PulleyJointDef.prototype['set_type'];
Module.b2PulleyJointDef.prototype.get_userData = Module.b2PulleyJointDef.prototype['get_userData'];
Module.b2PulleyJointDef.prototype.set_userData = Module.b2PulleyJointDef.prototype['set_userData'];
Module.b2PulleyJointDef.prototype.get_bodyA = Module.b2PulleyJointDef.prototype['get_bodyA'];
Module.b2PulleyJointDef.prototype.set_bodyA = Module.b2PulleyJointDef.prototype['set_bodyA'];
Module.b2PulleyJointDef.prototype.get_bodyB = Module.b2PulleyJointDef.prototype['get_bodyB'];
Module.b2PulleyJointDef.prototype.set_bodyB = Module.b2PulleyJointDef.prototype['set_bodyB'];
Module.b2PulleyJointDef.prototype.get_collideConnected = Module.b2PulleyJointDef.prototype['get_collideConnected'];
Module.b2PulleyJointDef.prototype.set_collideConnected = Module.b2PulleyJointDef.prototype['set_collideConnected'];
Module.b2PulleyJointDef.prototype.__destroy__ = Module.b2PulleyJointDef.prototype['__destroy__'];
Module.b2ContactListener = Module['b2ContactListener'];
Module.b2ContactListener.prototype.__destroy__ = Module.b2ContactListener.prototype['__destroy__'];
Module.b2ManifoldPoint = Module['b2ManifoldPoint'];
Module.b2ManifoldPoint.prototype.get_localPoint = Module.b2ManifoldPoint.prototype['get_localPoint'];
Module.b2ManifoldPoint.prototype.set_localPoint = Module.b2ManifoldPoint.prototype['set_localPoint'];
Module.b2ManifoldPoint.prototype.get_normalImpulse = Module.b2ManifoldPoint.prototype['get_normalImpulse'];
Module.b2ManifoldPoint.prototype.set_normalImpulse = Module.b2ManifoldPoint.prototype['set_normalImpulse'];
Module.b2ManifoldPoint.prototype.get_tangentImpulse = Module.b2ManifoldPoint.prototype['get_tangentImpulse'];
Module.b2ManifoldPoint.prototype.set_tangentImpulse = Module.b2ManifoldPoint.prototype['set_tangentImpulse'];
Module.b2ManifoldPoint.prototype.get_id = Module.b2ManifoldPoint.prototype['get_id'];
Module.b2ManifoldPoint.prototype.set_id = Module.b2ManifoldPoint.prototype['set_id'];
Module.b2ManifoldPoint.prototype.__destroy__ = Module.b2ManifoldPoint.prototype['__destroy__'];
Module.b2QueryCallback = Module['b2QueryCallback'];
Module.b2QueryCallback.prototype.__destroy__ = Module.b2QueryCallback.prototype['__destroy__'];
Module.b2JointDef = Module['b2JointDef'];
Module.b2JointDef.prototype.get_type = Module.b2JointDef.prototype['get_type'];
Module.b2JointDef.prototype.set_type = Module.b2JointDef.prototype['set_type'];
Module.b2JointDef.prototype.get_userData = Module.b2JointDef.prototype['get_userData'];
Module.b2JointDef.prototype.set_userData = Module.b2JointDef.prototype['set_userData'];
Module.b2JointDef.prototype.get_bodyA = Module.b2JointDef.prototype['get_bodyA'];
Module.b2JointDef.prototype.set_bodyA = Module.b2JointDef.prototype['set_bodyA'];
Module.b2JointDef.prototype.get_bodyB = Module.b2JointDef.prototype['get_bodyB'];
Module.b2JointDef.prototype.set_bodyB = Module.b2JointDef.prototype['set_bodyB'];
Module.b2JointDef.prototype.get_collideConnected = Module.b2JointDef.prototype['get_collideConnected'];
Module.b2JointDef.prototype.set_collideConnected = Module.b2JointDef.prototype['set_collideConnected'];
Module.b2JointDef.prototype.__destroy__ = Module.b2JointDef.prototype['__destroy__'];
Module.b2Transform = Module['b2Transform'];
Module.b2Transform.prototype.SetIdentity = Module.b2Transform.prototype['SetIdentity'];
Module.b2Transform.prototype.Set = Module.b2Transform.prototype['Set'];
Module.b2Transform.prototype.get_p = Module.b2Transform.prototype['get_p'];
Module.b2Transform.prototype.set_p = Module.b2Transform.prototype['set_p'];
Module.b2Transform.prototype.get_q = Module.b2Transform.prototype['get_q'];
Module.b2Transform.prototype.set_q = Module.b2Transform.prototype['set_q'];
Module.b2Transform.prototype.__destroy__ = Module.b2Transform.prototype['__destroy__'];
Module.b2ChainShape = Module['b2ChainShape'];
Module.b2ChainShape.prototype.CreateLoop = Module.b2ChainShape.prototype['CreateLoop'];
Module.b2ChainShape.prototype.CreateChain = Module.b2ChainShape.prototype['CreateChain'];
Module.b2ChainShape.prototype.SetPrevVertex = Module.b2ChainShape.prototype['SetPrevVertex'];
Module.b2ChainShape.prototype.SetNextVertex = Module.b2ChainShape.prototype['SetNextVertex'];
Module.b2ChainShape.prototype.GetChildEdge = Module.b2ChainShape.prototype['GetChildEdge'];
Module.b2ChainShape.prototype.GetType = Module.b2ChainShape.prototype['GetType'];
Module.b2ChainShape.prototype.GetChildCount = Module.b2ChainShape.prototype['GetChildCount'];
Module.b2ChainShape.prototype.TestPoint = Module.b2ChainShape.prototype['TestPoint'];
Module.b2ChainShape.prototype.RayCast = Module.b2ChainShape.prototype['RayCast'];
Module.b2ChainShape.prototype.ComputeAABB = Module.b2ChainShape.prototype['ComputeAABB'];
Module.b2ChainShape.prototype.ComputeMass = Module.b2ChainShape.prototype['ComputeMass'];
Module.b2ChainShape.prototype.get_m_vertices = Module.b2ChainShape.prototype['get_m_vertices'];
Module.b2ChainShape.prototype.set_m_vertices = Module.b2ChainShape.prototype['set_m_vertices'];
Module.b2ChainShape.prototype.get_m_count = Module.b2ChainShape.prototype['get_m_count'];
Module.b2ChainShape.prototype.set_m_count = Module.b2ChainShape.prototype['set_m_count'];
Module.b2ChainShape.prototype.get_m_prevVertex = Module.b2ChainShape.prototype['get_m_prevVertex'];
Module.b2ChainShape.prototype.set_m_prevVertex = Module.b2ChainShape.prototype['set_m_prevVertex'];
Module.b2ChainShape.prototype.get_m_nextVertex = Module.b2ChainShape.prototype['get_m_nextVertex'];
Module.b2ChainShape.prototype.set_m_nextVertex = Module.b2ChainShape.prototype['set_m_nextVertex'];
Module.b2ChainShape.prototype.get_m_hasPrevVertex = Module.b2ChainShape.prototype['get_m_hasPrevVertex'];
Module.b2ChainShape.prototype.set_m_hasPrevVertex = Module.b2ChainShape.prototype['set_m_hasPrevVertex'];
Module.b2ChainShape.prototype.get_m_hasNextVertex = Module.b2ChainShape.prototype['get_m_hasNextVertex'];
Module.b2ChainShape.prototype.set_m_hasNextVertex = Module.b2ChainShape.prototype['set_m_hasNextVertex'];
Module.b2ChainShape.prototype.get_m_type = Module.b2ChainShape.prototype['get_m_type'];
Module.b2ChainShape.prototype.set_m_type = Module.b2ChainShape.prototype['set_m_type'];
Module.b2ChainShape.prototype.get_m_radius = Module.b2ChainShape.prototype['get_m_radius'];
Module.b2ChainShape.prototype.set_m_radius = Module.b2ChainShape.prototype['set_m_radius'];
Module.b2ChainShape.prototype.__destroy__ = Module.b2ChainShape.prototype['__destroy__'];
Module.b2Color = Module['b2Color'];
Module.b2Color.prototype.Set = Module.b2Color.prototype['Set'];
Module.b2Color.prototype.get_r = Module.b2Color.prototype['get_r'];
Module.b2Color.prototype.set_r = Module.b2Color.prototype['set_r'];
Module.b2Color.prototype.get_g = Module.b2Color.prototype['get_g'];
Module.b2Color.prototype.set_g = Module.b2Color.prototype['set_g'];
Module.b2Color.prototype.get_b = Module.b2Color.prototype['get_b'];
Module.b2Color.prototype.set_b = Module.b2Color.prototype['set_b'];
Module.b2Color.prototype.__destroy__ = Module.b2Color.prototype['__destroy__'];
Module.b2RopeJoint = Module['b2RopeJoint'];
Module.b2RopeJoint.prototype.GetLocalAnchorA = Module.b2RopeJoint.prototype['GetLocalAnchorA'];
Module.b2RopeJoint.prototype.GetLocalAnchorB = Module.b2RopeJoint.prototype['GetLocalAnchorB'];
Module.b2RopeJoint.prototype.SetMaxLength = Module.b2RopeJoint.prototype['SetMaxLength'];
Module.b2RopeJoint.prototype.GetMaxLength = Module.b2RopeJoint.prototype['GetMaxLength'];
Module.b2RopeJoint.prototype.GetLimitState = Module.b2RopeJoint.prototype['GetLimitState'];
Module.b2RopeJoint.prototype.GetType = Module.b2RopeJoint.prototype['GetType'];
Module.b2RopeJoint.prototype.GetBodyA = Module.b2RopeJoint.prototype['GetBodyA'];
Module.b2RopeJoint.prototype.GetBodyB = Module.b2RopeJoint.prototype['GetBodyB'];
Module.b2RopeJoint.prototype.GetAnchorA = Module.b2RopeJoint.prototype['GetAnchorA'];
Module.b2RopeJoint.prototype.GetAnchorB = Module.b2RopeJoint.prototype['GetAnchorB'];
Module.b2RopeJoint.prototype.GetReactionForce = Module.b2RopeJoint.prototype['GetReactionForce'];
Module.b2RopeJoint.prototype.GetReactionTorque = Module.b2RopeJoint.prototype['GetReactionTorque'];
Module.b2RopeJoint.prototype.GetNext = Module.b2RopeJoint.prototype['GetNext'];
Module.b2RopeJoint.prototype.GetUserData = Module.b2RopeJoint.prototype['GetUserData'];
Module.b2RopeJoint.prototype.SetUserData = Module.b2RopeJoint.prototype['SetUserData'];
Module.b2RopeJoint.prototype.IsActive = Module.b2RopeJoint.prototype['IsActive'];
Module.b2RopeJoint.prototype.GetCollideConnected = Module.b2RopeJoint.prototype['GetCollideConnected'];
Module.b2RopeJoint.prototype.__destroy__ = Module.b2RopeJoint.prototype['__destroy__'];
Module.b2RayCastInput = Module['b2RayCastInput'];
Module.b2RayCastInput.prototype.get_p1 = Module.b2RayCastInput.prototype['get_p1'];
Module.b2RayCastInput.prototype.set_p1 = Module.b2RayCastInput.prototype['set_p1'];
Module.b2RayCastInput.prototype.get_p2 = Module.b2RayCastInput.prototype['get_p2'];
Module.b2RayCastInput.prototype.set_p2 = Module.b2RayCastInput.prototype['set_p2'];
Module.b2RayCastInput.prototype.get_maxFraction = Module.b2RayCastInput.prototype['get_maxFraction'];
Module.b2RayCastInput.prototype.set_maxFraction = Module.b2RayCastInput.prototype['set_maxFraction'];
Module.b2RayCastInput.prototype.__destroy__ = Module.b2RayCastInput.prototype['__destroy__'];
Module.b2PolygonShape = Module['b2PolygonShape'];
Module.b2PolygonShape.prototype.Set = Module.b2PolygonShape.prototype['Set'];
Module.b2PolygonShape.prototype.SetAsBox = Module.b2PolygonShape.prototype['SetAsBox'];
Module.b2PolygonShape.prototype.GetVertexCount = Module.b2PolygonShape.prototype['GetVertexCount'];
Module.b2PolygonShape.prototype.GetVertex = Module.b2PolygonShape.prototype['GetVertex'];
Module.b2PolygonShape.prototype.GetType = Module.b2PolygonShape.prototype['GetType'];
Module.b2PolygonShape.prototype.GetChildCount = Module.b2PolygonShape.prototype['GetChildCount'];
Module.b2PolygonShape.prototype.TestPoint = Module.b2PolygonShape.prototype['TestPoint'];
Module.b2PolygonShape.prototype.RayCast = Module.b2PolygonShape.prototype['RayCast'];
Module.b2PolygonShape.prototype.ComputeAABB = Module.b2PolygonShape.prototype['ComputeAABB'];
Module.b2PolygonShape.prototype.ComputeMass = Module.b2PolygonShape.prototype['ComputeMass'];
Module.b2PolygonShape.prototype.get_m_centroid = Module.b2PolygonShape.prototype['get_m_centroid'];
Module.b2PolygonShape.prototype.set_m_centroid = Module.b2PolygonShape.prototype['set_m_centroid'];
Module.b2PolygonShape.prototype.get_m_vertexCount = Module.b2PolygonShape.prototype['get_m_vertexCount'];
Module.b2PolygonShape.prototype.set_m_vertexCount = Module.b2PolygonShape.prototype['set_m_vertexCount'];
Module.b2PolygonShape.prototype.get_m_type = Module.b2PolygonShape.prototype['get_m_type'];
Module.b2PolygonShape.prototype.set_m_type = Module.b2PolygonShape.prototype['set_m_type'];
Module.b2PolygonShape.prototype.get_m_radius = Module.b2PolygonShape.prototype['get_m_radius'];
Module.b2PolygonShape.prototype.set_m_radius = Module.b2PolygonShape.prototype['set_m_radius'];
Module.b2PolygonShape.prototype.__destroy__ = Module.b2PolygonShape.prototype['__destroy__'];
Module.b2EdgeShape = Module['b2EdgeShape'];
Module.b2EdgeShape.prototype.Set = Module.b2EdgeShape.prototype['Set'];
Module.b2EdgeShape.prototype.GetType = Module.b2EdgeShape.prototype['GetType'];
Module.b2EdgeShape.prototype.GetChildCount = Module.b2EdgeShape.prototype['GetChildCount'];
Module.b2EdgeShape.prototype.TestPoint = Module.b2EdgeShape.prototype['TestPoint'];
Module.b2EdgeShape.prototype.RayCast = Module.b2EdgeShape.prototype['RayCast'];
Module.b2EdgeShape.prototype.ComputeAABB = Module.b2EdgeShape.prototype['ComputeAABB'];
Module.b2EdgeShape.prototype.ComputeMass = Module.b2EdgeShape.prototype['ComputeMass'];
Module.b2EdgeShape.prototype.get_m_vertex1 = Module.b2EdgeShape.prototype['get_m_vertex1'];
Module.b2EdgeShape.prototype.set_m_vertex1 = Module.b2EdgeShape.prototype['set_m_vertex1'];
Module.b2EdgeShape.prototype.get_m_vertex2 = Module.b2EdgeShape.prototype['get_m_vertex2'];
Module.b2EdgeShape.prototype.set_m_vertex2 = Module.b2EdgeShape.prototype['set_m_vertex2'];
Module.b2EdgeShape.prototype.get_m_vertex0 = Module.b2EdgeShape.prototype['get_m_vertex0'];
Module.b2EdgeShape.prototype.set_m_vertex0 = Module.b2EdgeShape.prototype['set_m_vertex0'];
Module.b2EdgeShape.prototype.get_m_vertex3 = Module.b2EdgeShape.prototype['get_m_vertex3'];
Module.b2EdgeShape.prototype.set_m_vertex3 = Module.b2EdgeShape.prototype['set_m_vertex3'];
Module.b2EdgeShape.prototype.get_m_hasVertex0 = Module.b2EdgeShape.prototype['get_m_hasVertex0'];
Module.b2EdgeShape.prototype.set_m_hasVertex0 = Module.b2EdgeShape.prototype['set_m_hasVertex0'];
Module.b2EdgeShape.prototype.get_m_hasVertex3 = Module.b2EdgeShape.prototype['get_m_hasVertex3'];
Module.b2EdgeShape.prototype.set_m_hasVertex3 = Module.b2EdgeShape.prototype['set_m_hasVertex3'];
Module.b2EdgeShape.prototype.get_m_type = Module.b2EdgeShape.prototype['get_m_type'];
Module.b2EdgeShape.prototype.set_m_type = Module.b2EdgeShape.prototype['set_m_type'];
Module.b2EdgeShape.prototype.get_m_radius = Module.b2EdgeShape.prototype['get_m_radius'];
Module.b2EdgeShape.prototype.set_m_radius = Module.b2EdgeShape.prototype['set_m_radius'];
Module.b2EdgeShape.prototype.__destroy__ = Module.b2EdgeShape.prototype['__destroy__'];
Module.JSContactFilter = Module['JSContactFilter'];
Module.JSContactFilter.prototype.JSContactListener = Module.JSContactFilter.prototype['JSContactListener'];
Module.JSContactFilter.prototype.ShouldCollide = Module.JSContactFilter.prototype['ShouldCollide'];
Module.JSContactFilter.prototype.__destroy__ = Module.JSContactFilter.prototype['__destroy__'];
Module.b2RevoluteJointDef = Module['b2RevoluteJointDef'];
Module.b2RevoluteJointDef.prototype.Initialize = Module.b2RevoluteJointDef.prototype['Initialize'];
Module.b2RevoluteJointDef.prototype.get_localAnchorA = Module.b2RevoluteJointDef.prototype['get_localAnchorA'];
Module.b2RevoluteJointDef.prototype.set_localAnchorA = Module.b2RevoluteJointDef.prototype['set_localAnchorA'];
Module.b2RevoluteJointDef.prototype.get_localAnchorB = Module.b2RevoluteJointDef.prototype['get_localAnchorB'];
Module.b2RevoluteJointDef.prototype.set_localAnchorB = Module.b2RevoluteJointDef.prototype['set_localAnchorB'];
Module.b2RevoluteJointDef.prototype.get_referenceAngle = Module.b2RevoluteJointDef.prototype['get_referenceAngle'];
Module.b2RevoluteJointDef.prototype.set_referenceAngle = Module.b2RevoluteJointDef.prototype['set_referenceAngle'];
Module.b2RevoluteJointDef.prototype.get_enableLimit = Module.b2RevoluteJointDef.prototype['get_enableLimit'];
Module.b2RevoluteJointDef.prototype.set_enableLimit = Module.b2RevoluteJointDef.prototype['set_enableLimit'];
Module.b2RevoluteJointDef.prototype.get_lowerAngle = Module.b2RevoluteJointDef.prototype['get_lowerAngle'];
Module.b2RevoluteJointDef.prototype.set_lowerAngle = Module.b2RevoluteJointDef.prototype['set_lowerAngle'];
Module.b2RevoluteJointDef.prototype.get_upperAngle = Module.b2RevoluteJointDef.prototype['get_upperAngle'];
Module.b2RevoluteJointDef.prototype.set_upperAngle = Module.b2RevoluteJointDef.prototype['set_upperAngle'];
Module.b2RevoluteJointDef.prototype.get_enableMotor = Module.b2RevoluteJointDef.prototype['get_enableMotor'];
Module.b2RevoluteJointDef.prototype.set_enableMotor = Module.b2RevoluteJointDef.prototype['set_enableMotor'];
Module.b2RevoluteJointDef.prototype.get_motorSpeed = Module.b2RevoluteJointDef.prototype['get_motorSpeed'];
Module.b2RevoluteJointDef.prototype.set_motorSpeed = Module.b2RevoluteJointDef.prototype['set_motorSpeed'];
Module.b2RevoluteJointDef.prototype.get_maxMotorTorque = Module.b2RevoluteJointDef.prototype['get_maxMotorTorque'];
Module.b2RevoluteJointDef.prototype.set_maxMotorTorque = Module.b2RevoluteJointDef.prototype['set_maxMotorTorque'];
Module.b2RevoluteJointDef.prototype.get_type = Module.b2RevoluteJointDef.prototype['get_type'];
Module.b2RevoluteJointDef.prototype.set_type = Module.b2RevoluteJointDef.prototype['set_type'];
Module.b2RevoluteJointDef.prototype.get_userData = Module.b2RevoluteJointDef.prototype['get_userData'];
Module.b2RevoluteJointDef.prototype.set_userData = Module.b2RevoluteJointDef.prototype['set_userData'];
Module.b2RevoluteJointDef.prototype.get_bodyA = Module.b2RevoluteJointDef.prototype['get_bodyA'];
Module.b2RevoluteJointDef.prototype.set_bodyA = Module.b2RevoluteJointDef.prototype['set_bodyA'];
Module.b2RevoluteJointDef.prototype.get_bodyB = Module.b2RevoluteJointDef.prototype['get_bodyB'];
Module.b2RevoluteJointDef.prototype.set_bodyB = Module.b2RevoluteJointDef.prototype['set_bodyB'];
Module.b2RevoluteJointDef.prototype.get_collideConnected = Module.b2RevoluteJointDef.prototype['get_collideConnected'];
Module.b2RevoluteJointDef.prototype.set_collideConnected = Module.b2RevoluteJointDef.prototype['set_collideConnected'];
Module.b2RevoluteJointDef.prototype.__destroy__ = Module.b2RevoluteJointDef.prototype['__destroy__'];
Module.JSDraw = Module['JSDraw'];
Module.JSDraw.prototype.DrawPolygon = Module.JSDraw.prototype['DrawPolygon'];
Module.JSDraw.prototype.DrawSolidPolygon = Module.JSDraw.prototype['DrawSolidPolygon'];
Module.JSDraw.prototype.DrawCircle = Module.JSDraw.prototype['DrawCircle'];
Module.JSDraw.prototype.DrawSolidCircle = Module.JSDraw.prototype['DrawSolidCircle'];
Module.JSDraw.prototype.DrawSegment = Module.JSDraw.prototype['DrawSegment'];
Module.JSDraw.prototype.DrawTransform = Module.JSDraw.prototype['DrawTransform'];
Module.JSDraw.prototype.__destroy__ = Module.JSDraw.prototype['__destroy__'];
Module.b2WheelJoint = Module['b2WheelJoint'];
Module.b2WheelJoint.prototype.GetLocalAnchorA = Module.b2WheelJoint.prototype['GetLocalAnchorA'];
Module.b2WheelJoint.prototype.GetLocalAnchorB = Module.b2WheelJoint.prototype['GetLocalAnchorB'];
Module.b2WheelJoint.prototype.GetLocalAxisA = Module.b2WheelJoint.prototype['GetLocalAxisA'];
Module.b2WheelJoint.prototype.GetJointTranslation = Module.b2WheelJoint.prototype['GetJointTranslation'];
Module.b2WheelJoint.prototype.GetJointSpeed = Module.b2WheelJoint.prototype['GetJointSpeed'];
Module.b2WheelJoint.prototype.IsMotorEnabled = Module.b2WheelJoint.prototype['IsMotorEnabled'];
Module.b2WheelJoint.prototype.EnableMotor = Module.b2WheelJoint.prototype['EnableMotor'];
Module.b2WheelJoint.prototype.SetMotorSpeed = Module.b2WheelJoint.prototype['SetMotorSpeed'];
Module.b2WheelJoint.prototype.GetMotorSpeed = Module.b2WheelJoint.prototype['GetMotorSpeed'];
Module.b2WheelJoint.prototype.SetMaxMotorTorque = Module.b2WheelJoint.prototype['SetMaxMotorTorque'];
Module.b2WheelJoint.prototype.GetMaxMotorTorque = Module.b2WheelJoint.prototype['GetMaxMotorTorque'];
Module.b2WheelJoint.prototype.GetMotorTorque = Module.b2WheelJoint.prototype['GetMotorTorque'];
Module.b2WheelJoint.prototype.SetSpringFrequencyHz = Module.b2WheelJoint.prototype['SetSpringFrequencyHz'];
Module.b2WheelJoint.prototype.GetSpringFrequencyHz = Module.b2WheelJoint.prototype['GetSpringFrequencyHz'];
Module.b2WheelJoint.prototype.SetSpringDampingRatio = Module.b2WheelJoint.prototype['SetSpringDampingRatio'];
Module.b2WheelJoint.prototype.GetSpringDampingRatio = Module.b2WheelJoint.prototype['GetSpringDampingRatio'];
Module.b2WheelJoint.prototype.GetType = Module.b2WheelJoint.prototype['GetType'];
Module.b2WheelJoint.prototype.GetBodyA = Module.b2WheelJoint.prototype['GetBodyA'];
Module.b2WheelJoint.prototype.GetBodyB = Module.b2WheelJoint.prototype['GetBodyB'];
Module.b2WheelJoint.prototype.GetAnchorA = Module.b2WheelJoint.prototype['GetAnchorA'];
Module.b2WheelJoint.prototype.GetAnchorB = Module.b2WheelJoint.prototype['GetAnchorB'];
Module.b2WheelJoint.prototype.GetReactionForce = Module.b2WheelJoint.prototype['GetReactionForce'];
Module.b2WheelJoint.prototype.GetReactionTorque = Module.b2WheelJoint.prototype['GetReactionTorque'];
Module.b2WheelJoint.prototype.GetNext = Module.b2WheelJoint.prototype['GetNext'];
Module.b2WheelJoint.prototype.GetUserData = Module.b2WheelJoint.prototype['GetUserData'];
Module.b2WheelJoint.prototype.SetUserData = Module.b2WheelJoint.prototype['SetUserData'];
Module.b2WheelJoint.prototype.IsActive = Module.b2WheelJoint.prototype['IsActive'];
Module.b2WheelJoint.prototype.GetCollideConnected = Module.b2WheelJoint.prototype['GetCollideConnected'];
Module.b2WheelJoint.prototype.__destroy__ = Module.b2WheelJoint.prototype['__destroy__'];
Module.b2PulleyJoint = Module['b2PulleyJoint'];
Module.b2PulleyJoint.prototype.GetGroundAnchorA = Module.b2PulleyJoint.prototype['GetGroundAnchorA'];
Module.b2PulleyJoint.prototype.GetGroundAnchorB = Module.b2PulleyJoint.prototype['GetGroundAnchorB'];
Module.b2PulleyJoint.prototype.GetLengthA = Module.b2PulleyJoint.prototype['GetLengthA'];
Module.b2PulleyJoint.prototype.GetLengthB = Module.b2PulleyJoint.prototype['GetLengthB'];
Module.b2PulleyJoint.prototype.GetRatio = Module.b2PulleyJoint.prototype['GetRatio'];
Module.b2PulleyJoint.prototype.GetType = Module.b2PulleyJoint.prototype['GetType'];
Module.b2PulleyJoint.prototype.GetBodyA = Module.b2PulleyJoint.prototype['GetBodyA'];
Module.b2PulleyJoint.prototype.GetBodyB = Module.b2PulleyJoint.prototype['GetBodyB'];
Module.b2PulleyJoint.prototype.GetAnchorA = Module.b2PulleyJoint.prototype['GetAnchorA'];
Module.b2PulleyJoint.prototype.GetAnchorB = Module.b2PulleyJoint.prototype['GetAnchorB'];
Module.b2PulleyJoint.prototype.GetReactionForce = Module.b2PulleyJoint.prototype['GetReactionForce'];
Module.b2PulleyJoint.prototype.GetReactionTorque = Module.b2PulleyJoint.prototype['GetReactionTorque'];
Module.b2PulleyJoint.prototype.GetNext = Module.b2PulleyJoint.prototype['GetNext'];
Module.b2PulleyJoint.prototype.GetUserData = Module.b2PulleyJoint.prototype['GetUserData'];
Module.b2PulleyJoint.prototype.SetUserData = Module.b2PulleyJoint.prototype['SetUserData'];
Module.b2PulleyJoint.prototype.IsActive = Module.b2PulleyJoint.prototype['IsActive'];
Module.b2PulleyJoint.prototype.GetCollideConnected = Module.b2PulleyJoint.prototype['GetCollideConnected'];
Module.b2PulleyJoint.prototype.__destroy__ = Module.b2PulleyJoint.prototype['__destroy__'];
Module.b2MouseJointDef = Module['b2MouseJointDef'];
Module.b2MouseJointDef.prototype.get_target = Module.b2MouseJointDef.prototype['get_target'];
Module.b2MouseJointDef.prototype.set_target = Module.b2MouseJointDef.prototype['set_target'];
Module.b2MouseJointDef.prototype.get_maxForce = Module.b2MouseJointDef.prototype['get_maxForce'];
Module.b2MouseJointDef.prototype.set_maxForce = Module.b2MouseJointDef.prototype['set_maxForce'];
Module.b2MouseJointDef.prototype.get_frequencyHz = Module.b2MouseJointDef.prototype['get_frequencyHz'];
Module.b2MouseJointDef.prototype.set_frequencyHz = Module.b2MouseJointDef.prototype['set_frequencyHz'];
Module.b2MouseJointDef.prototype.get_dampingRatio = Module.b2MouseJointDef.prototype['get_dampingRatio'];
Module.b2MouseJointDef.prototype.set_dampingRatio = Module.b2MouseJointDef.prototype['set_dampingRatio'];
Module.b2MouseJointDef.prototype.get_type = Module.b2MouseJointDef.prototype['get_type'];
Module.b2MouseJointDef.prototype.set_type = Module.b2MouseJointDef.prototype['set_type'];
Module.b2MouseJointDef.prototype.get_userData = Module.b2MouseJointDef.prototype['get_userData'];
Module.b2MouseJointDef.prototype.set_userData = Module.b2MouseJointDef.prototype['set_userData'];
Module.b2MouseJointDef.prototype.get_bodyA = Module.b2MouseJointDef.prototype['get_bodyA'];
Module.b2MouseJointDef.prototype.set_bodyA = Module.b2MouseJointDef.prototype['set_bodyA'];
Module.b2MouseJointDef.prototype.get_bodyB = Module.b2MouseJointDef.prototype['get_bodyB'];
Module.b2MouseJointDef.prototype.set_bodyB = Module.b2MouseJointDef.prototype['set_bodyB'];
Module.b2MouseJointDef.prototype.get_collideConnected = Module.b2MouseJointDef.prototype['get_collideConnected'];
Module.b2MouseJointDef.prototype.set_collideConnected = Module.b2MouseJointDef.prototype['set_collideConnected'];
Module.b2MouseJointDef.prototype.__destroy__ = Module.b2MouseJointDef.prototype['__destroy__'];
Module.b2Contact = Module['b2Contact'];
Module.b2Contact.prototype.GetManifold = Module.b2Contact.prototype['GetManifold'];
Module.b2Contact.prototype.IsTouching = Module.b2Contact.prototype['IsTouching'];
Module.b2Contact.prototype.SetEnabled = Module.b2Contact.prototype['SetEnabled'];
Module.b2Contact.prototype.IsEnabled = Module.b2Contact.prototype['IsEnabled'];
Module.b2Contact.prototype.GetNext = Module.b2Contact.prototype['GetNext'];
Module.b2Contact.prototype.GetFixtureA = Module.b2Contact.prototype['GetFixtureA'];
Module.b2Contact.prototype.GetChildIndexA = Module.b2Contact.prototype['GetChildIndexA'];
Module.b2Contact.prototype.GetFixtureB = Module.b2Contact.prototype['GetFixtureB'];
Module.b2Contact.prototype.GetChildIndexB = Module.b2Contact.prototype['GetChildIndexB'];
Module.b2Contact.prototype.SetFriction = Module.b2Contact.prototype['SetFriction'];
Module.b2Contact.prototype.GetFriction = Module.b2Contact.prototype['GetFriction'];
Module.b2Contact.prototype.ResetFriction = Module.b2Contact.prototype['ResetFriction'];
Module.b2Contact.prototype.SetRestitution = Module.b2Contact.prototype['SetRestitution'];
Module.b2Contact.prototype.GetRestitution = Module.b2Contact.prototype['GetRestitution'];
Module.b2Contact.prototype.ResetRestitution = Module.b2Contact.prototype['ResetRestitution'];
Module.b2Shape = Module['b2Shape'];
Module.b2Shape.prototype.GetType = Module.b2Shape.prototype['GetType'];
Module.b2Shape.prototype.GetChildCount = Module.b2Shape.prototype['GetChildCount'];
Module.b2Shape.prototype.TestPoint = Module.b2Shape.prototype['TestPoint'];
Module.b2Shape.prototype.RayCast = Module.b2Shape.prototype['RayCast'];
Module.b2Shape.prototype.ComputeAABB = Module.b2Shape.prototype['ComputeAABB'];
Module.b2Shape.prototype.ComputeMass = Module.b2Shape.prototype['ComputeMass'];
Module.b2Shape.prototype.get_m_type = Module.b2Shape.prototype['get_m_type'];
Module.b2Shape.prototype.set_m_type = Module.b2Shape.prototype['set_m_type'];
Module.b2Shape.prototype.get_m_radius = Module.b2Shape.prototype['get_m_radius'];
Module.b2Shape.prototype.set_m_radius = Module.b2Shape.prototype['set_m_radius'];
Module.b2Shape.prototype.__destroy__ = Module.b2Shape.prototype['__destroy__'];
Module.b2DistanceJointDef = Module['b2DistanceJointDef'];
Module.b2DistanceJointDef.prototype.Initialize = Module.b2DistanceJointDef.prototype['Initialize'];
Module.b2DistanceJointDef.prototype.get_localAnchorA = Module.b2DistanceJointDef.prototype['get_localAnchorA'];
Module.b2DistanceJointDef.prototype.set_localAnchorA = Module.b2DistanceJointDef.prototype['set_localAnchorA'];
Module.b2DistanceJointDef.prototype.get_localAnchorB = Module.b2DistanceJointDef.prototype['get_localAnchorB'];
Module.b2DistanceJointDef.prototype.set_localAnchorB = Module.b2DistanceJointDef.prototype['set_localAnchorB'];
Module.b2DistanceJointDef.prototype.get_length = Module.b2DistanceJointDef.prototype['get_length'];
Module.b2DistanceJointDef.prototype.set_length = Module.b2DistanceJointDef.prototype['set_length'];
Module.b2DistanceJointDef.prototype.get_frequencyHz = Module.b2DistanceJointDef.prototype['get_frequencyHz'];
Module.b2DistanceJointDef.prototype.set_frequencyHz = Module.b2DistanceJointDef.prototype['set_frequencyHz'];
Module.b2DistanceJointDef.prototype.get_dampingRatio = Module.b2DistanceJointDef.prototype['get_dampingRatio'];
Module.b2DistanceJointDef.prototype.set_dampingRatio = Module.b2DistanceJointDef.prototype['set_dampingRatio'];
Module.b2DistanceJointDef.prototype.get_type = Module.b2DistanceJointDef.prototype['get_type'];
Module.b2DistanceJointDef.prototype.set_type = Module.b2DistanceJointDef.prototype['set_type'];
Module.b2DistanceJointDef.prototype.get_userData = Module.b2DistanceJointDef.prototype['get_userData'];
Module.b2DistanceJointDef.prototype.set_userData = Module.b2DistanceJointDef.prototype['set_userData'];
Module.b2DistanceJointDef.prototype.get_bodyA = Module.b2DistanceJointDef.prototype['get_bodyA'];
Module.b2DistanceJointDef.prototype.set_bodyA = Module.b2DistanceJointDef.prototype['set_bodyA'];
Module.b2DistanceJointDef.prototype.get_bodyB = Module.b2DistanceJointDef.prototype['get_bodyB'];
Module.b2DistanceJointDef.prototype.set_bodyB = Module.b2DistanceJointDef.prototype['set_bodyB'];
Module.b2DistanceJointDef.prototype.get_collideConnected = Module.b2DistanceJointDef.prototype['get_collideConnected'];
Module.b2DistanceJointDef.prototype.set_collideConnected = Module.b2DistanceJointDef.prototype['set_collideConnected'];
Module.b2DistanceJointDef.prototype.__destroy__ = Module.b2DistanceJointDef.prototype['__destroy__'];
Module.b2Body = Module['b2Body'];
Module.b2Body.prototype.CreateFixture = Module.b2Body.prototype['CreateFixture'];
Module.b2Body.prototype.DestroyFixture = Module.b2Body.prototype['DestroyFixture'];
Module.b2Body.prototype.SetTransform = Module.b2Body.prototype['SetTransform'];
Module.b2Body.prototype.GetTransform = Module.b2Body.prototype['GetTransform'];
Module.b2Body.prototype.GetPosition = Module.b2Body.prototype['GetPosition'];
Module.b2Body.prototype.GetAngle = Module.b2Body.prototype['GetAngle'];
Module.b2Body.prototype.GetWorldCenter = Module.b2Body.prototype['GetWorldCenter'];
Module.b2Body.prototype.GetLocalCenter = Module.b2Body.prototype['GetLocalCenter'];
Module.b2Body.prototype.SetLinearVelocity = Module.b2Body.prototype['SetLinearVelocity'];
Module.b2Body.prototype.GetLinearVelocity = Module.b2Body.prototype['GetLinearVelocity'];
Module.b2Body.prototype.SetAngularVelocity = Module.b2Body.prototype['SetAngularVelocity'];
Module.b2Body.prototype.GetAngularVelocity = Module.b2Body.prototype['GetAngularVelocity'];
Module.b2Body.prototype.ApplyForce = Module.b2Body.prototype['ApplyForce'];
Module.b2Body.prototype.ApplyForceToCenter = Module.b2Body.prototype['ApplyForceToCenter'];
Module.b2Body.prototype.ApplyTorque = Module.b2Body.prototype['ApplyTorque'];
Module.b2Body.prototype.ApplyLinearImpulse = Module.b2Body.prototype['ApplyLinearImpulse'];
Module.b2Body.prototype.ApplyAngularImpulse = Module.b2Body.prototype['ApplyAngularImpulse'];
Module.b2Body.prototype.GetMass = Module.b2Body.prototype['GetMass'];
Module.b2Body.prototype.GetInertia = Module.b2Body.prototype['GetInertia'];
Module.b2Body.prototype.GetMassData = Module.b2Body.prototype['GetMassData'];
Module.b2Body.prototype.SetMassData = Module.b2Body.prototype['SetMassData'];
Module.b2Body.prototype.ResetMassData = Module.b2Body.prototype['ResetMassData'];
Module.b2Body.prototype.GetWorldPoint = Module.b2Body.prototype['GetWorldPoint'];
Module.b2Body.prototype.GetWorldVector = Module.b2Body.prototype['GetWorldVector'];
Module.b2Body.prototype.GetLocalPoint = Module.b2Body.prototype['GetLocalPoint'];
Module.b2Body.prototype.GetLocalVector = Module.b2Body.prototype['GetLocalVector'];
Module.b2Body.prototype.GetLinearVelocityFromWorldPoint = Module.b2Body.prototype['GetLinearVelocityFromWorldPoint'];
Module.b2Body.prototype.GetLinearVelocityFromLocalPoint = Module.b2Body.prototype['GetLinearVelocityFromLocalPoint'];
Module.b2Body.prototype.GetLinearDamping = Module.b2Body.prototype['GetLinearDamping'];
Module.b2Body.prototype.SetLinearDamping = Module.b2Body.prototype['SetLinearDamping'];
Module.b2Body.prototype.GetAngularDamping = Module.b2Body.prototype['GetAngularDamping'];
Module.b2Body.prototype.SetAngularDamping = Module.b2Body.prototype['SetAngularDamping'];
Module.b2Body.prototype.GetGravityScale = Module.b2Body.prototype['GetGravityScale'];
Module.b2Body.prototype.SetGravityScale = Module.b2Body.prototype['SetGravityScale'];
Module.b2Body.prototype.SetType = Module.b2Body.prototype['SetType'];
Module.b2Body.prototype.GetType = Module.b2Body.prototype['GetType'];
Module.b2Body.prototype.SetBullet = Module.b2Body.prototype['SetBullet'];
Module.b2Body.prototype.IsBullet = Module.b2Body.prototype['IsBullet'];
Module.b2Body.prototype.SetSleepingAllowed = Module.b2Body.prototype['SetSleepingAllowed'];
Module.b2Body.prototype.IsSleepingAllowed = Module.b2Body.prototype['IsSleepingAllowed'];
Module.b2Body.prototype.SetAwake = Module.b2Body.prototype['SetAwake'];
Module.b2Body.prototype.IsAwake = Module.b2Body.prototype['IsAwake'];
Module.b2Body.prototype.SetActive = Module.b2Body.prototype['SetActive'];
Module.b2Body.prototype.IsActive = Module.b2Body.prototype['IsActive'];
Module.b2Body.prototype.SetFixedRotation = Module.b2Body.prototype['SetFixedRotation'];
Module.b2Body.prototype.IsFixedRotation = Module.b2Body.prototype['IsFixedRotation'];
Module.b2Body.prototype.GetFixtureList = Module.b2Body.prototype['GetFixtureList'];
Module.b2Body.prototype.GetJointList = Module.b2Body.prototype['GetJointList'];
Module.b2Body.prototype.GetContactList = Module.b2Body.prototype['GetContactList'];
Module.b2Body.prototype.GetNext = Module.b2Body.prototype['GetNext'];
Module.b2Body.prototype.GetUserData = Module.b2Body.prototype['GetUserData'];
Module.b2Body.prototype.SetUserData = Module.b2Body.prototype['SetUserData'];
Module.b2Body.prototype.GetWorld = Module.b2Body.prototype['GetWorld'];
Module.b2Body.prototype.Dump = Module.b2Body.prototype['Dump'];
Module.b2FrictionJoint = Module['b2FrictionJoint'];
Module.b2FrictionJoint.prototype.GetLocalAnchorA = Module.b2FrictionJoint.prototype['GetLocalAnchorA'];
Module.b2FrictionJoint.prototype.GetLocalAnchorB = Module.b2FrictionJoint.prototype['GetLocalAnchorB'];
Module.b2FrictionJoint.prototype.SetMaxForce = Module.b2FrictionJoint.prototype['SetMaxForce'];
Module.b2FrictionJoint.prototype.GetMaxForce = Module.b2FrictionJoint.prototype['GetMaxForce'];
Module.b2FrictionJoint.prototype.SetMaxTorque = Module.b2FrictionJoint.prototype['SetMaxTorque'];
Module.b2FrictionJoint.prototype.GetMaxTorque = Module.b2FrictionJoint.prototype['GetMaxTorque'];
Module.b2FrictionJoint.prototype.GetType = Module.b2FrictionJoint.prototype['GetType'];
Module.b2FrictionJoint.prototype.GetBodyA = Module.b2FrictionJoint.prototype['GetBodyA'];
Module.b2FrictionJoint.prototype.GetBodyB = Module.b2FrictionJoint.prototype['GetBodyB'];
Module.b2FrictionJoint.prototype.GetAnchorA = Module.b2FrictionJoint.prototype['GetAnchorA'];
Module.b2FrictionJoint.prototype.GetAnchorB = Module.b2FrictionJoint.prototype['GetAnchorB'];
Module.b2FrictionJoint.prototype.GetReactionForce = Module.b2FrictionJoint.prototype['GetReactionForce'];
Module.b2FrictionJoint.prototype.GetReactionTorque = Module.b2FrictionJoint.prototype['GetReactionTorque'];
Module.b2FrictionJoint.prototype.GetNext = Module.b2FrictionJoint.prototype['GetNext'];
Module.b2FrictionJoint.prototype.GetUserData = Module.b2FrictionJoint.prototype['GetUserData'];
Module.b2FrictionJoint.prototype.SetUserData = Module.b2FrictionJoint.prototype['SetUserData'];
Module.b2FrictionJoint.prototype.IsActive = Module.b2FrictionJoint.prototype['IsActive'];
Module.b2FrictionJoint.prototype.GetCollideConnected = Module.b2FrictionJoint.prototype['GetCollideConnected'];
Module.b2FrictionJoint.prototype.__destroy__ = Module.b2FrictionJoint.prototype['__destroy__'];
Module.b2DestructionListener = Module['b2DestructionListener'];
Module.b2DestructionListener.prototype.__destroy__ = Module.b2DestructionListener.prototype['__destroy__'];
Module.b2GearJointDef = Module['b2GearJointDef'];
Module.b2GearJointDef.prototype.get_joint1 = Module.b2GearJointDef.prototype['get_joint1'];
Module.b2GearJointDef.prototype.set_joint1 = Module.b2GearJointDef.prototype['set_joint1'];
Module.b2GearJointDef.prototype.get_joint2 = Module.b2GearJointDef.prototype['get_joint2'];
Module.b2GearJointDef.prototype.set_joint2 = Module.b2GearJointDef.prototype['set_joint2'];
Module.b2GearJointDef.prototype.get_ratio = Module.b2GearJointDef.prototype['get_ratio'];
Module.b2GearJointDef.prototype.set_ratio = Module.b2GearJointDef.prototype['set_ratio'];
Module.b2GearJointDef.prototype.get_type = Module.b2GearJointDef.prototype['get_type'];
Module.b2GearJointDef.prototype.set_type = Module.b2GearJointDef.prototype['set_type'];
Module.b2GearJointDef.prototype.get_userData = Module.b2GearJointDef.prototype['get_userData'];
Module.b2GearJointDef.prototype.set_userData = Module.b2GearJointDef.prototype['set_userData'];
Module.b2GearJointDef.prototype.get_bodyA = Module.b2GearJointDef.prototype['get_bodyA'];
Module.b2GearJointDef.prototype.set_bodyA = Module.b2GearJointDef.prototype['set_bodyA'];
Module.b2GearJointDef.prototype.get_bodyB = Module.b2GearJointDef.prototype['get_bodyB'];
Module.b2GearJointDef.prototype.set_bodyB = Module.b2GearJointDef.prototype['set_bodyB'];
Module.b2GearJointDef.prototype.get_collideConnected = Module.b2GearJointDef.prototype['get_collideConnected'];
Module.b2GearJointDef.prototype.set_collideConnected = Module.b2GearJointDef.prototype['set_collideConnected'];
Module.b2GearJointDef.prototype.__destroy__ = Module.b2GearJointDef.prototype['__destroy__'];
Module.b2RevoluteJoint = Module['b2RevoluteJoint'];
Module.b2RevoluteJoint.prototype.GetLocalAnchorA = Module.b2RevoluteJoint.prototype['GetLocalAnchorA'];
Module.b2RevoluteJoint.prototype.GetLocalAnchorB = Module.b2RevoluteJoint.prototype['GetLocalAnchorB'];
Module.b2RevoluteJoint.prototype.GetReferenceAngle = Module.b2RevoluteJoint.prototype['GetReferenceAngle'];
Module.b2RevoluteJoint.prototype.GetJointAngle = Module.b2RevoluteJoint.prototype['GetJointAngle'];
Module.b2RevoluteJoint.prototype.GetJointSpeed = Module.b2RevoluteJoint.prototype['GetJointSpeed'];
Module.b2RevoluteJoint.prototype.IsLimitEnabled = Module.b2RevoluteJoint.prototype['IsLimitEnabled'];
Module.b2RevoluteJoint.prototype.EnableLimit = Module.b2RevoluteJoint.prototype['EnableLimit'];
Module.b2RevoluteJoint.prototype.GetLowerLimit = Module.b2RevoluteJoint.prototype['GetLowerLimit'];
Module.b2RevoluteJoint.prototype.GetUpperLimit = Module.b2RevoluteJoint.prototype['GetUpperLimit'];
Module.b2RevoluteJoint.prototype.SetLimits = Module.b2RevoluteJoint.prototype['SetLimits'];
Module.b2RevoluteJoint.prototype.IsMotorEnabled = Module.b2RevoluteJoint.prototype['IsMotorEnabled'];
Module.b2RevoluteJoint.prototype.EnableMotor = Module.b2RevoluteJoint.prototype['EnableMotor'];
Module.b2RevoluteJoint.prototype.SetMotorSpeed = Module.b2RevoluteJoint.prototype['SetMotorSpeed'];
Module.b2RevoluteJoint.prototype.GetMotorSpeed = Module.b2RevoluteJoint.prototype['GetMotorSpeed'];
Module.b2RevoluteJoint.prototype.SetMaxMotorTorque = Module.b2RevoluteJoint.prototype['SetMaxMotorTorque'];
Module.b2RevoluteJoint.prototype.GetMaxMotorTorque = Module.b2RevoluteJoint.prototype['GetMaxMotorTorque'];
Module.b2RevoluteJoint.prototype.GetMotorTorque = Module.b2RevoluteJoint.prototype['GetMotorTorque'];
Module.b2RevoluteJoint.prototype.GetType = Module.b2RevoluteJoint.prototype['GetType'];
Module.b2RevoluteJoint.prototype.GetBodyA = Module.b2RevoluteJoint.prototype['GetBodyA'];
Module.b2RevoluteJoint.prototype.GetBodyB = Module.b2RevoluteJoint.prototype['GetBodyB'];
Module.b2RevoluteJoint.prototype.GetAnchorA = Module.b2RevoluteJoint.prototype['GetAnchorA'];
Module.b2RevoluteJoint.prototype.GetAnchorB = Module.b2RevoluteJoint.prototype['GetAnchorB'];
Module.b2RevoluteJoint.prototype.GetReactionForce = Module.b2RevoluteJoint.prototype['GetReactionForce'];
Module.b2RevoluteJoint.prototype.GetReactionTorque = Module.b2RevoluteJoint.prototype['GetReactionTorque'];
Module.b2RevoluteJoint.prototype.GetNext = Module.b2RevoluteJoint.prototype['GetNext'];
Module.b2RevoluteJoint.prototype.GetUserData = Module.b2RevoluteJoint.prototype['GetUserData'];
Module.b2RevoluteJoint.prototype.SetUserData = Module.b2RevoluteJoint.prototype['SetUserData'];
Module.b2RevoluteJoint.prototype.IsActive = Module.b2RevoluteJoint.prototype['IsActive'];
Module.b2RevoluteJoint.prototype.GetCollideConnected = Module.b2RevoluteJoint.prototype['GetCollideConnected'];
Module.b2RevoluteJoint.prototype.__destroy__ = Module.b2RevoluteJoint.prototype['__destroy__'];
Module.b2ContactFilter = Module['b2ContactFilter'];
Module.b2ContactFilter.prototype.__destroy__ = Module.b2ContactFilter.prototype['__destroy__'];
Module.b2ContactEdge = Module['b2ContactEdge'];
Module.b2ContactEdge.prototype.get_other = Module.b2ContactEdge.prototype['get_other'];
Module.b2ContactEdge.prototype.set_other = Module.b2ContactEdge.prototype['set_other'];
Module.b2ContactEdge.prototype.get_contact = Module.b2ContactEdge.prototype['get_contact'];
Module.b2ContactEdge.prototype.set_contact = Module.b2ContactEdge.prototype['set_contact'];
Module.b2ContactEdge.prototype.get_prev = Module.b2ContactEdge.prototype['get_prev'];
Module.b2ContactEdge.prototype.set_prev = Module.b2ContactEdge.prototype['set_prev'];
Module.b2ContactEdge.prototype.get_next = Module.b2ContactEdge.prototype['get_next'];
Module.b2ContactEdge.prototype.set_next = Module.b2ContactEdge.prototype['set_next'];
Module.b2ContactEdge.prototype.__destroy__ = Module.b2ContactEdge.prototype['__destroy__'];
Module.b2RopeJointDef = Module['b2RopeJointDef'];
Module.b2RopeJointDef.prototype.get_localAnchorA = Module.b2RopeJointDef.prototype['get_localAnchorA'];
Module.b2RopeJointDef.prototype.set_localAnchorA = Module.b2RopeJointDef.prototype['set_localAnchorA'];
Module.b2RopeJointDef.prototype.get_localAnchorB = Module.b2RopeJointDef.prototype['get_localAnchorB'];
Module.b2RopeJointDef.prototype.set_localAnchorB = Module.b2RopeJointDef.prototype['set_localAnchorB'];
Module.b2RopeJointDef.prototype.get_maxLength = Module.b2RopeJointDef.prototype['get_maxLength'];
Module.b2RopeJointDef.prototype.set_maxLength = Module.b2RopeJointDef.prototype['set_maxLength'];
Module.b2RopeJointDef.prototype.get_type = Module.b2RopeJointDef.prototype['get_type'];
Module.b2RopeJointDef.prototype.set_type = Module.b2RopeJointDef.prototype['set_type'];
Module.b2RopeJointDef.prototype.get_userData = Module.b2RopeJointDef.prototype['get_userData'];
Module.b2RopeJointDef.prototype.set_userData = Module.b2RopeJointDef.prototype['set_userData'];
Module.b2RopeJointDef.prototype.get_bodyA = Module.b2RopeJointDef.prototype['get_bodyA'];
Module.b2RopeJointDef.prototype.set_bodyA = Module.b2RopeJointDef.prototype['set_bodyA'];
Module.b2RopeJointDef.prototype.get_bodyB = Module.b2RopeJointDef.prototype['get_bodyB'];
Module.b2RopeJointDef.prototype.set_bodyB = Module.b2RopeJointDef.prototype['set_bodyB'];
Module.b2RopeJointDef.prototype.get_collideConnected = Module.b2RopeJointDef.prototype['get_collideConnected'];
Module.b2RopeJointDef.prototype.set_collideConnected = Module.b2RopeJointDef.prototype['set_collideConnected'];
Module.b2RopeJointDef.prototype.__destroy__ = Module.b2RopeJointDef.prototype['__destroy__'];Module.b2Shape.e_circle = Module['b2Shape']['e_circle'];
Module.b2Shape.e_edge = Module['b2Shape']['e_edge'];
Module.b2Shape.e_polygon = Module['b2Shape']['e_polygon'];
Module.b2Shape.e_chain = Module['b2Shape']['e_chain'];
Module.b2Shape.e_typeCount = Module['b2Shape']['e_typeCount'];
Module.e_unknownJoint = Module['e_unknownJoint'];
Module.e_revoluteJoint = Module['e_revoluteJoint'];
Module.e_prismaticJoint = Module['e_prismaticJoint'];
Module.e_distanceJoint = Module['e_distanceJoint'];
Module.e_pulleyJoint = Module['e_pulleyJoint'];
Module.e_mouseJoint = Module['e_mouseJoint'];
Module.e_gearJoint = Module['e_gearJoint'];
Module.e_wheelJoint = Module['e_wheelJoint'];
Module.e_weldJoint = Module['e_weldJoint'];
Module.e_frictionJoint = Module['e_frictionJoint'];
Module.e_ropeJoint = Module['e_ropeJoint'];
Module.e_inactiveLimit = Module['e_inactiveLimit'];
Module.e_atLowerLimit = Module['e_atLowerLimit'];
Module.e_atUpperLimit = Module['e_atUpperLimit'];
Module.e_equalLimits = Module['e_equalLimits'];
Module.b2Manifold.e_circles = Module['b2Manifold']['e_circles'];
Module.b2Manifold.e_faceA = Module['b2Manifold']['e_faceA'];
Module.b2Manifold.e_faceB = Module['b2Manifold']['e_faceB'];
Module.b2_staticBody = Module['b2_staticBody'];
Module.b2_kinematicBody = Module['b2_kinematicBody'];
Module.b2_dynamicBody = Module['b2_dynamicBody'];
Module.b2Draw.e_shapeBit = Module['b2Draw']['e_shapeBit'];
Module.b2Draw.e_jointBit = Module['b2Draw']['e_jointBit'];
Module.b2Draw.e_aabbBit = Module['b2Draw']['e_aabbBit'];
Module.b2Draw.e_pairBit = Module['b2Draw']['e_pairBit'];
Module.b2Draw.e_centerOfMassBit = Module['b2Draw']['e_centerOfMassBit'];
Module.b2ContactFeature.e_vertex = Module['b2ContactFeature']['e_vertex'];
Module.b2ContactFeature.e_face = Module['b2ContactFeature']['e_face'];
/* global
	Box2D
 */

var tbPhysics = function(scale, gravity, depth) {
	"use strict";

	this.visible = false;
	this.active = true;

	this.scale = scale === undefined ? 0.01 : scale;
	gravity = gravity === undefined ? 750 : gravity;

	this.depth = depth || 0;
	this._initPhysicsEngine(gravity);
	
	this.stepEachFrame = true;

	tbGame.addToken(this);
};

tbPhysics.prototype._initPhysicsEngine = function(gravity) {
	"use strict";

	var gravity = new Box2D.b2Vec2(0.0, gravity * this.scale);
	this.world = new Box2D.b2World(gravity, true);
	this.world.SetAllowSleeping(true);
	Box2D.destroy(gravity);


	// temporary pre-allocated objects
	this.temp = {};
	this.temp.vec0 = new Box2D.b2Vec2(0, 0);
	this.temp.vec1 = new Box2D.b2Vec2(0, 0);
	this.temp.vec2 = new Box2D.b2Vec2(0, 0);
	this.temp.vec3 = new Box2D.b2Vec2(0, 0);
	this.temp.vec4 = new Box2D.b2Vec2(0, 0);
	this.temp.vec5 = new Box2D.b2Vec2(0, 0);

	// Create some general shapes
	this.circleShape = new Box2D.b2CircleShape();
	this.polygonShape = new Box2D.b2PolygonShape();

	this._initRaycastCallback();
};

tbPhysics.prototype._initRaycastCallback = function() {
	"use strict";

	this.raycastCallBack = new Box2D.JSRayCastCallback();

	this.raycastCallBack["ReportFixture"] = function(pFixture, pPoint, pNormal, fraction) {

		var self = this;
		var fixture = Box2D.wrapPointer(pFixture, Box2D.b2Fixture);

		var body = fixture.GetBody();

		if (body === self.body0 || body === self.body1) {
			return -1;
		}
		else {
			self.foundObjectBetween = true;
			return 0;
		}
	};

};


tbPhysics.prototype.isSpaceBetween = function(body0, body1, rayWidth) {
	"use strict";

	this.raycastCallBack.body0 = body0;
	this.raycastCallBack.body1 = body1;

	var pos0 = body0.GetPosition();
	var pos1 = body1.GetPosition();

	var line = this.temp.vec0;

	line.Set(pos0.get_x() - pos1.get_x(), pos0.get_y() - pos1.get_y() );

	var perp = this.temp.vec1;

	perp.Set(line.get_y(), -line.get_x());

	perp.Normalize();

	var perpX = perp.get_x() * rayWidth / 2 * this.scale;
	var perpY = perp.get_y() * rayWidth / 2 * this.scale;

	var cur_pos0 = this.temp.vec2;
	var cur_pos1 = this.temp.vec3;

	cur_pos0.Set(pos0.get_x() - perpX, pos0.get_y() - perpY);
	cur_pos1.Set(pos1.get_x() - perpX, pos1.get_y() - perpY);

	for (var i=-1;i<=1;++i) {

		this.raycastCallBack.foundObjectBetween = false;
		this.world.RayCast(this.raycastCallBack, cur_pos0, cur_pos1);

		if (this.raycastCallBack.foundObjectBetween) {
			return false;
		}

		cur_pos0.Set(cur_pos0.get_x() + perpX, cur_pos0.get_y() + perpY);
		cur_pos1.Set(cur_pos1.get_x() + perpX, cur_pos1.get_y() + perpY);

	}

	return true;
};

tbPhysics.prototype.createBoundaries = function(x, y, width, height) {
	"use strict";
	var bodyDef = new Box2D.b2BodyDef();

	var v0 = this.temp.vec0;
	var v1 = this.temp.vec1;

	var shape0 = new Box2D.b2EdgeShape();

	v0.Set(x * this.scale, y * this.scale + height * this.scale);
	v1.Set(x * this.scale + width * this.scale, y * this.scale + height * this.scale);
	shape0.Set(v0, v1);

	var wallBottom = this.world.CreateBody(bodyDef);
	wallBottom.CreateFixture(shape0, 0.0);

	v0.Set(x * this.scale + 0, y * this.scale + 0);
	v1.Set(x * this.scale + width * this.scale, y * this.scale + 0);
	shape0.Set(v0, v1);

	var wallTop = this.world.CreateBody(bodyDef);
	wallTop.CreateFixture(shape0, 0.0);

	v0.Set(x * this.scale + 0, y * this.scale);
	v1.Set(x * this.scale + 0, y * this.scale + height * this.scale);
	shape0.Set(v0, v1);

	var wallLeft = this.world.CreateBody(bodyDef);
	wallLeft.CreateFixture(shape0, 0.0);

	v0.Set(x * this.scale + width * this.scale, y * this.scale);
	v1.Set(x * this.scale + width * this.scale, y * this.scale + height * this.scale);
	shape0.Set(v0, v1);

	var wallRight = this.world.CreateBody(bodyDef);
	wallRight.CreateFixture(shape0, 0.0);

	Box2D.destroy(shape0);
};

tbPhysics.prototype.createBody = function(x, y, angle, shape, type, density, restitution, friction) {
	"use strict";
	var bd = new Box2D.b2BodyDef();
	bd.set_type(type);
	bd.set_position(this.ZERO);

	var body = this.world.CreateBody(bd);

	Box2D.destroy(bd);

	var fixture = new Box2D.b2FixtureDef();

	fixture.set_shape(shape);

	if (density !== undefined) {
		fixture.set_density(density);
	}
	else {
		fixture.set_density(5);
	}

	if (restitution !== undefined) {
		fixture.set_restitution(restitution);
	}

	if (friction !== undefined) {
		fixture.set_friction(friction);
	}

	body.CreateFixture(fixture);

	Box2D.destroy(fixture);

	this.temp.vec0.Set(x * this.scale, y * this.scale);
	body.SetTransform(this.temp.vec0, angle);

	body.SetSleepingAllowed(1);
	body.SetAwake(1);
	body.SetActive(1);

	return body;
};

tbPhysics.prototype.createCircle = function(x, y, radius, density, restitution, friction) {
	"use strict";

	this.circleShape.set_m_radius(radius * this.scale);
	var body = this.createBody(x, y, Math.random() * Math.PI * 2, this.circleShape, Box2D.b2_dynamicBody, density, restitution, friction);
	body.circle_radius = radius;
	return body;
};

tbPhysics.prototype.createBox = function(x, y, width, height, density, restitution, friction) {
	"use strict";
	
	this.polygonShape.SetAsBox(width / 2 * this.scale, height / 2 * this.scale);
	var body = this.createBody(x, y, 0, this.polygonShape, Box2D.b2_dynamicBody, density, restitution, friction);

	return body;
};

tbPhysics.prototype.getBodyData = function(body, data) {
	"use strict";

	if (!data) {
		data = new tbVector();
	}

	var bpos = body.GetPosition();
	data.x = bpos.get_x() / this.scale;
	data.y = bpos.get_y() / this.scale;
	data.angle = body.GetAngle();
	data.radius = body.circle_radius;

	var v = body.GetLinearVelocity();

	if (!data.velocity) {
		data.velocity = new tbVector(0, 0);
	}

	data.velocity.x = v.get_x() / this.scale;
	data.velocity.y = v.get_y() / this.scale;

	data.angular_velocity = body.GetAngularVelocity();

	return data;
};

tbPhysics.prototype.setPosition = function(body, x, y) {
	"use strict";
	this.temp.vec0.Set(x * this.scale, y * this.scale);
	body.SetTransform(this.temp.vec0, body.GetAngle());
};

tbPhysics.prototype.setVelocity = function(body, x, y) {
	"use strict";
	this.temp.vec0.Set(x * this.scale, y * this.scale);
	body.SetLinearVelocity(this.temp.vec0);
};

tbPhysics.prototype.setAngularVelocity = function(body, omega) {
	"use strict";
	body.SetAngularVelocity(omega);
};


tbPhysics.prototype.applyForce = function(body, direction, power) {
	"use strict";
	power = typeof power === undefined ? 1 : power;
	var blastDir = this.temp.vec0;
	blastDir.Set(direction.x * power * this.scale, direction.y * power * this.scale);
	body.ApplyForceToCenter(blastDir);
};

tbPhysics.prototype.applyLinearImpulse = function(body, direction, power) {
	"use strict";
	power = typeof power === undefined ? 1 : power;
	var blastDir = this.temp.vec0;
	blastDir.Set(direction.x * power * this.scale, direction.y * power * this.scale);
	body.ApplyLinearImpulse(blastDir, body.GetPosition());
};

tbPhysics.prototype.applyAngularImpulse = function(body, power) {
	"use strict";
	body.ApplyAngularImpulse(power * this.scale, true);
};

tbPhysics.prototype.applyTorque = function(body, power) {
	"use strict";
	body.ApplyTorque(power * this.scale, true);
};

tbPhysics.prototype.applyBlastImpulse = function(body, blastCenter, blastPower) {
	"use strict";

	var blastDir = this.temp.vec0;
	blastDir.Set(body.GetPosition().get_x() - blastCenter.x * this.scale, body.GetPosition().get_y() - blastCenter.y * this.scale);
	var distance = blastDir.Normalize();

	if (distance === 0) {
		return;
	}
	var invDistance = 1.0 / distance;
	var impulseMag = blastPower * invDistance * invDistance;

	blastDir.Set(blastDir.get_x() * impulseMag, blastDir.get_y() * impulseMag);

	body.ApplyLinearImpulse(blastDir, body.GetPosition());

};


tbPhysics.prototype.handleRemove = function() {
	"use strict";
	var i;
	for (i = 0; i < this.temp.length; ++i) {
		Box2D.destroy(this.temp[i]);
	}
	Box2D.destroy(this.circleShape);
	Box2D.destroy(this.polygonShape);
	Box2D.destroy(this.world);
};

tbPhysics.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	
	var stepSize;
	
	if (this.stepEachFrame) {
		// Do a physics step each frame no matter how much time was passed (Default)
		stepSize = Math.max(1/60, timePassed / 1000);
		if (stepSize > 1/30) {
			this.world.Step(1/30, 5, 2);
		}
		else if (stepSize > 1/45) {
			this.world.Step(stepSize, 7, 3);
		}
		else {
			this.world.Step(stepSize, 10, 4);
		}
	} else {
		// Only do a physics steps after enough time has passed (Non-Default)
		
		// Determine number of iterations
		stepSize = timePassed / 1000;
		var velocityIterations = [5, 7, 10], positionIterations = [2, 3, 4];
		var iterationIndex ;
		if (stepSize > 1 / 30) {
			iterationIndex = 0;
			stepSize = 1 / 30; // This line makes sure at least always 1/30 of a second is waited for the next step
		} else if (stepSize > 1 / 45) {
			iterationIndex = 1;
		} else {
			iterationIndex = 2;
		}
		
		// Update the time passed
		if (this.timePassed === undefined) { this.timePassed = 0; }
		this.timePassed += stepSize;
		
		iterationIndex = 0;
		// Do physics step if enough time available
		if (this.timePassed >= stepSize) {
			this.timePassed -= stepSize;
			this.world.Step(stepSize, velocityIterations[iterationIndex], positionIterations[iterationIndex]);		
		}
	}
};

tbPhysics.prototype.wakeUp = function(body) {
	"use strict";
	body.SetAwake(true);
};

tbPhysics.prototype.setAwake = function(body, value) {
	"use strict";
	body.SetAwake(value);
};

//Vertices can be either an array of b2Vec2 or tbVector
tbPhysics.prototype.createPolygonShape = function(vertices) {
	var shape = new Box2D.b2PolygonShape();
	var buffer = Box2D.allocate(vertices.length * 8, 'float', Box2D.ALLOC_STACK);
	var offset = 0;
	for (var i = 0; i < vertices.length; i++) {
    	var x = typeof vertices[i].get_x === "function" ? vertices[i].get_x() : vertices[i].x;
    	var y = typeof vertices[i].get_y === "function" ? vertices[i].get_y() : vertices[i].y;
    	
		Box2D.setValue(buffer + (offset), x * this.scale, 'float'); // x
		Box2D.setValue(buffer + (offset + 4), y * this.scale, 'float'); // y
		offset += 8;
	}
	var ptr_wrapped = Box2D.wrapPointer(buffer, Box2D.b2Vec2);
	shape.Set(ptr_wrapped, vertices.length);
	return shape;
};

// Vertices can be either an array of b2Vec2 or tbVector
tbPhysics.prototype.createChainShape = function(vertices, closedLoop) {
    var shape = new Box2D.b2ChainShape();
    var buffer = Box2D.allocate(vertices.length * 8, 'float', Box2D.ALLOC_STACK);
    var offset = 0;
    for (var i=0;i<vertices.length;i++) {
    	var x = typeof vertices[i].get_x === "function" ? vertices[i].get_x() : vertices[i].x;
    	var y = typeof vertices[i].get_y === "function" ? vertices[i].get_y() : vertices[i].y;
    	
        Box2D.setValue(buffer+(offset), x * this.scale, 'float'); // x
        Box2D.setValue(buffer+(offset+4), y * this.scale, 'float'); // y
        offset += 8;
    }
    var ptr_wrapped = Box2D.wrapPointer(buffer, Box2D.b2Vec2);
    if ( closedLoop )
        shape.CreateLoop(ptr_wrapped, vertices.length);
    else
        shape.CreateChain(ptr_wrapped, vertices.length);
    return shape;
};


tbPhysics.prototype.setRadius = function(body, radius) {
	"use strict";
	body.GetFixtureList().GetShape().set_m_radius(radius * this.scale);
	body.circle_radius = radius;
	this.wakeUp(body);
};

// Takes a b2Vec and returns a tbVector with the correct scaling applied
tbPhysics.prototype.vectorFromBox2D = function(b2Vec) {
	return new tbVector(b2Vec.get_x(), b2Vec.get_y()).scale(1 / this.scale);
};

/**
 * @author Simon Karman
 * @since 20th august 2015
 * 
 * tbPhysicsDebugDraw is a token that can be used to draw the physics world to the screen
 *  Because this object is a token it can easily be disabled/enabled by toggling the visible property
 * 
 * 
 * @constructor
 * @param {tbPhysics} physics 	The tbPhysics object to draw the physics world from
 * @param {tbVector} scroll 	(Optional) A tbVector with the amount of pixels the screen is offseted from the world center
 * @param {Boolean} visible  	(Optional) A Boolean determining whether the debug draw should be visible on start
 * @param {Number} flags		(Optional) A Number containing the Box2D.b2Draw.e_* flags combined using the | (or) operator
 * 
 */
function tbPhysicsDebugDraw(physics, /*optional*/scroll, /*optional*/visible, /*optional*/flags) {
	"use strict";
	/*jshint validthis:true, bitwise:false */
	
	//Token info
	this.visible = !!visible;
	this.depth = -1000;
	
	//Physics properties
	this.physics = physics;
	this.inverseScale = 1 / this.physics.scale;
	
	if (flags === undefined) {
	    flags = Box2D.b2Draw.e_shapeBit | Box2D.b2Draw.e_jointBit | Box2D.b2Draw.e_pairBit | Box2D.b2Draw.e_centerOfMassBit;
	    //Box2D.b2Draw.e_aabbBit and Box2D.b2Draw.e_centerOfMassBit are left out here
	}
	this.flags = flags;
	
	//Drawing Properties
	this.backgroundColor = "rgba(255, 255, 255, 0)";
	this.debugAlpha = 0.5;
	this.scroll = scroll === undefined ? new tbVector(0, 0) : scroll;
	
	//Make this the debug drawer of the physics world
	physics.world.SetDebugDraw(this.getCanvasDebugDraw());
	
	//Add token to the engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, TG.gameEffectsLayer);
}

tbPhysicsDebugDraw.prototype.handleKeyDown = function(keyCode) {
	"use strict";
	
	if (testMode && keyCode === tbKeyCodes.vkD) {
		this.visible = !this.visible;
	}
};

tbPhysicsDebugDraw.prototype.handleEndStep = function() {
	"use strict";
	this.canvas.drawTokens = true;
};

tbPhysicsDebugDraw.prototype.handleDraw = function() {
	"use strict";
	this.context = tbGraphics.context;
	this.context.save();
	
	this.context.fillStyle = this.backgroundColor;
	this.context.fillRect(0, 0, tbGraphics.canvas.width, tbGraphics.canvas.height);
	
	this.context.strokeStyle = "black";
	this.context.fillStyle = "black";
	
	//Set correct scale and translation for the context
	this.context.lineWidth = 1 / this.inverseScale;
	this.context.translate(-this.scroll.x, -this.scroll.y);
	this.context.scale(this.inverseScale, this.inverseScale);
	
	//Draw debug world to the context
	this.physics.world.DrawDebugData();
	
	this.context.restore();
};

tbPhysicsDebugDraw.prototype.drawAxes = function() {
	"use strict";
    this.context.strokeStyle = "rgb(192,0,0)";
    this.context.beginPath();
    this.context.moveTo(0, 0);
    this.context.lineTo(1, 0);
    this.context.stroke();
    this.context.strokeStyle = "rgb(0,192,0)";
    this.context.beginPath();
    this.context.moveTo(0, 0);
    this.context.lineTo(0, 1);
    this.context.stroke();
};

tbPhysicsDebugDraw.prototype.setColorFromDebugDrawCallback = function(color) { 
	"use strict";        
	/*jshint bitwise:false */   
    var col = Box2D.wrapPointer(color, Box2D.b2Color);
    var red = (col.get_r() * 255)|0;
    var green = (col.get_g() * 255)|0;
    var blue = (col.get_b() * 255)|0;
    var colStr = red + "," + green + "," + blue;
    this.context.fillStyle = "rgba(" + colStr + "," + this.debugAlpha + ")";
    this.context.strokeStyle = "rgba(" + colStr + ")";
};

tbPhysicsDebugDraw.prototype.drawSegment = function(vert1, vert2) {
	"use strict";
    var vert1V = Box2D.wrapPointer(vert1, Box2D.b2Vec2);
    var vert2V = Box2D.wrapPointer(vert2, Box2D.b2Vec2);                    
    this.context.beginPath();
    this.context.moveTo(vert1V.get_x(),vert1V.get_y());
    this.context.lineTo(vert2V.get_x(),vert2V.get_y());
    this.context.stroke();
};

tbPhysicsDebugDraw.prototype.drawPolygon = function(vertices, vertexCount, fill) {
	"use strict";
	this.context.beginPath();
	var tmpI;
    for(tmpI = 0; tmpI < vertexCount; tmpI += 1) {
        var vert = Box2D.wrapPointer(vertices+(tmpI*8), Box2D.b2Vec2);
        if ( tmpI === 0 ) {
        	this.context.moveTo(vert.get_x(),vert.get_y());
        } else {
        	this.context.lineTo(vert.get_x(),vert.get_y());
        }
    }
    this.context.closePath();
    if (fill) {
    	this.context.fill();
    }
    this.context.stroke();
};

tbPhysicsDebugDraw.prototype.drawCircle = function(center, radius, fill) {    
	"use strict";                
    var centerV = Box2D.wrapPointer(center, Box2D.b2Vec2);
    
    this.context.beginPath();
    this.context.arc(centerV.get_x(),centerV.get_y(), radius, 0, 2 * Math.PI, false);
    if (fill) {
    	this.context.fill();
    }
    this.context.stroke();
    
    if (fill) {
        //render axis marker
        this.context.beginPath();
        this.context.moveTo(centerV.get_x(),centerV.get_y());
        this.context.lineTo(centerV.get_x(),centerV.get_y());
        this.context.stroke();
    }
};

tbPhysicsDebugDraw.prototype.drawTransform = function(transform) {
	"use strict";
    var trans = Box2D.wrapPointer(transform,Box2D.b2Transform);
    var pos = trans.get_p();
    var rot = trans.get_q();
    
    this.context.save();
    this.context.translate(pos.get_x(), pos.get_y());
    this.context.scale(0.5,0.5);
    this.context.rotate(rot.GetAngle());
    this.context.lineWidth *= 2;
    this.drawAxes();
    this.context.restore();
};

tbPhysicsDebugDraw.prototype.getCanvasDebugDraw = function() {
	"use strict";
    var debugDraw = new Box2D.JSDraw();
    var self = this;
    
    debugDraw["DrawSegment"] = function(vert1, vert2, color) {
        self.setColorFromDebugDrawCallback(color);
        self.drawSegment(vert1, vert2);
    };

    debugDraw["DrawPolygon"] = function(vertices, vertexCount, color) {
    	self.setColorFromDebugDrawCallback(color);
    	self.drawPolygon(vertices, vertexCount, false);
    };

    debugDraw["DrawSolidPolygon"] = function(vertices, vertexCount, color) {
    	self.setColorFromDebugDrawCallback(color);
    	self.drawPolygon(vertices, vertexCount, true);
    };

    debugDraw["DrawCircle"] = function(center, radius, color) {
    	self.setColorFromDebugDrawCallback(color);
        self.drawCircle(center, radius, false);
    };

    debugDraw["DrawSolidCircle"] = function(center, radius, axis, color) {
    	self.setColorFromDebugDrawCallback(color);
    	self.drawCircle(center, radius, axis, true);
    };

    debugDraw["DrawTransform"] = function(transform) {
    	self.drawTransform(transform);
    };
    
    debugDraw.SetFlags(this.flags);
    return debugDraw;
};
//******************************************************
//******************************************************
//******************************************************
//******************************************************
//******************************************************
//*****    The Before Game Scripts
//******************************************************
//******************************************************
//******************************************************
//******************************************************
//******************************************************


//******************************************************
//*****    Script Resource: TG_SettingsFunctions
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

var TG = window["TG_InitSettings"] || {};
TG.size = (TG["size"] !== undefined) ? TG["size"] : "big";
TG.usesFullScreen = TG["usesFullScreen"];
TG.scaleFactor =(TG.size === "big")? 1 : 0.5;

//setup layers before reading settings, so they can be referenced in settings files
TG.frameworkBackgroundLayer = 20;
TG.gameBackgroundLayer = 10;
TG.gameLayer = 0;
TG.gameUILayer = -10;
TG.gameEffectsLayer = -20;
TG.frameworkUILayer = -30;
TG.frameworkEffectsLayer = -40;

/* exported tgScale */
function tgScale(value, type) {
	"use strict";
	var i, scale = function(v, t) {
		switch (t) {
		case "floor":
			return Math.floor(TG.scaleFactor * v);
		case "round":
			return Math.round(TG.scaleFactor * v);
		default:
			return TG.scaleFactor * v;
		}
	};
	if (typeof value === "number") {
		return scale(value, type);
	}
	if (Object.prototype.toString.call(value) === "[object Array]") {
		for (i = 0; i < value.length; i++) {
			value[i] = tgScale(value[i], type);
		}
		return value;
	}
	if (typeof value === "object") {
		for (i in value) {
			if (value.hasOwnProperty(i)) {
			    value[i] = tgScale(value[i], type);
			}
		}
		return value;
	}
}

/*exported tgSelect */
function tgSelect(obj){
	"use strict";
	if(TG.size === "big"){
		return (obj.big !== undefined)? obj.big : obj;
	}
	return (obj.small !== undefined)? obj.small : obj;
}

//******************************************************
//*****    Script Resource: booster_wrapper
//******************************************************

var BoosterSdk = (function(){

	function BoosterSdk(publisherSettings, gameOrientation, pauseCallback, unpauseCallback, splashFinishedCallback, context)
	{
//      this.gameId = "BM_gameId_Placeholder";
//      this.gameCategory = "BM_gameId_Placeholder";
//      this.developerId = "BM_developerCode_Placeholder";
//      this.gameCode = "BM_gameCode_Placeholder";
		this.orientation = gameOrientation;

		this.pauseCallback = pauseCallback;
		this.unpauseCallback = unpauseCallback;
		this.splashFinishedCallback = splashFinishedCallback;
		this.callbackContext = context;
		
		this.adChannel = publisherSettings["adChannel"];
		
		this.gameCode = publisherSettings["gameCode"];

		this.gameName = publisherSettings["gameName"];
		this.gameVersion = publisherSettings["gameVersion"];
		this.gameCategory = publisherSettings["gameCategory"];
		this.developerId = publisherSettings["developerId"];

		this.enableAds = publisherSettings["enableAds"];
		this.adFreq = publisherSettings["adFreq"];
		this.firstAd = publisherSettings["firstAd"];
		
		this.moreGames = publisherSettings["moreGames"];
		this.moreGamesURL = publisherSettings["moreGamesURL"];
		
		this.tabIcon = publisherSettings["tabIcon"];
		
		//console.log(this.gameName);

		var interval = setInterval(function(){

			if(this.ready())
			{
				this.setupBoosterSdk();
				clearInterval(interval);
			}

		}.bind(this), 100);
	}

	BoosterSdk.prototype.ready = function() {
		return window["Booster"]["ready"] 
		// && window["Booster"]["Ad"];
	};

	BoosterSdk.prototype.setupBoosterSdk = function() {

		new Booster["Init"]({
			"orientation": this.orientation,
			"splash": true,
			"minimalUI": true
		});

		// adSense = new Booster["Ad"]({
		// 	"type": "adsense",
		// 	"size": "300x250",
		// 	"channelID": this.adChannel
		// });
		
		community = new Booster["Community"]({
			"position": 1,
			"gameCode": this.gameCode,
			 "tabIcon": this.tabIcon
		});

		// analytics = new Booster["Analytics"]({
		// 	"gameName": this.gameName,
		// 	"gameId": this.gameVersion,
		// 	"gameCategory": this.gameCategory,
		// 	"developer": this.developerId
		// });

		// moregames = new Booster["Moregames"]();
		
		try{
			freemium = new Booster["Freemium"]();
		}catch(e){}
		

		var this_ = this;

		Booster["onSplashFinishedEvent"] = function() {
			this_.splashFinishedCallback.call(this_.callbackContext);
		};

		Booster["onOpenTab"] = function() {
			this_.pauseCallback.call(this_.callbackContext);
		};

		Booster["onCloseTab"] = function() {
			this_.unpauseCallback.call(this_.callbackContext);
		};

	};

	return BoosterSdk;


})();








//******************************************************
//******************************************************
//******************************************************
//******************************************************
//******************************************************
//*****    The Resources
//******************************************************
//******************************************************
//******************************************************
//******************************************************
//******************************************************


//******************************************************
//******************************************************
//******************************************************
//*****    Definition of the Namespaces
//******************************************************
//******************************************************
//******************************************************


//******************************************************
//******************************************************
//******************************************************
//*****    Definition of the Data Files
//******************************************************
//******************************************************
//******************************************************

    var throbber = new tbDataFile("throbber", "media/throbber.png");

//******************************************************
//******************************************************
//******************************************************
//*****    Definition of the Textures
//******************************************************
//******************************************************
//******************************************************

    var StartTexture = new tbTexture("StartTexture", 2, "start");
    window["StartTexture"] = StartTexture;
        StartTexture.addBitmap(0, "media/StartTexture0.png");
        StartTexture.addBitmap(1, "media/StartTexture1.png");
    var StartScreenTexture = new tbTexture("StartScreenTexture", 1, "load");
    window["StartScreenTexture"] = StartScreenTexture;
        StartScreenTexture.addBitmap(0, "media/StartScreenTexture0.png");
    var LevelMapScreenTexture = new tbTexture("LevelMapScreenTexture", 2, "load");
    window["LevelMapScreenTexture"] = LevelMapScreenTexture;
        LevelMapScreenTexture.addBitmap(0, "media/LevelMapScreenTexture0.png");
        LevelMapScreenTexture.addBitmap(1, "media/LevelMapScreenTexture1.png");
    var LevelEndTexture = new tbTexture("LevelEndTexture", 3, "load");
    window["LevelEndTexture"] = LevelEndTexture;
        LevelEndTexture.addBitmap(0, "media/LevelEndTexture0.png");
        LevelEndTexture.addBitmap(1, "media/LevelEndTexture1.png");
        LevelEndTexture.addBitmap(2, "media/LevelEndTexture2.png");
    var MenuTexture = new tbTexture("MenuTexture", 3, "load");
    window["MenuTexture"] = MenuTexture;
        MenuTexture.addBitmap(0, "media/MenuTexture0.png");
        MenuTexture.addBitmap(1, "media/MenuTexture1.png");
        MenuTexture.addBitmap(2, "media/MenuTexture2.png");
    var GameTexture = new tbTexture("GameTexture", 1, "load");
    window["GameTexture"] = GameTexture;
        GameTexture.addBitmap(0, "media/GameTexture0.png");
    var GameStaticTexture = new tbTexture("GameStaticTexture", 1, "load");
    window["GameStaticTexture"] = GameStaticTexture;
        GameStaticTexture.addBitmap(0, "media/GameStaticTexture0.png");
    var TrackGenerationTexture = new tbTexture("TrackGenerationTexture", 9, "load");
    window["TrackGenerationTexture"] = TrackGenerationTexture;
        TrackGenerationTexture.addBitmap(0, "media/TrackGenerationTexture0.png");
        TrackGenerationTexture.addBitmap(1, "media/TrackGenerationTexture1.png");
        TrackGenerationTexture.addBitmap(2, "media/TrackGenerationTexture2.png");
        TrackGenerationTexture.addBitmap(3, "media/TrackGenerationTexture3.png");
        TrackGenerationTexture.addBitmap(4, "media/TrackGenerationTexture4.png");
        TrackGenerationTexture.addBitmap(5, "media/TrackGenerationTexture5.png");
        TrackGenerationTexture.addBitmap(6, "media/TrackGenerationTexture6.png");
        TrackGenerationTexture.addBitmap(7, "media/TrackGenerationTexture7.png");
        TrackGenerationTexture.addBitmap(8, "media/TrackGenerationTexture8.png");
    var TrackGenerationDecalTexture = new tbTexture("TrackGenerationDecalTexture", 3, "load");
    window["TrackGenerationDecalTexture"] = TrackGenerationDecalTexture;
        TrackGenerationDecalTexture.addBitmap(0, "media/TrackGenerationDecalTexture0.png");
        TrackGenerationDecalTexture.addBitmap(1, "media/TrackGenerationDecalTexture1.png");
        TrackGenerationDecalTexture.addBitmap(2, "media/TrackGenerationDecalTexture2.png");
    var texture = new tbTexture("texture", 1, "load");
    window["texture"] = texture;
        texture.addBitmap(0, "media/texture0.png");
    var TutorialTexture = new tbTexture("TutorialTexture", 1, "load");
    window["TutorialTexture"] = TutorialTexture;
        TutorialTexture.addBitmap(0, "media/TutorialTexture0.png");
    var EndScreenTexture = new tbTexture("EndScreenTexture", 2, "load");
    window["EndScreenTexture"] = EndScreenTexture;
        EndScreenTexture.addBitmap(0, "media/EndScreenTexture0.png");
        EndScreenTexture.addBitmap(1, "media/EndScreenTexture1.png");
    var GameUITexture = new tbTexture("GameUITexture", 1, "load");
    window["GameUITexture"] = GameUITexture;
        GameUITexture.addBitmap(0, "media/GameUITexture0.png");

//******************************************************
//******************************************************
//******************************************************
//*****    Definition of the Images
//******************************************************
//******************************************************
//******************************************************

    var imageScalePercentage = 100;

    var s_loadingbar_background = new tbImage("s_loadingbar_background", StartScreenTexture, 1, 42, 32, 0, 0, 42, 32, 1);
    window["s_loadingbar_background"] = s_loadingbar_background;
        s_loadingbar_background.addImage(0, 0, 977, 1, 42, 32, 0, 0);
    var s_loadingbar_fill = new tbImage("s_loadingbar_fill", StartScreenTexture, 1, 20, 12, 0, 0, 20, 12, 1);
    window["s_loadingbar_fill"] = s_loadingbar_fill;
        s_loadingbar_fill.addImage(0, 0, 977, 41, 20, 12, 0, 0);
    var s_level_0 = new tbImage("s_level_0", LevelMapScreenTexture, 1, 125, 140, 0, 0, 125, 140, 1);
    window["s_level_0"] = s_level_0;
        s_level_0.addImage(0, 0, 585, 1, 125, 140, 0, 0);
    var s_level_1 = new tbImage("s_level_1", LevelMapScreenTexture, 1, 125, 140, 0, 0, 125, 140, 1);
    window["s_level_1"] = s_level_1;
        s_level_1.addImage(0, 0, 841, 1, 125, 140, 0, 0);
    var s_level_2 = new tbImage("s_level_2", LevelMapScreenTexture, 1, 125, 140, 0, 0, 125, 140, 1);
    window["s_level_2"] = s_level_2;
        s_level_2.addImage(0, 0, 713, 1, 125, 140, 0, 0);
    var s_level_3 = new tbImage("s_level_3", LevelMapScreenTexture, 1, 125, 140, 0, 0, 125, 140, 1);
    window["s_level_3"] = s_level_3;
        s_level_3.addImage(0, 0, 585, 145, 125, 140, 0, 0);
    var s_level_lock = new tbImage("s_level_lock", LevelMapScreenTexture, 1, 48, 70, 0, 0, 48, 70, 1);
    window["s_level_lock"] = s_level_lock;
        s_level_lock.addImage(0, 0, 969, 1, 48, 69, 0, 1);
    var s_level_stars = new tbImage("s_level_stars", LevelMapScreenTexture, 1, 126, 46, 0, 0, 126, 46, 1);
    window["s_level_stars"] = s_level_stars;
        s_level_stars.addImage(0, 0, 713, 145, 126, 45, 0, 1);
    var s_level2_0 = new tbImage("s_level2_0", LevelMapScreenTexture, 1, 84, 87, 0, 0, 84, 87, 1);
    window["s_level2_0"] = s_level2_0;
        s_level2_0.addImage(0, 0, 929, 257, 84, 87, 0, 0);
    var s_level2_1 = new tbImage("s_level2_1", LevelMapScreenTexture, 1, 84, 87, 0, 0, 84, 87, 1);
    window["s_level2_1"] = s_level2_1;
        s_level2_1.addImage(0, 0, 585, 289, 84, 87, 0, 0);
    var s_level2_2 = new tbImage("s_level2_2", LevelMapScreenTexture, 1, 84, 87, 0, 0, 84, 87, 1);
    window["s_level2_2"] = s_level2_2;
        s_level2_2.addImage(0, 0, 841, 257, 84, 87, 0, 0);
    var s_level2_3 = new tbImage("s_level2_3", LevelMapScreenTexture, 1, 84, 87, 0, 0, 84, 87, 1);
    window["s_level2_3"] = s_level2_3;
        s_level2_3.addImage(0, 0, 673, 305, 84, 87, 0, 0);
    var s_level2_arrow_right = new tbImage("s_level2_arrow_right", LevelMapScreenTexture, 2, 60, 108, 0, 0, 60, 216, 1);
    window["s_level2_arrow_right"] = s_level2_arrow_right;
        s_level2_arrow_right.addImage(0, 0, 777, 193, 60, 108, 0, 0);
        s_level2_arrow_right.addImage(1, 0, 713, 193, 60, 108, 0, 0);
    var s_level2_arrow_left = new tbImage("s_level2_arrow_left", LevelMapScreenTexture, 2, 60, 108, 0, 0, 60, 216, 1);
    window["s_level2_arrow_left"] = s_level2_arrow_left;
        s_level2_arrow_left.addImage(0, 0, 905, 145, 60, 108, 0, 0);
        s_level2_arrow_left.addImage(1, 0, 841, 145, 60, 108, 0, 0);
    var s_level2_lock = new tbImage("s_level2_lock", LevelMapScreenTexture, 1, 84, 87, 0, 0, 84, 87, 1);
    window["s_level2_lock"] = s_level2_lock;
        s_level2_lock.addImage(0, 0, 761, 353, 84, 87, 0, 0);
    var s_pop_medal = new tbImage("s_pop_medal", LevelEndTexture, 8, 378, 378, 189, 189, 3024, 378, 8);
    window["s_pop_medal"] = s_pop_medal;
        s_pop_medal.addImage(0, 0, 665, 1, 349, 241, 3, 69);
        s_pop_medal.addImage(1, 0, 665, 529, 346, 267, 5, 54);
        s_pop_medal.addImage(2, 0, 665, 249, 348, 276, 20, 56);
        s_pop_medal.addImage(3, 1, 609, 1, 342, 288, 26, 50);
        s_pop_medal.addImage(4, 1, 1, 625, 319, 292, 22, 46);
        s_pop_medal.addImage(5, 1, 609, 609, 337, 304, 14, 41);
        s_pop_medal.addImage(6, 0, 1, 625, 343, 305, 12, 41);
        s_pop_medal.addImage(7, 1, 609, 297, 341, 304, 13, 41);
    var s_medal_shadow = new tbImage("s_medal_shadow", LevelEndTexture, 1, 195, 208, 0, 0, 195, 208, 1);
    window["s_medal_shadow"] = s_medal_shadow;
        s_medal_shadow.addImage(0, 2, 1, 489, 189, 204, 3, 1);
    var s_medal_shine = new tbImage("s_medal_shine", LevelEndTexture, 6, 195, 208, 0, 0, 1170, 208, 6);
    window["s_medal_shine"] = s_medal_shine;
        s_medal_shine.addImage(0, 0, 801, 801, 193, 207, 1, 1);
        s_medal_shine.addImage(1, 2, 529, 265, 193, 207, 1, 1);
        s_medal_shine.addImage(2, 2, 201, 273, 193, 207, 1, 1);
        s_medal_shine.addImage(3, 2, 1, 273, 193, 207, 1, 1);
        s_medal_shine.addImage(4, 2, 401, 481, 193, 207, 1, 1);
        s_medal_shine.addImage(5, 0, 601, 801, 193, 207, 1, 1);
    var s_icon_toggle_hard = new tbImage("s_icon_toggle_hard", MenuTexture, 1, 67, 67, 0, 0, 67, 67, 1);
    window["s_icon_toggle_hard"] = s_icon_toggle_hard;
        s_icon_toggle_hard.addImage(0, 0, 945, 553, 67, 67, 0, 0);
    var s_icon_toggle_medium = new tbImage("s_icon_toggle_medium", MenuTexture, 1, 67, 67, 0, 0, 67, 67, 1);
    window["s_icon_toggle_medium"] = s_icon_toggle_medium;
        s_icon_toggle_medium.addImage(0, 0, 945, 625, 67, 67, 0, 0);
    var s_icon_toggle_easy = new tbImage("s_icon_toggle_easy", MenuTexture, 1, 67, 67, 0, 0, 67, 67, 1);
    window["s_icon_toggle_easy"] = s_icon_toggle_easy;
        s_icon_toggle_easy.addImage(0, 0, 945, 481, 67, 67, 0, 0);
    var s_flagIcon_us = new tbImage("s_flagIcon_us", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_us"] = s_flagIcon_us;
        s_flagIcon_us.addImage(0, 0, 961, 441, 48, 36, 0, 6);
    var s_flagIcon_gb = new tbImage("s_flagIcon_gb", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_gb"] = s_flagIcon_gb;
        s_flagIcon_gb.addImage(0, 0, 961, 361, 48, 36, 0, 6);
    var s_flagIcon_nl = new tbImage("s_flagIcon_nl", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_nl"] = s_flagIcon_nl;
        s_flagIcon_nl.addImage(0, 0, 961, 401, 48, 36, 0, 6);
    var s_flagIcon_tr = new tbImage("s_flagIcon_tr", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_tr"] = s_flagIcon_tr;
        s_flagIcon_tr.addImage(0, 0, 961, 321, 48, 36, 0, 6);
    var s_flagIcon_de = new tbImage("s_flagIcon_de", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_de"] = s_flagIcon_de;
        s_flagIcon_de.addImage(0, 0, 961, 769, 48, 36, 0, 6);
    var s_flagIcon_fr = new tbImage("s_flagIcon_fr", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_fr"] = s_flagIcon_fr;
        s_flagIcon_fr.addImage(0, 0, 929, 849, 48, 36, 0, 6);
    var s_flagIcon_br = new tbImage("s_flagIcon_br", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_br"] = s_flagIcon_br;
        s_flagIcon_br.addImage(0, 0, 929, 889, 48, 36, 0, 6);
    var s_flagIcon_es = new tbImage("s_flagIcon_es", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_es"] = s_flagIcon_es;
        s_flagIcon_es.addImage(0, 0, 873, 881, 48, 36, 0, 6);
    var s_flagIcon_jp = new tbImage("s_flagIcon_jp", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_jp"] = s_flagIcon_jp;
        s_flagIcon_jp.addImage(0, 0, 817, 881, 48, 36, 0, 6);
    var s_flagIcon_ru = new tbImage("s_flagIcon_ru", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_ru"] = s_flagIcon_ru;
        s_flagIcon_ru.addImage(0, 0, 873, 841, 48, 36, 0, 6);
    var s_flagIcon_ar = new tbImage("s_flagIcon_ar", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_ar"] = s_flagIcon_ar;
        s_flagIcon_ar.addImage(0, 0, 817, 841, 48, 36, 0, 6);
    var s_flagIcon_kr = new tbImage("s_flagIcon_kr", MenuTexture, 1, 48, 48, 0, 0, 48, 48, 1);
    window["s_flagIcon_kr"] = s_flagIcon_kr;
        s_flagIcon_kr.addImage(0, 0, 961, 809, 48, 36, 0, 6);
    var s_tutorialButton_close = new tbImage("s_tutorialButton_close", MenuTexture, 1, 66, 65, 0, 0, 66, 65, 1);
    window["s_tutorialButton_close"] = s_tutorialButton_close;
        s_tutorialButton_close.addImage(0, 0, 889, 769, 65, 65, 0, 0);
    var s_tutorialButton_next = new tbImage("s_tutorialButton_next", MenuTexture, 1, 66, 65, 0, 0, 66, 65, 1);
    window["s_tutorialButton_next"] = s_tutorialButton_next;
        s_tutorialButton_next.addImage(0, 0, 817, 769, 66, 65, 0, 0);
    var s_tutorialButton_previous = new tbImage("s_tutorialButton_previous", MenuTexture, 1, 66, 65, 0, 0, 66, 65, 1);
    window["s_tutorialButton_previous"] = s_tutorialButton_previous;
        s_tutorialButton_previous.addImage(0, 0, 945, 697, 66, 65, 0, 0);
    var s_logo_tinglygames = new tbImage("s_logo_tinglygames", MenuTexture, 1, 240, 240, 0, 0, 240, 240, 1);
    window["s_logo_tinglygames"] = s_logo_tinglygames;
        s_logo_tinglygames.addImage(0, 0, 609, 1, 240, 240, 0, 0);
    var s_logo_coolgames = new tbImage("s_logo_coolgames", MenuTexture, 1, 240, 240, 0, 0, 240, 240, 1);
    window["s_logo_coolgames"] = s_logo_coolgames;
        s_logo_coolgames.addImage(0, 0, 609, 249, 240, 167, 0, 36);
    var s_logo_tinglygames_start = new tbImage("s_logo_tinglygames_start", StartScreenTexture, 1, 156, 54, 0, 0, 156, 54, 1);
    window["s_logo_tinglygames_start"] = s_logo_tinglygames_start;
        s_logo_tinglygames_start.addImage(0, 0, 665, 1, 156, 53, 0, 0);
    var s_logo_coolgames_start = new tbImage("s_logo_coolgames_start", StartScreenTexture, 1, 300, 104, 0, 0, 300, 104, 1);
    window["s_logo_coolgames_start"] = s_logo_coolgames_start;
        s_logo_coolgames_start.addImage(0, 0, 825, 1, 150, 104, 75, 0);
    var s_star01_empty = new tbImage("s_star01_empty", LevelEndTexture, 1, 170, 170, 85, 85, 170, 170, 1);
    window["s_star01_empty"] = s_star01_empty;
        s_star01_empty.addImage(0, 2, 601, 505, 163, 168, 2, 2);
    var s_star01_fill = new tbImage("s_star01_fill", LevelEndTexture, 1, 170, 170, 85, 85, 170, 170, 1);
    window["s_star01_fill"] = s_star01_fill;
        s_star01_fill.addImage(0, 2, 161, 825, 142, 147, 14, 17);
    var s_star02_empty = new tbImage("s_star02_empty", LevelEndTexture, 1, 170, 170, 85, 85, 170, 170, 1);
    window["s_star02_empty"] = s_star02_empty;
        s_star02_empty.addImage(0, 2, 769, 505, 168, 162, 1, 1);
    var s_star02_fill = new tbImage("s_star02_fill", LevelEndTexture, 1, 170, 170, 85, 85, 170, 170, 1);
    window["s_star02_fill"] = s_star02_fill;
        s_star02_fill.addImage(0, 2, 761, 833, 146, 141, 12, 16);
    var s_star03_empty = new tbImage("s_star03_empty", LevelEndTexture, 1, 170, 170, 85, 85, 170, 170, 1);
    window["s_star03_empty"] = s_star03_empty;
        s_star03_empty.addImage(0, 2, 193, 489, 164, 168, 4, 2);
    var s_star03_fill = new tbImage("s_star03_fill", LevelEndTexture, 1, 170, 170, 85, 85, 170, 170, 1);
    window["s_star03_fill"] = s_star03_fill;
        s_star03_fill.addImage(0, 2, 353, 697, 142, 148, 14, 16);
    var s_sfx_star = new tbImage("s_sfx_star", LevelEndTexture, 8, 300, 300, 150, 150, 2400, 300, 8);
    window["s_sfx_star"] = s_sfx_star;
        s_sfx_star.addImage(0, 2, 497, 841, 134, 131, 85, 89);
        s_sfx_star.addImage(1, 2, 745, 257, 250, 244, 19, 27);
        s_sfx_star.addImage(2, 2, 745, 1, 257, 253, 17, 20);
        s_sfx_star.addImage(3, 2, 257, 1, 266, 263, 12, 15);
        s_sfx_star.addImage(4, 1, 329, 625, 262, 273, 13, 10);
        s_sfx_star.addImage(5, 2, 1, 1, 251, 270, 19, 12);
        s_sfx_star.addImage(6, 2, 529, 1, 213, 260, 38, 16);
        s_sfx_star.addImage(7, 0, 353, 625, 243, 299, 23, 1);
    var s_ui_cup_highscore = new tbImage("s_ui_cup_highscore", GameTexture, 1, 32, 28, 0, 0, 32, 28, 1);
    window["s_ui_cup_highscore"] = s_ui_cup_highscore;
        s_ui_cup_highscore.addImage(0, 0, 553, 49, 32, 28, 0, 0);
    var s_ui_cup_score = new tbImage("s_ui_cup_score", GameTexture, 1, 28, 24, 0, 0, 28, 24, 1);
    window["s_ui_cup_score"] = s_ui_cup_score;
        s_ui_cup_score.addImage(0, 0, 593, 49, 28, 24, 0, 0);
    var s_ui_divider = new tbImage("s_ui_divider", GameStaticTexture, 1, 94, 2, 0, 0, 94, 2, 1);
    window["s_ui_divider"] = s_ui_divider;
        s_ui_divider.addImage(0, 0, 801, 1, 94, 2, 0, 0);
    var s_ui_background_blank = new tbImage("s_ui_background_blank", GameStaticTexture, 1, 140, 580, 0, 0, 140, 580, 1);
    window["s_ui_background_blank"] = s_ui_background_blank;
        s_ui_background_blank.addImage(0, 0, 657, 1, 140, 580, 0, 0);
    var s_ui_highscore = new tbImage("s_ui_highscore", GameStaticTexture, 1, 26, 36, 13, 12, 26, 36, 1);
    window["s_ui_highscore"] = s_ui_highscore;
        s_ui_highscore.addImage(0, 0, 897, 1, 26, 36, 0, 0);
    var s_ui_timeleft = new tbImage("s_ui_timeleft", GameStaticTexture, 1, 20, 26, 0, 0, 20, 26, 1);
    window["s_ui_timeleft"] = s_ui_timeleft;
        s_ui_timeleft.addImage(0, 0, 929, 1, 20, 26, 0, 0);
    var s_ui_smiley_hard = new tbImage("s_ui_smiley_hard", GameTexture, 1, 22, 22, 11, 11, 22, 22, 1);
    window["s_ui_smiley_hard"] = s_ui_smiley_hard;
        s_ui_smiley_hard.addImage(0, 0, 721, 49, 22, 22, 0, 0);
    var s_ui_smiley_medium = new tbImage("s_ui_smiley_medium", GameTexture, 1, 22, 22, 11, 11, 22, 22, 1);
    window["s_ui_smiley_medium"] = s_ui_smiley_medium;
        s_ui_smiley_medium.addImage(0, 0, 745, 49, 22, 22, 0, 0);
    var s_ui_smiley_easy = new tbImage("s_ui_smiley_easy", GameTexture, 1, 22, 22, 11, 11, 22, 22, 1);
    window["s_ui_smiley_easy"] = s_ui_smiley_easy;
        s_ui_smiley_easy.addImage(0, 0, 921, 65, 22, 22, 0, 0);
    var s_ui_crown = new tbImage("s_ui_crown", GameTexture, 1, 24, 20, 12, 10, 24, 20, 1);
    window["s_ui_crown"] = s_ui_crown;
        s_ui_crown.addImage(0, 0, 689, 49, 24, 20, 0, 0);
    var s_ui_heart = new tbImage("s_ui_heart", GameTexture, 1, 28, 24, 14, 12, 28, 24, 1);
    window["s_ui_heart"] = s_ui_heart;
        s_ui_heart.addImage(0, 0, 657, 49, 26, 23, 1, 1);
    var s_texture_grass = new tbImage("s_texture_grass", GameTexture, 1, 128, 128, 0, 0, 512, 128, 4);
    window["s_texture_grass"] = s_texture_grass;
        s_texture_grass.addImage(0, 0, 1, 1, 128, 128, 0, 0);
    var s_start_positions = new tbImage("s_start_positions", TrackGenerationTexture, 8, 150, 150, 75, 75, 1200, 150, 8);
    window["s_start_positions"] = s_start_positions;
        s_start_positions.addImage(0, 0, 913, 641, 89, 100, 28, 26);
        s_start_positions.addImage(1, 0, 817, 137, 117, 127, 16, 14);
        s_start_positions.addImage(2, 0, 913, 545, 100, 89, 26, 33);
        s_start_positions.addImage(3, 0, 817, 1, 117, 127, 16, 9);
        s_start_positions.addImage(4, 0, 817, 545, 89, 100, 28, 24);
        s_start_positions.addImage(5, 0, 817, 273, 117, 127, 17, 9);
        s_start_positions.addImage(6, 0, 817, 745, 100, 89, 24, 33);
        s_start_positions.addImage(7, 0, 817, 409, 117, 127, 17, 14);
    var s_race_overview = new tbImage("s_race_overview", GameStaticTexture, 1, 602, 528, 0, 0, 602, 528, 1);
    window["s_race_overview"] = s_race_overview;
        s_race_overview.addImage(0, 0, 1, 273, 602, 527, 0, 0);
    var s_arrow_directional = new tbImage("s_arrow_directional", GameTexture, 1, 110, 78, 55, 39, 110, 78, 1);
    window["s_arrow_directional"] = s_arrow_directional;
        s_arrow_directional.addImage(0, 0, 137, 1, 110, 78, 0, 0);
    var s_spark = new tbImage("s_spark", GameTexture, 6, 66, 66, 33, 33, 396, 66, 6);
    window["s_spark"] = s_spark;
        s_spark.addImage(0, 0, 625, 49, 28, 26, 20, 20);
        s_spark.addImage(1, 0, 513, 49, 37, 38, 14, 13);
        s_spark.addImage(2, 0, 457, 49, 54, 53, 5, 7);
        s_spark.addImage(3, 0, 921, 1, 64, 62, 2, 1);
        s_spark.addImage(4, 0, 849, 1, 66, 63, 0, 3);
        s_spark.addImage(5, 0, 777, 1, 66, 63, 0, 3);
    var s_race_track_corner_00 = new tbImage("s_race_track_corner_00", TrackGenerationTexture, 1, 460, 460, 0, 0, 460, 460, 1);
    window["s_race_track_corner_00"] = s_race_track_corner_00;
        s_race_track_corner_00.addImage(0, 6, 457, 1, 421, 451, 11, 0);
    var s_race_track_corner_01 = new tbImage("s_race_track_corner_01", TrackGenerationTexture, 1, 460, 460, 0, 0, 460, 460, 1);
    window["s_race_track_corner_01"] = s_race_track_corner_01;
        s_race_track_corner_01.addImage(0, 7, 417, 1, 447, 407, 13, 40);
    var s_race_track_corner_02 = new tbImage("s_race_track_corner_02", TrackGenerationTexture, 1, 460, 460, 0, 0, 460, 460, 1);
    window["s_race_track_corner_02"] = s_race_track_corner_02;
        s_race_track_corner_02.addImage(0, 6, 1, 1, 451, 421, 9, 11);
    var s_race_track_corner_03 = new tbImage("s_race_track_corner_03", TrackGenerationTexture, 1, 460, 460, 0, 0, 460, 460, 1);
    window["s_race_track_corner_03"] = s_race_track_corner_03;
        s_race_track_corner_03.addImage(0, 6, 1, 425, 407, 447, 13, 13);
    var s_race_track_corner_04 = new tbImage("s_race_track_corner_04", TrackGenerationTexture, 1, 460, 460, 0, 0, 460, 460, 1);
    window["s_race_track_corner_04"] = s_race_track_corner_04;
        s_race_track_corner_04.addImage(0, 5, 425, 553, 421, 451, 28, 9);
    var s_race_track_corner_05 = new tbImage("s_race_track_corner_05", TrackGenerationTexture, 1, 460, 460, 0, 0, 460, 460, 1);
    window["s_race_track_corner_05"] = s_race_track_corner_05;
        s_race_track_corner_05.addImage(0, 6, 417, 457, 447, 407, 0, 13);
    var s_race_track_corner_06 = new tbImage("s_race_track_corner_06", TrackGenerationTexture, 1, 460, 460, 0, 0, 460, 460, 1);
    window["s_race_track_corner_06"] = s_race_track_corner_06;
        s_race_track_corner_06.addImage(0, 4, 553, 441, 451, 421, 0, 28);
    var s_race_track_corner_07 = new tbImage("s_race_track_corner_07", TrackGenerationTexture, 1, 460, 460, 0, 0, 460, 460, 1);
    window["s_race_track_corner_07"] = s_race_track_corner_07;
        s_race_track_corner_07.addImage(0, 7, 1, 1, 407, 447, 40, 0);
    var s_race_track_straight_00 = new tbImage("s_race_track_straight_00", TrackGenerationTexture, 1, 766, 766, 0, 0, 766, 766, 1);
    window["s_race_track_straight_00"] = s_race_track_straight_00;
        s_race_track_straight_00.addImage(0, 4, 1, 1, 760, 432, 1, 151);
    var s_race_track_straight_01 = new tbImage("s_race_track_straight_01", TrackGenerationTexture, 1, 422, 760, 0, 0, 422, 760, 1);
    window["s_race_track_straight_01"] = s_race_track_straight_01;
        s_race_track_straight_01.addImage(0, 5, 1, 1, 422, 755, 0, 4);
    var s_race_track_straight_02 = new tbImage("s_race_track_straight_02", TrackGenerationTexture, 1, 852, 852, 0, 0, 852, 852, 1);
    window["s_race_track_straight_02"] = s_race_track_straight_02;
        s_race_track_straight_02.addImage(0, 1, 1, 1, 826, 852, 13, 0);
    var s_race_track_straight_03 = new tbImage("s_race_track_straight_03", TrackGenerationTexture, 1, 852, 852, 0, 0, 852, 852, 1);
    window["s_race_track_straight_03"] = s_race_track_straight_03;
        s_race_track_straight_03.addImage(0, 2, 1, 1, 826, 852, 13, 0);
    var s_race_track_straight_04 = new tbImage("s_race_track_straight_04", TrackGenerationTexture, 1, 440, 440, 0, 0, 440, 440, 1);
    window["s_race_track_straight_04"] = s_race_track_straight_04;
        s_race_track_straight_04.addImage(0, 7, 417, 417, 425, 431, 0, 9);
    var s_race_track_straight_05 = new tbImage("s_race_track_straight_05", TrackGenerationTexture, 1, 440, 440, 0, 0, 440, 440, 1);
    window["s_race_track_straight_05"] = s_race_track_straight_05;
        s_race_track_straight_05.addImage(0, 8, 1, 1, 430, 425, 0, 0);
    var s_race_track_straight_06 = new tbImage("s_race_track_straight_06", TrackGenerationTexture, 1, 550, 550, 0, 0, 550, 550, 1);
    window["s_race_track_straight_06"] = s_race_track_straight_06;
        s_race_track_straight_06.addImage(0, 4, 1, 441, 548, 550, 2, 0);
    var s_race_track_straight_07 = new tbImage("s_race_track_straight_07", TrackGenerationTexture, 1, 550, 550, 0, 0, 550, 550, 1);
    window["s_race_track_straight_07"] = s_race_track_straight_07;
        s_race_track_straight_07.addImage(0, 5, 425, 1, 548, 550, 0, 0);
    var s_race_track_crossroad_00 = new tbImage("s_race_track_crossroad_00", TrackGenerationTexture, 1, 883, 875, 0, 0, 883, 875, 1);
    window["s_race_track_crossroad_00"] = s_race_track_crossroad_00;
        s_race_track_crossroad_00.addImage(0, 0, 1, 1, 807, 873, 40, 2);
    var s_race_track_crossroad_01 = new tbImage("s_race_track_crossroad_01", TrackGenerationTexture, 1, 810, 810, 0, 0, 810, 810, 1);
    window["s_race_track_crossroad_01"] = s_race_track_crossroad_01;
        s_race_track_crossroad_01.addImage(0, 3, 1, 1, 767, 750, 1, 5);
    var s_decal_crate = new tbImage("s_decal_crate", TrackGenerationDecalTexture, 1, 40, 40, 0, 0, 40, 40, 1);
    window["s_decal_crate"] = s_decal_crate;
        s_decal_crate.addImage(0, 0, 785, 401, 39, 22, 0, 9);
    var s_decal_damagedgrass = new tbImage("s_decal_damagedgrass", TrackGenerationDecalTexture, 1, 300, 358, 0, 0, 300, 358, 1);
    window["s_decal_damagedgrass"] = s_decal_damagedgrass;
        s_decal_damagedgrass.addImage(0, 0, 1, 649, 300, 357, 0, 0);
    var s_decal_puddle = new tbImage("s_decal_puddle", TrackGenerationDecalTexture, 1, 128, 128, 0, 0, 128, 128, 1);
    window["s_decal_puddle"] = s_decal_puddle;
        s_decal_puddle.addImage(0, 0, 1, 497, 128, 104, 0, 12);
    var s_decal_puddletrack = new tbImage("s_decal_puddletrack", TrackGenerationDecalTexture, 1, 240, 56, 0, 0, 240, 56, 1);
    window["s_decal_puddletrack"] = s_decal_puddletrack;
        s_decal_puddletrack.addImage(0, 1, 377, 673, 240, 56, 0, 0);
    var s_decal_railingbend = new tbImage("s_decal_railingbend", TrackGenerationDecalTexture, 8, 268, 268, 0, 0, 2144, 268, 8);
    window["s_decal_railingbend"] = s_decal_railingbend;
        s_decal_railingbend.addImage(0, 2, 617, 1, 193, 193, 37, 37);
        s_decal_railingbend.addImage(1, 1, 377, 601, 268, 70, 0, 99);
        s_decal_railingbend.addImage(2, 2, 617, 201, 193, 193, 38, 38);
        s_decal_railingbend.addImage(3, 1, 305, 577, 70, 268, 99, 0);
        s_decal_railingbend.addImage(4, 2, 817, 1, 193, 193, 38, 38);
        s_decal_railingbend.addImage(5, 0, 593, 937, 268, 70, 0, 99);
        s_decal_railingbend.addImage(6, 2, 817, 201, 193, 193, 38, 38);
        s_decal_railingbend.addImage(7, 1, 865, 593, 70, 268, 99, 0);
    var s_decal_railingbend_big = new tbImage("s_decal_railingbend_big", TrackGenerationDecalTexture, 32, 376, 376, 0, 0, 6016, 752, 16);
    window["s_decal_railingbend_big"] = s_decal_railingbend_big;
        s_decal_railingbend_big.addImage(0, 1, 1, 601, 268, 92, 108, 108);
        s_decal_railingbend_big.addImage(1, 2, 1, 1, 201, 199, 0, 177);
        s_decal_railingbend_big.addImage(2, 1, 937, 721, 86, 124, 290, 0);
        s_decal_railingbend_big.addImage(3, 1, 913, 297, 86, 287, 0, 89);
        s_decal_railingbend_big.addImage(4, 0, 1017, 9, 1, 1, 0, 0);
        s_decal_railingbend_big.addImage(5, 1, 673, 585, 92, 268, 176, 108);
        s_decal_railingbend_big.addImage(6, 0, 865, 937, 125, 86, 0, 290);
        s_decal_railingbend_big.addImage(7, 1, 1, 929, 124, 86, 252, 290);
        s_decal_railingbend_big.addImage(8, 1, 769, 593, 91, 268, 108, 108);
        s_decal_railingbend_big.addImage(9, 0, 1009, 1, 1, 1, 0, 0);
        s_decal_railingbend_big.addImage(10, 1, 913, 1, 86, 288, 290, 88);
        s_decal_railingbend_big.addImage(11, 1, 937, 849, 86, 123, 0, 0);
        s_decal_railingbend_big.addImage(12, 2, 417, 1, 198, 200, 178, 176);
        s_decal_railingbend_big.addImage(13, 1, 401, 313, 269, 93, 0, 107);
        s_decal_railingbend_big.addImage(14, 0, 305, 649, 286, 86, 90, 290);
        s_decal_railingbend_big.addImage(15, 0, 305, 929, 286, 86, 0, 290);
        s_decal_railingbend_big.addImage(16, 0, 1009, 9, 1, 1, 0, 0);
        s_decal_railingbend_big.addImage(17, 1, 673, 313, 91, 268, 177, 0);
        s_decal_railingbend_big.addImage(18, 1, 937, 593, 86, 125, 290, 251);
        s_decal_railingbend_big.addImage(19, 1, 825, 297, 85, 287, 0, 0);
        s_decal_railingbend_big.addImage(20, 1, 401, 505, 268, 91, 108, 177);
        s_decal_railingbend_big.addImage(21, 2, 209, 1, 199, 201, 0, 0);
        s_decal_railingbend_big.addImage(22, 0, 625, 761, 287, 85, 89, 0);
        s_decal_railingbend_big.addImage(23, 0, 625, 849, 287, 86, 0, 0);
        s_decal_railingbend_big.addImage(24, 1, 377, 737, 201, 199, 175, 0);
        s_decal_railingbend_big.addImage(25, 1, 401, 409, 268, 92, 0, 176);
        s_decal_railingbend_big.addImage(26, 1, 825, 1, 86, 288, 290, 0);
        s_decal_railingbend_big.addImage(27, 1, 585, 737, 86, 123, 0, 253);
        s_decal_railingbend_big.addImage(28, 1, 305, 305, 93, 269, 108, 0);
        s_decal_railingbend_big.addImage(29, 0, 1017, 1, 1, 1, 0, 0);
        s_decal_railingbend_big.addImage(30, 1, 241, 849, 126, 87, 0, 0);
        s_decal_railingbend_big.addImage(31, 1, 785, 865, 126, 87, 250, 0);
    var s_decal_railingstraight = new tbImage("s_decal_railingstraight", TrackGenerationDecalTexture, 8, 228, 228, 0, 0, 1824, 228, 8);
    window["s_decal_railingstraight"] = s_decal_railingstraight;
        s_decal_railingstraight.addImage(0, 0, 1001, 593, 18, 227, 105, 0);
        s_decal_railingstraight.addImage(1, 2, 1, 385, 167, 167, 31, 31);
        s_decal_railingstraight.addImage(2, 0, 785, 353, 227, 18, 1, 105);
        s_decal_railingstraight.addImage(3, 2, 1, 209, 168, 169, 30, 30);
        s_decal_railingstraight.addImage(4, 0, 977, 593, 18, 227, 105, 1);
        s_decal_railingstraight.addImage(5, 2, 345, 209, 166, 167, 31, 31);
        s_decal_railingstraight.addImage(6, 0, 785, 377, 227, 18, 1, 105);
        s_decal_railingstraight.addImage(7, 2, 177, 209, 166, 167, 31, 31);
    var s_decal_rocks = new tbImage("s_decal_rocks", TrackGenerationDecalTexture, 1, 198, 198, 0, 0, 198, 198, 1);
    window["s_decal_rocks"] = s_decal_rocks;
        s_decal_rocks.addImage(0, 1, 585, 865, 198, 147, 0, 25);
    var s_decal_tree = new tbImage("s_decal_tree", TrackGenerationDecalTexture, 1, 232, 228, 0, 0, 232, 228, 1);
    window["s_decal_tree"] = s_decal_tree;
        s_decal_tree.addImage(0, 1, 1, 697, 232, 228, 0, 0);
    var s_decal_finish = new tbImage("s_decal_finish", TrackGenerationDecalTexture, 4, 316, 316, 0, 0, 1264, 316, 4);
    window["s_decal_finish"] = s_decal_finish;
        s_decal_finish.addImage(0, 1, 657, 1, 163, 310, 83, 5);
        s_decal_finish.addImage(1, 1, 337, 1, 316, 297, 0, 13);
        s_decal_finish.addImage(2, 0, 305, 761, 312, 164, 0, 82);
        s_decal_finish.addImage(3, 1, 1, 305, 298, 291, 5, 0);
    var s_decal_track_01 = new tbImage("s_decal_track_01", TrackGenerationDecalTexture, 1, 419, 162, 0, 0, 419, 162, 1);
    window["s_decal_track_01"] = s_decal_track_01;
        s_decal_track_01.addImage(0, 0, 593, 425, 419, 162, 0, 0);
    var s_decal_track_02 = new tbImage("s_decal_track_02", TrackGenerationDecalTexture, 1, 381, 159, 0, 0, 381, 159, 1);
    window["s_decal_track_02"] = s_decal_track_02;
        s_decal_track_02.addImage(0, 0, 593, 593, 381, 159, 0, 0);
    var s_decal_track_03 = new tbImage("s_decal_track_03", TrackGenerationDecalTexture, 1, 457, 245, 0, 0, 457, 245, 1);
    window["s_decal_track_03"] = s_decal_track_03;
        s_decal_track_03.addImage(0, 0, 169, 1, 456, 242, 0, 0);
    var s_decal_track_04 = new tbImage("s_decal_track_04", TrackGenerationDecalTexture, 1, 143, 421, 0, 0, 143, 421, 1);
    window["s_decal_track_04"] = s_decal_track_04;
        s_decal_track_04.addImage(0, 0, 633, 1, 143, 421, 0, 0);
    var s_decal_track_05 = new tbImage("s_decal_track_05", TrackGenerationDecalTexture, 1, 215, 343, 0, 0, 215, 343, 1);
    window["s_decal_track_05"] = s_decal_track_05;
        s_decal_track_05.addImage(0, 0, 785, 1, 215, 343, 0, 0);
    var s_decal_track_06 = new tbImage("s_decal_track_06", TrackGenerationDecalTexture, 1, 162, 488, 0, 0, 162, 488, 1);
    window["s_decal_track_06"] = s_decal_track_06;
        s_decal_track_06.addImage(0, 0, 1, 1, 162, 488, 0, 0);
    var s_decal_track_07 = new tbImage("s_decal_track_07", TrackGenerationDecalTexture, 1, 420, 392, 0, 0, 420, 392, 1);
    window["s_decal_track_07"] = s_decal_track_07;
        s_decal_track_07.addImage(0, 0, 169, 249, 420, 392, 0, 0);
    var s_decal_track_08 = new tbImage("s_decal_track_08", TrackGenerationDecalTexture, 1, 329, 302, 0, 0, 329, 302, 1);
    window["s_decal_track_08"] = s_decal_track_08;
        s_decal_track_08.addImage(0, 1, 1, 1, 329, 302, 0, 0);
    var s_car_00 = new tbImage("s_car_00", GameTexture, 1, 80, 80, 40, 40, 80, 80, 1);
    window["s_car_00"] = s_car_00;
        s_car_00.addImage(0, 0, 457, 1, 76, 42, 3, 19);
    var s_car_01 = new tbImage("s_car_01", GameTexture, 1, 80, 80, 40, 40, 80, 80, 1);
    window["s_car_01"] = s_car_01;
        s_car_01.addImage(0, 0, 537, 1, 76, 42, 3, 19);
    var s_car_02 = new tbImage("s_car_02", GameTexture, 1, 80, 80, 40, 40, 80, 80, 1);
    window["s_car_02"] = s_car_02;
        s_car_02.addImage(0, 0, 617, 1, 76, 42, 3, 19);
    var s_car_03 = new tbImage("s_car_03", GameTexture, 1, 80, 80, 40, 40, 80, 80, 1);
    window["s_car_03"] = s_car_03;
        s_car_03.addImage(0, 0, 697, 1, 76, 42, 3, 19);
    var s_car_wheel = new tbImage("s_car_wheel", GameTexture, 1, 12, 6, 6, 4, 12, 6, 1);
    window["s_car_wheel"] = s_car_wheel;
        s_car_wheel.addImage(0, 0, 761, 73, 12, 6, 0, 0);
    var s_car_directional_arrow = new tbImage("s_car_directional_arrow", texture, 1, 64, 17, 0, 8, 64, 17, 1);
    window["s_car_directional_arrow"] = s_car_directional_arrow;
        s_car_directional_arrow.addImage(0, 0, 1, 1, 17, 17, 47, 0);
    var s_debug_button_debug = new tbImage("s_debug_button_debug", GameTexture, 2, 20, 20, 0, 0, 40, 20, 2);
    window["s_debug_button_debug"] = s_debug_button_debug;
        s_debug_button_debug.addImage(0, 0, 689, 73, 20, 20, 0, 0);
        s_debug_button_debug.addImage(1, 0, 713, 73, 20, 20, 0, 0);
    var s_debug_button_particles = new tbImage("s_debug_button_particles", GameTexture, 2, 20, 20, 0, 0, 40, 20, 2);
    window["s_debug_button_particles"] = s_debug_button_particles;
        s_debug_button_particles.addImage(0, 0, 737, 73, 20, 20, 0, 0);
        s_debug_button_particles.addImage(1, 0, 945, 65, 20, 20, 0, 0);
    var s_debug_button_skidmarks = new tbImage("s_debug_button_skidmarks", GameTexture, 2, 20, 20, 0, 0, 40, 20, 2);
    window["s_debug_button_skidmarks"] = s_debug_button_skidmarks;
        s_debug_button_skidmarks.addImage(0, 0, 993, 65, 20, 20, 0, 0);
        s_debug_button_skidmarks.addImage(1, 0, 969, 65, 20, 20, 0, 0);
    var s_tutorial_00 = new tbImage("s_tutorial_00", TutorialTexture, 1, 350, 190, 0, 0, 350, 190, 1);
    window["s_tutorial_00"] = s_tutorial_00;
        s_tutorial_00.addImage(0, 0, 353, 1, 350, 190, 0, 0);
    var s_tutorial_01 = new tbImage("s_tutorial_01", TutorialTexture, 1, 350, 190, 0, 0, 350, 190, 1);
    window["s_tutorial_01"] = s_tutorial_01;
        s_tutorial_01.addImage(0, 0, 1, 385, 350, 190, 0, 0);
    var s_tutorial_02 = new tbImage("s_tutorial_02", TutorialTexture, 1, 350, 190, 0, 0, 350, 190, 1);
    window["s_tutorial_02"] = s_tutorial_02;
        s_tutorial_02.addImage(0, 0, 1, 193, 350, 190, 0, 0);
    var s_tutorial_03 = new tbImage("s_tutorial_03", TutorialTexture, 1, 350, 190, 0, 0, 350, 190, 1);
    window["s_tutorial_03"] = s_tutorial_03;
        s_tutorial_03.addImage(0, 0, 1, 1, 350, 190, 0, 0);
    var s_tutorial_04 = new tbImage("s_tutorial_04", TutorialTexture, 1, 350, 190, 0, 0, 350, 190, 1);
    window["s_tutorial_04"] = s_tutorial_04;
        s_tutorial_04.addImage(0, 0, 353, 193, 350, 190, 0, 0);
    var s_icon_toggle_sfx_on = new tbImage("s_icon_toggle_sfx_on", MenuTexture, 1, 67, 67, 0, 0, 67, 67, 1);
    window["s_icon_toggle_sfx_on"] = s_icon_toggle_sfx_on;
        s_icon_toggle_sfx_on.addImage(0, 0, 961, 281, 49, 31, 7, 17);
    var s_icon_toggle_sfx_off = new tbImage("s_icon_toggle_sfx_off", MenuTexture, 1, 67, 67, 0, 0, 67, 67, 1);
    window["s_icon_toggle_sfx_off"] = s_icon_toggle_sfx_off;
        s_icon_toggle_sfx_off.addImage(0, 0, 961, 193, 53, 31, 7, 17);
    var s_icon_toggle_music_on = new tbImage("s_icon_toggle_music_on", MenuTexture, 1, 67, 67, 0, 0, 67, 67, 1);
    window["s_icon_toggle_music_on"] = s_icon_toggle_music_on;
        s_icon_toggle_music_on.addImage(0, 0, 985, 849, 38, 41, 13, 16);
    var s_icon_toggle_music_off = new tbImage("s_icon_toggle_music_off", MenuTexture, 1, 67, 67, 0, 0, 67, 67, 1);
    window["s_icon_toggle_music_off"] = s_icon_toggle_music_off;
        s_icon_toggle_music_off.addImage(0, 0, 961, 233, 51, 41, 8, 16);
    var s_btn_big_restart = new tbImage("s_btn_big_restart", LevelEndTexture, 2, 154, 152, 0, 0, 308, 152, 2);
    window["s_btn_big_restart"] = s_btn_big_restart;
        s_btn_big_restart.addImage(0, 2, 769, 673, 154, 152, 0, 0);
        s_btn_big_restart.addImage(1, 2, 1, 697, 154, 152, 0, 0);
    var s_btn_big_start = new tbImage("s_btn_big_start", LevelEndTexture, 2, 154, 152, 0, 0, 308, 152, 2);
    window["s_btn_big_start"] = s_btn_big_start;
        s_btn_big_start.addImage(0, 2, 193, 665, 154, 152, 0, 0);
        s_btn_big_start.addImage(1, 2, 601, 681, 154, 152, 0, 0);
    var s_btn_small_exit = new tbImage("s_btn_small_exit", MenuTexture, 2, 100, 92, 0, 0, 200, 92, 2);
    window["s_btn_small_exit"] = s_btn_small_exit;
        s_btn_small_exit.addImage(0, 0, 841, 481, 100, 92, 0, 0);
        s_btn_small_exit.addImage(1, 0, 857, 289, 100, 92, 0, 0);
    var s_btn_small_pause = new tbImage("s_btn_small_pause", GameTexture, 2, 100, 92, 0, 0, 200, 92, 2);
    window["s_btn_small_pause"] = s_btn_small_pause;
        s_btn_small_pause.addImage(0, 0, 353, 1, 100, 92, 0, 0);
        s_btn_small_pause.addImage(1, 0, 249, 1, 100, 92, 0, 0);
    var s_btn_small_options = new tbImage("s_btn_small_options", MenuTexture, 2, 100, 92, 0, 0, 200, 92, 2);
    window["s_btn_small_options"] = s_btn_small_options;
        s_btn_small_options.addImage(0, 0, 857, 193, 100, 92, 0, 0);
        s_btn_small_options.addImage(1, 0, 857, 385, 100, 92, 0, 0);
    var s_btn_small_retry = new tbImage("s_btn_small_retry", LevelEndTexture, 2, 100, 92, 0, 0, 200, 92, 2);
    window["s_btn_small_retry"] = s_btn_small_retry;
        s_btn_small_retry.addImage(0, 0, 353, 929, 100, 92, 0, 0);
        s_btn_small_retry.addImage(1, 0, 457, 929, 100, 92, 0, 0);
    var s_btn_standard = new tbImage("s_btn_standard", MenuTexture, 2, 96, 92, 0, 0, 192, 92, 2);
    window["s_btn_standard"] = s_btn_standard;
        s_btn_standard.addImage(0, 0, 841, 673, 96, 92, 0, 0);
        s_btn_standard.addImage(1, 0, 841, 577, 96, 92, 0, 0);
    var s_btn_toggle = new tbImage("s_btn_toggle", MenuTexture, 2, 162, 92, 0, 0, 324, 92, 2);
    window["s_btn_toggle"] = s_btn_toggle;
        s_btn_toggle.addImage(0, 0, 857, 97, 162, 92, 0, 0);
        s_btn_toggle.addImage(1, 0, 857, 1, 162, 92, 0, 0);
    var s_icon_toggle_fxoff = new tbImage("s_icon_toggle_fxoff", MenuTexture, 2, 227, 92, 0, 0, 454, 92, 2);
    window["s_icon_toggle_fxoff"] = s_icon_toggle_fxoff;
        s_icon_toggle_fxoff.addImage(0, 0, 609, 425, 227, 92, 0, 0);
        s_icon_toggle_fxoff.addImage(1, 0, 609, 521, 227, 92, 0, 0);
    var s_icon_toggle_fxon = new tbImage("s_icon_toggle_fxon", MenuTexture, 2, 227, 92, 0, 0, 454, 92, 2);
    window["s_icon_toggle_fxon"] = s_icon_toggle_fxon;
        s_icon_toggle_fxon.addImage(0, 0, 609, 617, 227, 92, 0, 0);
        s_icon_toggle_fxon.addImage(1, 0, 585, 713, 227, 92, 0, 0);
    var s_icon_toggle_musicoff = new tbImage("s_icon_toggle_musicoff", MenuTexture, 2, 227, 92, 0, 0, 454, 92, 2);
    window["s_icon_toggle_musicoff"] = s_icon_toggle_musicoff;
        s_icon_toggle_musicoff.addImage(0, 1, 585, 1, 227, 92, 0, 0);
        s_icon_toggle_musicoff.addImage(1, 0, 585, 905, 227, 92, 0, 0);
    var s_icon_toggle_musicon = new tbImage("s_icon_toggle_musicon", MenuTexture, 2, 227, 92, 0, 0, 454, 92, 2);
    window["s_icon_toggle_musicon"] = s_icon_toggle_musicon;
        s_icon_toggle_musicon.addImage(0, 0, 585, 809, 227, 92, 0, 0);
        s_icon_toggle_musicon.addImage(1, 1, 585, 97, 227, 92, 0, 0);
    var s_btn_bigtext = new tbImage("s_btn_bigtext", StartScreenTexture, 2, 137, 104, 0, 0, 274, 104, 2);
    window["s_btn_bigtext"] = s_btn_bigtext;
        s_btn_bigtext.addImage(0, 0, 809, 113, 137, 104, 0, 0);
        s_btn_bigtext.addImage(1, 0, 665, 57, 137, 104, 0, 0);
    var s_tutorial = new tbImage("s_tutorial", MenuTexture, 1, 576, 564, 0, 0, 576, 564, 1);
    window["s_tutorial"] = s_tutorial;
        s_tutorial.addImage(0, 1, 1, 329, 576, 564, 0, 0);
    var s_screen_start = new tbImage("s_screen_start", StartTexture, 4, 576, 320, 0, 0, 1152, 640, 2);
    window["s_screen_start"] = s_screen_start;
        s_screen_start.addImage(0, 0, 1, 329, 576, 320, 0, 0);
        s_screen_start.addImage(1, 1, 1, 1, 576, 320, 0, 0);
        s_screen_start.addImage(2, 0, 1, 1, 576, 320, 0, 0);
        s_screen_start.addImage(3, 0, 1, 657, 576, 320, 0, 0);
    var s_overlay_assignment = new tbImage("s_overlay_assignment", GameStaticTexture, 1, 652, 268, 0, 0, 652, 268, 1);
    window["s_overlay_assignment"] = s_overlay_assignment;
        s_overlay_assignment.addImage(0, 0, 1, 1, 652, 267, 0, 0);
    var s_overlay_options = new tbImage("s_overlay_options", MenuTexture, 1, 602, 618, 0, 0, 602, 618, 1);
    window["s_overlay_options"] = s_overlay_options;
        s_overlay_options.addImage(0, 0, 1, 1, 602, 617, 0, 0);
    var s_overlay_level_win = new tbImage("s_overlay_level_win", LevelEndTexture, 1, 656, 618, 0, 0, 656, 618, 1);
    window["s_overlay_level_win"] = s_overlay_level_win;
        s_overlay_level_win.addImage(0, 0, 1, 1, 656, 617, 0, 0);
    var s_overlay_level_fail = new tbImage("s_overlay_level_fail", LevelEndTexture, 1, 602, 618, 0, 0, 602, 618, 1);
    window["s_overlay_level_fail"] = s_overlay_level_fail;
        s_overlay_level_fail.addImage(0, 1, 1, 1, 602, 617, 0, 0);
    var s_screen_end = new tbImage("s_screen_end", EndScreenTexture, 4, 576, 320, 0, 0, 1152, 640, 2);
    window["s_screen_end"] = s_screen_end;
        s_screen_end.addImage(0, 0, 1, 329, 576, 320, 0, 0);
        s_screen_end.addImage(1, 1, 1, 1, 576, 320, 0, 0);
        s_screen_end.addImage(2, 0, 1, 1, 576, 320, 0, 0);
        s_screen_end.addImage(3, 0, 1, 657, 576, 320, 0, 0);
    var s_screen_levelselect = new tbImage("s_screen_levelselect", LevelMapScreenTexture, 4, 576, 320, 0, 0, 1152, 640, 2);
    window["s_screen_levelselect"] = s_screen_levelselect;
        s_screen_levelselect.addImage(0, 0, 1, 329, 576, 320, 0, 0);
        s_screen_levelselect.addImage(1, 1, 1, 1, 576, 320, 0, 0);
        s_screen_levelselect.addImage(2, 0, 1, 657, 576, 320, 0, 0);
        s_screen_levelselect.addImage(3, 0, 1, 1, 576, 320, 0, 0);
    var s_background = new tbImage("s_background", MenuTexture, 4, 576, 320, 0, 0, 1152, 640, 2);
    window["s_background"] = s_background;
        s_background.addImage(0, 1, 1, 1, 576, 320, 0, 0);
        s_background.addImage(1, 2, 1, 1, 576, 320, 0, 0);
        s_background.addImage(2, 2, 1, 329, 576, 320, 0, 0);
        s_background.addImage(3, 0, 1, 625, 576, 320, 0, 0);
    var s_logo = new tbImage("s_logo", StartScreenTexture, 1, 655, 247, 0, 0, 655, 247, 1);
    window["s_logo"] = s_logo;
        s_logo.addImage(0, 0, 1, 1, 655, 247, 0, 0);
    var s_ui_background = new tbImage("s_ui_background", GameUITexture, 1, 170, 578, 0, 0, 170, 578, 1);
    window["s_ui_background"] = s_ui_background;
        s_ui_background.addImage(0, 0, 1, 1, 170, 578, 0, 0);
    var s_ui_star_empty = new tbImage("s_ui_star_empty", GameTexture, 1, 34, 34, 0, 0, 34, 34, 1);
    window["s_ui_star_empty"] = s_ui_star_empty;
        s_ui_star_empty.addImage(0, 0, 993, 33, 26, 29, 4, 5);
    var s_ui_star_filled = new tbImage("s_ui_star_filled", GameTexture, 1, 34, 34, 0, 0, 34, 34, 1);
    window["s_ui_star_filled"] = s_ui_star_filled;
        s_ui_star_filled.addImage(0, 0, 993, 1, 26, 29, 4, 5);

//******************************************************
//******************************************************
//******************************************************
//*****    Definition of the Fonts
//******************************************************
//******************************************************
//******************************************************


//******************************************************
//******************************************************
//******************************************************
//*****    Definition of the Vector Fonts
//******************************************************
//******************************************************
//******************************************************

    var f_defaultLoader = new tbVectorFontLoader("f_default", "fonts/f_default.woff", "fonts/f_default.ttf", "fonts");
    var f_default = new tbVectorFont("f_default", "Arial");
       f_default.setFontSize(12);
       f_default.setFill(true);
       f_default.setFillColor("Black");
       f_default.setFillAlpha(100/100);
       f_default.setStroke(false);
       f_default.setStrokeColor("Black");
       f_default.setStrokeWidth(1);
       f_default.setStrokeJoin("miter");
       f_default.setStrokeAlpha(100/100);
       f_default.setStrokeBehind(false);
       f_default.setAlign("left");
       f_default.setBaseline("top");
       f_default.setOffsetFactor(0/100);
       f_default.setLineSpacing(0);
    var ff_opensans_extraboldLoader = new tbVectorFontLoader("ff_opensans_extrabold", "fonts/ff_opensans_extrabold.woff", "fonts/ff_opensans_extrabold.ttf", "fonts");
    var ff_dimbo_regularLoader = new tbVectorFontLoader("ff_dimbo_regular", "fonts/ff_dimbo_regular.woff", "fonts/ff_dimbo_regular.ttf", "fonts");
    var floaterFontFaceLoader = new tbVectorFontLoader("floaterFontFace", "fonts/floaterFontFace.woff", "fonts/floaterFontFace.ttf", "fonts");
    var floaterNumberFontFaceLoader = new tbVectorFontLoader("floaterNumberFontFace", "fonts/floaterNumberFontFace.woff", "fonts/floaterNumberFontFace.ttf", "fonts");
    var floaterFontText1 = new tbVectorFont("floaterFontFace", "Arial");
       floaterFontText1.setFontSize(24);
       floaterFontText1.setFontWeight("normal");
       floaterFontText1.setFill(true);
       floaterFontText1.setFillColor("#FFDE00");
       floaterFontText1.setFillAlpha(100/100);
       floaterFontText1.setStroke(true);
       floaterFontText1.setStrokeColor("#6F1F00");
       floaterFontText1.setStrokeWidth(4);
       floaterFontText1.setStrokeJoin("miter");
       floaterFontText1.setStrokeAlpha(100/100);
       floaterFontText1.setStrokeBehind(true);
       floaterFontText1.setShadow(true, "rgba(57,0,0,0.46)", 0, 4, 2);
       floaterFontText1.setAlign("left");
       floaterFontText1.setBaseline("top");
       floaterFontText1.setOffsetFactor(0/100);
       floaterFontText1.setLineSpacing(0);
    var floaterFontText2 = new tbVectorFont("floaterFontFace", "Arial");
       floaterFontText2.setFontSize(28);
       floaterFontText2.setFontWeight("normal");
       floaterFontText2.setFill(true);
       floaterFontText2.setFillGradient(true, 2, ["#FFF600", "#00DB48", "blue"], 65/100, 2/100);
       floaterFontText2.setFillAlpha(100/100);
       floaterFontText2.setStroke(true);
       floaterFontText2.setStrokeColor("#073400");
       floaterFontText2.setStrokeWidth(4);
       floaterFontText2.setStrokeJoin("miter");
       floaterFontText2.setStrokeAlpha(100/100);
       floaterFontText2.setStrokeBehind(true);
       floaterFontText2.setShadow(true, "rgba(0,57,43,0.47)", 0, 4, 2);
       floaterFontText2.setAlign("left");
       floaterFontText2.setBaseline("top");
       floaterFontText2.setOffsetFactor(0/100);
       floaterFontText2.setLineSpacing(0);
    var floaterFontText3 = new tbVectorFont("floaterFontFace", "Arial");
       floaterFontText3.setFontSize(30);
       floaterFontText3.setFontWeight("normal");
       floaterFontText3.setFill(true);
       floaterFontText3.setFillGradient(true, 3, ["#FFF600", "#FF8236", "#FF0096"], 71/100, -10/100);
       floaterFontText3.setFillAlpha(100/100);
       floaterFontText3.setStroke(true);
       floaterFontText3.setStrokeColor("#4F0027");
       floaterFontText3.setStrokeWidth(4);
       floaterFontText3.setStrokeJoin("miter");
       floaterFontText3.setStrokeAlpha(100/100);
       floaterFontText3.setStrokeBehind(true);
       floaterFontText3.setShadow(true, "rgba(41,0,0,0.48)", 0, 5, 2);
       floaterFontText3.setAlign("left");
       floaterFontText3.setBaseline("top");
       floaterFontText3.setOffsetFactor(0/100);
       floaterFontText3.setLineSpacing(0);
    var floaterFontText4 = new tbVectorFont("floaterFontFace", "Arial");
       floaterFontText4.setFontSize(34);
       floaterFontText4.setFontWeight("normal");
       floaterFontText4.setFill(true);
       floaterFontText4.setFillGradient(true, 3, ["#00FCFF", "#893DFB", "#FF00E4"], 72/100, -4/100);
       floaterFontText4.setFillAlpha(100/100);
       floaterFontText4.setStroke(true);
       floaterFontText4.setStrokeColor("#001637");
       floaterFontText4.setStrokeWidth(4);
       floaterFontText4.setStrokeJoin("miter");
       floaterFontText4.setStrokeAlpha(100/100);
       floaterFontText4.setStrokeBehind(true);
       floaterFontText4.setShadow(true, "rgba(0,35,75,0.49)", 0, 6, 2);
       floaterFontText4.setAlign("left");
       floaterFontText4.setBaseline("top");
       floaterFontText4.setOffsetFactor(0/100);
       floaterFontText4.setLineSpacing(0);
    var floaterFontNumberPositive = new tbVectorFont("floaterNumberFontFace", "Arial");
       floaterFontNumberPositive.setFontSize(30);
       floaterFontNumberPositive.setFill(true);
       floaterFontNumberPositive.setFillColor("White");
       floaterFontNumberPositive.setFillAlpha(100/100);
       floaterFontNumberPositive.setStroke(true);
       floaterFontNumberPositive.setStrokeColor("#00106F");
       floaterFontNumberPositive.setStrokeWidth(2);
       floaterFontNumberPositive.setStrokeJoin("miter");
       floaterFontNumberPositive.setStrokeAlpha(100/100);
       floaterFontNumberPositive.setStrokeBehind(false);
       floaterFontNumberPositive.setShadow(true, "rgba(0,4,57,0.51)", 0, 4, 2);
       floaterFontNumberPositive.setAlign("left");
       floaterFontNumberPositive.setBaseline("top");
       floaterFontNumberPositive.setOffsetFactor(0/100);
       floaterFontNumberPositive.setLineSpacing(0);
    var floaterFontNumberNegative = new tbVectorFont("floaterNumberFontFace", "Arial");
       floaterFontNumberNegative.setFontSize(30);
       floaterFontNumberNegative.setFontWeight("normal");
       floaterFontNumberNegative.setFill(true);
       floaterFontNumberNegative.setFillColor("#FF1E00");
       floaterFontNumberNegative.setFillAlpha(100/100);
       floaterFontNumberNegative.setStroke(true);
       floaterFontNumberNegative.setStrokeColor("#3F0000");
       floaterFontNumberNegative.setStrokeWidth(2);
       floaterFontNumberNegative.setStrokeJoin("miter");
       floaterFontNumberNegative.setStrokeAlpha(100/100);
       floaterFontNumberNegative.setStrokeBehind(false);
       floaterFontNumberNegative.setShadow(true, "rgba(57,0,0,0.49)", 0, 4, 2);
       floaterFontNumberNegative.setAlign("left");
       floaterFontNumberNegative.setBaseline("top");
       floaterFontNumberNegative.setOffsetFactor(0/100);
       floaterFontNumberNegative.setLineSpacing(0);
    var ff_opensans_boldLoader = new tbVectorFontLoader("ff_opensans_bold", "fonts/ff_opensans_bold.woff", "fonts/ff_opensans_bold.ttf", "fonts");
    var ff_opensans_bolditalicLoader = new tbVectorFontLoader("ff_opensans_bolditalic", "fonts/ff_opensans_bolditalic.woff", "fonts/ff_opensans_bolditalic.ttf", "fonts");
    var f_game_ui_tiny = new tbVectorFont("ff_opensans_bold", "Arial");
       f_game_ui_tiny.setFontSize(11);
       f_game_ui_tiny.setFill(true);
       f_game_ui_tiny.setFillColor("#799EC5");
       f_game_ui_tiny.setFillAlpha(100/100);
       f_game_ui_tiny.setStroke(false);
       f_game_ui_tiny.setStrokeColor("White");
       f_game_ui_tiny.setStrokeWidth(1);
       f_game_ui_tiny.setStrokeJoin("miter");
       f_game_ui_tiny.setStrokeAlpha(100/100);
       f_game_ui_tiny.setStrokeBehind(false);
       f_game_ui_tiny.setAlign("center");
       f_game_ui_tiny.setBaseline("middle");
       f_game_ui_tiny.setOffsetFactor(0/100);
       f_game_ui_tiny.setLineSpacing(0);
    var f_game_ui = new tbVectorFont("ff_opensans_bold", "Arial");
       f_game_ui.setFontSize(23);
       f_game_ui.setFill(true);
       f_game_ui.setFillColor("#799EC5");
       f_game_ui.setFillAlpha(100/100);
       f_game_ui.setStroke(false);
       f_game_ui.setStrokeColor("Black");
       f_game_ui.setStrokeWidth(1);
       f_game_ui.setStrokeJoin("miter");
       f_game_ui.setStrokeAlpha(100/100);
       f_game_ui.setStrokeBehind(false);
       f_game_ui.setAlign("center");
       f_game_ui.setBaseline("middle");
       f_game_ui.setOffsetFactor(0/100);
       f_game_ui.setLineSpacing(0);
    var f_game_ui_large = new tbVectorFont("ff_opensans_bolditalic", "Arial");
       f_game_ui_large.setFontSize(52);
       f_game_ui_large.setFill(true);
       f_game_ui_large.setFillColor("#172348");
       f_game_ui_large.setFillAlpha(100/100);
       f_game_ui_large.setStroke(false);
       f_game_ui_large.setStrokeColor("Black");
       f_game_ui_large.setStrokeWidth(1);
       f_game_ui_large.setStrokeJoin("miter");
       f_game_ui_large.setStrokeAlpha(100/100);
       f_game_ui_large.setStrokeBehind(false);
       f_game_ui_large.setAlign("center");
       f_game_ui_large.setBaseline("middle");
       f_game_ui_large.setOffsetFactor(0/100);
       f_game_ui_large.setLineSpacing(0);
    var f_debug = new tbVectorFont("ff_opensans_bold", "Calibri");
       f_debug.setFontSize(20);
       f_debug.setFontWeight("bold");
       f_debug.setFill(true);
       f_debug.setFillColor("White");
       f_debug.setFillAlpha(100/100);
       f_debug.setStroke(true);
       f_debug.setStrokeColor("Black");
       f_debug.setStrokeWidth(3);
       f_debug.setStrokeJoin("miter");
       f_debug.setStrokeAlpha(100/100);
       f_debug.setStrokeBehind(true);
       f_debug.setAlign("center");
       f_debug.setBaseline("middle");
       f_debug.setOffsetFactor(0/100);
       f_debug.setLineSpacing(0);
    var f_countdown = new tbVectorFont("f_themeDefault", "Arial");
       f_countdown.setFontSize(150);
       f_countdown.setFill(true);
       f_countdown.setFillColor("white");
       f_countdown.setFillAlpha(100/100);
       f_countdown.setStroke(true);
       f_countdown.setStrokeColor("Black");
       f_countdown.setStrokeWidth(6);
       f_countdown.setStrokeJoin("miter");
       f_countdown.setStrokeAlpha(100/100);
       f_countdown.setStrokeBehind(true);
       f_countdown.setShadow(true, "rgba(48,21,20,0.36)", 0, 10, 2);
       f_countdown.setAlign("center");
       f_countdown.setBaseline("middle");
       f_countdown.setOffsetFactor(0/100);
       f_countdown.setLineSpacing(0);
    var f_race_overview = new tbVectorFont("f_themeDefault", "Arial");
       f_race_overview.setFontSize(40);
       f_race_overview.setFill(true);
       f_race_overview.setFillColor("White");
       f_race_overview.setFillAlpha(100/100);
       f_race_overview.setStroke(false);
       f_race_overview.setStrokeColor("Black");
       f_race_overview.setStrokeWidth(1);
       f_race_overview.setStrokeJoin("miter");
       f_race_overview.setStrokeAlpha(100/100);
       f_race_overview.setStrokeBehind(false);
       f_race_overview.setShadow(true, "rgba(0,0,0,0.59)", 0, 1, 3);
       f_race_overview.setAlign("center");
       f_race_overview.setBaseline("top");
       f_race_overview.setOffsetFactor(0/100);
       f_race_overview.setLineSpacing(0);
    var f_themeDefaultLoader = new tbVectorFontLoader("f_themeDefault", "fonts/f_themeDefault.woff", "fonts/f_themeDefault.ttf", "fonts");
    var f_themeDefault = new tbVectorFont("f_themeDefault", "Arial");
       f_themeDefault.setFontSize(20);
       f_themeDefault.setFill(true);
       f_themeDefault.setFillColor("White");
       f_themeDefault.setFillAlpha(100/100);
       f_themeDefault.setStroke(false);
       f_themeDefault.setStrokeColor("White");
       f_themeDefault.setStrokeWidth(5);
       f_themeDefault.setStrokeJoin("miter");
       f_themeDefault.setStrokeAlpha(100/100);
       f_themeDefault.setStrokeBehind(true);
       f_themeDefault.setAlign("left");
       f_themeDefault.setBaseline("top");
       f_themeDefault.setOffsetFactor(0/100);
       f_themeDefault.setLineSpacing(0);

//******************************************************
//******************************************************
//******************************************************
//*****    Definition of the Audio Sprites
//******************************************************
//******************************************************
//******************************************************

    var audioSprite = new tbAudioSprite("audioSprite", "audio/audioSprite.mp3", "audio/audioSprite.ogg", "audio");

//******************************************************
//******************************************************
//******************************************************
//*****    Definition of the Sound Resources
//******************************************************
//******************************************************
//******************************************************

    var a_music = new tbSound("a_music", audioSprite, 0, 29538, 80/100, 10, ["game"]);
    var a_levelComplete = new tbSound("a_levelComplete", audioSprite, 31000, 1002, 100/100, 10, ["sfx"]);
    var a_mouseDown = new tbSound("a_mouseDown", audioSprite, 34000, 471, 100/100, 10, ["sfx"]);
    var a_levelend_star_01 = new tbSound("a_levelend_star_01", audioSprite, 36000, 1161, 100/100, 10, ["sfx"]);
    var a_levelend_star_02 = new tbSound("a_levelend_star_02", audioSprite, 39000, 1070, 100/100, 10, ["sfx"]);
    var a_levelend_star_03 = new tbSound("a_levelend_star_03", audioSprite, 42000, 1039, 100/100, 10, ["sfx"]);
    var a_levelend_fail = new tbSound("a_levelend_fail", audioSprite, 45000, 1572, 100/100, 10, ["sfx"]);
    var a_levelend_score_counter = new tbSound("a_levelend_score_counter", audioSprite, 48000, 54, 100/100, 10, ["sfx"]);
    var a_levelend_score_end = new tbSound("a_levelend_score_end", audioSprite, 50000, 888, 100/100, 10, ["sfx"]);
    var a_medal = new tbSound("a_medal", audioSprite, 52000, 1225, 100/100, 10, ["sfx"]);
    var a_engine_driveoff = new tbSound("a_engine_driveoff", audioSprite, 55000, 3419, 100/100, 10, ["game"]);
    var a_engine_start = new tbSound("a_engine_start", audioSprite, 60000, 1875, 100/100, 10, ["game"]);
    var a_engine_throttle_01 = new tbSound("a_engine_throttle_01", audioSprite, 63000, 1794, 100/100, 10, ["game"]);
    var a_engine_throttle_02 = new tbSound("a_engine_throttle_02", audioSprite, 66000, 1852, 100/100, 10, ["game"]);
    var a_engine_stop = new tbSound("a_engine_stop", audioSprite, 69000, 2604, 100/100, 10, ["game"]);
    var a_drift_driveoff_01 = new tbSound("a_drift_driveoff_01", audioSprite, 73000, 2186, 100/100, 10, ["game"]);
    var a_drift_driveoff_02 = new tbSound("a_drift_driveoff_02", audioSprite, 77000, 2222, 100/100, 10, ["game"]);
    var a_drift_01 = new tbSound("a_drift_01", audioSprite, 81000, 1212, 100/100, 10, ["game"]);
    var a_drift_02 = new tbSound("a_drift_02", audioSprite, 84000, 1209, 100/100, 10, ["game"]);
    var a_drift_03 = new tbSound("a_drift_03", audioSprite, 87000, 1066, 100/100, 10, ["game"]);
    var a_car_hit_01 = new tbSound("a_car_hit_01", audioSprite, 90000, 867, 100/100, 10, ["game"]);
    var a_car_hit_02 = new tbSound("a_car_hit_02", audioSprite, 92000, 667, 100/100, 10, ["game"]);
    var a_car_hit_03 = new tbSound("a_car_hit_03", audioSprite, 94000, 681, 100/100, 10, ["game"]);
    var a_finish = new tbSound("a_finish", audioSprite, 96000, 4538, 100/100, 10, ["game"]);
    var a_last_lap = new tbSound("a_last_lap", audioSprite, 102000, 1199, 100/100, 10, ["game"]);
    var a_countdown_count = new tbSound("a_countdown_count", audioSprite, 105000, 494, 100/100, 10, ["game"]);
    var a_countdown_go = new tbSound("a_countdown_go", audioSprite, 107000, 1000, 100/100, 10, ["game"]);
    var a_NPC_engine_driveoff = new tbSound("a_NPC_engine_driveoff", audioSprite, 110000, 2721, 100/100, 10, ["game"]);
    var a_NPC_engine_start = new tbSound("a_NPC_engine_start", audioSprite, 114000, 1319, 100/100, 10, ["game"]);
    var a_NPC_engine_stop = new tbSound("a_NPC_engine_stop", audioSprite, 117000, 2443, 100/100, 10, ["game"]);
    var a_ambience_crowd = new tbSound("a_ambience_crowd", audioSprite, 121000, 3187, 100/100, 10, ["game"]);
    var a_levelStart = new tbSound("a_levelStart", audioSprite, 126000, 4615, 82/100, 10, ["game"]);

//******************************************************
//******************************************************
//******************************************************
//******************************************************
//******************************************************
//*****    The Game Scripts
//******************************************************
//******************************************************
//******************************************************
//******************************************************
//******************************************************


//******************************************************
//*****    Script Resource: framework_dictionary
//******************************************************

// **********************************************
// Localization file for product: framework dictionary
//
// created on 18-3-2016 10:34:02
// **********************************************

/*exported dictionaryVar*/
var dictionaryVar = dictionaryVar || {};
dictionaryVar["nl-nl"] = dictionaryVar["nl-nl"] || {};
dictionaryVar["nl-nl"]["loadingScreenLoading"] = "Laden...";
dictionaryVar["nl-nl"]["startScreenPlay"] = "SPELEN";
dictionaryVar["nl-nl"]["levelMapScreenTotalScore"] = "Totale score";
dictionaryVar["nl-nl"]["levelEndScreenTitle_level"] = "Level <VALUE>";
dictionaryVar["nl-nl"]["levelEndScreenTitle_difficulty"] = "Goed Gedaan!";
dictionaryVar["nl-nl"]["levelEndScreenTitle_endless"] = "Level <VALUE>";
dictionaryVar["nl-nl"]["levelEndScreenTotalScore"] = "Totale score";
dictionaryVar["nl-nl"]["levelEndScreenSubTitle_levelFailed"] = "Level niet gehaald";
dictionaryVar["nl-nl"]["levelEndScreenTimeLeft"] = "Tijd over";
dictionaryVar["nl-nl"]["levelEndScreenTimeBonus"] = "Tijdbonus";
dictionaryVar["nl-nl"]["levelEndScreenHighScore"] = "High score";
dictionaryVar["nl-nl"]["optionsStartScreen"] = "Hoofdmenu";
dictionaryVar["nl-nl"]["optionsQuit"] = "Stop";
dictionaryVar["nl-nl"]["optionsResume"] = "Terug naar spel";
dictionaryVar["nl-nl"]["optionsTutorial"] = "Speluitleg";
dictionaryVar["nl-nl"]["optionsHighScore"] = "High scores";
dictionaryVar["nl-nl"]["optionsMoreGames"] = "Meer Spellen";
dictionaryVar["nl-nl"]["optionsDifficulty_easy"] = "Makkelijk";
dictionaryVar["nl-nl"]["optionsDifficulty_medium"] = "Gemiddeld";
dictionaryVar["nl-nl"]["optionsDifficulty_hard"] = "Moeilijk";
dictionaryVar["nl-nl"]["optionsMusic_on"] = "Aan";
dictionaryVar["nl-nl"]["optionsMusic_off"] = "Uit";
dictionaryVar["nl-nl"]["optionsSFX_on"] = "Aan";
dictionaryVar["nl-nl"]["optionsSFX_off"] = "Uit";
dictionaryVar["nl-nl"]["optionsLang_en-us"] = "Engels (US)";
dictionaryVar["nl-nl"]["optionsLang_en-gb"] = "Engels (GB)";
dictionaryVar["nl-nl"]["optionsLang_nl-nl"] = "Nederlands";
dictionaryVar["nl-nl"]["gameEndScreenTitle"] = "Gefeliciteerd!\nJe hebt gewonnen.";
dictionaryVar["nl-nl"]["gameEndScreenBtnText"] = "Ga verder";
dictionaryVar["nl-nl"]["optionsTitle"] = "Instellingen";
dictionaryVar["nl-nl"]["optionsQuitConfirmationText"] = "Pas op!\n\nAls je nu stopt verlies je alle voortgang in dit level. Weet je zeker dat je wilt stoppen?";
dictionaryVar["nl-nl"]["optionsQuitConfirmBtn_No"] = "Nee";
dictionaryVar["nl-nl"]["optionsQuitConfirmBtn_Yes"] = "Ja, ik weet het zeker";
dictionaryVar["nl-nl"]["levelMapScreenTitle"] = "Kies een level";
dictionaryVar["nl-nl"]["optionsRestartConfirmationText"] = "Pas op!\n\nAls je nu herstart verlies je alle voortgang in dit level. Weet je zeker dat je wilt herstarten?";
dictionaryVar["nl-nl"]["optionsRestart"] = "Herstart";
dictionaryVar["nl-nl"]["optionsSFXBig_on"] = "Geluid aan";
dictionaryVar["nl-nl"]["optionsSFXBig_off"] = "Geluid uit";
dictionaryVar["nl-nl"]["optionsAbout_title"] = "Over ons";
dictionaryVar["nl-nl"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\nCopyright © 2016";
dictionaryVar["nl-nl"]["optionsAbout_backBtn"] = "Terug";
dictionaryVar["nl-nl"]["optionsAbout_version"] = "versie:";
dictionaryVar["nl-nl"]["optionsAbout"] = "Over ons";
dictionaryVar["nl-nl"]["levelEndScreenMedal"] = "VERBETERD!";
dictionaryVar["nl-nl"]["startScreenQuestionaire"] = "Wat vind jij?";
dictionaryVar["nl-nl"]["levelMapScreenWorld_0"] = "Kies een level";
dictionaryVar["nl-nl"]["startScreenByTinglyGames"] = "door: Tingly Games";
dictionaryVar["nl-nl"]["optionsLang_de-de"] = "Duits";
dictionaryVar["nl-nl"]["optionsLang_tr-tr"] = "Turks";
dictionaryVar["nl-nl"]["optionsAbout_header"] = "Ontwikkeld door:";
dictionaryVar["nl-nl"]["levelEndScreenViewHighscoreBtn"] = "Scores bekijken";
dictionaryVar["nl-nl"]["levelEndScreenSubmitHighscoreBtn"] = "Score verzenden";
dictionaryVar["nl-nl"]["challengeStartScreenTitle_challengee_friend"] = "Je bent uitgedaagd door:";
dictionaryVar["nl-nl"]["challengeStartTextScore"] = "Punten van <NAME>:";
dictionaryVar["nl-nl"]["challengeStartTextTime"] = "Tijd van <NAME>:";
dictionaryVar["nl-nl"]["challengeStartScreenToWin"] = "Te winnen aantal Fairplay munten:";
dictionaryVar["nl-nl"]["challengeEndScreenWinnings"] = "Je hebt <AMOUNT> Fairplay munten gewonnen!";
dictionaryVar["nl-nl"]["challengeEndScreenOutcomeMessage_WON"] = "Je hebt de uitdaging gewonnen!";
dictionaryVar["nl-nl"]["challengeEndScreenOutcomeMessage_LOST"] = "Je hebt de uitdaging verloren.";
dictionaryVar["nl-nl"]["challengeEndScreenOutcomeMessage_TIED"] = "Jullie hebben gelijk gespeeld.";
dictionaryVar["nl-nl"]["challengeCancelConfirmText"] = "Je staat op het punt de uitdaging te annuleren. Je inzet wordt teruggestort minus de uitdagingskosten. Weet je zeker dat je de uitdaging wilt annuleren? ";
dictionaryVar["nl-nl"]["challengeCancelConfirmBtn_yes"] = "Ja";
dictionaryVar["nl-nl"]["challengeCancelConfirmBtn_no"] = "Nee";
dictionaryVar["nl-nl"]["challengeEndScreensBtn_submit"] = "Verstuur uitdaging";
dictionaryVar["nl-nl"]["challengeEndScreenBtn_cancel"] = "Annuleer uitdaging";
dictionaryVar["nl-nl"]["challengeEndScreenName_you"] = "Jij";
dictionaryVar["nl-nl"]["challengeEndScreenChallengeSend_error"] = "Er is een fout opgetreden bij het versturen van de uitdaging. Probeer het later nog een keer.";
dictionaryVar["nl-nl"]["challengeEndScreenChallengeSend_success"] = "Je uitdaging is verstuurd!";
dictionaryVar["nl-nl"]["challengeCancelMessage_error"] = "Er is een fout opgetreden bij het annuleren van de uitdaging. Probeer het later nog een keer.";
dictionaryVar["nl-nl"]["challengeCancelMessage_success"] = "De uitdaging is geannuleerd.";
dictionaryVar["nl-nl"]["challengeEndScreenScoreSend_error"] = "Er is een fout opgetreden tijdens de communicatie met de server. Probeer het later nog een keer.";
dictionaryVar["nl-nl"]["challengeStartScreenTitle_challengee_stranger"] = "Jouw tegenstander:";
dictionaryVar["nl-nl"]["challengeStartScreenTitle_challenger_friend"] = "Jouw tegenstander:";
dictionaryVar["nl-nl"]["challengeStartScreenTitle_challenger_stranger"] = "Je zet een uitdaging voor:";
dictionaryVar["nl-nl"]["challengeStartTextTime_challenger"] = "Speel het spel en zet een tijd neer.";
dictionaryVar["nl-nl"]["challengeStartTextScore_challenger"] = "Speel het spel en zet een score neer.";
dictionaryVar["nl-nl"]["challengeForfeitConfirmText"] = "Je staat op het punt de uitdaging op te geven. Weet je zeker dat je dit wilt doen?";
dictionaryVar["nl-nl"]["challengeForfeitConfirmBtn_yes"] = "Ja";
dictionaryVar["nl-nl"]["challengeForfeitConfirmBtn_no"] = "Nee";
dictionaryVar["nl-nl"]["challengeForfeitMessage_success"] = "Je hebt de uitdaging opgegeven.";
dictionaryVar["nl-nl"]["challengeForfeitMessage_error"] = "Er is een fout opgetreden tijdens het opgeven van de uitdaging. Probeer het later nog een keer.";
dictionaryVar["nl-nl"]["optionsChallengeForfeit"] = "Geef op";
dictionaryVar["nl-nl"]["optionsChallengeCancel"] = "Stop";
dictionaryVar["nl-nl"]["challengeLoadingError_notValid"] = "Sorry, deze uitdaging kan niet meer gespeeld worden.";
dictionaryVar["nl-nl"]["challengeLoadingError_notStarted"] = "Kan de server niet bereiken. Probeer het later nog een keer.";
dictionaryVar["nl-nl"]["levelEndScreenHighScore_time"] = "Beste tijd:";
dictionaryVar["nl-nl"]["levelEndScreenTotalScore_time"] = "Totale tijd:";
dictionaryVar["nl-nl"]["optionsLang_fr-fr"] = "Frans";
dictionaryVar["nl-nl"]["optionsLang_ko-kr"] = "Koreaans";
dictionaryVar["nl-nl"]["optionsLang_ar-eg"] = "Arabisch";
dictionaryVar["nl-nl"]["optionsLang_es-es"] = "Spaans";
dictionaryVar["nl-nl"]["optionsLang_pt-br"] = "Braziliaans-Portugees";
dictionaryVar["nl-nl"]["optionsLang_ru-ru"] = "Russisch";
dictionaryVar["nl-nl"]["optionsExit"] = "Stoppen";
dictionaryVar["nl-nl"]["levelEndScreenTotalScore_number"] = "Totale score:";
dictionaryVar["nl-nl"]["levelEndScreenHighScore_number"] = "Topscore:";
dictionaryVar["nl-nl"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> heeft 72 uur om de uitdaging aan te nemen of te weigeren. Als <NAME> je uitdaging weigert of niet accepteert binnen 72 uur worden je inzet en uitdagingskosten teruggestort.";
dictionaryVar["nl-nl"]["challengeEndScreenChallengeSend_submessage_stranger"] = "Als niemand binnen 72 uur je uitdaging accepteert, worden je inzet en uitdagingskosten teruggestort.";
dictionaryVar["nl-nl"]["challengeForfeitMessage_winnings"] = "<NAME> heeft <AMOUNT> Fairplay munten gewonnen!";
dictionaryVar["nl-nl"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["nl-nl"]["optionsLang_jp-jp"] = "Japans";
dictionaryVar["en-us"] = dictionaryVar["en-us"] || {};
dictionaryVar["en-us"]["loadingScreenLoading"] = "Loading...";
dictionaryVar["en-us"]["startScreenPlay"] = "PLAY";
dictionaryVar["en-us"]["levelMapScreenTotalScore"] = "Total score";
dictionaryVar["en-us"]["levelEndScreenTitle_level"] = "Level <VALUE>";
dictionaryVar["en-us"]["levelEndScreenTitle_difficulty"] = "Well done!";
dictionaryVar["en-us"]["levelEndScreenTitle_endless"] = "Stage <VALUE>";
dictionaryVar["en-us"]["levelEndScreenTotalScore"] = "Total score";
dictionaryVar["en-us"]["levelEndScreenSubTitle_levelFailed"] = "Level failed";
dictionaryVar["en-us"]["levelEndScreenTimeLeft"] = "Time remaining";
dictionaryVar["en-us"]["levelEndScreenTimeBonus"] = "Time bonus";
dictionaryVar["en-us"]["levelEndScreenHighScore"] = "High score";
dictionaryVar["en-us"]["optionsStartScreen"] = "Main menu";
dictionaryVar["en-us"]["optionsQuit"] = "Quit";
dictionaryVar["en-us"]["optionsResume"] = "Resume";
dictionaryVar["en-us"]["optionsTutorial"] = "How to play";
dictionaryVar["en-us"]["optionsHighScore"] = "High scores";
dictionaryVar["en-us"]["optionsMoreGames"] = "More Games";
dictionaryVar["en-us"]["optionsDifficulty_easy"] = "Easy";
dictionaryVar["en-us"]["optionsDifficulty_medium"] = "Medium";
dictionaryVar["en-us"]["optionsDifficulty_hard"] = "Difficult";
dictionaryVar["en-us"]["optionsMusic_on"] = "On";
dictionaryVar["en-us"]["optionsMusic_off"] = "Off";
dictionaryVar["en-us"]["optionsSFX_on"] = "On";
dictionaryVar["en-us"]["optionsSFX_off"] = "Off";
dictionaryVar["en-us"]["optionsLang_en-us"] = "English (US)";
dictionaryVar["en-us"]["optionsLang_en-gb"] = "English (GB)";
dictionaryVar["en-us"]["optionsLang_nl-nl"] = "Dutch";
dictionaryVar["en-us"]["gameEndScreenTitle"] = "Congratulations!\nYou have completed the game.";
dictionaryVar["en-us"]["gameEndScreenBtnText"] = "Continue";
dictionaryVar["en-us"]["optionsTitle"] = "Settings";
dictionaryVar["en-us"]["optionsQuitConfirmationText"] = "Attention!\n\nIf you quit now you will lose all progress made during this level. Are you sure you want to quit?";
dictionaryVar["en-us"]["optionsQuitConfirmBtn_No"] = "No";
dictionaryVar["en-us"]["optionsQuitConfirmBtn_Yes"] = "Yes, I'm sure";
dictionaryVar["en-us"]["levelMapScreenTitle"] = "Select a level";
dictionaryVar["en-us"]["optionsRestartConfirmationText"] = "Attention!\n\nIf you restart now you will lose all progress made during this level. Are you sure you want to restart?";
dictionaryVar["en-us"]["optionsRestart"] = "Restart";
dictionaryVar["en-us"]["optionsSFXBig_on"] = "Sound on";
dictionaryVar["en-us"]["optionsSFXBig_off"] = "Sound off";
dictionaryVar["en-us"]["optionsAbout_title"] = "About";
dictionaryVar["en-us"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["en-us"]["optionsAbout_backBtn"] = "Back";
dictionaryVar["en-us"]["optionsAbout_version"] = "version:";
dictionaryVar["en-us"]["optionsAbout"] = "About";
dictionaryVar["en-us"]["levelEndScreenMedal"] = "IMPROVED!";
dictionaryVar["en-us"]["startScreenQuestionaire"] = "What do you think?";
dictionaryVar["en-us"]["levelMapScreenWorld_0"] = "Select a level";
dictionaryVar["en-us"]["startScreenByTinglyGames"] = "by: Tingly Games";
dictionaryVar["en-us"]["optionsLang_de-de"] = "German";
dictionaryVar["en-us"]["optionsLang_tr-tr"] = "Turkish";
dictionaryVar["en-us"]["optionsAbout_header"] = "Developed by:";
dictionaryVar["en-us"]["levelEndScreenViewHighscoreBtn"] = "View scores";
dictionaryVar["en-us"]["levelEndScreenSubmitHighscoreBtn"] = "Submit score";
dictionaryVar["en-us"]["challengeStartScreenTitle_challengee_friend"] = "You have been challenged by:";
dictionaryVar["en-us"]["challengeStartTextScore"] = "<NAME>'s score:";
dictionaryVar["en-us"]["challengeStartTextTime"] = "<NAME>'s time:";
dictionaryVar["en-us"]["challengeStartScreenToWin"] = "Amount to win:";
dictionaryVar["en-us"]["challengeEndScreenWinnings"] = "You have won <AMOUNT> fairpoints";
dictionaryVar["en-us"]["challengeEndScreenOutcomeMessage_WON"] = "You have won the challenge!";
dictionaryVar["en-us"]["challengeEndScreenOutcomeMessage_LOST"] = "You have lost the challenge.";
dictionaryVar["en-us"]["challengeEndScreenOutcomeMessage_TIED"] = "You tied.";
dictionaryVar["en-us"]["challengeCancelConfirmText"] = "You are about to cancel the challenge. Your wager will be returned minus the challenge fee. Are you sure you want to cancel the challenge?";
dictionaryVar["en-us"]["challengeCancelConfirmBtn_yes"] = "Yes";
dictionaryVar["en-us"]["challengeCancelConfirmBtn_no"] = "No";
dictionaryVar["en-us"]["challengeEndScreensBtn_submit"] = "Submit challenge";
dictionaryVar["en-us"]["challengeEndScreenBtn_cancel"] = "Cancel challenge";
dictionaryVar["en-us"]["challengeEndScreenName_you"] = "You";
dictionaryVar["en-us"]["challengeEndScreenChallengeSend_error"] = "An error occured while submitting the challenge. Please try again later.";
dictionaryVar["en-us"]["challengeEndScreenChallengeSend_success"] = "Your challenge has been sent!";
dictionaryVar["en-us"]["challengeCancelMessage_error"] = "An error occured while cancelling your challenge. Please try again later.";
dictionaryVar["en-us"]["challengeCancelMessage_success"] = "Your challenge has been cancelled.";
dictionaryVar["en-us"]["challengeEndScreenScoreSend_error"] = "An error occured while communicating with the server. Please try again later.";
dictionaryVar["en-us"]["challengeStartScreenTitle_challengee_stranger"] = "You have been matched with:";
dictionaryVar["en-us"]["challengeStartScreenTitle_challenger_friend"] = "You are challenging:";
dictionaryVar["en-us"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["en-us"]["challengeStartTextTime_challenger"] = "Play the game and set a time.";
dictionaryVar["en-us"]["challengeStartTextScore_challenger"] = "Play the game and set a score.";
dictionaryVar["en-us"]["challengeForfeitConfirmText"] = "You are about to forfeit the challenge. Are you sure you want to proceed?";
dictionaryVar["en-us"]["challengeForfeitConfirmBtn_yes"] = "Yes";
dictionaryVar["en-us"]["challengeForfeitConfirmBtn_no"] = "No";
dictionaryVar["en-us"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["en-us"]["challengeForfeitMessage_error"] = "An error occured while forfeiting the challenge. Please try again later.";
dictionaryVar["en-us"]["optionsChallengeForfeit"] = "Forfeit";
dictionaryVar["en-us"]["optionsChallengeCancel"] = "Quit";
dictionaryVar["en-us"]["challengeLoadingError_notValid"] = "Sorry, this challenge is no longer valid.";
dictionaryVar["en-us"]["challengeLoadingError_notStarted"] = "Unable to connect to the server. Please try again later.";
dictionaryVar["en-us"]["levelEndScreenHighScore_time"] = "Best time:";
dictionaryVar["en-us"]["levelEndScreenTotalScore_time"] = "Total time:";
dictionaryVar["en-us"]["optionsLang_fr-fr"] = "French";
dictionaryVar["en-us"]["optionsLang_ko-kr"] = "Korean";
dictionaryVar["en-us"]["optionsLang_ar-eg"] = "Arabic";
dictionaryVar["en-us"]["optionsLang_es-es"] = "Spanish";
dictionaryVar["en-us"]["optionsLang_pt-br"] = "Brazilian-Portuguese";
dictionaryVar["en-us"]["optionsLang_ru-ru"] = "Russian";
dictionaryVar["en-us"]["optionsExit"] = "Exit";
dictionaryVar["en-us"]["levelEndScreenTotalScore_number"] = "Total score:";
dictionaryVar["en-us"]["levelEndScreenHighScore_number"] = "High score:";
dictionaryVar["en-us"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> has 72 hours to accept or decline your challenge. If <NAME> declines or doesn’t accept within 72 hours your wager and challenge fee will be reimbursed.";
dictionaryVar["en-us"]["challengeEndScreenChallengeSend_submessage_stranger"] = "If no one accepts your challenge within 72 hours, the amount of your wager and the challenge fee will be returned to you.";
dictionaryVar["en-us"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["en-us"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["en-us"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["en-gb"] = dictionaryVar["en-gb"] || {};
dictionaryVar["en-gb"]["loadingScreenLoading"] = "Loading...";
dictionaryVar["en-gb"]["startScreenPlay"] = "PLAY";
dictionaryVar["en-gb"]["levelMapScreenTotalScore"] = "Total score";
dictionaryVar["en-gb"]["levelEndScreenTitle_level"] = "Level <VALUE>";
dictionaryVar["en-gb"]["levelEndScreenTitle_difficulty"] = "Well done!";
dictionaryVar["en-gb"]["levelEndScreenTitle_endless"] = "Stage <VALUE>";
dictionaryVar["en-gb"]["levelEndScreenTotalScore"] = "Total score";
dictionaryVar["en-gb"]["levelEndScreenSubTitle_levelFailed"] = "Level failed";
dictionaryVar["en-gb"]["levelEndScreenTimeLeft"] = "Time remaining";
dictionaryVar["en-gb"]["levelEndScreenTimeBonus"] = "Time bonus";
dictionaryVar["en-gb"]["levelEndScreenHighScore"] = "High score";
dictionaryVar["en-gb"]["optionsStartScreen"] = "Main menu";
dictionaryVar["en-gb"]["optionsQuit"] = "Quit";
dictionaryVar["en-gb"]["optionsResume"] = "Resume";
dictionaryVar["en-gb"]["optionsTutorial"] = "How to play";
dictionaryVar["en-gb"]["optionsHighScore"] = "High scores";
dictionaryVar["en-gb"]["optionsMoreGames"] = "More Games";
dictionaryVar["en-gb"]["optionsDifficulty_easy"] = "Easy";
dictionaryVar["en-gb"]["optionsDifficulty_medium"] = "Medium";
dictionaryVar["en-gb"]["optionsDifficulty_hard"] = "Difficult";
dictionaryVar["en-gb"]["optionsMusic_on"] = "On";
dictionaryVar["en-gb"]["optionsMusic_off"] = "Off";
dictionaryVar["en-gb"]["optionsSFX_on"] = "On";
dictionaryVar["en-gb"]["optionsSFX_off"] = "Off";
dictionaryVar["en-gb"]["optionsLang_en-us"] = "English (US)";
dictionaryVar["en-gb"]["optionsLang_en-gb"] = "English (GB)";
dictionaryVar["en-gb"]["optionsLang_nl-nl"] = "Dutch";
dictionaryVar["en-gb"]["gameEndScreenTitle"] = "Congratulations!\nYou have completed the game.";
dictionaryVar["en-gb"]["gameEndScreenBtnText"] = "Continue";
dictionaryVar["en-gb"]["optionsTitle"] = "Settings";
dictionaryVar["en-gb"]["optionsQuitConfirmationText"] = "Attention!\n\nIf you quit now you will lose all progress made during this level. Are you sure you want to quit?";
dictionaryVar["en-gb"]["optionsQuitConfirmBtn_No"] = "No";
dictionaryVar["en-gb"]["optionsQuitConfirmBtn_Yes"] = "Yes, I'm sure";
dictionaryVar["en-gb"]["levelMapScreenTitle"] = "Select a level";
dictionaryVar["en-gb"]["optionsRestartConfirmationText"] = "Attention!\n\nIf you restart now you will lose all progress made during this level. Are you sure you want to restart?";
dictionaryVar["en-gb"]["optionsRestart"] = "Restart";
dictionaryVar["en-gb"]["optionsSFXBig_on"] = "Sound on";
dictionaryVar["en-gb"]["optionsSFXBig_off"] = "Sound off";
dictionaryVar["en-gb"]["optionsAbout_title"] = "About";
dictionaryVar["en-gb"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["en-gb"]["optionsAbout_backBtn"] = "Back";
dictionaryVar["en-gb"]["optionsAbout_version"] = "version:";
dictionaryVar["en-gb"]["optionsAbout"] = "About";
dictionaryVar["en-gb"]["levelEndScreenMedal"] = "IMPROVED!";
dictionaryVar["en-gb"]["startScreenQuestionaire"] = "What do you think?";
dictionaryVar["en-gb"]["levelMapScreenWorld_0"] = "Select a level";
dictionaryVar["en-gb"]["startScreenByTinglyGames"] = "by: Tingly Games";
dictionaryVar["en-gb"]["optionsLang_de-de"] = "German";
dictionaryVar["en-gb"]["optionsLang_tr-tr"] = "Turkish";
dictionaryVar["en-gb"]["optionsAbout_header"] = "Developed by:";
dictionaryVar["en-gb"]["levelEndScreenViewHighscoreBtn"] = "View scores";
dictionaryVar["en-gb"]["levelEndScreenSubmitHighscoreBtn"] = "Submit score";
dictionaryVar["en-gb"]["challengeStartScreenTitle_challengee_friend"] = "You have been challenged by:";
dictionaryVar["en-gb"]["challengeStartTextScore"] = "<NAME>'s score:";
dictionaryVar["en-gb"]["challengeStartTextTime"] = "<NAME>'s time:";
dictionaryVar["en-gb"]["challengeStartScreenToWin"] = "Amount to win:";
dictionaryVar["en-gb"]["challengeEndScreenWinnings"] = "You have won <AMOUNT> fairpoints";
dictionaryVar["en-gb"]["challengeEndScreenOutcomeMessage_WON"] = "You have won the challenge!";
dictionaryVar["en-gb"]["challengeEndScreenOutcomeMessage_LOST"] = "You have lost the challenge.";
dictionaryVar["en-gb"]["challengeEndScreenOutcomeMessage_TIED"] = "You tied.";
dictionaryVar["en-gb"]["challengeCancelConfirmText"] = "You are about to cancel the challenge. Your wager will be returned minus the challenge fee. Are you sure you want to cancel the challenge?";
dictionaryVar["en-gb"]["challengeCancelConfirmBtn_yes"] = "Yes";
dictionaryVar["en-gb"]["challengeCancelConfirmBtn_no"] = "No";
dictionaryVar["en-gb"]["challengeEndScreensBtn_submit"] = "Submit challenge";
dictionaryVar["en-gb"]["challengeEndScreenBtn_cancel"] = "Cancel challenge";
dictionaryVar["en-gb"]["challengeEndScreenName_you"] = "You";
dictionaryVar["en-gb"]["challengeEndScreenChallengeSend_error"] = "An error occured while submitting the challenge. Please try again later.";
dictionaryVar["en-gb"]["challengeEndScreenChallengeSend_success"] = "Your challenge has been sent!";
dictionaryVar["en-gb"]["challengeCancelMessage_error"] = "An error occured while cancelling your challenge. Please try again later.";
dictionaryVar["en-gb"]["challengeCancelMessage_success"] = "Your challenge has been cancelled.";
dictionaryVar["en-gb"]["challengeEndScreenScoreSend_error"] = "An error occured while communicating with the server. Please try again later.";
dictionaryVar["en-gb"]["challengeStartScreenTitle_challengee_stranger"] = "You have been matched with:";
dictionaryVar["en-gb"]["challengeStartScreenTitle_challenger_friend"] = "You are challenging:";
dictionaryVar["en-gb"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["en-gb"]["challengeStartTextTime_challenger"] = "Play the game and set a time.";
dictionaryVar["en-gb"]["challengeStartTextScore_challenger"] = "Play the game and set a score.";
dictionaryVar["en-gb"]["challengeForfeitConfirmText"] = "You are about to forfeit the challenge. Are you sure you wish to proceed?";
dictionaryVar["en-gb"]["challengeForfeitConfirmBtn_yes"] = "Yes";
dictionaryVar["en-gb"]["challengeForfeitConfirmBtn_no"] = "No";
dictionaryVar["en-gb"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["en-gb"]["challengeForfeitMessage_error"] = "An error occured while forfeiting the challenge. Please try again later.";
dictionaryVar["en-gb"]["optionsChallengeForfeit"] = "Forfeit";
dictionaryVar["en-gb"]["optionsChallengeCancel"] = "Quit";
dictionaryVar["en-gb"]["challengeLoadingError_notValid"] = "Sorry, this challenge is no longer valid.";
dictionaryVar["en-gb"]["challengeLoadingError_notStarted"] = "Unable to connect to the server. Please try again later.";
dictionaryVar["en-gb"]["levelEndScreenHighScore_time"] = "Best time:";
dictionaryVar["en-gb"]["levelEndScreenTotalScore_time"] = "Total time:";
dictionaryVar["en-gb"]["optionsLang_fr-fr"] = "French";
dictionaryVar["en-gb"]["optionsLang_ko-kr"] = "Korean";
dictionaryVar["en-gb"]["optionsLang_ar-eg"] = "Arabic";
dictionaryVar["en-gb"]["optionsLang_es-es"] = "Spanish";
dictionaryVar["en-gb"]["optionsLang_pt-br"] = "Brazilian-Portuguese";
dictionaryVar["en-gb"]["optionsLang_ru-ru"] = "Russian";
dictionaryVar["en-gb"]["optionsExit"] = "Exit";
dictionaryVar["en-gb"]["levelEndScreenTotalScore_number"] = "Total score:";
dictionaryVar["en-gb"]["levelEndScreenHighScore_number"] = "High score:";
dictionaryVar["en-gb"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> has 72 hours to accept or decline your challenge. If <NAME> declines or doesn’t accept within 72 hours your wager and challenge fee will be reimbursed.";
dictionaryVar["en-gb"]["challengeEndScreenChallengeSend_submessage_stranger"] = "If no one accepts your challenge within 72 hours, the amount of your wager and the challenge fee will be returned to you.";
dictionaryVar["en-gb"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["en-gb"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["en-gb"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["de-de"] = dictionaryVar["de-de"] || {};
dictionaryVar["de-de"]["loadingScreenLoading"] = "Laden ...";
dictionaryVar["de-de"]["startScreenPlay"] = "SPIELEN";
dictionaryVar["de-de"]["levelMapScreenTotalScore"] = "Gesamtpunkte";
dictionaryVar["de-de"]["levelEndScreenTitle_level"] = "Level <VALUE>";
dictionaryVar["de-de"]["levelEndScreenTitle_difficulty"] = "Sehr gut!";
dictionaryVar["de-de"]["levelEndScreenTitle_endless"] = "Stufe <VALUE>";
dictionaryVar["de-de"]["levelEndScreenTotalScore"] = "Gesamtpunkte";
dictionaryVar["de-de"]["levelEndScreenSubTitle_levelFailed"] = "Level nicht geschafft";
dictionaryVar["de-de"]["levelEndScreenTimeLeft"] = "Restzeit";
dictionaryVar["de-de"]["levelEndScreenTimeBonus"] = "Zeitbonus";
dictionaryVar["de-de"]["levelEndScreenHighScore"] = "Highscore";
dictionaryVar["de-de"]["optionsStartScreen"] = "Hauptmenü";
dictionaryVar["de-de"]["optionsQuit"] = "Beenden";
dictionaryVar["de-de"]["optionsResume"] = "Weiterspielen";
dictionaryVar["de-de"]["optionsTutorial"] = "So wird gespielt";
dictionaryVar["de-de"]["optionsHighScore"] = "Highscores";
dictionaryVar["de-de"]["optionsMoreGames"] = "Weitere Spiele";
dictionaryVar["de-de"]["optionsDifficulty_easy"] = "Einfach";
dictionaryVar["de-de"]["optionsDifficulty_medium"] = "Mittel";
dictionaryVar["de-de"]["optionsDifficulty_hard"] = "Schwer";
dictionaryVar["de-de"]["optionsMusic_on"] = "EIN";
dictionaryVar["de-de"]["optionsMusic_off"] = "AUS";
dictionaryVar["de-de"]["optionsSFX_on"] = "EIN";
dictionaryVar["de-de"]["optionsSFX_off"] = "AUS";
dictionaryVar["de-de"]["optionsLang_en-us"] = "Englisch (US)";
dictionaryVar["de-de"]["optionsLang_en-gb"] = "Englisch (GB)";
dictionaryVar["de-de"]["optionsLang_nl-nl"] = "Holländisch";
dictionaryVar["de-de"]["gameEndScreenTitle"] = "Glückwunsch!\nDu hast das Spiel abgeschlossen.";
dictionaryVar["de-de"]["gameEndScreenBtnText"] = "Weiter";
dictionaryVar["de-de"]["optionsTitle"] = "Einstellungen";
dictionaryVar["de-de"]["optionsQuitConfirmationText"] = "Achtung!\n\nWenn du jetzt aufhörst, verlierst du alle in diesem Level gemachten Fortschritte. Willst du wirklich aufhören?";
dictionaryVar["de-de"]["optionsQuitConfirmBtn_No"] = "NEIN";
dictionaryVar["de-de"]["optionsQuitConfirmBtn_Yes"] = "Ja, ich bin mir sicher";
dictionaryVar["de-de"]["levelMapScreenTitle"] = "Wähle ein Level";
dictionaryVar["de-de"]["optionsRestartConfirmationText"] = "Achtung!\n\nWenn du jetzt neu startest, verlierst du alle in diesem Level gemachten Fortschritte. Willst du wirklich neu starten?";
dictionaryVar["de-de"]["optionsRestart"] = "Neustart";
dictionaryVar["de-de"]["optionsSFXBig_on"] = "Sound EIN";
dictionaryVar["de-de"]["optionsSFXBig_off"] = "Sound AUS";
dictionaryVar["de-de"]["optionsAbout_title"] = "Über";
dictionaryVar["de-de"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["de-de"]["optionsAbout_backBtn"] = "Zurück";
dictionaryVar["de-de"]["optionsAbout_version"] = "Version:";
dictionaryVar["de-de"]["optionsAbout"] = "Über";
dictionaryVar["de-de"]["levelEndScreenMedal"] = "VERBESSERT!";
dictionaryVar["de-de"]["startScreenQuestionaire"] = "Deine Meinung zählt!";
dictionaryVar["de-de"]["levelMapScreenWorld_0"] = "Wähle ein Level";
dictionaryVar["de-de"]["startScreenByTinglyGames"] = "von: Tingly Games";
dictionaryVar["de-de"]["optionsLang_de-de"] = "Deutsch";
dictionaryVar["de-de"]["optionsLang_tr-tr"] = "Türkisch";
dictionaryVar["de-de"]["optionsAbout_header"] = "Entwickelt von:";
dictionaryVar["de-de"]["levelEndScreenViewHighscoreBtn"] = "Punktzahlen ansehen";
dictionaryVar["de-de"]["levelEndScreenSubmitHighscoreBtn"] = "Punktzahl senden";
dictionaryVar["de-de"]["challengeStartScreenTitle_challengee_friend"] = "Dein Gegner:";
dictionaryVar["de-de"]["challengeStartTextScore"] = "Punktzahl von <NAME>:";
dictionaryVar["de-de"]["challengeStartTextTime"] = "Zeit von <NAME>:";
dictionaryVar["de-de"]["challengeStartScreenToWin"] = "Einsatz:";
dictionaryVar["de-de"]["challengeEndScreenWinnings"] = "Du hast <AMOUNT> Fairmünzen gewonnen!";
dictionaryVar["de-de"]["challengeEndScreenOutcomeMessage_WON"] = "Du hast die Partie gewonnen!";
dictionaryVar["de-de"]["challengeEndScreenOutcomeMessage_LOST"] = "Leider hat Dein Gegner die Partie gewonnen.";
dictionaryVar["de-de"]["challengeEndScreenOutcomeMessage_TIED"] = "Gleichstand!";
dictionaryVar["de-de"]["challengeCancelConfirmText"] = "Willst Du Deine Wette wirklich zurückziehen? Dein Wetteinsatz wird Dir zurückgegeben minus die Einsatzgebühr.";
dictionaryVar["de-de"]["challengeCancelConfirmBtn_yes"] = "Ja";
dictionaryVar["de-de"]["challengeCancelConfirmBtn_no"] = "Nein";
dictionaryVar["de-de"]["challengeEndScreensBtn_submit"] = "Herausfordern";
dictionaryVar["de-de"]["challengeEndScreenBtn_cancel"] = "Zurückziehen";
dictionaryVar["de-de"]["challengeEndScreenName_you"] = "Du";
dictionaryVar["de-de"]["challengeEndScreenChallengeSend_error"] = "Leider ist ein Fehler aufgetreten. Probiere es bitte nochmal später.";
dictionaryVar["de-de"]["challengeEndScreenChallengeSend_success"] = "Herausforderung verschickt!";
dictionaryVar["de-de"]["challengeCancelMessage_error"] = "Leider ist ein Fehler aufgetreten. Probiere es bitte nochmal später.";
dictionaryVar["de-de"]["challengeCancelMessage_success"] = "Du hast die Wette erfolgreich zurückgezogen.";
dictionaryVar["de-de"]["challengeEndScreenScoreSend_error"] = "Leider ist ein Fehler aufgetreten. Probiere es bitte nochmal später.";
dictionaryVar["de-de"]["challengeStartScreenTitle_challengee_stranger"] = "Dein Gegner wird:";
dictionaryVar["de-de"]["challengeStartScreenTitle_challenger_friend"] = "Du hast den folgenden Spieler herausgefordert:";
dictionaryVar["de-de"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["de-de"]["challengeStartTextTime_challenger"] = "Spiel um die niedrigste Zeit!";
dictionaryVar["de-de"]["challengeStartTextScore_challenger"] = "Spiel um die hochste Punktzahl!";
dictionaryVar["de-de"]["challengeForfeitConfirmText"] = "Willst du Die Partie wirklich aufgeben?";
dictionaryVar["de-de"]["challengeForfeitConfirmBtn_yes"] = "Ja";
dictionaryVar["de-de"]["challengeForfeitConfirmBtn_no"] = "Nein";
dictionaryVar["de-de"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["de-de"]["challengeForfeitMessage_error"] = "Leider ist ein Fehler aufgetreten. Probiere es bitte nochmal später.";
dictionaryVar["de-de"]["optionsChallengeForfeit"] = "Aufgeben";
dictionaryVar["de-de"]["optionsChallengeCancel"] = "Zurückziehen";
dictionaryVar["de-de"]["challengeLoadingError_notValid"] = "Leider ist diese Partie nicht mehr aktuel.";
dictionaryVar["de-de"]["challengeLoadingError_notStarted"] = "Leider ist ein Fehler aufgetreten. Es konnte keiner Verbindung zum Server hergestellt werden. Versuche es bitte nochmal später.";
dictionaryVar["de-de"]["levelEndScreenHighScore_time"] = "Bestzeit:";
dictionaryVar["de-de"]["levelEndScreenTotalScore_time"] = "Gesamtzeit:";
dictionaryVar["de-de"]["optionsLang_fr-fr"] = "Französisch";
dictionaryVar["de-de"]["optionsLang_ko-kr"] = "Koreanisch";
dictionaryVar["de-de"]["optionsLang_ar-eg"] = "Arabisch";
dictionaryVar["de-de"]["optionsLang_es-es"] = "Spanisch";
dictionaryVar["de-de"]["optionsLang_pt-br"] = "Portugiesisch (Brasilien)";
dictionaryVar["de-de"]["optionsLang_ru-ru"] = "Russisch";
dictionaryVar["de-de"]["optionsExit"] = "Verlassen";
dictionaryVar["de-de"]["levelEndScreenTotalScore_number"] = "Gesamtpunktzahl:";
dictionaryVar["de-de"]["levelEndScreenHighScore_number"] = "Highscore:";
dictionaryVar["de-de"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> hat 72 Stunden um die Wette anzunehmen oder abzulehnen. Sollte <NAME> nicht reagieren oder ablehnen werden Dir Dein Wetteinsatz und die Gebühr zurückerstattet.";
dictionaryVar["de-de"]["challengeEndScreenChallengeSend_submessage_stranger"] = "Als niemanden Deine Herausforderung innerhalb von 72 Stunden annimmt, werden Dir Deinen Wetteinsatz Einsatzgebühr zurückerstattet.";
dictionaryVar["de-de"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["de-de"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["de-de"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["fr-fr"] = dictionaryVar["fr-fr"] || {};
dictionaryVar["fr-fr"]["loadingScreenLoading"] = "Chargement...";
dictionaryVar["fr-fr"]["startScreenPlay"] = "JOUER";
dictionaryVar["fr-fr"]["levelMapScreenTotalScore"] = "Score total";
dictionaryVar["fr-fr"]["levelEndScreenTitle_level"] = "Niveau <VALUE>";
dictionaryVar["fr-fr"]["levelEndScreenTitle_difficulty"] = "Bien joué !";
dictionaryVar["fr-fr"]["levelEndScreenTitle_endless"] = "Scène <VALUE>";
dictionaryVar["fr-fr"]["levelEndScreenTotalScore"] = "Score total";
dictionaryVar["fr-fr"]["levelEndScreenSubTitle_levelFailed"] = "Échec du niveau";
dictionaryVar["fr-fr"]["levelEndScreenTimeLeft"] = "Temps restant";
dictionaryVar["fr-fr"]["levelEndScreenTimeBonus"] = "Bonus de temps";
dictionaryVar["fr-fr"]["levelEndScreenHighScore"] = "Meilleur score";
dictionaryVar["fr-fr"]["optionsStartScreen"] = "Menu principal";
dictionaryVar["fr-fr"]["optionsQuit"] = "Quitter";
dictionaryVar["fr-fr"]["optionsResume"] = "Reprendre";
dictionaryVar["fr-fr"]["optionsTutorial"] = "Comment jouer";
dictionaryVar["fr-fr"]["optionsHighScore"] = "Meilleurs scores";
dictionaryVar["fr-fr"]["optionsMoreGames"] = "Plus de jeux";
dictionaryVar["fr-fr"]["optionsDifficulty_easy"] = "Facile";
dictionaryVar["fr-fr"]["optionsDifficulty_medium"] = "Moyen";
dictionaryVar["fr-fr"]["optionsDifficulty_hard"] = "Difficile";
dictionaryVar["fr-fr"]["optionsMusic_on"] = "Avec";
dictionaryVar["fr-fr"]["optionsMusic_off"] = "Sans";
dictionaryVar["fr-fr"]["optionsSFX_on"] = "Avec";
dictionaryVar["fr-fr"]["optionsSFX_off"] = "Sans";
dictionaryVar["fr-fr"]["optionsLang_en-us"] = "Anglais (US)";
dictionaryVar["fr-fr"]["optionsLang_en-gb"] = "Anglais (UK)";
dictionaryVar["fr-fr"]["optionsLang_nl-nl"] = "Néerlandais";
dictionaryVar["fr-fr"]["gameEndScreenTitle"] = "Félicitations !\nVous avez terminé le jeu.";
dictionaryVar["fr-fr"]["gameEndScreenBtnText"] = "Continuer";
dictionaryVar["fr-fr"]["optionsTitle"] = "Paramètres";
dictionaryVar["fr-fr"]["optionsQuitConfirmationText"] = "Attention !\n\nEn quittant maintenant, vous perdrez votre progression pour le niveau en cours. Quitter quand même ?";
dictionaryVar["fr-fr"]["optionsQuitConfirmBtn_No"] = "Non";
dictionaryVar["fr-fr"]["optionsQuitConfirmBtn_Yes"] = "Oui";
dictionaryVar["fr-fr"]["levelMapScreenTitle"] = "Choisir un niveau";
dictionaryVar["fr-fr"]["optionsRestartConfirmationText"] = "Attention !\n\nEn recommençant maintenant, vous perdrez votre progression pour le niveau en cours. Recommencer quand même ?";
dictionaryVar["fr-fr"]["optionsRestart"] = "Recommencer";
dictionaryVar["fr-fr"]["optionsSFXBig_on"] = "Avec son";
dictionaryVar["fr-fr"]["optionsSFXBig_off"] = "Sans son";
dictionaryVar["fr-fr"]["optionsAbout_title"] = "À propos";
dictionaryVar["fr-fr"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["fr-fr"]["optionsAbout_backBtn"] = "Retour";
dictionaryVar["fr-fr"]["optionsAbout_version"] = "Version :";
dictionaryVar["fr-fr"]["optionsAbout"] = "À propos";
dictionaryVar["fr-fr"]["levelEndScreenMedal"] = "RECORD BATTU !";
dictionaryVar["fr-fr"]["startScreenQuestionaire"] = "Un avis sur le jeu ?";
dictionaryVar["fr-fr"]["levelMapScreenWorld_0"] = "Choisir un niveau";
dictionaryVar["fr-fr"]["startScreenByTinglyGames"] = "Un jeu Tingly Games";
dictionaryVar["fr-fr"]["optionsLang_de-de"] = "Allemand";
dictionaryVar["fr-fr"]["optionsLang_tr-tr"] = "Turc";
dictionaryVar["fr-fr"]["optionsAbout_header"] = "Développé par :";
dictionaryVar["fr-fr"]["levelEndScreenViewHighscoreBtn"] = "Voir les scores";
dictionaryVar["fr-fr"]["levelEndScreenSubmitHighscoreBtn"] = "Publier un score";
dictionaryVar["fr-fr"]["challengeStartScreenTitle_challengee_friend"] = "Votre adversaire :";
dictionaryVar["fr-fr"]["challengeStartTextScore"] = "Son score :";
dictionaryVar["fr-fr"]["challengeStartTextTime"] = "Son temps :";
dictionaryVar["fr-fr"]["challengeStartScreenToWin"] = "À gagner :";
dictionaryVar["fr-fr"]["challengeEndScreenWinnings"] = "Vous avez gagné <AMOUNT> fairpoints.";
dictionaryVar["fr-fr"]["challengeEndScreenOutcomeMessage_WON"] = "Vainqueur !";
dictionaryVar["fr-fr"]["challengeEndScreenOutcomeMessage_LOST"] = "Zut !";
dictionaryVar["fr-fr"]["challengeEndScreenOutcomeMessage_TIED"] = "Ex-aequo !";
dictionaryVar["fr-fr"]["challengeCancelConfirmText"] = "Si vous annulez, on vous remboursera le montant du pari moins les frais de pari. Voulez-vous continuer ? ";
dictionaryVar["fr-fr"]["challengeCancelConfirmBtn_yes"] = "Oui";
dictionaryVar["fr-fr"]["challengeCancelConfirmBtn_no"] = "Non";
dictionaryVar["fr-fr"]["challengeEndScreensBtn_submit"] = "Lancer le défi";
dictionaryVar["fr-fr"]["challengeEndScreenBtn_cancel"] = "Annuler le défi";
dictionaryVar["fr-fr"]["challengeEndScreenName_you"] = "Moi";
dictionaryVar["fr-fr"]["challengeEndScreenChallengeSend_error"] = "Une erreur est survenue. Veuillez réessayer ultérieurement.";
dictionaryVar["fr-fr"]["challengeEndScreenChallengeSend_success"] = "Défi lancé.";
dictionaryVar["fr-fr"]["challengeCancelMessage_error"] = "Une erreur est survenue. Veuillez réessayer ultérieurement.";
dictionaryVar["fr-fr"]["challengeCancelMessage_success"] = "Défi annulé.";
dictionaryVar["fr-fr"]["challengeEndScreenScoreSend_error"] = "Une erreur est survenue. Veuillez réessayer ultérieurement.";
dictionaryVar["fr-fr"]["challengeStartScreenTitle_challengee_stranger"] = "Votre adversaire :";
dictionaryVar["fr-fr"]["challengeStartScreenTitle_challenger_friend"] = "Votre adversaire :";
dictionaryVar["fr-fr"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["fr-fr"]["challengeStartTextTime_challenger"] = "Finissez le plus vite possible !";
dictionaryVar["fr-fr"]["challengeStartTextScore_challenger"] = "Essayez d’atteindre le plus haut score !";
dictionaryVar["fr-fr"]["challengeForfeitConfirmText"] = "Voulez-vous vraiment abandonner la partie ?";
dictionaryVar["fr-fr"]["challengeForfeitConfirmBtn_yes"] = "Oui";
dictionaryVar["fr-fr"]["challengeForfeitConfirmBtn_no"] = "Non";
dictionaryVar["fr-fr"]["challengeForfeitMessage_success"] = "Vous avez abandonné.";
dictionaryVar["fr-fr"]["challengeForfeitMessage_error"] = "Une erreur est survenue. Veuillez réessayer ultérieurement.";
dictionaryVar["fr-fr"]["optionsChallengeForfeit"] = "Abandonner";
dictionaryVar["fr-fr"]["optionsChallengeCancel"] = "Annuler";
dictionaryVar["fr-fr"]["challengeLoadingError_notValid"] = "Désolé, cette partie n'existe plus.";
dictionaryVar["fr-fr"]["challengeLoadingError_notStarted"] = "Une erreur de connexion est survenue. Veuillez réessayer ultérieurement.";
dictionaryVar["fr-fr"]["levelEndScreenHighScore_time"] = "Meilleur temps :";
dictionaryVar["fr-fr"]["levelEndScreenTotalScore_time"] = "Temps total :";
dictionaryVar["fr-fr"]["optionsLang_fr-fr"] = "Français";
dictionaryVar["fr-fr"]["optionsLang_ko-kr"] = "Coréen";
dictionaryVar["fr-fr"]["optionsLang_ar-eg"] = "Arabe";
dictionaryVar["fr-fr"]["optionsLang_es-es"] = "Espagnol";
dictionaryVar["fr-fr"]["optionsLang_pt-br"] = "Portugais - Brésilien";
dictionaryVar["fr-fr"]["optionsLang_ru-ru"] = "Russe";
dictionaryVar["fr-fr"]["optionsExit"] = "Quitter";
dictionaryVar["fr-fr"]["levelEndScreenTotalScore_number"] = "Score total :";
dictionaryVar["fr-fr"]["levelEndScreenHighScore_number"] = "Meilleur score :";
dictionaryVar["fr-fr"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> a 72 heures pour accepter votre défi. Si <NAME> refuse ou n’accepte pas dans ce délai vous serez remboursé le montant de votre pari et les frais de pari.";
dictionaryVar["fr-fr"]["challengeEndScreenChallengeSend_submessage_stranger"] = "Si personne n’accepte votre pari d’ici 72 heures, on vous remboursera le montant du pari y compris les frais.";
dictionaryVar["fr-fr"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["fr-fr"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["fr-fr"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["pt-br"] = dictionaryVar["pt-br"] || {};
dictionaryVar["pt-br"]["loadingScreenLoading"] = "Carregando...";
dictionaryVar["pt-br"]["startScreenPlay"] = "JOGAR";
dictionaryVar["pt-br"]["levelMapScreenTotalScore"] = "Pontuação";
dictionaryVar["pt-br"]["levelEndScreenTitle_level"] = "Nível <VALUE>";
dictionaryVar["pt-br"]["levelEndScreenTitle_difficulty"] = "Muito bem!";
dictionaryVar["pt-br"]["levelEndScreenTitle_endless"] = "Fase <VALUE>";
dictionaryVar["pt-br"]["levelEndScreenTotalScore"] = "Pontuação";
dictionaryVar["pt-br"]["levelEndScreenSubTitle_levelFailed"] = "Tente novamente";
dictionaryVar["pt-br"]["levelEndScreenTimeLeft"] = "Tempo restante";
dictionaryVar["pt-br"]["levelEndScreenTimeBonus"] = "Bônus de tempo";
dictionaryVar["pt-br"]["levelEndScreenHighScore"] = "Recorde";
dictionaryVar["pt-br"]["optionsStartScreen"] = "Menu principal";
dictionaryVar["pt-br"]["optionsQuit"] = "Sair";
dictionaryVar["pt-br"]["optionsResume"] = "Continuar";
dictionaryVar["pt-br"]["optionsTutorial"] = "Como jogar";
dictionaryVar["pt-br"]["optionsHighScore"] = "Recordes";
dictionaryVar["pt-br"]["optionsMoreGames"] = "Mais jogos";
dictionaryVar["pt-br"]["optionsDifficulty_easy"] = "Fácil";
dictionaryVar["pt-br"]["optionsDifficulty_medium"] = "Médio";
dictionaryVar["pt-br"]["optionsDifficulty_hard"] = "Difícil";
dictionaryVar["pt-br"]["optionsMusic_on"] = "Sim";
dictionaryVar["pt-br"]["optionsMusic_off"] = "Não";
dictionaryVar["pt-br"]["optionsSFX_on"] = "Sim";
dictionaryVar["pt-br"]["optionsSFX_off"] = "Não";
dictionaryVar["pt-br"]["optionsLang_en-us"] = "Inglês (EUA)";
dictionaryVar["pt-br"]["optionsLang_en-gb"] = "Inglês (GB)";
dictionaryVar["pt-br"]["optionsLang_nl-nl"] = "Holandês";
dictionaryVar["pt-br"]["gameEndScreenTitle"] = "Parabéns!\nVocê concluiu o jogo.";
dictionaryVar["pt-br"]["gameEndScreenBtnText"] = "Continuar";
dictionaryVar["pt-br"]["optionsTitle"] = "Configurações";
dictionaryVar["pt-br"]["optionsQuitConfirmationText"] = "Atenção!\n\nSe você sair agora, perderá todo progresso realizado neste nível. Deseja mesmo sair?";
dictionaryVar["pt-br"]["optionsQuitConfirmBtn_No"] = "Não";
dictionaryVar["pt-br"]["optionsQuitConfirmBtn_Yes"] = "Sim, tenho certeza.";
dictionaryVar["pt-br"]["levelMapScreenTitle"] = "Selecione um nível";
dictionaryVar["pt-br"]["optionsRestartConfirmationText"] = "Atenção!\n\nSe você reiniciar agora, perderá todo progresso realizado neste nível. Deseja mesmo reiniciar?";
dictionaryVar["pt-br"]["optionsRestart"] = "Reiniciar";
dictionaryVar["pt-br"]["optionsSFXBig_on"] = "Com som";
dictionaryVar["pt-br"]["optionsSFXBig_off"] = "Sem som";
dictionaryVar["pt-br"]["optionsAbout_title"] = "Sobre";
dictionaryVar["pt-br"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["pt-br"]["optionsAbout_backBtn"] = "Voltar";
dictionaryVar["pt-br"]["optionsAbout_version"] = "versão:";
dictionaryVar["pt-br"]["optionsAbout"] = "Sobre";
dictionaryVar["pt-br"]["levelEndScreenMedal"] = "MELHOROU!";
dictionaryVar["pt-br"]["startScreenQuestionaire"] = "O que você achou?";
dictionaryVar["pt-br"]["levelMapScreenWorld_0"] = "Selecione um nível";
dictionaryVar["pt-br"]["startScreenByTinglyGames"] = "da: Tingly Games";
dictionaryVar["pt-br"]["optionsLang_de-de"] = "Alemão";
dictionaryVar["pt-br"]["optionsLang_tr-tr"] = "Turco";
dictionaryVar["pt-br"]["optionsAbout_header"] = "Desenvolvido por:";
dictionaryVar["pt-br"]["levelEndScreenViewHighscoreBtn"] = "Ver pontuações";
dictionaryVar["pt-br"]["levelEndScreenSubmitHighscoreBtn"] = "Enviar recorde";
dictionaryVar["pt-br"]["challengeStartScreenTitle_challengee_friend"] = "You have been challenged by:";
dictionaryVar["pt-br"]["challengeStartTextScore"] = "<NAME>'s score:";
dictionaryVar["pt-br"]["challengeStartTextTime"] = "<NAME>'s time:";
dictionaryVar["pt-br"]["challengeStartScreenToWin"] = "Amount to win:";
dictionaryVar["pt-br"]["challengeEndScreenWinnings"] = "You have won <AMOUNT> fairpoints";
dictionaryVar["pt-br"]["challengeEndScreenOutcomeMessage_WON"] = "You have won the challenge!";
dictionaryVar["pt-br"]["challengeEndScreenOutcomeMessage_LOST"] = "You have lost the challenge.";
dictionaryVar["pt-br"]["challengeEndScreenOutcomeMessage_TIED"] = "You tied.";
dictionaryVar["pt-br"]["challengeCancelConfirmText"] = "You are about to cancel the challenge. Your wager will be returned minus the challenge fee. Are you sure you want to cancel the challenge?";
dictionaryVar["pt-br"]["challengeCancelConfirmBtn_yes"] = "Yes";
dictionaryVar["pt-br"]["challengeCancelConfirmBtn_no"] = "No";
dictionaryVar["pt-br"]["challengeEndScreensBtn_submit"] = "Submit challenge";
dictionaryVar["pt-br"]["challengeEndScreenBtn_cancel"] = "Cancel challenge";
dictionaryVar["pt-br"]["challengeEndScreenName_you"] = "You";
dictionaryVar["pt-br"]["challengeEndScreenChallengeSend_error"] = "An error occured while submitting the challenge. Please try again later.";
dictionaryVar["pt-br"]["challengeEndScreenChallengeSend_success"] = "Your challenge has been sent!";
dictionaryVar["pt-br"]["challengeCancelMessage_error"] = "An error occured while cancelling your challenge. Please try again later.";
dictionaryVar["pt-br"]["challengeCancelMessage_success"] = "Your challenge has been cancelled.";
dictionaryVar["pt-br"]["challengeEndScreenScoreSend_error"] = "An error occured while communicating with the server. Please try again later.";
dictionaryVar["pt-br"]["challengeStartScreenTitle_challengee_stranger"] = "You have been matched with:";
dictionaryVar["pt-br"]["challengeStartScreenTitle_challenger_friend"] = "You are challenging:";
dictionaryVar["pt-br"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["pt-br"]["challengeStartTextTime_challenger"] = "Play the game and set a time.";
dictionaryVar["pt-br"]["challengeStartTextScore_challenger"] = "Play the game and set a score.";
dictionaryVar["pt-br"]["challengeForfeitConfirmText"] = "You are about to forfeit the challenge. Are you sure you want to proceed?";
dictionaryVar["pt-br"]["challengeForfeitConfirmBtn_yes"] = "Yes";
dictionaryVar["pt-br"]["challengeForfeitConfirmBtn_no"] = "No";
dictionaryVar["pt-br"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["pt-br"]["challengeForfeitMessage_error"] = "An error occured while forfeiting the challenge. Please try again later.";
dictionaryVar["pt-br"]["optionsChallengeForfeit"] = "Desistir";
dictionaryVar["pt-br"]["optionsChallengeCancel"] = "Sair do Jogo";
dictionaryVar["pt-br"]["challengeLoadingError_notValid"] = "Desculpe, este desafio não é mais válido.";
dictionaryVar["pt-br"]["challengeLoadingError_notStarted"] = "Impossível conectar ao servidor. Por favor, tente novamente mais tarde.";
dictionaryVar["pt-br"]["levelEndScreenHighScore_time"] = "Tempo recorde:";
dictionaryVar["pt-br"]["levelEndScreenTotalScore_time"] = "Tempo total:";
dictionaryVar["pt-br"]["optionsLang_fr-fr"] = "Francês";
dictionaryVar["pt-br"]["optionsLang_ko-kr"] = "Coreano";
dictionaryVar["pt-br"]["optionsLang_ar-eg"] = "Árabe";
dictionaryVar["pt-br"]["optionsLang_es-es"] = "Espanhol";
dictionaryVar["pt-br"]["optionsLang_pt-br"] = "Português do Brasil";
dictionaryVar["pt-br"]["optionsLang_ru-ru"] = "Russo";
dictionaryVar["pt-br"]["optionsExit"] = "Saída";
dictionaryVar["pt-br"]["levelEndScreenTotalScore_number"] = "Pontuação total:";
dictionaryVar["pt-br"]["levelEndScreenHighScore_number"] = "Pontuação máxima:";
dictionaryVar["pt-br"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> has 72 hours to accept or decline your challenge. If <NAME> declines or doesn’t accept within 72 hours your wager and challenge fee will be reimbursed.";
dictionaryVar["pt-br"]["challengeEndScreenChallengeSend_submessage_stranger"] = "If no one accepts your challenge within 72 hours, the amount of your wager and the challenge fee will be returned to you.";
dictionaryVar["pt-br"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["pt-br"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["pt-br"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["es-es"] = dictionaryVar["es-es"] || {};
dictionaryVar["es-es"]["loadingScreenLoading"] = "Cargando...";
dictionaryVar["es-es"]["startScreenPlay"] = "JUGAR";
dictionaryVar["es-es"]["levelMapScreenTotalScore"] = "Punt. total";
dictionaryVar["es-es"]["levelEndScreenTitle_level"] = "Nivel <VALUE>";
dictionaryVar["es-es"]["levelEndScreenTitle_difficulty"] = "¡Muy bien!";
dictionaryVar["es-es"]["levelEndScreenTitle_endless"] = "Fase <VALUE>";
dictionaryVar["es-es"]["levelEndScreenTotalScore"] = "Punt. total";
dictionaryVar["es-es"]["levelEndScreenSubTitle_levelFailed"] = "Nivel fallido";
dictionaryVar["es-es"]["levelEndScreenTimeLeft"] = "Tiempo restante";
dictionaryVar["es-es"]["levelEndScreenTimeBonus"] = "Bonif. tiempo";
dictionaryVar["es-es"]["levelEndScreenHighScore"] = "Récord";
dictionaryVar["es-es"]["optionsStartScreen"] = "Menú principal";
dictionaryVar["es-es"]["optionsQuit"] = "Salir";
dictionaryVar["es-es"]["optionsResume"] = "Seguir";
dictionaryVar["es-es"]["optionsTutorial"] = "Cómo jugar";
dictionaryVar["es-es"]["optionsHighScore"] = "Récords";
dictionaryVar["es-es"]["optionsMoreGames"] = "Más juegos";
dictionaryVar["es-es"]["optionsDifficulty_easy"] = "Fácil";
dictionaryVar["es-es"]["optionsDifficulty_medium"] = "Normal";
dictionaryVar["es-es"]["optionsDifficulty_hard"] = "Difícil";
dictionaryVar["es-es"]["optionsMusic_on"] = "Sí";
dictionaryVar["es-es"]["optionsMusic_off"] = "No";
dictionaryVar["es-es"]["optionsSFX_on"] = "Sí";
dictionaryVar["es-es"]["optionsSFX_off"] = "No";
dictionaryVar["es-es"]["optionsLang_en-us"] = "Inglés (EE.UU.)";
dictionaryVar["es-es"]["optionsLang_en-gb"] = "Inglés (GB)";
dictionaryVar["es-es"]["optionsLang_nl-nl"] = "Neerlandés";
dictionaryVar["es-es"]["gameEndScreenTitle"] = "¡Enhorabuena!\nHas terminado el juego.";
dictionaryVar["es-es"]["gameEndScreenBtnText"] = "Continuar";
dictionaryVar["es-es"]["optionsTitle"] = "Ajustes";
dictionaryVar["es-es"]["optionsQuitConfirmationText"] = "¡Aviso!\n\nSi sales ahora, perderás el progreso que hayas realizado en el nivel. ¿Seguro que quieres salir?";
dictionaryVar["es-es"]["optionsQuitConfirmBtn_No"] = "No";
dictionaryVar["es-es"]["optionsQuitConfirmBtn_Yes"] = "Sí, seguro";
dictionaryVar["es-es"]["levelMapScreenTitle"] = "Elige un nivel";
dictionaryVar["es-es"]["optionsRestartConfirmationText"] = "¡Aviso!\n\nSi reinicias ahora, perderás el progreso que hayas realizado en el nivel. ¿Seguro que quieres reiniciar?";
dictionaryVar["es-es"]["optionsRestart"] = "Reiniciar";
dictionaryVar["es-es"]["optionsSFXBig_on"] = "Sonido sí";
dictionaryVar["es-es"]["optionsSFXBig_off"] = "Sonido no";
dictionaryVar["es-es"]["optionsAbout_title"] = "Acerca de";
dictionaryVar["es-es"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["es-es"]["optionsAbout_backBtn"] = "Atrás";
dictionaryVar["es-es"]["optionsAbout_version"] = "versión:";
dictionaryVar["es-es"]["optionsAbout"] = "Acerca de";
dictionaryVar["es-es"]["levelEndScreenMedal"] = "¡SUPERADO!";
dictionaryVar["es-es"]["startScreenQuestionaire"] = "¿Qué te parece?";
dictionaryVar["es-es"]["levelMapScreenWorld_0"] = "Elige un nivel";
dictionaryVar["es-es"]["startScreenByTinglyGames"] = "de: Tingly Games";
dictionaryVar["es-es"]["optionsLang_de-de"] = "Alemán";
dictionaryVar["es-es"]["optionsLang_tr-tr"] = "Turco";
dictionaryVar["es-es"]["optionsAbout_header"] = "Desarrollado por:";
dictionaryVar["es-es"]["levelEndScreenViewHighscoreBtn"] = "Ver puntuaciones";
dictionaryVar["es-es"]["levelEndScreenSubmitHighscoreBtn"] = "Enviar puntuación";
dictionaryVar["es-es"]["challengeStartScreenTitle_challengee_friend"] = "You have been challenged by:";
dictionaryVar["es-es"]["challengeStartTextScore"] = "<NAME>'s score:";
dictionaryVar["es-es"]["challengeStartTextTime"] = "<NAME>'s time:";
dictionaryVar["es-es"]["challengeStartScreenToWin"] = "Amount to win:";
dictionaryVar["es-es"]["challengeEndScreenWinnings"] = "You have won <AMOUNT> fairpoints";
dictionaryVar["es-es"]["challengeEndScreenOutcomeMessage_WON"] = "You have won the challenge!";
dictionaryVar["es-es"]["challengeEndScreenOutcomeMessage_LOST"] = "You have lost the challenge.";
dictionaryVar["es-es"]["challengeEndScreenOutcomeMessage_TIED"] = "You tied.";
dictionaryVar["es-es"]["challengeCancelConfirmText"] = "You are about to cancel the challenge. Your wager will be returned minus the challenge fee. Are you sure you want to cancel the challenge?";
dictionaryVar["es-es"]["challengeCancelConfirmBtn_yes"] = "Yes";
dictionaryVar["es-es"]["challengeCancelConfirmBtn_no"] = "No";
dictionaryVar["es-es"]["challengeEndScreensBtn_submit"] = "Submit challenge";
dictionaryVar["es-es"]["challengeEndScreenBtn_cancel"] = "Cancel challenge";
dictionaryVar["es-es"]["challengeEndScreenName_you"] = "You";
dictionaryVar["es-es"]["challengeEndScreenChallengeSend_error"] = "An error occured while submitting the challenge. Please try again later.";
dictionaryVar["es-es"]["challengeEndScreenChallengeSend_success"] = "Your challenge has been sent!";
dictionaryVar["es-es"]["challengeCancelMessage_error"] = "An error occured while cancelling your challenge. Please try again later.";
dictionaryVar["es-es"]["challengeCancelMessage_success"] = "Your challenge has been cancelled.";
dictionaryVar["es-es"]["challengeEndScreenScoreSend_error"] = "An error occured while communicating with the server. Please try again later.";
dictionaryVar["es-es"]["challengeStartScreenTitle_challengee_stranger"] = "You have been matched with:";
dictionaryVar["es-es"]["challengeStartScreenTitle_challenger_friend"] = "You are challenging:";
dictionaryVar["es-es"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["es-es"]["challengeStartTextTime_challenger"] = "Play the game and set a time.";
dictionaryVar["es-es"]["challengeStartTextScore_challenger"] = "Play the game and set a score.";
dictionaryVar["es-es"]["challengeForfeitConfirmText"] = "You are about to forfeit the challenge. Are you sure you want to proceed?";
dictionaryVar["es-es"]["challengeForfeitConfirmBtn_yes"] = "Yes";
dictionaryVar["es-es"]["challengeForfeitConfirmBtn_no"] = "No";
dictionaryVar["es-es"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["es-es"]["challengeForfeitMessage_error"] = "An error occured while forfeiting the challenge. Please try again later.";
dictionaryVar["es-es"]["optionsChallengeForfeit"] = "Rendirse";
dictionaryVar["es-es"]["optionsChallengeCancel"] = "Abandonar";
dictionaryVar["es-es"]["challengeLoadingError_notValid"] = "Lo sentimos, este reto ya no es válido.";
dictionaryVar["es-es"]["challengeLoadingError_notStarted"] = "Imposible conectar con el servidor. Inténtalo más tarde.";
dictionaryVar["es-es"]["levelEndScreenHighScore_time"] = "Mejor tiempo:";
dictionaryVar["es-es"]["levelEndScreenTotalScore_time"] = "Tiempo total:";
dictionaryVar["es-es"]["optionsLang_fr-fr"] = "Francés";
dictionaryVar["es-es"]["optionsLang_ko-kr"] = "Coreano";
dictionaryVar["es-es"]["optionsLang_ar-eg"] = "Árabe";
dictionaryVar["es-es"]["optionsLang_es-es"] = "Español";
dictionaryVar["es-es"]["optionsLang_pt-br"] = "Portugués brasileño";
dictionaryVar["es-es"]["optionsLang_ru-ru"] = "Ruso";
dictionaryVar["es-es"]["optionsExit"] = "Salir";
dictionaryVar["es-es"]["levelEndScreenTotalScore_number"] = "Puntos totales:";
dictionaryVar["es-es"]["levelEndScreenHighScore_number"] = "Mejor puntuación:";
dictionaryVar["es-es"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> has 72 hours to accept or decline your challenge. If <NAME> declines or doesn’t accept within 72 hours your wager and challenge fee will be reimbursed.";
dictionaryVar["es-es"]["challengeEndScreenChallengeSend_submessage_stranger"] = "If no one accepts your challenge within 72 hours, the amount of your wager and the challenge fee will be returned to you.";
dictionaryVar["es-es"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["es-es"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["es-es"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["tr-tr"] = dictionaryVar["tr-tr"] || {};
dictionaryVar["tr-tr"]["loadingScreenLoading"] = "Yükleniyor...";
dictionaryVar["tr-tr"]["startScreenPlay"] = "OYNA";
dictionaryVar["tr-tr"]["levelMapScreenTotalScore"] = "Toplam skor";
dictionaryVar["tr-tr"]["levelEndScreenTitle_level"] = "Seviye <VALUE>";
dictionaryVar["tr-tr"]["levelEndScreenTitle_difficulty"] = "Bravo!";
dictionaryVar["tr-tr"]["levelEndScreenTitle_endless"] = "Bölüm <VALUE>";
dictionaryVar["tr-tr"]["levelEndScreenTotalScore"] = "Toplam skor";
dictionaryVar["tr-tr"]["levelEndScreenSubTitle_levelFailed"] = "Seviye başarısız";
dictionaryVar["tr-tr"]["levelEndScreenTimeLeft"] = "Kalan Süre";
dictionaryVar["tr-tr"]["levelEndScreenTimeBonus"] = "Süre Bonusu";
dictionaryVar["tr-tr"]["levelEndScreenHighScore"] = "Yüksek skor";
dictionaryVar["tr-tr"]["optionsStartScreen"] = "Ana menü";
dictionaryVar["tr-tr"]["optionsQuit"] = "Çık";
dictionaryVar["tr-tr"]["optionsResume"] = "Devam et";
dictionaryVar["tr-tr"]["optionsTutorial"] = "Nasıl oynanır";
dictionaryVar["tr-tr"]["optionsHighScore"] = "Yüksek skorlar";
dictionaryVar["tr-tr"]["optionsMoreGames"] = "Daha Fazla Oyun";
dictionaryVar["tr-tr"]["optionsDifficulty_easy"] = "Kolay";
dictionaryVar["tr-tr"]["optionsDifficulty_medium"] = "Orta";
dictionaryVar["tr-tr"]["optionsDifficulty_hard"] = "Zorluk";
dictionaryVar["tr-tr"]["optionsMusic_on"] = "Açık";
dictionaryVar["tr-tr"]["optionsMusic_off"] = "Kapalı";
dictionaryVar["tr-tr"]["optionsSFX_on"] = "Açık";
dictionaryVar["tr-tr"]["optionsSFX_off"] = "Kapalı";
dictionaryVar["tr-tr"]["optionsLang_en-us"] = "İngilizce (US)";
dictionaryVar["tr-tr"]["optionsLang_en-gb"] = "İngilizce (GB)";
dictionaryVar["tr-tr"]["optionsLang_nl-nl"] = "Hollandaca";
dictionaryVar["tr-tr"]["gameEndScreenTitle"] = "Tebrikler!\nOyunu tamamladın.";
dictionaryVar["tr-tr"]["gameEndScreenBtnText"] = "Devam";
dictionaryVar["tr-tr"]["optionsTitle"] = "Ayarlar";
dictionaryVar["tr-tr"]["optionsQuitConfirmationText"] = "Dikkat!\nŞimdi çıkarsan bu seviyede yapılan tüm ilerleme kaybedilecek. Çıkmak istediğinizden emin misiniz?";
dictionaryVar["tr-tr"]["optionsQuitConfirmBtn_No"] = "Hayır";
dictionaryVar["tr-tr"]["optionsQuitConfirmBtn_Yes"] = "Evet, eminim";
dictionaryVar["tr-tr"]["levelMapScreenTitle"] = "Bir seviye seç";
dictionaryVar["tr-tr"]["optionsRestartConfirmationText"] = "Dikkat!\nŞimdi tekrar başlarsan bu seviyede yapılan tüm ilerleme kaybedilecek. Baştan başlamak istediğinden emin misin?";
dictionaryVar["tr-tr"]["optionsRestart"] = "Tekrar başlat";
dictionaryVar["tr-tr"]["optionsSFXBig_on"] = "Ses açık";
dictionaryVar["tr-tr"]["optionsSFXBig_off"] = "Ses kapalı";
dictionaryVar["tr-tr"]["optionsAbout_title"] = "Hakkında";
dictionaryVar["tr-tr"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["tr-tr"]["optionsAbout_backBtn"] = "Geri";
dictionaryVar["tr-tr"]["optionsAbout_version"] = "sürüm:";
dictionaryVar["tr-tr"]["optionsAbout"] = "Hakkında";
dictionaryVar["tr-tr"]["levelEndScreenMedal"] = "İYİLEŞTİ!";
dictionaryVar["tr-tr"]["startScreenQuestionaire"] = "Ne dersin?";
dictionaryVar["tr-tr"]["levelMapScreenWorld_0"] = "Bir seviye seç";
dictionaryVar["tr-tr"]["startScreenByTinglyGames"] = "tarafından: Tingly Games";
dictionaryVar["tr-tr"]["optionsLang_de-de"] = "Almanca";
dictionaryVar["tr-tr"]["optionsLang_tr-tr"] = "Türkçe";
dictionaryVar["tr-tr"]["optionsAbout_header"] = "Hazırlayan:";
dictionaryVar["tr-tr"]["levelEndScreenViewHighscoreBtn"] = "Puanları göster:";
dictionaryVar["tr-tr"]["levelEndScreenSubmitHighscoreBtn"] = "Puan gönder";
dictionaryVar["tr-tr"]["challengeStartScreenTitle_challengee_friend"] = "You have been challenged by:";
dictionaryVar["tr-tr"]["challengeStartTextScore"] = "<NAME>'s score:";
dictionaryVar["tr-tr"]["challengeStartTextTime"] = "<NAME>'s time:";
dictionaryVar["tr-tr"]["challengeStartScreenToWin"] = "Amount to win:";
dictionaryVar["tr-tr"]["challengeEndScreenWinnings"] = "You have won <AMOUNT> fairpoints";
dictionaryVar["tr-tr"]["challengeEndScreenOutcomeMessage_WON"] = "You have won the challenge!";
dictionaryVar["tr-tr"]["challengeEndScreenOutcomeMessage_LOST"] = "You have lost the challenge.";
dictionaryVar["tr-tr"]["challengeEndScreenOutcomeMessage_TIED"] = "You tied.";
dictionaryVar["tr-tr"]["challengeCancelConfirmText"] = "You are about to cancel the challenge. Your wager will be returned minus the challenge fee. Are you sure you want to cancel the challenge?";
dictionaryVar["tr-tr"]["challengeCancelConfirmBtn_yes"] = "Yes";
dictionaryVar["tr-tr"]["challengeCancelConfirmBtn_no"] = "No";
dictionaryVar["tr-tr"]["challengeEndScreensBtn_submit"] = "Submit challenge";
dictionaryVar["tr-tr"]["challengeEndScreenBtn_cancel"] = "Cancel challenge";
dictionaryVar["tr-tr"]["challengeEndScreenName_you"] = "You";
dictionaryVar["tr-tr"]["challengeEndScreenChallengeSend_error"] = "An error occured while submitting the challenge. Please try again later.";
dictionaryVar["tr-tr"]["challengeEndScreenChallengeSend_success"] = "Your challenge has been sent!";
dictionaryVar["tr-tr"]["challengeCancelMessage_error"] = "An error occured while cancelling your challenge. Please try again later.";
dictionaryVar["tr-tr"]["challengeCancelMessage_success"] = "Your challenge has been cancelled.";
dictionaryVar["tr-tr"]["challengeEndScreenScoreSend_error"] = "An error occured while communicating with the server. Please try again later.";
dictionaryVar["tr-tr"]["challengeStartScreenTitle_challengee_stranger"] = "You have been matched with:";
dictionaryVar["tr-tr"]["challengeStartScreenTitle_challenger_friend"] = "You are challenging:";
dictionaryVar["tr-tr"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["tr-tr"]["challengeStartTextTime_challenger"] = "Play the game and set a time.";
dictionaryVar["tr-tr"]["challengeStartTextScore_challenger"] = "Play the game and set a score.";
dictionaryVar["tr-tr"]["challengeForfeitConfirmText"] = "You are about to forfeit the challenge. Are you sure you want to proceed?";
dictionaryVar["tr-tr"]["challengeForfeitConfirmBtn_yes"] = "Yes";
dictionaryVar["tr-tr"]["challengeForfeitConfirmBtn_no"] = "No";
dictionaryVar["tr-tr"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["tr-tr"]["challengeForfeitMessage_error"] = "An error occured while forfeiting the challenge. Please try again later.";
dictionaryVar["tr-tr"]["optionsChallengeForfeit"] = "Vazgeç";
dictionaryVar["tr-tr"]["optionsChallengeCancel"] = "Çıkış";
dictionaryVar["tr-tr"]["challengeLoadingError_notValid"] = "Üzgünüz, bu zorluk artık geçerli değil.";
dictionaryVar["tr-tr"]["challengeLoadingError_notStarted"] = "Sunucuya bağlanılamıyor. Lütfen daha sonra tekrar deneyin.";
dictionaryVar["tr-tr"]["levelEndScreenHighScore_time"] = "En İyi Zaman:";
dictionaryVar["tr-tr"]["levelEndScreenTotalScore_time"] = "Toplam Zaman:";
dictionaryVar["tr-tr"]["optionsLang_fr-fr"] = "Fransızca";
dictionaryVar["tr-tr"]["optionsLang_ko-kr"] = "Korece";
dictionaryVar["tr-tr"]["optionsLang_ar-eg"] = "Arapça";
dictionaryVar["tr-tr"]["optionsLang_es-es"] = "İspanyolca";
dictionaryVar["tr-tr"]["optionsLang_pt-br"] = "Brezilya Portekizcesi";
dictionaryVar["tr-tr"]["optionsLang_ru-ru"] = "Rusça";
dictionaryVar["tr-tr"]["optionsExit"] = "Çıkış";
dictionaryVar["tr-tr"]["levelEndScreenTotalScore_number"] = "Toplam Puan:";
dictionaryVar["tr-tr"]["levelEndScreenHighScore_number"] = "Yüksek Puan:";
dictionaryVar["tr-tr"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> has 72 hours to accept or decline your challenge. If <NAME> declines or doesn’t accept within 72 hours your wager and challenge fee will be reimbursed.";
dictionaryVar["tr-tr"]["challengeEndScreenChallengeSend_submessage_stranger"] = "If no one accepts your challenge within 72 hours, the amount of your wager and the challenge fee will be returned to you.";
dictionaryVar["tr-tr"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["tr-tr"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["tr-tr"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["ru-ru"] = dictionaryVar["ru-ru"] || {};
dictionaryVar["ru-ru"]["loadingScreenLoading"] = "Загрузка...";
dictionaryVar["ru-ru"]["startScreenPlay"] = "ИГРАТЬ";
dictionaryVar["ru-ru"]["levelMapScreenTotalScore"] = "Общий счет";
dictionaryVar["ru-ru"]["levelEndScreenTitle_level"] = "Уровень <VALUE>";
dictionaryVar["ru-ru"]["levelEndScreenTitle_difficulty"] = "Хороший результат!";
dictionaryVar["ru-ru"]["levelEndScreenTitle_endless"] = "Этап <VALUE>";
dictionaryVar["ru-ru"]["levelEndScreenTotalScore"] = "Общий счет";
dictionaryVar["ru-ru"]["levelEndScreenSubTitle_levelFailed"] = "Уровень не пройден";
dictionaryVar["ru-ru"]["levelEndScreenTimeLeft"] = "Оставшееся время";
dictionaryVar["ru-ru"]["levelEndScreenTimeBonus"] = "Дополнительное время";
dictionaryVar["ru-ru"]["levelEndScreenHighScore"] = "Рекорд";
dictionaryVar["ru-ru"]["optionsStartScreen"] = "Главное меню";
dictionaryVar["ru-ru"]["optionsQuit"] = "Выйти";
dictionaryVar["ru-ru"]["optionsResume"] = "Продолжить";
dictionaryVar["ru-ru"]["optionsTutorial"] = "Как играть";
dictionaryVar["ru-ru"]["optionsHighScore"] = "Рекорды";
dictionaryVar["ru-ru"]["optionsMoreGames"] = "Больше игр";
dictionaryVar["ru-ru"]["optionsDifficulty_easy"] = "Легкий";
dictionaryVar["ru-ru"]["optionsDifficulty_medium"] = "Средний";
dictionaryVar["ru-ru"]["optionsDifficulty_hard"] = "Сложный";
dictionaryVar["ru-ru"]["optionsMusic_on"] = "Вкл.";
dictionaryVar["ru-ru"]["optionsMusic_off"] = "Выкл.";
dictionaryVar["ru-ru"]["optionsSFX_on"] = "Вкл.";
dictionaryVar["ru-ru"]["optionsSFX_off"] = "Выкл.";
dictionaryVar["ru-ru"]["optionsLang_en-us"] = "Английский (США)";
dictionaryVar["ru-ru"]["optionsLang_en-gb"] = "Английский (ВБ)";
dictionaryVar["ru-ru"]["optionsLang_nl-nl"] = "Нидерландский";
dictionaryVar["ru-ru"]["gameEndScreenTitle"] = "Поздравляем!\nВы прошли игру.";
dictionaryVar["ru-ru"]["gameEndScreenBtnText"] = "Продолжить";
dictionaryVar["ru-ru"]["optionsTitle"] = "Настройки";
dictionaryVar["ru-ru"]["optionsQuitConfirmationText"] = "Внимание!\n\nЕсли вы выйдете сейчас, уровень не будет засчитан. Вы уверены, что хотите выйти?";
dictionaryVar["ru-ru"]["optionsQuitConfirmBtn_No"] = "Нет";
dictionaryVar["ru-ru"]["optionsQuitConfirmBtn_Yes"] = "Да, выйти";
dictionaryVar["ru-ru"]["levelMapScreenTitle"] = "Выберите уровень";
dictionaryVar["ru-ru"]["optionsRestartConfirmationText"] = "Внимание!\n\nЕсли вы сейчас начнете игру заново, уровень не будет засчитан. Вы уверены, что хотите начать заново?";
dictionaryVar["ru-ru"]["optionsRestart"] = "Заново";
dictionaryVar["ru-ru"]["optionsSFXBig_on"] = "Звук вкл.";
dictionaryVar["ru-ru"]["optionsSFXBig_off"] = "Звук выкл.";
dictionaryVar["ru-ru"]["optionsAbout_title"] = "О программе";
dictionaryVar["ru-ru"]["optionsAbout_text"] = "© Cool Games\nwww.coolgames.com\n2016";
dictionaryVar["ru-ru"]["optionsAbout_backBtn"] = "Назад";
dictionaryVar["ru-ru"]["optionsAbout_version"] = "Версия:";
dictionaryVar["ru-ru"]["optionsAbout"] = "О программе";
dictionaryVar["ru-ru"]["levelEndScreenMedal"] = "НОВЫЙ РЕКОРД!";
dictionaryVar["ru-ru"]["startScreenQuestionaire"] = "Как вам игра?";
dictionaryVar["ru-ru"]["levelMapScreenWorld_0"] = "Выберите уровень";
dictionaryVar["ru-ru"]["startScreenByTinglyGames"] = "Разработчики: Tingly Games";
dictionaryVar["ru-ru"]["optionsLang_de-de"] = "Немецкий";
dictionaryVar["ru-ru"]["optionsLang_tr-tr"] = "Турецкий";
dictionaryVar["ru-ru"]["optionsAbout_header"] = "Developed by:";
dictionaryVar["ru-ru"]["levelEndScreenViewHighscoreBtn"] = "View scores";
dictionaryVar["ru-ru"]["levelEndScreenSubmitHighscoreBtn"] = "Submit score";
dictionaryVar["ru-ru"]["challengeStartScreenTitle_challengee_friend"] = "You have been challenged by:";
dictionaryVar["ru-ru"]["challengeStartTextScore"] = "<NAME>'s score:";
dictionaryVar["ru-ru"]["challengeStartTextTime"] = "<NAME>'s time:";
dictionaryVar["ru-ru"]["challengeStartScreenToWin"] = "Amount to win:";
dictionaryVar["ru-ru"]["challengeEndScreenWinnings"] = "You have won <AMOUNT> fairpoints";
dictionaryVar["ru-ru"]["challengeEndScreenOutcomeMessage_WON"] = "You have won the challenge!";
dictionaryVar["ru-ru"]["challengeEndScreenOutcomeMessage_LOST"] = "You have lost the challenge.";
dictionaryVar["ru-ru"]["challengeEndScreenOutcomeMessage_TIED"] = "You tied.";
dictionaryVar["ru-ru"]["challengeCancelConfirmText"] = "You are about to cancel the challenge. Your wager will be returned minus the challenge fee. Are you sure you want to cancel the challenge?";
dictionaryVar["ru-ru"]["challengeCancelConfirmBtn_yes"] = "Yes";
dictionaryVar["ru-ru"]["challengeCancelConfirmBtn_no"] = "No";
dictionaryVar["ru-ru"]["challengeEndScreensBtn_submit"] = "Submit challenge";
dictionaryVar["ru-ru"]["challengeEndScreenBtn_cancel"] = "Cancel challenge";
dictionaryVar["ru-ru"]["challengeEndScreenName_you"] = "You";
dictionaryVar["ru-ru"]["challengeEndScreenChallengeSend_error"] = "An error occured while submitting the challenge. Please try again later.";
dictionaryVar["ru-ru"]["challengeEndScreenChallengeSend_success"] = "Your challenge has been sent!";
dictionaryVar["ru-ru"]["challengeCancelMessage_error"] = "An error occured while cancelling your challenge. Please try again later.";
dictionaryVar["ru-ru"]["challengeCancelMessage_success"] = "Your challenge has been cancelled.";
dictionaryVar["ru-ru"]["challengeEndScreenScoreSend_error"] = "An error occured while communicating with the server. Please try again later.";
dictionaryVar["ru-ru"]["challengeStartScreenTitle_challengee_stranger"] = "You have been matched with:";
dictionaryVar["ru-ru"]["challengeStartScreenTitle_challenger_friend"] = "You are challenging:";
dictionaryVar["ru-ru"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["ru-ru"]["challengeStartTextTime_challenger"] = "Play the game and set a time.";
dictionaryVar["ru-ru"]["challengeStartTextScore_challenger"] = "Play the game and set a score.";
dictionaryVar["ru-ru"]["challengeForfeitConfirmText"] = "You are about to forfeit the challenge. Are you sure you want to proceed?";
dictionaryVar["ru-ru"]["challengeForfeitConfirmBtn_yes"] = "Yes";
dictionaryVar["ru-ru"]["challengeForfeitConfirmBtn_no"] = "No";
dictionaryVar["ru-ru"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["ru-ru"]["challengeForfeitMessage_error"] = "An error occured while forfeiting the challenge. Please try again later.";
dictionaryVar["ru-ru"]["optionsChallengeForfeit"] = "Forfeit";
dictionaryVar["ru-ru"]["optionsChallengeCancel"] = "Quit";
dictionaryVar["ru-ru"]["challengeLoadingError_notValid"] = "Sorry, this challenge is no longer valid.";
dictionaryVar["ru-ru"]["challengeLoadingError_notStarted"] = "Unable to connect to the server. Please try again later.";
dictionaryVar["ru-ru"]["levelEndScreenHighScore_time"] = "Best time:";
dictionaryVar["ru-ru"]["levelEndScreenTotalScore_time"] = "Total time:";
dictionaryVar["ru-ru"]["optionsLang_fr-fr"] = "Французский";
dictionaryVar["ru-ru"]["optionsLang_ko-kr"] = "Корейский";
dictionaryVar["ru-ru"]["optionsLang_ar-eg"] = "Арабский";
dictionaryVar["ru-ru"]["optionsLang_es-es"] = "Испанский";
dictionaryVar["ru-ru"]["optionsLang_pt-br"] = "Бразильский португальский";
dictionaryVar["ru-ru"]["optionsLang_ru-ru"] = "Русский";
dictionaryVar["ru-ru"]["optionsExit"] = "Exit";
dictionaryVar["ru-ru"]["levelEndScreenTotalScore_number"] = "Total score:";
dictionaryVar["ru-ru"]["levelEndScreenHighScore_number"] = "High score:";
dictionaryVar["ru-ru"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> has 72 hours to accept or decline your challenge. If <NAME> declines or doesn’t accept within 72 hours your wager and challenge fee will be reimbursed.";
dictionaryVar["ru-ru"]["challengeEndScreenChallengeSend_submessage_stranger"] = "If no one accepts your challenge within 72 hours, the amount of your wager and the challenge fee will be returned to you.";
dictionaryVar["ru-ru"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["ru-ru"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["ru-ru"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["ar-eg"] = dictionaryVar["ar-eg"] || {};
dictionaryVar["ar-eg"]["loadingScreenLoading"] = "يتم الآن التحميل...";
dictionaryVar["ar-eg"]["startScreenPlay"] = "تشغيل";
dictionaryVar["ar-eg"]["levelMapScreenTotalScore"] = "النتيجة الإجمالية";
dictionaryVar["ar-eg"]["levelEndScreenTitle_level"] = "المستوى <VALUE>";
dictionaryVar["ar-eg"]["levelEndScreenTitle_difficulty"] = "أحسنت!";
dictionaryVar["ar-eg"]["levelEndScreenTitle_endless"] = "المرحلة <VALUE>";
dictionaryVar["ar-eg"]["levelEndScreenTotalScore"] = "النتيجة الإجمالية";
dictionaryVar["ar-eg"]["levelEndScreenSubTitle_levelFailed"] = "لقد فشلت في اجتياز هذا المستوى";
dictionaryVar["ar-eg"]["levelEndScreenTimeLeft"] = "الوقت المتبقي";
dictionaryVar["ar-eg"]["levelEndScreenTimeBonus"] = "مكافأة الوقت";
dictionaryVar["ar-eg"]["levelEndScreenHighScore"] = "أعلى نتيجة";
dictionaryVar["ar-eg"]["optionsStartScreen"] = "القائمة الرئيسية";
dictionaryVar["ar-eg"]["optionsQuit"] = "الخروج من اللعبة";
dictionaryVar["ar-eg"]["optionsResume"] = "استئناف";
dictionaryVar["ar-eg"]["optionsTutorial"] = "طريقة اللعب";
dictionaryVar["ar-eg"]["optionsHighScore"] = "أعلى النتائج";
dictionaryVar["ar-eg"]["optionsMoreGames"] = "المزيد من الألعاب";
dictionaryVar["ar-eg"]["optionsDifficulty_easy"] = "سهل";
dictionaryVar["ar-eg"]["optionsDifficulty_medium"] = "متوسط";
dictionaryVar["ar-eg"]["optionsDifficulty_hard"] = "صعب";
dictionaryVar["ar-eg"]["optionsMusic_on"] = "تشغيل الموسيقى";
dictionaryVar["ar-eg"]["optionsMusic_off"] = "إيقاف الموسيقى";
dictionaryVar["ar-eg"]["optionsSFX_on"] = "تشغيل المؤثرات الصوتية";
dictionaryVar["ar-eg"]["optionsSFX_off"] = "إيقاف المؤثرات الصوتية";
dictionaryVar["ar-eg"]["optionsLang_en-us"] = "الإنجليزية (الولايات المتحدة)";
dictionaryVar["ar-eg"]["optionsLang_en-gb"] = "الإنجليزية (المملكة المتحدة)";
dictionaryVar["ar-eg"]["optionsLang_nl-nl"] = "الهولندية";
dictionaryVar["ar-eg"]["gameEndScreenTitle"] = "تهانينا!\nلقد أكملت اللعبة.";
dictionaryVar["ar-eg"]["gameEndScreenBtnText"] = "متابعة";
dictionaryVar["ar-eg"]["optionsTitle"] = "الإعدادات";
dictionaryVar["ar-eg"]["optionsQuitConfirmationText"] = "انتبه!n\n\إذا خرجت من اللعبة الآن، فستفقد كل التقدم الذي أحرزته خلال هذا المستوى. هل أنت متأكد من أنك تريد الخروج من اللعبة؟";
dictionaryVar["ar-eg"]["optionsQuitConfirmBtn_No"] = "لا";
dictionaryVar["ar-eg"]["optionsQuitConfirmBtn_Yes"] = "نعم، متأكد";
dictionaryVar["ar-eg"]["levelMapScreenTitle"] = "تحديد مستوى";
dictionaryVar["ar-eg"]["optionsRestartConfirmationText"] = "انتبه!\n\nإذا قمت بإعادة التشغيل الآن، فستفقد كل التقدم الذي أحرزته خلال هذا المستوى. هل أنت متأكد من أنك تريد إعادة التشغيل؟";
dictionaryVar["ar-eg"]["optionsRestart"] = "إعادة التشغيل";
dictionaryVar["ar-eg"]["optionsSFXBig_on"] = "تشغيل الصوت";
dictionaryVar["ar-eg"]["optionsSFXBig_off"] = "إيقاف الصوت";
dictionaryVar["ar-eg"]["optionsAbout_title"] = "حول";
dictionaryVar["ar-eg"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["ar-eg"]["optionsAbout_backBtn"] = "السابق";
dictionaryVar["ar-eg"]["optionsAbout_version"] = "الإصدار:";
dictionaryVar["ar-eg"]["optionsAbout"] = "حول";
dictionaryVar["ar-eg"]["levelEndScreenMedal"] = "لقد تحسّنت!";
dictionaryVar["ar-eg"]["startScreenQuestionaire"] = "ما رأيك؟";
dictionaryVar["ar-eg"]["levelMapScreenWorld_0"] = "تحديد مستوى";
dictionaryVar["ar-eg"]["startScreenByTinglyGames"] = "بواسطة: Tingly Games";
dictionaryVar["ar-eg"]["optionsLang_de-de"] = "الألمانية";
dictionaryVar["ar-eg"]["optionsLang_tr-tr"] = "التركية";
dictionaryVar["ar-eg"]["optionsAbout_header"] = "Developed by:";
dictionaryVar["ar-eg"]["levelEndScreenViewHighscoreBtn"] = "View scores";
dictionaryVar["ar-eg"]["levelEndScreenSubmitHighscoreBtn"] = "Submit score";
dictionaryVar["ar-eg"]["challengeStartScreenTitle_challengee_friend"] = "You have been challenged by:";
dictionaryVar["ar-eg"]["challengeStartTextScore"] = "<NAME>'s score:";
dictionaryVar["ar-eg"]["challengeStartTextTime"] = "<NAME>'s time:";
dictionaryVar["ar-eg"]["challengeStartScreenToWin"] = "Amount to win:";
dictionaryVar["ar-eg"]["challengeEndScreenWinnings"] = "You have won <AMOUNT> fairpoints";
dictionaryVar["ar-eg"]["challengeEndScreenOutcomeMessage_WON"] = "You have won the challenge!";
dictionaryVar["ar-eg"]["challengeEndScreenOutcomeMessage_LOST"] = "You have lost the challenge.";
dictionaryVar["ar-eg"]["challengeEndScreenOutcomeMessage_TIED"] = "You tied.";
dictionaryVar["ar-eg"]["challengeCancelConfirmText"] = "You are about to cancel the challenge. Your wager will be returned minus the challenge fee. Are you sure you want to cancel the challenge?";
dictionaryVar["ar-eg"]["challengeCancelConfirmBtn_yes"] = "Yes";
dictionaryVar["ar-eg"]["challengeCancelConfirmBtn_no"] = "No";
dictionaryVar["ar-eg"]["challengeEndScreensBtn_submit"] = "Submit challenge";
dictionaryVar["ar-eg"]["challengeEndScreenBtn_cancel"] = "Cancel challenge";
dictionaryVar["ar-eg"]["challengeEndScreenName_you"] = "You";
dictionaryVar["ar-eg"]["challengeEndScreenChallengeSend_error"] = "An error occured while submitting the challenge. Please try again later.";
dictionaryVar["ar-eg"]["challengeEndScreenChallengeSend_success"] = "Your challenge has been sent!";
dictionaryVar["ar-eg"]["challengeCancelMessage_error"] = "An error occured while cancelling your challenge. Please try again later.";
dictionaryVar["ar-eg"]["challengeCancelMessage_success"] = "Your challenge has been cancelled.";
dictionaryVar["ar-eg"]["challengeEndScreenScoreSend_error"] = "An error occured while communicating with the server. Please try again later.";
dictionaryVar["ar-eg"]["challengeStartScreenTitle_challengee_stranger"] = "You have been matched with:";
dictionaryVar["ar-eg"]["challengeStartScreenTitle_challenger_friend"] = "You are challenging:";
dictionaryVar["ar-eg"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["ar-eg"]["challengeStartTextTime_challenger"] = "Play the game and set a time.";
dictionaryVar["ar-eg"]["challengeStartTextScore_challenger"] = "Play the game and set a score.";
dictionaryVar["ar-eg"]["challengeForfeitConfirmText"] = "You are about to forfeit the challenge. Are you sure you want to proceed?";
dictionaryVar["ar-eg"]["challengeForfeitConfirmBtn_yes"] = "Yes";
dictionaryVar["ar-eg"]["challengeForfeitConfirmBtn_no"] = "No";
dictionaryVar["ar-eg"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["ar-eg"]["challengeForfeitMessage_error"] = "An error occured while forfeiting the challenge. Please try again later.";
dictionaryVar["ar-eg"]["optionsChallengeForfeit"] = "Forfeit";
dictionaryVar["ar-eg"]["optionsChallengeCancel"] = "Quit";
dictionaryVar["ar-eg"]["challengeLoadingError_notValid"] = "Sorry, this challenge is no longer valid.";
dictionaryVar["ar-eg"]["challengeLoadingError_notStarted"] = "Unable to connect to the server. Please try again later.";
dictionaryVar["ar-eg"]["levelEndScreenHighScore_time"] = "Best time:";
dictionaryVar["ar-eg"]["levelEndScreenTotalScore_time"] = "Total time:";
dictionaryVar["ar-eg"]["optionsLang_fr-fr"] = "الفرنسية";
dictionaryVar["ar-eg"]["optionsLang_ko-kr"] = "الكورية";
dictionaryVar["ar-eg"]["optionsLang_ar-eg"] = "العربية";
dictionaryVar["ar-eg"]["optionsLang_es-es"] = "الإسبانية";
dictionaryVar["ar-eg"]["optionsLang_pt-br"] = "البرازيلية - البرتغالية";
dictionaryVar["ar-eg"]["optionsLang_ru-ru"] = "الروسية";
dictionaryVar["ar-eg"]["optionsExit"] = "Exit";
dictionaryVar["ar-eg"]["levelEndScreenTotalScore_number"] = "Total score:";
dictionaryVar["ar-eg"]["levelEndScreenHighScore_number"] = "High score:";
dictionaryVar["ar-eg"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> has 72 hours to accept or decline your challenge. If <NAME> declines or doesn’t accept within 72 hours your wager and challenge fee will be reimbursed.";
dictionaryVar["ar-eg"]["challengeEndScreenChallengeSend_submessage_stranger"] = "If no one accepts your challenge within 72 hours, the amount of your wager and the challenge fee will be returned to you.";
dictionaryVar["ar-eg"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["ar-eg"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["ar-eg"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["ko-kr"] = dictionaryVar["ko-kr"] || {};
dictionaryVar["ko-kr"]["loadingScreenLoading"] = "불러오기 중...";
dictionaryVar["ko-kr"]["startScreenPlay"] = "PLAY";
dictionaryVar["ko-kr"]["levelMapScreenTotalScore"] = "총 점수";
dictionaryVar["ko-kr"]["levelEndScreenTitle_level"] = "레벨 <VALUE>";
dictionaryVar["ko-kr"]["levelEndScreenTitle_difficulty"] = "잘 했어요!";
dictionaryVar["ko-kr"]["levelEndScreenTitle_endless"] = "스테이지 <VALUE>";
dictionaryVar["ko-kr"]["levelEndScreenTotalScore"] = "총 점수";
dictionaryVar["ko-kr"]["levelEndScreenSubTitle_levelFailed"] = "레벨 실패";
dictionaryVar["ko-kr"]["levelEndScreenTimeLeft"] = "남은 시간";
dictionaryVar["ko-kr"]["levelEndScreenTimeBonus"] = "시간 보너스";
dictionaryVar["ko-kr"]["levelEndScreenHighScore"] = "최고 점수";
dictionaryVar["ko-kr"]["optionsStartScreen"] = "메인 메뉴";
dictionaryVar["ko-kr"]["optionsQuit"] = "종료";
dictionaryVar["ko-kr"]["optionsResume"] = "계속";
dictionaryVar["ko-kr"]["optionsTutorial"] = "게임 방법";
dictionaryVar["ko-kr"]["optionsHighScore"] = "최고 점수";
dictionaryVar["ko-kr"]["optionsMoreGames"] = "더 많은 게임";
dictionaryVar["ko-kr"]["optionsDifficulty_easy"] = "간단";
dictionaryVar["ko-kr"]["optionsDifficulty_medium"] = "중";
dictionaryVar["ko-kr"]["optionsDifficulty_hard"] = "상";
dictionaryVar["ko-kr"]["optionsMusic_on"] = "켜기";
dictionaryVar["ko-kr"]["optionsMusic_off"] = "끄기";
dictionaryVar["ko-kr"]["optionsSFX_on"] = "켜기";
dictionaryVar["ko-kr"]["optionsSFX_off"] = "끄기";
dictionaryVar["ko-kr"]["optionsLang_en-us"] = "영어(US)";
dictionaryVar["ko-kr"]["optionsLang_en-gb"] = "영어(GB)";
dictionaryVar["ko-kr"]["optionsLang_nl-nl"] = "네덜란드어";
dictionaryVar["ko-kr"]["gameEndScreenTitle"] = "축하합니다!\n게임을 완료했습니다.";
dictionaryVar["ko-kr"]["gameEndScreenBtnText"] = "계속";
dictionaryVar["ko-kr"]["optionsTitle"] = "설정";
dictionaryVar["ko-kr"]["optionsQuitConfirmationText"] = "주의!\n\n지금 종료하면 이 레벨의 모든 진행 내용을 잃게됩니다. 정말 종료하시겠습니까?";
dictionaryVar["ko-kr"]["optionsQuitConfirmBtn_No"] = "아니오";
dictionaryVar["ko-kr"]["optionsQuitConfirmBtn_Yes"] = "네, 확실합니다";
dictionaryVar["ko-kr"]["levelMapScreenTitle"] = "레벨 선택";
dictionaryVar["ko-kr"]["optionsRestartConfirmationText"] = "주의!\n\n지금 다시 시작하면 이 레벨의 모든 진행 내용을 잃게됩니다. 정말 다시 시작하시겠습니까?";
dictionaryVar["ko-kr"]["optionsRestart"] = "다시 시작";
dictionaryVar["ko-kr"]["optionsSFXBig_on"] = "음향 켜기";
dictionaryVar["ko-kr"]["optionsSFXBig_off"] = "음향 끄기";
dictionaryVar["ko-kr"]["optionsAbout_title"] = "관련 정보";
dictionaryVar["ko-kr"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["ko-kr"]["optionsAbout_backBtn"] = "뒤로";
dictionaryVar["ko-kr"]["optionsAbout_version"] = "버전:";
dictionaryVar["ko-kr"]["optionsAbout"] = "관련 정보";
dictionaryVar["ko-kr"]["levelEndScreenMedal"] = "향상했군요!";
dictionaryVar["ko-kr"]["startScreenQuestionaire"] = "어떻게 생각하세요?";
dictionaryVar["ko-kr"]["levelMapScreenWorld_0"] = "레벨 선택";
dictionaryVar["ko-kr"]["startScreenByTinglyGames"] = "제작: Tingly Games";
dictionaryVar["ko-kr"]["optionsLang_de-de"] = "독일어";
dictionaryVar["ko-kr"]["optionsLang_tr-tr"] = "터키어";
dictionaryVar["ko-kr"]["optionsAbout_header"] = "Developed by:";
dictionaryVar["ko-kr"]["levelEndScreenViewHighscoreBtn"] = "View scores";
dictionaryVar["ko-kr"]["levelEndScreenSubmitHighscoreBtn"] = "Submit score";
dictionaryVar["ko-kr"]["challengeStartScreenTitle_challengee_friend"] = "You have been challenged by:";
dictionaryVar["ko-kr"]["challengeStartTextScore"] = "<NAME>'s score:";
dictionaryVar["ko-kr"]["challengeStartTextTime"] = "<NAME>'s time:";
dictionaryVar["ko-kr"]["challengeStartScreenToWin"] = "Amount to win:";
dictionaryVar["ko-kr"]["challengeEndScreenWinnings"] = "You have won <AMOUNT> fairpoints";
dictionaryVar["ko-kr"]["challengeEndScreenOutcomeMessage_WON"] = "You have won the challenge!";
dictionaryVar["ko-kr"]["challengeEndScreenOutcomeMessage_LOST"] = "You have lost the challenge.";
dictionaryVar["ko-kr"]["challengeEndScreenOutcomeMessage_TIED"] = "You tied.";
dictionaryVar["ko-kr"]["challengeCancelConfirmText"] = "You are about to cancel the challenge. Your wager will be returned minus the challenge fee. Are you sure you want to cancel the challenge?";
dictionaryVar["ko-kr"]["challengeCancelConfirmBtn_yes"] = "Yes";
dictionaryVar["ko-kr"]["challengeCancelConfirmBtn_no"] = "No";
dictionaryVar["ko-kr"]["challengeEndScreensBtn_submit"] = "Submit challenge";
dictionaryVar["ko-kr"]["challengeEndScreenBtn_cancel"] = "Cancel challenge";
dictionaryVar["ko-kr"]["challengeEndScreenName_you"] = "You";
dictionaryVar["ko-kr"]["challengeEndScreenChallengeSend_error"] = "An error occured while submitting the challenge. Please try again later.";
dictionaryVar["ko-kr"]["challengeEndScreenChallengeSend_success"] = "Your challenge has been sent!";
dictionaryVar["ko-kr"]["challengeCancelMessage_error"] = "An error occured while cancelling your challenge. Please try again later.";
dictionaryVar["ko-kr"]["challengeCancelMessage_success"] = "Your challenge has been cancelled.";
dictionaryVar["ko-kr"]["challengeEndScreenScoreSend_error"] = "An error occured while communicating with the server. Please try again later.";
dictionaryVar["ko-kr"]["challengeStartScreenTitle_challengee_stranger"] = "You have been matched with:";
dictionaryVar["ko-kr"]["challengeStartScreenTitle_challenger_friend"] = "You are challenging:";
dictionaryVar["ko-kr"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["ko-kr"]["challengeStartTextTime_challenger"] = "Play the game and set a time.";
dictionaryVar["ko-kr"]["challengeStartTextScore_challenger"] = "Play the game and set a score.";
dictionaryVar["ko-kr"]["challengeForfeitConfirmText"] = "You are about to forfeit the challenge. Are you sure you want to proceed?";
dictionaryVar["ko-kr"]["challengeForfeitConfirmBtn_yes"] = "Yes";
dictionaryVar["ko-kr"]["challengeForfeitConfirmBtn_no"] = "No";
dictionaryVar["ko-kr"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["ko-kr"]["challengeForfeitMessage_error"] = "An error occured while forfeiting the challenge. Please try again later.";
dictionaryVar["ko-kr"]["optionsChallengeForfeit"] = "Forfeit";
dictionaryVar["ko-kr"]["optionsChallengeCancel"] = "Quit";
dictionaryVar["ko-kr"]["challengeLoadingError_notValid"] = "Sorry, this challenge is no longer valid.";
dictionaryVar["ko-kr"]["challengeLoadingError_notStarted"] = "Unable to connect to the server. Please try again later.";
dictionaryVar["ko-kr"]["levelEndScreenHighScore_time"] = "Best time:";
dictionaryVar["ko-kr"]["levelEndScreenTotalScore_time"] = "Total time:";
dictionaryVar["ko-kr"]["optionsLang_fr-fr"] = "프랑스어";
dictionaryVar["ko-kr"]["optionsLang_ko-kr"] = "한국어";
dictionaryVar["ko-kr"]["optionsLang_ar-eg"] = "아라비아어";
dictionaryVar["ko-kr"]["optionsLang_es-es"] = "스페인어";
dictionaryVar["ko-kr"]["optionsLang_pt-br"] = "포르투갈어(브라질)";
dictionaryVar["ko-kr"]["optionsLang_ru-ru"] = "러시아어";
dictionaryVar["ko-kr"]["optionsExit"] = "Exit";
dictionaryVar["ko-kr"]["levelEndScreenTotalScore_number"] = "Total score:";
dictionaryVar["ko-kr"]["levelEndScreenHighScore_number"] = "High score:";
dictionaryVar["ko-kr"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> has 72 hours to accept or decline your challenge. If <NAME> declines or doesn’t accept within 72 hours your wager and challenge fee will be reimbursed.";
dictionaryVar["ko-kr"]["challengeEndScreenChallengeSend_submessage_stranger"] = "If no one accepts your challenge within 72 hours, the amount of your wager and the challenge fee will be returned to you.";
dictionaryVar["ko-kr"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["ko-kr"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["ko-kr"]["optionsLang_jp-jp"] = "Japanese";
dictionaryVar["jp-jp"] = dictionaryVar["jp-jp"] || {};
dictionaryVar["jp-jp"]["loadingScreenLoading"] = "ロード中…";
dictionaryVar["jp-jp"]["startScreenPlay"] = "プレイ";
dictionaryVar["jp-jp"]["levelMapScreenTotalScore"] = "トータルスコア";
dictionaryVar["jp-jp"]["levelEndScreenTitle_level"] = "レベル <VALUE>";
dictionaryVar["jp-jp"]["levelEndScreenTitle_difficulty"] = "やったね！";
dictionaryVar["jp-jp"]["levelEndScreenTitle_endless"] = "ステージ <VALUE>";
dictionaryVar["jp-jp"]["levelEndScreenTotalScore"] = "トータルスコア";
dictionaryVar["jp-jp"]["levelEndScreenSubTitle_levelFailed"] = "ゲームオーバー";
dictionaryVar["jp-jp"]["levelEndScreenTimeLeft"] = "残り時間";
dictionaryVar["jp-jp"]["levelEndScreenTimeBonus"] = "タイムボーナス";
dictionaryVar["jp-jp"]["levelEndScreenHighScore"] = "ハイスコア";
dictionaryVar["jp-jp"]["optionsStartScreen"] = "メインメニュー";
dictionaryVar["jp-jp"]["optionsQuit"] = "やめる";
dictionaryVar["jp-jp"]["optionsResume"] = "再開";
dictionaryVar["jp-jp"]["optionsTutorial"] = "あそび方";
dictionaryVar["jp-jp"]["optionsHighScore"] = "ハイスコア";
dictionaryVar["jp-jp"]["optionsMoreGames"] = "他のゲーム";
dictionaryVar["jp-jp"]["optionsDifficulty_easy"] = "初級";
dictionaryVar["jp-jp"]["optionsDifficulty_medium"] = "中級";
dictionaryVar["jp-jp"]["optionsDifficulty_hard"] = "上級";
dictionaryVar["jp-jp"]["optionsMusic_on"] = "オン";
dictionaryVar["jp-jp"]["optionsMusic_off"] = "オフ";
dictionaryVar["jp-jp"]["optionsSFX_on"] = "オン";
dictionaryVar["jp-jp"]["optionsSFX_off"] = "オフ";
dictionaryVar["jp-jp"]["optionsLang_en-us"] = "英語（米国）";
dictionaryVar["jp-jp"]["optionsLang_en-gb"] = "英語（英国）";
dictionaryVar["jp-jp"]["optionsLang_nl-nl"] = "オランダ語";
dictionaryVar["jp-jp"]["gameEndScreenTitle"] = "おめでとう！\nすべてのレベルをクリアしました。";
dictionaryVar["jp-jp"]["gameEndScreenBtnText"] = "続ける";
dictionaryVar["jp-jp"]["optionsTitle"] = "設定";
dictionaryVar["jp-jp"]["optionsQuitConfirmationText"] = "注意！\n\nここでやめると\n記録がリセットされますが\nよろしいですか？";
dictionaryVar["jp-jp"]["optionsQuitConfirmBtn_No"] = "いいえ、続けます。";
dictionaryVar["jp-jp"]["optionsQuitConfirmBtn_Yes"] = "はい、やめます。";
dictionaryVar["jp-jp"]["levelMapScreenTitle"] = "レベル選択";
dictionaryVar["jp-jp"]["optionsRestartConfirmationText"] = "注意！\n\nここで再スタートすると\n記録がリセットされますが\nよろしいですか？";
dictionaryVar["jp-jp"]["optionsRestart"] = "再スタート";
dictionaryVar["jp-jp"]["optionsSFXBig_on"] = "サウンド オン";
dictionaryVar["jp-jp"]["optionsSFXBig_off"] = "サウンド オフ";
dictionaryVar["jp-jp"]["optionsAbout_title"] = "About";
dictionaryVar["jp-jp"]["optionsAbout_text"] = "Cool Games\nwww.coolgames.com\n© 2016";
dictionaryVar["jp-jp"]["optionsAbout_backBtn"] = "もどる";
dictionaryVar["jp-jp"]["optionsAbout_version"] = "version";
dictionaryVar["jp-jp"]["optionsAbout"] = "About";
dictionaryVar["jp-jp"]["levelEndScreenMedal"] = "記録更新！";
dictionaryVar["jp-jp"]["startScreenQuestionaire"] = "このゲームへの感想";
dictionaryVar["jp-jp"]["levelMapScreenWorld_0"] = "レベル選択";
dictionaryVar["jp-jp"]["startScreenByTinglyGames"] = "by: Tingly Games";
dictionaryVar["jp-jp"]["optionsLang_de-de"] = "ドイツ語";
dictionaryVar["jp-jp"]["optionsLang_tr-tr"] = "トルコ語";
dictionaryVar["jp-jp"]["optionsAbout_header"] = "Developed by";
dictionaryVar["jp-jp"]["levelEndScreenViewHighscoreBtn"] = "スコアをみる";
dictionaryVar["jp-jp"]["levelEndScreenSubmitHighscoreBtn"] = "スコア送信";
dictionaryVar["jp-jp"]["challengeStartScreenTitle_challengee_friend"] = "から挑戦を受けました";
dictionaryVar["jp-jp"]["challengeStartTextScore"] = "<NAME>のスコア";
dictionaryVar["jp-jp"]["challengeStartTextTime"] = "<NAME>の時間";
dictionaryVar["jp-jp"]["challengeStartScreenToWin"] = "ポイント数";
dictionaryVar["jp-jp"]["challengeEndScreenWinnings"] = "<AMOUNT>ポイント獲得";
dictionaryVar["jp-jp"]["challengeEndScreenOutcomeMessage_WON"] = "You have won the challenge!";
dictionaryVar["jp-jp"]["challengeEndScreenOutcomeMessage_LOST"] = "You have lost the challenge.";
dictionaryVar["jp-jp"]["challengeEndScreenOutcomeMessage_TIED"] = "同点";
dictionaryVar["jp-jp"]["challengeCancelConfirmText"] = "You are about to cancel the challenge. Your wager will be returned minus the challenge fee. Are you sure you want to cancel the challenge?";
dictionaryVar["jp-jp"]["challengeCancelConfirmBtn_yes"] = "Yes";
dictionaryVar["jp-jp"]["challengeCancelConfirmBtn_no"] = "No";
dictionaryVar["jp-jp"]["challengeEndScreensBtn_submit"] = "あ";
dictionaryVar["jp-jp"]["challengeEndScreenBtn_cancel"] = "Cancel challenge";
dictionaryVar["jp-jp"]["challengeEndScreenName_you"] = "You";
dictionaryVar["jp-jp"]["challengeEndScreenChallengeSend_error"] = "An error occured while submitting the challenge. Please try again later.";
dictionaryVar["jp-jp"]["challengeEndScreenChallengeSend_success"] = "Your challenge has been sent!";
dictionaryVar["jp-jp"]["challengeCancelMessage_error"] = "An error occured while cancelling your challenge. Please try again later.";
dictionaryVar["jp-jp"]["challengeCancelMessage_success"] = "Your challenge has been cancelled.";
dictionaryVar["jp-jp"]["challengeEndScreenScoreSend_error"] = "An error occured while communicating with the server. Please try again later.";
dictionaryVar["jp-jp"]["challengeStartScreenTitle_challengee_stranger"] = "You have been matched with:";
dictionaryVar["jp-jp"]["challengeStartScreenTitle_challenger_friend"] = "You are challenging:";
dictionaryVar["jp-jp"]["challengeStartScreenTitle_challenger_stranger"] = "You are setting a score for:";
dictionaryVar["jp-jp"]["challengeStartTextTime_challenger"] = "Play the game and set a time.";
dictionaryVar["jp-jp"]["challengeStartTextScore_challenger"] = "Play the game and set a score.";
dictionaryVar["jp-jp"]["challengeForfeitConfirmText"] = "You are about to forfeit the challenge. Are you sure you want to proceed?";
dictionaryVar["jp-jp"]["challengeForfeitConfirmBtn_yes"] = "Yes";
dictionaryVar["jp-jp"]["challengeForfeitConfirmBtn_no"] = "No";
dictionaryVar["jp-jp"]["challengeForfeitMessage_success"] = "You have forfeited the challenge.";
dictionaryVar["jp-jp"]["challengeForfeitMessage_error"] = "An error occured while forfeiting the challenge. Please try again later.";
dictionaryVar["jp-jp"]["optionsChallengeForfeit"] = "Forfeit";
dictionaryVar["jp-jp"]["optionsChallengeCancel"] = "Quit";
dictionaryVar["jp-jp"]["challengeLoadingError_notValid"] = "Sorry, this challenge is no longer valid.";
dictionaryVar["jp-jp"]["challengeLoadingError_notStarted"] = "Unable to connect to the server. Please try again later.";
dictionaryVar["jp-jp"]["levelEndScreenHighScore_time"] = "Best time:";
dictionaryVar["jp-jp"]["levelEndScreenTotalScore_time"] = "Total time:";
dictionaryVar["jp-jp"]["optionsLang_fr-fr"] = "French";
dictionaryVar["jp-jp"]["optionsLang_ko-kr"] = "Korean";
dictionaryVar["jp-jp"]["optionsLang_ar-eg"] = "Arabic";
dictionaryVar["jp-jp"]["optionsLang_es-es"] = "Spanish";
dictionaryVar["jp-jp"]["optionsLang_pt-br"] = "Brazilian-Portuguese";
dictionaryVar["jp-jp"]["optionsLang_ru-ru"] = "Russian";
dictionaryVar["jp-jp"]["optionsExit"] = "Exit";
dictionaryVar["jp-jp"]["levelEndScreenTotalScore_number"] = "Total score:";
dictionaryVar["jp-jp"]["levelEndScreenHighScore_number"] = "High score:";
dictionaryVar["jp-jp"]["challengeEndScreenChallengeSend_submessage"] = "<NAME> has 72 hours to accept or decline your challenge. If <NAME> declines or doesn’t accept within 72 hours your wager and challenge fee will be reimbursed.";
dictionaryVar["jp-jp"]["challengeEndScreenChallengeSend_submessage_stranger"] = "If no one accepts your challenge within 72 hours, the amount of your wager and the challenge fee will be returned to you.";
dictionaryVar["jp-jp"]["challengeForfeitMessage_winnings"] = "<NAME> has won <AMOUNT> fairpoints!";
dictionaryVar["jp-jp"]["optionsAbout_header_publisher"] = "Published by:";
dictionaryVar["jp-jp"]["optionsLang_jp-jp"] = "日本語";


//******************************************************
//*****    Script Resource: game_ui_dictionary
//******************************************************

// **********************************************
// Localization file for product: game_ui_dictionary
//
// created on 12-2-2016 14:45:13
// **********************************************

/*exported dictionaryVar*/
var dictionaryVar = dictionaryVar || {};
dictionaryVar["nl-nl"] = dictionaryVar["nl-nl"] || {};
dictionaryVar["nl-nl"]["game_ui_SCORE"] = "SCORE";
dictionaryVar["nl-nl"]["game_ui_STAGE"] = "LEVEL";
dictionaryVar["nl-nl"]["game_ui_LIVES"] = "LEVENS";
dictionaryVar["nl-nl"]["game_ui_TIME"] = "TIJD";
dictionaryVar["nl-nl"]["game_ui_HIGHSCORE"] = "HIGH SCORE";
dictionaryVar["nl-nl"]["game_ui_LEVEL"] = "LEVEL";
dictionaryVar["nl-nl"]["game_ui_time_left"] = "Resterende tijd";
dictionaryVar["nl-nl"]["game_ui_TIME_TO_BEAT"] = "DOELTIJD";
dictionaryVar["nl-nl"]["game_ui_SCORE_TO_BEAT"] = "DOELSCORE";
dictionaryVar["nl-nl"]["game_ui_HIGHSCORE_break"] = "HIGH\nSCORE";
dictionaryVar["en-us"] = dictionaryVar["en-us"] || {};
dictionaryVar["en-us"]["game_ui_SCORE"] = "SCORE";
dictionaryVar["en-us"]["game_ui_STAGE"] = "STAGE";
dictionaryVar["en-us"]["game_ui_LIVES"] = "LIVES";
dictionaryVar["en-us"]["game_ui_TIME"] = "TIME";
dictionaryVar["en-us"]["game_ui_HIGHSCORE"] = "HIGH SCORE";
dictionaryVar["en-us"]["game_ui_LEVEL"] = "LEVEL";
dictionaryVar["en-us"]["game_ui_time_left"] = "Time left";
dictionaryVar["en-us"]["game_ui_TIME_TO_BEAT"] = "TIME TO BEAT";
dictionaryVar["en-us"]["game_ui_SCORE_TO_BEAT"] = "SCORE TO BEAT";
dictionaryVar["en-us"]["game_ui_HIGHSCORE_break"] = "HIGH\nSCORE";
dictionaryVar["en-gb"] = dictionaryVar["en-gb"] || {};
dictionaryVar["en-gb"]["game_ui_SCORE"] = "SCORE";
dictionaryVar["en-gb"]["game_ui_STAGE"] = "STAGE";
dictionaryVar["en-gb"]["game_ui_LIVES"] = "LIVES";
dictionaryVar["en-gb"]["game_ui_TIME"] = "TIME";
dictionaryVar["en-gb"]["game_ui_HIGHSCORE"] = "HIGH SCORE";
dictionaryVar["en-gb"]["game_ui_LEVEL"] = "LEVEL";
dictionaryVar["en-gb"]["game_ui_time_left"] = "Time left";
dictionaryVar["en-gb"]["game_ui_TIME_TO_BEAT"] = "TIME TO BEAT";
dictionaryVar["en-gb"]["game_ui_SCORE_TO_BEAT"] = "SCORE TO BEAT";
dictionaryVar["en-gb"]["game_ui_HIGHSCORE_break"] = "HIGH\nSCORE";
dictionaryVar["de-de"] = dictionaryVar["de-de"] || {};
dictionaryVar["de-de"]["game_ui_SCORE"] = "PUNKTE";
dictionaryVar["de-de"]["game_ui_STAGE"] = "STUFE";
dictionaryVar["de-de"]["game_ui_LIVES"] = "LEBEN";
dictionaryVar["de-de"]["game_ui_TIME"] = "ZEIT";
dictionaryVar["de-de"]["game_ui_HIGHSCORE"] = "HIGHSCORE";
dictionaryVar["de-de"]["game_ui_LEVEL"] = "LEVEL";
dictionaryVar["de-de"]["game_ui_time_left"] = "Restzeit";
dictionaryVar["de-de"]["game_ui_TIME_TO_BEAT"] = "ZEITVORGABE";
dictionaryVar["de-de"]["game_ui_SCORE_TO_BEAT"] = "Zu schlagende Punktzahl";
dictionaryVar["de-de"]["game_ui_HIGHSCORE_break"] = "HIGHSCORE";
dictionaryVar["fr-fr"] = dictionaryVar["fr-fr"] || {};
dictionaryVar["fr-fr"]["game_ui_SCORE"] = "SCORE";
dictionaryVar["fr-fr"]["game_ui_STAGE"] = "SCÈNE";
dictionaryVar["fr-fr"]["game_ui_LIVES"] = "VIES";
dictionaryVar["fr-fr"]["game_ui_TIME"] = "TEMPS";
dictionaryVar["fr-fr"]["game_ui_HIGHSCORE"] = "MEILLEUR SCORE";
dictionaryVar["fr-fr"]["game_ui_LEVEL"] = "NIVEAU";
dictionaryVar["fr-fr"]["game_ui_time_left"] = "Temps restant";
dictionaryVar["fr-fr"]["game_ui_TIME_TO_BEAT"] = "TEMPS À BATTRE";
dictionaryVar["fr-fr"]["game_ui_SCORE_TO_BEAT"] = "SCORE À BATTRE";
dictionaryVar["fr-fr"]["game_ui_HIGHSCORE_break"] = "MEILLEUR\nSCORE";
dictionaryVar["pt-br"] = dictionaryVar["pt-br"] || {};
dictionaryVar["pt-br"]["game_ui_SCORE"] = "PONTOS";
dictionaryVar["pt-br"]["game_ui_STAGE"] = "FASE";
dictionaryVar["pt-br"]["game_ui_LIVES"] = "VIDAS";
dictionaryVar["pt-br"]["game_ui_TIME"] = "TEMPO";
dictionaryVar["pt-br"]["game_ui_HIGHSCORE"] = "RECORDE";
dictionaryVar["pt-br"]["game_ui_LEVEL"] = "NÍVEL";
dictionaryVar["pt-br"]["game_ui_time_left"] = "Tempo restante";
dictionaryVar["pt-br"]["game_ui_TIME_TO_BEAT"] = "HORA DE ARRASAR";
dictionaryVar["pt-br"]["game_ui_SCORE_TO_BEAT"] = "RECORDE A SER SUPERADO";
dictionaryVar["pt-br"]["game_ui_HIGHSCORE_break"] = "RECORDE";
dictionaryVar["es-es"] = dictionaryVar["es-es"] || {};
dictionaryVar["es-es"]["game_ui_SCORE"] = "PUNTOS";
dictionaryVar["es-es"]["game_ui_STAGE"] = "FASE";
dictionaryVar["es-es"]["game_ui_LIVES"] = "VIDAS";
dictionaryVar["es-es"]["game_ui_TIME"] = "TIEMPO";
dictionaryVar["es-es"]["game_ui_HIGHSCORE"] = "RÉCORD";
dictionaryVar["es-es"]["game_ui_LEVEL"] = "NIVEL";
dictionaryVar["es-es"]["game_ui_time_left"] = "Tiempo restante";
dictionaryVar["es-es"]["game_ui_TIME_TO_BEAT"] = "TIEMPO OBJETIVO";
dictionaryVar["es-es"]["game_ui_SCORE_TO_BEAT"] = "PUNTUACIÓN OBJETIVO";
dictionaryVar["es-es"]["game_ui_HIGHSCORE_break"] = "RÉCORD";
dictionaryVar["tr-tr"] = dictionaryVar["tr-tr"] || {};
dictionaryVar["tr-tr"]["game_ui_SCORE"] = "SKOR";
dictionaryVar["tr-tr"]["game_ui_STAGE"] = "BÖLÜM";
dictionaryVar["tr-tr"]["game_ui_LIVES"] = "HAYATLAR";
dictionaryVar["tr-tr"]["game_ui_TIME"] = "SÜRE";
dictionaryVar["tr-tr"]["game_ui_HIGHSCORE"] = "YÜKSEK SKOR";
dictionaryVar["tr-tr"]["game_ui_LEVEL"] = "SEVİYE";
dictionaryVar["tr-tr"]["game_ui_time_left"] = "Kalan zaman";
dictionaryVar["tr-tr"]["game_ui_TIME_TO_BEAT"] = "BİTİRME ZAMANI";
dictionaryVar["tr-tr"]["game_ui_SCORE_TO_BEAT"] = "BİTİRME PUANI";
dictionaryVar["tr-tr"]["game_ui_HIGHSCORE_break"] = "YÜKSEK\nSKOR";
dictionaryVar["ru-ru"] = dictionaryVar["ru-ru"] || {};
dictionaryVar["ru-ru"]["game_ui_SCORE"] = "РЕЗУЛЬТАТ";
dictionaryVar["ru-ru"]["game_ui_STAGE"] = "ЭТАП";
dictionaryVar["ru-ru"]["game_ui_LIVES"] = "ЖИЗНИ";
dictionaryVar["ru-ru"]["game_ui_TIME"] = "ВРЕМЯ";
dictionaryVar["ru-ru"]["game_ui_HIGHSCORE"] = "РЕКОРД";
dictionaryVar["ru-ru"]["game_ui_LEVEL"] = "УРОВЕНЬ";
dictionaryVar["ru-ru"]["game_ui_time_left"] = "Time left";
dictionaryVar["ru-ru"]["game_ui_TIME_TO_BEAT"] = "TIME TO BEAT";
dictionaryVar["ru-ru"]["game_ui_SCORE_TO_BEAT"] = "SCORE TO BEAT";
dictionaryVar["ru-ru"]["game_ui_HIGHSCORE_break"] = "РЕКОРД";
dictionaryVar["ar-eg"] = dictionaryVar["ar-eg"] || {};
dictionaryVar["ar-eg"]["game_ui_SCORE"] = "النتيجة";
dictionaryVar["ar-eg"]["game_ui_STAGE"] = "مرحلة";
dictionaryVar["ar-eg"]["game_ui_LIVES"] = "عدد المحاولات";
dictionaryVar["ar-eg"]["game_ui_TIME"] = "الوقت";
dictionaryVar["ar-eg"]["game_ui_HIGHSCORE"] = "أعلى نتيجة";
dictionaryVar["ar-eg"]["game_ui_LEVEL"] = "مستوى";
dictionaryVar["ar-eg"]["game_ui_time_left"] = "Time left";
dictionaryVar["ar-eg"]["game_ui_TIME_TO_BEAT"] = "TIME TO BEAT";
dictionaryVar["ar-eg"]["game_ui_SCORE_TO_BEAT"] = "SCORE TO BEAT";
dictionaryVar["ar-eg"]["game_ui_HIGHSCORE_break"] = "أعلى نتيجة";
dictionaryVar["ko-kr"] = dictionaryVar["ko-kr"] || {};
dictionaryVar["ko-kr"]["game_ui_SCORE"] = "점수";
dictionaryVar["ko-kr"]["game_ui_STAGE"] = "스테이지";
dictionaryVar["ko-kr"]["game_ui_LIVES"] = "기회";
dictionaryVar["ko-kr"]["game_ui_TIME"] = "시간";
dictionaryVar["ko-kr"]["game_ui_HIGHSCORE"] = "최고 점수";
dictionaryVar["ko-kr"]["game_ui_LEVEL"] = "레벨";
dictionaryVar["ko-kr"]["game_ui_time_left"] = "Time left";
dictionaryVar["ko-kr"]["game_ui_TIME_TO_BEAT"] = "TIME TO BEAT";
dictionaryVar["ko-kr"]["game_ui_SCORE_TO_BEAT"] = "SCORE TO BEAT";
dictionaryVar["ko-kr"]["game_ui_HIGHSCORE_break"] = "최고 점수";
dictionaryVar["jp-jp"] = dictionaryVar["jp-jp"] || {};
dictionaryVar["jp-jp"]["game_ui_SCORE"] = "スコア";
dictionaryVar["jp-jp"]["game_ui_STAGE"] = "ステージ";
dictionaryVar["jp-jp"]["game_ui_LIVES"] = "ライフ";
dictionaryVar["jp-jp"]["game_ui_TIME"] = "時間";
dictionaryVar["jp-jp"]["game_ui_HIGHSCORE"] = "ハイスコア";
dictionaryVar["jp-jp"]["game_ui_LEVEL"] = "レベル";
dictionaryVar["jp-jp"]["game_ui_time_left"] = "残り時間";
dictionaryVar["jp-jp"]["game_ui_TIME_TO_BEAT"] = "TIME TO BEAT";
dictionaryVar["jp-jp"]["game_ui_SCORE_TO_BEAT"] = "SCORE TO BEAT";
dictionaryVar["jp-jp"]["game_ui_HIGHSCORE_break"] = "HIGH\nSCORE";


//******************************************************
//*****    Script Resource: framework_standalone_settings
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************
/* exported tgSettingsVar */
var tgSettingsVar = {};
/* exported initTGSettings */
var initTGSettings = function(){
	"use strict";
	tgSettingsVar = {
		languages: {
			initial: "en-us",
			available: ["en-us", "en-gb", "nl-nl", "de-de", "fr-fr", "pt-br", "es-es", "tr-tr", "ru-ru", "ar-eg", "ko-kr", "jp-jp"]
		},
		canvasses: {
			defaultHeight: tgScale(1040),
			defaultImageHeight: tgScale(960),
			defaultWidth: tgScale(640),
			defaultImageWidth: tgScale(640),
			defaultTop: tgScale(0),
			minTop: tgScale(-80),
			defaultLeft: 0,
			minHeight: tgScale(780),
			canvasBackground: {
				id: "canvasBackground",
				depth: 50
			},
			canvasGame: {
				id: "canvasGame",
				depth: 100,
				top: tgScale(200, "round"),
				left: tgScale(40, "round"),
				width: tgScale(560, "round"),
				height: tgScale(560, "round")
			},
			canvasGameUI: {
				id: "canvasGameUI",
				depth: 150,
				top: 0,
				left: 0,
				height: tgScale(120, "round")
			},
			canvasMain: {
				id: "canvasMain",
				depth: 200
			}
		},
		canvasses_landscape: {
			defaultHeight: tgScale(640),
			defaultImageHeight: tgScale(640),
			defaultWidth: tgScale(1152),
			defaultImageWidth: tgScale(1152),
			defaultTop: tgScale(0),
			minTop: tgScale(0),
			defaultLeft: 0,
			minHeight: tgScale(640),
			minWidth: tgScale(850),
			canvasBackground: {
				id: "canvasBackground",
				depth: 50
			},
			canvasGame: {
				id: "canvasGame",
				depth: 100,
				top: tgScale(40, "round"),
				left: tgScale(296, "round"),
				width: tgScale(560, "round"),
				height: tgScale(560, "round")
			},
			canvasGameUI: {
				id: "canvasGameUI",
				depth: 150,
				top: 0,
				left: tgScale(151),
				width: tgScale(140)
			},
			canvasMain: {
				id: "canvasMain",
				depth: 200
			}
		},
		buttonDefinitions: {
			"bigPlay": {
				type: "text",
				sprite: s_btn_bigtext,
				leftWidth: tgScale(38),
				rightWidth: tgScale(99),
				font: {
					align: "center",
					baseline: "middle",
					fontSize: tgSelect({
						big: 46,
						small: 30
					}),
					fillColor: "#01198a",
					shadow: {
						active: true,
						color: "#7bfdff",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				},
				textOffsetY: 2,
				textPaddingY: tgScale(30),
				fontSize: tgSelect({
					big: 46,
					small: 30
				})
			},
			"difficulty_toggle": {
				type: "toggleText",
				sprite: s_btn_toggle,
				leftWidth: tgScale(106),
				rightWidth: tgScale(40),
				font: {
					align: "center",
					baseline: "middle",
					fontSize: tgSelect({
						big: 40,
						small: 20
					}),
					fillColor: "#018a17",
					shadow: {
						active: true,
						color: "#d2ff7b",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				},
				states: [{
					id: "0",
					sprite: s_icon_toggle_easy,
					textKey: "optionsDifficulty_easy"
				}, {
					id: "1",
					sprite: s_icon_toggle_medium,
					textKey: "optionsDifficulty_medium"
				}, {
					id: "2",
					sprite: s_icon_toggle_hard,
					textKey: "optionsDifficulty_hard"
				}],
				toggleImageOffsetX: tgScale(30),
				toggleImageOffsetY: tgScale(12),
				textOffsetX: tgScale(10),
				textOffsetY: 2,
				textPaddingY: tgScale(30),
				fontSize: tgSelect({
					big: 40,
					small: 20
				})
			},
			"music_toggle": {
				type: "toggle",
				sprite: s_btn_toggle,
				leftWidth: tgScale(106),
				rightWidth: tgScale(40),
				font: {
					align: "center",
					baseline: "middle",
					fontSize: tgSelect({
						big: 40,
						small: 20
					}),
					fillColor: "#018a17",
					shadow: {
						active: true,
						color: "#d2ff7b",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				},
				states: [{
					id: "on",
					sprite: s_icon_toggle_musicon,
					textKey: "optionsMusic_on"
				}, {
					id: "off",
					sprite: s_icon_toggle_musicoff,
					textKey: "optionsMusic_off"
				}],
				toggleImageOffsetX: tgScale(30),
				toggleImageOffsetY: tgScale(12),
				textOffsetX : 0,
				textOffsetY: 2,
				textPaddingY: tgScale(30)
			},
			"sfx_toggle": {
				type: "toggle",
				sprite: s_btn_toggle,
				leftWidth: tgScale(106),
				rightWidth: tgScale(40),
				font: {
					align: "center",
					baseline: "middle",
					fontSize: tgSelect({
						big: 40,
						small: 20
					}),
					fillColor: "#018a17",
					shadow: {
						active: true,
						color: "#d2ff7b",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				},
				states: [{
					id: "on",
					sprite: s_icon_toggle_fxon,
					textKey: "optionsSFX_on"
				}, {
					id: "off",
					sprite: s_icon_toggle_fxoff,
					textKey: "optionsSFX_off"
				}],
				toggleImageOffsetX: tgScale(30),
				toggleImageOffsetY: tgScale(12),
				textOffsetX : 0,
				textOffsetY: 2,
				textPaddingY: tgScale(30)
			},
			"music_big_toggle": {
				type: "toggleText",
				sprite: s_btn_toggle,
				leftWidth: tgScale(106),
				rightWidth: tgScale(40),
				font: {
					align: "center",
					baseline: "middle",
					fontSize: tgSelect({
						big: 40,
						small: 20
					}),
					fillColor: "#018a17",
					shadow: {
						active: true,
						color: "#d2ff7b",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				},
				states: [{
					id: "on",
					sprite: (typeof s_icon_toggle_music_on !== "undefined")? s_icon_toggle_music_on : undefined,
					textKey: "optionsMusic_on"
				}, {
					id: "off",
					sprite: (typeof s_icon_toggle_music_off !== "undefined")? s_icon_toggle_music_off : undefined,
					textKey: "optionsMusic_off"
				}],
				toggleImageOffsetX: tgScale(28, "round"),
				toggleImageOffsetY: tgScale(10),
				textOffsetX : tgScale(10),
				textOffsetY: 2,
				textPaddingY: tgScale(30),
				fontSize: tgSelect({
					big: 40,
					small: 20
				})
			},
			"sfx_big_toggle": {
				type: "toggleText",
				sprite: s_btn_toggle,
				leftWidth: tgScale(106),
				rightWidth: tgScale(40),
				font: {
					align: "center",
					baseline: "middle",
					fontSize: tgSelect({
						big: 40,
						small: 20
					}),
					fillColor: "#018a17",
					shadow: {
						active: true,
						color: "#d2ff7b",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				},
				states: [{
					id: "on",
					sprite: (typeof s_icon_toggle_sfx_on !== "undefined")? s_icon_toggle_sfx_on : undefined,
					textKey: "optionsSFXBig_on"
				}, {
					id: "off",
					sprite: (typeof s_icon_toggle_sfx_off !== "undefined")? s_icon_toggle_sfx_off : undefined,
					textKey: "optionsSFXBig_off"
				}],
				toggleImageOffsetX: tgScale(33, "round"),
				toggleImageOffsetY: tgScale(12),
				textOffsetX : tgScale(10),
				textOffsetY: 2,
				textPaddingY: tgScale(30),
				fontSize: tgSelect({
					big: 40,
					small: 20
				})
			},
			"language_toggle": {
				type: "toggleText",
				sprite: s_btn_toggle,
				leftWidth: tgScale(106),
				rightWidth: tgScale(40),
				font: {
					align: "center",
					baseline: "middle",
					fontSize: tgSelect({
						big: 40,
						small: 20
					}),
					fillColor: "#018a17",
					shadow: {
						active: true,
						color: "#d2ff7b",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				},
				states: [{
					id: "en-us",
					sprite: s_flagIcon_us,
					textKey: "optionsLang_en-us"
				}, {
					id: "en-gb",
					sprite: s_flagIcon_gb,
					textKey: "optionsLang_en-gb"
				}, {
					id: "nl-nl",
					sprite: s_flagIcon_nl,
					textKey: "optionsLang_nl-nl"
				}, {
					id: "de-de",
					sprite: s_flagIcon_de,
					textKey: "optionsLang_de-de"
				}, {
					id: "fr-fr",
					sprite: s_flagIcon_fr,
					textKey: "optionsLang_fr-fr"
				}, {
					id: "pt-br",
					sprite: s_flagIcon_br,
					textKey: "optionsLang_pt-br"
				}, {
					id: "es-es",
					sprite: s_flagIcon_es,
					textKey: "optionsLang_es-es"
				}, {
					id: "ru-ru",
					sprite: s_flagIcon_ru,
					textKey: "optionsLang_ru-ru"
				}, {
					id: "ar-eg",
					sprite: s_flagIcon_ar,
					textKey: "optionsLang_ar-eg"
				}, {
					id: "ko-kr",
					sprite: s_flagIcon_kr,
					textKey: "optionsLang_ko-kr"
				}, {
					id: "tr-tr",
					sprite: s_flagIcon_tr,
					textKey: "optionsLang_tr-tr"
				}, {
					id: "jp-jp",
					sprite: s_flagIcon_jp,
					textKey: "optionsLang_jp-jp"
				}],
				toggleImageOffsetX: tgScale(40),
				toggleImageOffsetY: tgScale(20),
				textOffsetX: tgScale(10),
				textOffsetY: 2,
				textPaddingY: tgScale(30),
				fontSize: tgSelect({
					big: 40,
					small: 20
				})
			},
			"default_text": {
				type: "text",
				sprite: s_btn_standard,
				leftWidth: tgScale(40),
				rightWidth: tgScale(40),
				font: {
					align: "center",
					baseline: "middle",
					fontSize: tgSelect({
						big: 40,
						small: 20
					}),
					fillColor: "#018a17",
					shadow: {
						active: true,
						color: "#d2ff7b",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				},
				textOffsetY: 2,
				textPaddingY: tgScale(30),
				fontSize: tgSelect({
					big: 40,
					small: 20
				})
			},
			"default_image": {
				type: "image",
				sprite: s_btn_standard,
				leftWidth: tgScale(40),
				rightWidth: tgScale(40),
				textPaddingY: tgScale(6)
			},
			"options": {
				type: "image",
				sprite: s_btn_small_options
			}
		},
		buttonDefinitions_landscape: {
			"bigPlay": {
				type: "text",
				sprite: s_btn_bigtext,
				leftWidth: tgScale(40),
				rightWidth: tgScale(76),
				font: {
					align: "center",
					baseline: "middle",
					fontSize: tgSelect({
						big: 40,
						small: 20
					}),
					fillColor: "#01198a",
					shadow: {
						active: true,
						color: "#7bfdff",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				},
				textOffsetY: 2,
				textPaddingY: tgScale(30),
				fontSize: tgSelect({
					big: 40,
					small: 20
				})
			}
		},
		buttonColorDefinitions: {
			"green": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#018a17",
					shadow: {
						active: true,
						color: "#d2ff7b",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				}
			},
			"blue": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#01198a",
					shadow: {
						active: true,
						color: "#7bfdff",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				}
			},
			"bluegreen": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#004f89",
					shadow: {
						active: true,
						color: "#7bffca",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				}
			},
			"orange": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#9a1900",
					shadow: {
						active: true,
						color: "#ffb986",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				}
			},
			"orangeyellow": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#8d2501",
					shadow: {
						active: true,
						color: "#ffbe60",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				}
			},
			"pink": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#c6258f",
					shadow: {
						active: true,
						color: "#ffbde9",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				}
			},
			"white": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#ffffff"
				}
			},
			 "pastel_pink": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#83574f"
				}
			},
			  "whiteWithRedBorder": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#ffffff",
					shadow: {
						active: true,
						color: "#4c0200",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				}
			},            
			"whiteWithBlueBorder": {
				font: {
					align: "center",
					baseline: "middle",
					fillColor: "#ffffff",
					shadow: {
						active: true,
						color: "#002534",
						offsetX: 0,
						offsetY: 2,
						blur: 0
					}
				}
			}
		},
		buttons: {
			"default_color": "green"
		},
		analytics: {
			timerPoolSize: 20
		},
		loadingScreen: {
			backgroundImage: typeof s_screen_start !== "undefined"? s_screen_start : undefined,
			minimalVisibilityDuration: 0,
			backgroundFadeDuration: 500,
			maxAudioLoadDuration: 5000,
			maxWaitDuration: 5000,
			splashScreenVisibilityDuration: -1,
			// throbber position and animation variables
			throbberFrames: 12,
			throbberFrameDuration: 100,
			throbberWidth: tgScale(78),
			throbberX: {
				align: "center"
			},
			throbberY: tgScale(560),
			// loadingbar position and animations variables
			loadingBarInnerWidth: tgScale(400),
			loadingBarX: {
				align: "center"
			},
			loadingBarY: tgScale(680),
			loadingBarBackgroundLeftWidth: tgScale(16),
			loadingBarBackgroundRightWidth: tgScale(18),
			loadingBarFillLeftWidth: tgScale(8),
			loadingBarFillRightWidth: tgScale(8),
			loadingBarFillXOffset: tgScale(9),
			loadingBarFillYOffset: tgScale(9),
			// text position and appearance variables
			textFont: {
				align: "center",
				fillColor: "#3B0057",
				fontSize: tgScale(24)
			},
			textX: {
				align: "center"
			},
			textY: tgScale(620),
			textMaxWidth: tgScale(500),
			// logos positions and animation variables
			logosAlign: "center",
			logosSurfaceMaxWidth: tgScale(500),
			logosSurfaceMaxHeight: tgScale(60),
			logosSurfaceX: {
				align: "center"
			},
			logosSurfaceY: {
				align: "bottom",
				offset: tgScale(20)
			},
			logosSurfaceMinY: tgScale(806),
			logosSurfaceAnimDuration: 500,
			logosSurfaceMarginBottom: tgScale(20)
		},
		loadingScreen_landscape: {
			logosAlign: "right",
			throbberY: tgScale(280),
			loadingBarY: tgScale(430),
			logosSurfaceMaxWidth: tgScale(340),
			logosSurfaceX: {
				align: "right",
				offset: tgScale(32)
			},
			logosSurfaceY: tgScale(560),
			logosSurfaceMinY: tgScale(560)
		},
		startScreen: {
			btnMinCanvasHeight: tgScale(860),
			backgroundImage: (typeof s_screen_start !== undefined)? s_screen_start : undefined,
			// timing
			gameLogoDelay: 700,
			optinalButtonsDelay: 1800,
			menuButtonDelay: 700,
			playButtonsDelay: 2600,
			// game logo position and animation
			gameLogoImage: (typeof s_screen_start !== undefined)? s_logo : undefined,
			gameLogoAnimationDuration: 700,
			gameLogoStartX: {
				align: "center"
			},
			gameLogoEndX: {
				align: "center"
			},
			gameLogoStartY: (typeof s_logo !== undefined)? -s_logo.height : 0,
			gameLogoEndY: {
				align: "top",
				offset: tgScale(20)
			},
			gameLogoStartScaleX: 1,
			gameLogoEndScaleX: 1,
			gameLogoStartScaleY: 1,
			gameLogoEndScaleY: 1,
			gameLogoStartAlpha: 1,
			gameLogoEndAlpha: 1,
			gameLogoEaseX: tbEase.easeLinear,
			gameLogoEaseY: tbEase.easeOutOvershoot,
			gameLogoEaseScaleX: tbEase.easeLinear,
			gameLogoEaseScaleY: tbEase.easeLinear,
			gameLogoEaseAlpha: tbEase.easeLinear,
			// play button position and animation
			playButtonX: {
				align: "center"
			},
			playButtonY: tgScale(656),
			playButtonWidth: tgScale(300),
			playButtonAnimationDuration: 700,
			playButtonWiggleDelay: 700,
			// difficulty button position and animation
			difficultyButtonX: tgScale(368),
			difficultyButtonY: tgScale(796),
			difficultyButtonWidth: tgScale(440),
			difficultyButtonAnimationDuration: 700,
			// menu button position and animation
			menuButtonX: tgScale(36),
			menuButtonY: tgScale(750),
			menuButtonAnimationDuration: 500,
			// company logo positions and animation variables
			logosAlign: "center",
			logosSurfaceMaxWidth: tgScale(500),
			logosSurfaceMaxHeight: tgScale(60),
			logosSurfaceX: {
				align: "center"
			},
			logosSurfaceY: {
				align: "bottom",
				offset: tgScale(20)
			},
			logosSurfaceMinY: tgScale(806),
			logosSurfaceAnimDuration: 500,
			logosSurfaceMarginBottom: tgScale(20)
		},
		startScreen_landscape: {
			btnMinCanvasHeight: tgScale(0),
			playButtonY: tgScale(456),
			playButtonWidth: tgScale(320),
			difficultyButtonX: {
				align: "center"
			},
			difficultyButtonY: tgScale(346),
			difficultyButtonWidth: tgScale(460),
			menuButtonX: {
				align: "left",
				offset: tgScale(32)
			},
			menuButtonY: tgScale(528),
			logosAlign: "right",
			logosSurfaceMaxWidth: tgScale(340),
			logosSurfaceX: {
				align: "right",
				offset: tgScale(32)
			},
			logosSurfaceY: tgScale(560),
			logosSurfaceMinY: tgScale(560)
		},
		levelMapScreen: {
			optionsBtnX: {
				align: "center",
				offset: tgScale(-230)
			},
			optionsBtnY: {
				align: "top",
				offset: tgScale(576)
			},
			optionsBtnType: "options",
			titleFont: {
				baseline: "bottom"
			},
			titleX: {
				align: "center"
			},
			titleY: {
				align: "top",
				offset: tgScale(35, "round")
			},
			titleMaxWidth: tgScale(232),
			titleMaxHeight: tgScale(98),
			worldButtonPreviousX: {
				align: "center",
				offset: tgScale(-206)
			},
			worldButtonPreviousY: {
				align: "top",
				offset: tgScale(30)
			},
			worldButtonNextX: {
				align: "center",
				offset: tgScale(206)
			},
			worldButtonNextY: {
				align: "top",
				offset: tgScale(30)
			},
			type: "grid",
			noOfColsBig: 3,
			noOfRowsBig: 3,
			noOfColsSmall: 5,
			noOfRowsSmall: 4,
			drawNumbers: true,
			drawBackgroundImages: true,
			gridOffsetX: tgScale(78),
			gridOffsetYBig: {
				align: "top",
				offset: tgScale(140)
			},
			gridOffsetYSmall: {
				align: "top",
				offset: tgScale(140)
			},
			gridOffsetYDifferenceNoWorldButtons: tgScale(20),
			gridMarginYBig: tgScale(18),
			gridMarginYSmall: tgScale(18),
			levelFontsBig: {
				general: {
					fontSize: tgSelect({
						big: 60,
						small: 30
					}),
					fillColor: "#3F4F5E",
					align: "center",
					baseline: "middle",
					shadow: {
						active: true,
						color: "#D0D8EA",
						offsetX: 0,
						offsetY: tgScale(6),
						blur: 0
					}
				}
			},
			levelFontsSmall: {
				general: {
					fontSize: tgSelect({
						big: 32,
						small: 16
					}),
					fillColor: "#3F4F5E",
					align: "center",
					baseline: "middle",
					shadow: {
						active: true,
						color: "#D0D8EA",
						offsetX: 0,
						offsetY: tgScale(2),
						blur: 0
					}
				}
			},
			levelsMaxHeightBig: tgScale(438),
			levelsMaxHeightSmall: tgScale(438),
			levelImageOffsetX: {
				align: "center"
			},
			levelImageOffsetY: {
				align: "center"
			},
			lockOffsetX: {
				align: "center"
			},
			lockOffsetY: {
				align: "center",
				offset: tgScale(-22)
			},
			levelNoOffsetX: {
				align: "center"
			},
			levelNoOffsetY: {
				align: "center",
				offset: tgScale(-10)
			},
			starsOverviewX: {
				align: "center",
				offset: tgScale(216)
			},
			starsOverviewY: {
				align: "top",
				offset: tgScale(574)
			},
			starsOverviewFont: {
				fontSize: tgSelect({
					big: 24,
					small: 12
				}),
				fillColor: "#3F4F5E",
				align: "center"
			},
			starsTextOffsetY: tgScale(10),
			pointOverviewFont: {
				fontSize: tgSelect({
					big: 24,
					small: 12
				}),
				fillColor: "#3F4F5E",
				align: "center"
			},
			pointOverviewX: {
				align: "center"
			},
			pointOverviewY: {
				align: "top",
				offset: tgScale(588)
			},
			pointOverviewMaxWidth: tgScale(160),
			pointOverviewMaxHeight: tgScale(40),
			backgroundImage: (typeof s_screen_levelselect !== "undefined")? s_screen_levelselect : undefined,
			swipeMinDistance: tgScale(10),
			swipeSpeedThreshold: 200,
			swipeDistanceThreshold: tgScale(200),
			levelsMoveSpeed: tgScale(600),
			moveTotalDuration: 800,
			moveMinDuration: 500
		},
		levelMapScreen_landscape: {
			worldButtonPreviousY: {
				align: "top",
				offset: tgScale(20)
			},
			worldButtonNextY: {
				align: "top",
				offset: tgScale(20)
			},
			titleY: {
				align: "top",
				offset: tgScale(25, "round")
			},
			gridOffsetX: tgScale(234),
			gridOffsetYBig: {
				align: "top",
				offset: tgScale(110)
			},
			gridOffsetYSmall: {
				align: "top",
				offset: tgScale(110)
			},
			starsOverviewY: {
				align: "top",
				offset: tgScale(536)
			},
			pointOverviewY: {
				align: "top",
				offset: tgScale(550)
			},
			optionsBtnY: {
				align: "top",
				offset: tgScale(538)
			}
		},
		levelStart: {
			overlayImage: (typeof s_overlay_assignment !== "undefined")? s_overlay_assignment : undefined,
			overlayImageX: {
				align: "center"
			},
			overlayImageY: (typeof s_overlay_assignment !== "undefined")? -s_overlay_assignment.height : undefined,
			overlayAnimationIn: [{
				type: "y",
				delay: 0,
				duration: 800,
				end: {
					align: "center",
					offset: tgScale(-142)
				},
				ease: tbEase.easeOutOvershoot,
				sound: a_levelStart
			}],
			overlayAnimationOut: [{
				type: "y",
				delay: 0,
				duration: 600,
				end: (typeof s_overlay_assignment !== "undefined")? -s_overlay_assignment.height : undefined,
				ease: tbEase.easeInOvershoot,
				blocking: true
			}],
			assignmentFont: {
				align: "center",
				baseline: "middle"
			},
			assignmentOffsetX: {
				align: "center"
			},
			assignmentOffsetY: 0,
			assignmentMaxWidth: tgScale(500),
			assignmentMaxHeight: tgScale(80),
			headerFont: {
				align: "center",
				baseline: "middle"
			},
			headerOffsetX: {
				align: "center"
			},
			headerOffsetY: 0,
			headerMaxWidth: tgScale(560),
			headerMaxHeight: tgScale(80),
			pauseDuration: 3500
		},
		levelStart_landscape: {
			overlayAnimationIn: [{
				type: "y",
				delay: 0,
				duration: 800,
				end: {
					align: "center"
				},
				ease: tbEase.easeOutOvershoot,
				sound: a_levelStart
			}]
		},
		challengeStart: {
			overlayImage: (typeof s_overlay_challenge_start !== "undefined")? s_overlay_challenge_start : undefined,
			overlayImageX: {
				align: "center"
			},
			overlayImageY: tgScale(56),
			overlayOffsetX: 0,
			overlayOffsetY: 0,
			titleFont: {
				align: "center",
				baseline: "top"
			},
			titleMaxWidth: tgScale(500),
			titleMaxHeight: tgScale(100),
			titleX: {
				align: "center"
			},
			titleY: tgScale(90),
			nameFont: {
				align: "center",
				baseline: "middle"
			},
			nameMaxWidth: tgScale(500),
			nameMaxHeight: tgScale(80),
			nameX: {
				align: "center"
			},
			nameY: tgScale(250),
			scoreHeaderFont: {
				align: "center",
				baseline: "top"
			},
			scoreHeaderMaxWidth: tgScale(500),
			scoreHeaderMaxHeight: tgScale(40),
			scoreHeaderX: {
				align: "center"
			},
			scoreHeaderY: tgScale(348),
			scoreFont: {
				align: "center",
				baseline: "top"
			},
			scoreMaxWidth: tgScale(500),
			scoreMaxHeight: tgScale(50),
			scoreX: {
				align: "center"
			},
			scoreY: tgScale(388),
			winHeaderFont: {
				align: "center",
				baseline: "top"
			},
			winHeaderMaxWidth: tgScale(500),
			winHeaderMaxHeight: tgScale(40),
			winHeaderX: {
				align: "center"
			},
			winHeaderY: tgScale(442),
			winHeaderOffsetX: 0,
			winHeaderOffsetY: 0,
			winFont: {
				align: "center",
				baseline: "top"
			},
			winMaxWidth: tgScale(500),
			winMaxHeight: tgScale(50),
			winX: {
				align: "center"
			},
			winY: tgScale(482),
			winBetweenMargin: tgScale(10),
			winAmountOffsetX: 0,
			winAmountOffsetY: 0,
			animInDuration: 800,
			animInEase: tbEase.easeOutOvershoot,
			animOutDuration: 600,
			animOutEase: tbEase.easeInOvershoot,
			pauseDuration: 3500
		},
		challengeEnd: {
			animInDelay: 500,
			animInDuration: 800,
			namesShowDelay: 1500,
			namesShowDuration: 500,
			scoreShowDelay: 2500,
			scoresShowDuration: 500,
			scoresCountDelay: 3200,
			scoresCountDuration: 800,
			messageShowDelay: 4200,
			messageShowDuration: 300,
			buttonsShowDelay: 4500,
			overlayStartX: {
				align: "center"
			},
			overlayStartY: tgScale(-800),
			overlayEndX: {
				align: "center"
			},
			overlayEndY: tgScale(52),
			overlayOffsetX: 0,
			overlayOffsetY: 0,
			fadeAlpha: 0.8,
			fadeColor: "#000000",
			messageFont: {
				align: "center",
				baseline: "middle"
			},
			messageWidth: tgScale(360),
			messageHeight: tgScale(120),
			messageMarginX: tgScale(4),
			messageMarginY: tgScale(4),
			messageX: {
				align: "center"
			},
			messageY: tgScale(340),
			subMessageX: {
				align: "center"
			},
			subMessageY: tgScale(600),
			subMessageWidth: tgScale(500),
			subMessageHeight: tgScale(120),
			subMessageFont: {
				align: "center",
				baseline: "middle"
			},
			winningsFont: {
				align: "center",
				baseline: "middle"
			},
			winningsWidth: tgScale(360),
			winningsHeight: tgScale(60),
			winningsMarginX: tgScale(4),
			winningsMarginY: tgScale(4),
			winningsX: {
				align: "center"
			},
			winningsY: tgScale(480),
			textButtonsWidth: tgScale(460),
			submitBtnX: {
				align: "center"
			},
			submitBtnY: tgScale(400),
			cancelBtnX: {
				align: "center"
			},
			cancelBtnY: tgScale(500),
			namesFont: {
				align: "center",
				baseline: "middle"
			},
			namesLeftX: tgScale(75, "round"),
			namesBetweenX: tgScale(48),
			namesY: tgScale(120),
			nameWidth: tgScale(214, "round"),
			nameHeight: tgScale(40),
			nameMarginX: tgScale(4),
			nameMarginY: tgScale(4),
			nameOffsetX: 0,
			nameOffsetY: 0,
			emphasizedScoresFont: {
				align: "center",
				baseline: "middle"
			},
			emphasizedScoresY: tgScale(220),
			emphasizedScoresWidth: tgScale(180),
			emphasizedScoresHeight: tgScale(80),
			emphasizedScoresCounterMarginX: tgScale(4),
			emphasizedScoresCounterMarginY: tgScale(4)

		},
		levelEnd: {
			overlayImages: {
				difficulty: (typeof s_overlay_difficulty !== "undefined")? s_overlay_difficulty : undefined,
				endless: (typeof s_overlay_endless !== "undefined")? s_overlay_endless : undefined,
				levelWin: (typeof s_overlay_level_win !== "undefined")? s_overlay_level_win : undefined,
				levelFail: (typeof s_overlay_level_fail !== "undefined")? s_overlay_level_fail : undefined
			},
			textureSwapDelay: 500,
			animInDuration: 800,
			animInEase: tbEase.easeOutOvershoot,
			animOutDuration: 800,
			animOutEase: tbEase.easeInCubic,
			overlayImageOffsetX: {
				align: "center"
			},
			overlayImageOffsetY: 0,
			titleFont: {
				align: "center",
				baseline: "middle",
				fontSize: tgSelect({
					big: 26,
					small: 13
				})
			},
			titleX: {
				align: "center"
			},
			titleY: tgScale(58),
			titleMaxWidth: tgScale(500),
			titleMaxHeight: tgScale(100),
			subTitleFont: {
				align: "center",
				baseline: "middle",
				fontSize: tgSelect({
					big: 56,
					small: 28
				})
			},
			subTitleX: {
				align: "center"
			},
			subTitleY: tgScale(236),
			emphasizedStatsHeaderFont: {
				align: "center",
				baseline: "top",
				fontSize: tgSelect({
					big: 24,
					small: 12
				})
			},
			emphasizedStatsHeaderX: {
				align: "center"
			},
			emphasizedStatsHeaderY: tgScale(144),
			emphasizedStatsFont: {
				align: "center",
				baseline: "top",
				fontSize: tgSelect({
					big: 56,
					small: 28
				})
			},
			emphasizedStatsX: {
				align: "center"
			},
			emphasizedStatsY: tgScale(176),
			emphasizedStatsMaxWidth: tgScale(200),
			emphasizedStatsMaxHeight: tgScale(60),
			statsHeaderFont: {
				align: "center",
				baseline: "top",
				fontSize: tgSelect({
					big: 24,
					small: 12
				})
			},
			statsHeaderX: {
				align: "center"
			},
			statsHeaderY: tgScale(286),
			statsInlineOffset: tgScale(0),
			forceStatsInline: false,
			statsHeaderMarginBottom: tgScale(14),
			statsHeaderMarginRight: tgScale(10),
			statsFont: {
				align: "center",
				baseline: "top",
				fontSize: tgSelect({
					big: 24,
					small: 12
				})
			},
			statsCounterMarginX: tgScale(10),
			statsCounterMarginY: tgScale(4),
			statsMaxWidth: tgScale(200),
			statsMaxHeight: tgScale(50),
			backButtonX: {
				align: "center",
				offset: tgScale(12)
			},// tgScale(284),
			backButtonY: tgScale(549),
			forwardButtonX: {
				align: "center",
				offset: tgScale(162)
			},// tgScale(404),
			forwardButtonY: tgScale(489),
			closeButtonX: {
				align: "center",
				offset: tgScale(250)
			},// tgScale(530),
			closeButtonY: tgScale(10),
			closeButtonMaskWidth: tgScale(90),
			closeButtonMaskHeight: tgScale(90),
			star1X: {
				align: "center",
				offset: tgScale(-177, "round")
			},
			star1Y: tgScale(120),
			star2X: {
				align: "center"
			},
			star2Y: tgScale(96),
			star3X: {
				align: "center",
				offset: tgScale(179, "round")
			},
			star3Y: tgScale(120),
			starEffectDelay: 200,
			starEffectDuration: 500,
			starFillDelay: 800,
			starFillStartScale: 0,
			starFillStartAlpha: 0,
			starFillScaleDuration: 300,
			starFillAlphaDuration: 200,
			starFillDuration: 300,
			fadeAlpha: 0.8,
			fadeDuration: 800,
			fadeColor: "#000000",
			medalX: tgScale(508),
			medalY: tgScale(394),
			medalImageOriginX: tgScale(96),
			medalImageOriginY: tgScale(74),
			medalScale: 3,
			medalDuration: 400,
			medalDelay: 2500,
			medalShadowDelay: 0,
			medalShadowOffsetY: tgScale(100),
			medalShadowScaleFactor: 1.5,
			medalTextOffsetX: {
				align: "center"
			},
			medalTextOffsetY: tgScale(76),
			medalTextMaxWidth: tgScale(180),
			medalTextMaxHeight: tgScale(36),
			medalTextFont: {
				align: "center",
				baseline: "middle",
				fontSize: tgSelect({
					big: 22,
					small: 12
				}),
				fontFace: "ff_opensans_extrabold",
				fillColor: "#1d347f",
				shadow: {
					active: true,
					color: "#68cbfa",
					offsetY: tgScale(2)
				}
			},
			medalEffectDuration: 500,
			medalEffectDelay: 500,
			medalEffectOffsetY: tgScale(-30),
			medalShineDuration: 500,
			medalShineDelay: 0,
			medalShineLoopInterval: 4000,
			totalScoreCounterDelay: 600,
			totalScoreCounterDuration: 1500,
			bonusCounterDelay: 500,
			bonusCounterDuration: 750,
			highScoreBtnX: {
				align: "center"
			},
			highScoreBtnY: tgScale(290),
			highScoreBtnWidth: tgScale(350),
			moreGamesOverlayDelay: 1000,
			type: {
				"level": {
					backgroundImageType: "level",
					showStars: true,
					showMedal: true,
					titleItem: "title_level",
					statsItems: "totalScore",
					backButtonType: "retry",
					forwardButtonType: "next"
				},
				"failed": {
					backgroundImageType: "failed",
					showStars: false,
					showMedal: false,
					titleItem: "title_level",
					subTitleItem: "subtitle_failed",
					backButtonType: "exit",
					forwardButtonType: "retry"
				},
				"endless": {
					backgroundImageType: "endless",
					showStars: false,
					showMedal: true,
					titleItem: "title_endless",
					emphasizedStatsItem: "totalScore",
					statsItems: "highScore",
					backButtonType: "exit",
					forwardButtonType: "retry"
				},
				"difficulty": {
					backgroundImageType: "difficulty",
					showStars: false,
					showMedal: true,
					titleItem: "title_difficulty",
					emphasizedStatsItem: "timeLeft",
					statsItems: ["totalScore", "timeBonus"],
					backButtonType: "exit",
					forwardButtonType: "retry"
				}
			}
		},
		levelEnd_landscape: {
			closeButtonY: tgScale(0),
			titleY: tgScale(30),
			emphasizedStatsHeaderY: tgScale(114),
			emphasizedStatsY: tgScale(146),
			statsHeaderY: tgScale(266),
			backButtonY: tgScale(488),
			forwardButtonY: tgScale(428),
			medalX: {
				align: "center",
				offset: tgScale(220)
			},
			medalY: tgScale(260)
		},
		inGame: {
			backgroundImage: (typeof s_background !== "undefined")? s_background : undefined
		},
		options: {
			backgroundImage: s_overlay_options,
			overlayImageOffsetX: {
				align: "center"
			},
			overlayImageOffsetY: 0,
			titleFont: {},
			titleX: {
				align: "center"
			},
			titleY: tgScale(58),
			titleMaxWidth: tgScale(500),
			titleMaxHeight: tgScale(100),
			buttonsWidth: tgScale(460, "round"),
			buttonsOffsetX: {
				align: "center"
			},
			buttonsOffsetY: {
				align: "center",
				offset: tgScale(36)
			},
			buttonsOffsetInBetween: tgScale(10, "round"),
			closeButtonX: tgScale(510),
			closeButtonY: tgScale(10),
			closeButtonMaskWidth: tgScale(130),
			closeButtonMaskHeight: tgScale(90),
			buttons: {
				"startScreen": ["tutorial", ["music", "sfx"], "language", "moreGames"],
				"levelMapScreen": ["startScreen", ["music", "sfx"], "language", "moreGames"],
				"inGame": ["resume", "tutorial", ["music", "sfx"], "moreGames", "quit"]
			},
			overlayAnimInDuration: 800,
			overlayAnimInEase: tbEase.easeOutOvershoot,
			overlayAnimOutDuration: 600,
			overlayAnimOutEase: tbEase.easeInCubic,
			confirmQuestionTextX: {
				align: "center"
			},
			confirmQuestionTextY: tgScale(260),
			confirmQuestionTextWidth: tgScale(460),
			confirmQuestionTextHeight: tgScale(300),
			confirmQuestionBtnYesX: {
				align: "center"
			},
			confirmQuestionBtnYesY: tgScale(460),
			confirmQuestionBtnNoX: {
				align: "center"
			},
			confirmQuestionBtnNoY: tgScale(560, "round"),
			confirmQuestionBtnsWidth: tgScale(460, "round"),
			quitConfirmFont: {},
			tutorialBackgroundImage: (typeof s_tutorial !== "undefined")? s_tutorial : undefined,
			tutorialBackgroundOffsetX: {
				align: "center"
			},
			tutorialBackgroundOffsetY: tgScale(84, "round"),
			tutorialTitleFont: {
				align: "center",
				baseline: "top"
			},
			tutorialTitleMaxWidth: tgScale(480),
			tutorialTitleMaxHeight: tgScale(46),
			tutorialTitleOffsetX: {
				align: "center"
			},
			tutorialTitleOffsetY: tgScale(110, "round"),
			tutorialImageOffsetX: {
				align: "center"
			},
			tutorialImageOffsetY: tgScale(160, "round"),
			tutorialTextOffsetX: {
				align: "center"
			},
			tutorialTextOffsetY: tgScale(446, "round"),
			tutorialFont: {
				baseline: "middle",
				align: "center",
				fontSize: tgSelect({
					big: 36,
					small: 18
				})
			},
			tutorialTextWidth: tgScale(480),
			tutorialTextHeight: tgScale(160),
			tutorialButtonPreviousX: {
				align: "center",
				offset: tgScale(-80, "round")
			},
			tutorialButtonPreviousY: tgScale(556, "round"),
			tutorialButtonNextX: {
				align: "center",
				offset: tgScale(80, "round")
			},
			tutorialButtonNextY: tgScale(556, "round"),
			aboutHeaderFont: {
				align: "center",
				baseline: "top",
				fillColor: "#3C0058",
				fontSize: tgSelect({
					big: 26,
					small: 13
				}),
				spacing: tgScale(6)
			},
			aboutHeaderMaxWidth: tgScale(480),
			aboutHeaderMaxHeight: tgScale(50),
			aboutHeaderOffsetX: {
				align: "center"
			},
			aboutHeaderOffsetY: tgScale(106, "round"),
			aboutTextFont: {
				align: "center",
				baseline: "top",
				fillColor: "#3C0058",
				fontSize: tgSelect({
					big: 26,
					small: 13
				}),
				spacing: tgScale(6)
			},
			aboutTextMaxWidth: tgScale(480),
			aboutTextMaxHeight: tgScale(110),
			aboutTextOffsetX: {
				align: "center"
			},
			aboutTextOffsetY: tgScale(396, "round"),
			aboutLogoOffsetX: {
				align: "center"
			},
			aboutLogoOffsetY: tgScale(140),
			aboutBackBtnOffsetX: {
				align: "center"
			},
			aboutBackBtnOffsetY: tgScale(500),
			aboutBackBtnWidth: tgScale(480),
			aboutVersionFont: {
				align: "center",
				baseline: "top",
				fillColor: "#808080",
				fontSize: tgSelect({
					big: 12,
					small: 8
				})
			},
			aboutVersionOffsetX: {
				align: "center"
			},
			aboutVersionOffsetY: tgScale(610),
			aboutVersionMaxWidth: tgScale(440),
			aboutVersionMaxHeight: tgScale(20),
			aboutVersionKeyAreaWidth: tgScale(200),
			aboutVersionKeyAreaHeight: tgScale(200),
			versionsOffsetX: tgScale(80),
			versionsOffsetY: tgScale(140),
			versionsMarginY: tgScale(10)
		},
		options_landscape: {
			titleY: tgScale(12),
			buttonsOffsetY: {
				align: "center",
				offset: tgScale(16)
			},
			confirmQuestionTextY: tgScale(200),
			confirmQuestionTextHeight: tgScale(300),
			confirmQuestionBtnYesY: tgScale(400),
			confirmQuestionBtnNoY: tgScale(500, "round"),
			tutorialBackgroundOffsetY: tgScale(60, "round"),
			tutorialTitleOffsetY: tgScale(80, "round"),
			tutorialImageOffsetY: tgScale(134, "round"),
			tutorialTextOffsetY: tgScale(410, "round"),
			tutorialButtonPreviousY: tgScale(500, "round"),
			tutorialButtonNextY: tgScale(500, "round"),
			aboutHeaderOffsetY: tgScale(86, "round"),
			aboutLogoOffsetY: tgScale(126),
			aboutTextOffsetY: tgScale(392, "round"),
			aboutBackBtnOffsetY: tgScale(490),
			aboutVersionOffsetY: tgScale(590)
		},
		options_challenge: {
			backgroundImage: (typeof s_overlay_challenge_options !== "undefined")? s_overlay_challenge_options : s_overlay_options,
			overlayImageOffsetX: {
				align: "center"
			},
			overlayImageOffsetY: tgScale(120),
			titleFont: {},
			titleX: {
				align: "center"
			},
			titleY: tgScale(200),
			buttonsWidth: tgScale(460, "round"),
			buttonsOffsetX: {
				align: "center"
			},
			buttonsOffsetY: {
				align: "center",
				offset: tgScale(140)
			},
			buttonsOffsetInBetween: tgScale(10, "round"),
			closeButtonX: tgScale(510),
			closeButtonY: tgScale(10),
			closeButtonMaskWidth: tgScale(130),
			closeButtonMaskHeight: tgScale(90),
			buttons: {
				"startScreen": ["tutorial", ["music", "sfx"], "language"],
				"inGame_challengee": ["resume", "tutorial", ["music", "sfx"], "forfeitChallenge"],
				"inGame_challenger": ["resume", "tutorial", ["music", "sfx"], "cancelChallenge"]
			},
			overlayAnimInDuration: 800,
			overlayAnimInEase: tbEase.easeOutOvershoot,
			overlayAnimOutDuration: 600,
			overlayAnimOutEase: tbEase.easeInCubic,
			quitConfirmFont: {},
			quitConfirmTextX: {
				align: "center"
			},
			quitConfirmTextY: tgScale(360),
			quitConfirmTextWidth: tgScale(460),
			quitConfirmTextHeight: tgScale(300),
			quitConfirmBtnYesType: "default_text",
			quitConfirmBtnYesX: {
				align: "center"
			},
			quitConfirmBtnYesY: tgScale(630),
			quitConfirmBtnNoType: "default_text",
			quitConfirmBtnNoX: {
				align: "center"
			},
			quitConfirmBtnNoY: tgScale(730, "round"),
			quitConfirmBtnsWidth: tgScale(460, "round"),
			confirmQuestionFont: {},
			confirmQuestionTextX: {
				align: "center"
			},
			confirmQuestionTextY: tgScale(200),
			confirmQuestionTextWidth: tgScale(460),
			confirmQuestionTextHeight: tgScale(250),
			confirmQuestionBtnYesX: {
				align: "center"
			},
			confirmQuestionBtnYesY: tgScale(520),
			confirmQuestionBtnNoX: {
				align: "center"
			},
			confirmQuestionBtnNoY: tgScale(620, "round"),
			confirmQuestionBtnsWidth: tgScale(460, "round"),
			messageFont: {},
			messageTextX: {
				align: "center"
			},
			messageTextY: tgScale(200),
			messageTextWidth: tgScale(460),
			messageTextHeight: tgScale(300),
			tutorialBackgroundImage: (typeof s_tutorial !== "undefined")? s_tutorial : undefined,
			tutorialBackgroundOffsetX: {
				align: "center"
			},
			tutorialBackgroundOffsetY: tgScale(0, "round"),
			tutorialTitleFont: {
				align: "center",
				baseline: "top"
			},
			tutorialTitleMaxWidth: tgScale(480),
			tutorialTitleMaxHeight: tgScale(50),
			tutorialTitleOffsetX: {
				align: "center"
			},
			tutorialTitleOffsetY: tgScale(20, "round"),
			tutorialImageOffsetX: {
				align: "center"
			},
			tutorialImageOffsetY: tgScale(70, "round"),
			tutorialTextOffsetX: {
				align: "center"
			},
			tutorialTextOffsetY: tgScale(356, "round"),
			tutorialFont: {
				baseline: "middle",
				align: "center",
				fontSize: tgSelect({
					big: 36,
					small: 18
				})
			},
			tutorialTextWidth: tgScale(480),
			tutorialTextHeight: tgScale(150),
			tutorialButtonPreviousX: tgScale(224, "round"),
			tutorialButtonPreviousY: tgScale(636, "round"),
			tutorialButtonNextX: tgScale(350, "round"),
			tutorialButtonNextY: tgScale(636, "round"),
			aboutHeaderFont: {
				align: "center",
				baseline: "top",
				fillColor: "#3C0058",
				fontSize: tgSelect({
					big: 26,
					small: 13
				}),
				spacing: tgScale(6)
			},
			aboutHeaderMaxWidth: tgScale(480),
			aboutHeaderMaxHeight: tgScale(50),
			aboutHeaderOffsetX: {
				align: "center"
			},
			aboutHeaderOffsetY: tgScale(26, "round"),
			aboutTextFont: {
				align: "center",
				baseline: "top",
				fillColor: "#3C0058",
				fontSize: tgSelect({
					big: 26,
					small: 13
				}),
				spacing: tgScale(6)
			},
			aboutTextMaxWidth: tgScale(480),
			aboutTextMaxHeight: tgScale(110),
			aboutTextOffsetX: {
				align: "center"
			},
			aboutTextOffsetY: tgScale(316, "round"),
			aboutLogoOffsetX: {
				align: "center"
			},
			aboutLogoOffsetY: tgScale(60),
			aboutBackBtnOffsetX: {
				align: "center"
			},
			aboutBackBtnOffsetY: tgScale(420),
			aboutBackBtnWidth: tgScale(480),
			aboutVersionFont: {
				align: "center",
				baseline: "top",
				fillColor: "#808080",
				fontSize: tgSelect({
					big: 12,
					small: 8
				})
			},
			aboutVersionOffsetX: {
				align: "center"
			},
			aboutVersionOffsetY: tgScale(530),
			aboutVersionMaxWidth: tgScale(440),
			aboutVersionMaxHeight: tgScale(20),
			aboutVersionKeyAreaWidth: tgScale(200),
			aboutVersionKeyAreaHeight: tgScale(200),
			versionsOffsetX: tgScale(80),
			versionsOffsetY: tgScale(100),
			versionsMarginY: tgScale(10)
		},
		dialog: {
			backgroundImage: typeof s_overlay_dialog !== "undefined"? s_overlay_dialog : s_overlay_options,
			overlayImageOffsetX: {
				align: "center"
			},
			overlayImageOffsetY: tgScale(120),
			buttonsWidth: tgScale(460, "round"),
			buttonsOffsetX: {
				align: "center"
			},
			buttonsOffsetY: {
				align: "bottom",
				offset: tgScale(20)
			},
			buttonsOffsetInBetween: tgScale(10, "round"),

			closeButtonX: tgScale(510),
			closeButtonY: tgScale(10),
			closeButtonMaskWidth: tgScale(130),
			closeButtonMaskHeight: tgScale(90),

			overlayAnimInDuration: 800,
			overlayAnimInEase: tbEase.easeOutOvershoot,
			overlayAnimOutDuration: 600,
			overlayAnimOutEase: tbEase.easeInCubic,
			questionFont: {},
			questionTextX: {
				align: "center"
			},
			questionTextY: {
				align: "center",
				offset: tgScale(40)
			},
			questionTextWidth: tgScale(460),
			questionTextHeight: tgScale(300),
			subQuestionFont: {},
			questionSubTextX: {
				align: "center"
			},
			questionSubTextY: {
				align: "center",
				offset: tgScale(160)
			},
			questionSubTextWidth: tgScale(460),
			questionSubTextHeight: tgScale(200)
		},
		gameEndScreen: {
			backgroundImage: (typeof s_screen_end !== "undefined")? s_screen_end : undefined,
			textX: {
				align: "center"
			},
			textY: tgScale(152),
			textMaxWidth: tgScale(560),
			textMaxHeight: tgScale(560),
			font: {
				align: "center",
				baseline: "middle",
				fontSize: tgSelect({
					big: 52,
					small: 26
				}),
				fillColor: "#FFFFFF"
			},
			btnX: {
				align: "center"
			},
			btnY: tgScale(600),
			btnWidth: tgScale(460),
			btnType: "default_text"
		},
		gameEndScreen_landscape: {
			btnY: tgScale(520)
		}
	};
};



//******************************************************
//*****    Script Resource: config_general
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************
/* exported game_configuration */
var configuration_general = {
	publisherId: "boostermedia",
	track: false,
	siteLock: {
		lock: false,
		domains: [
			"8784d238b5a81ab432d0bf303850ed8a",
			"9f5ffc7a10e0bad054458b089947ce2f",
			"0c73b027c77dd2c1ee6cd996c2c83efc", 
			"0e26dbc8d26a0880786e55e3e950a320", //http://games.gamesplaza.com/
			"7e77fcbd9a8ec327db79b6c753a5eef1", //http://cdn.mobinozer.com/
			"5ff97ceeea117a01f512adc7ece5ade7", //http://games.nolimitsgames.com/
			"54f5ededff723ca5c52bc75764ceb738", //http://cdn.nolimitsgames.com/
			"526ceb1f05b2418711e1eb59058e0b09", //http://games.jeux.com/
			"ae11a4449bebb3561a078bac793dc74b", //http://games.connectedgamestore.com/
			"f51482fb5ecee35fd139f89728a7a616" //http://games.bmmob.com
		]
	},
	languages: {
		initial: "en-us",
		available: ["en-us"]
	}
};



//******************************************************
//*****    Script Resource: game_settings
//******************************************************

//////////////////////////////////////////////////////
// Settings file for game racer                     //
// Created from levels file racer_levels            //
//                                                  //
// Created by the Tingly Level Editor               //
//     on 15-1-2016 10:39:13                        //
//////////////////////////////////////////////////////

// Directives for jshint
/* global tgScale */
/* global tgSelect */
/* exported gameSettingsVar */
/* exported initGameSettings */

var gameSettingsVar = null;

var initGameSettings = function() {
	"use strict";

	// *****************************************
	// Global Settings
	// *****************************************

	gameSettingsVar = {
		canvasses_landscape : {
			canvasGameUI : {id: "canvasGameUI", depth: 150, top: 0, left: tgScale(140), width: tgScale(170, "round") }// 
		},
		framework : {
			defaultLevelState : "locked",                  // Default state for the levels
			gameId : "racer",                              // 
			gameType : "level",                            // The type of the game
			menuButtons : ["resume", "tutorial", ["music", "sfx"], "restart", "quit"],// 
			noOfLevels : [12],                             // The number of levels in the game
			showDifficulty : false,                        // Whether to show the difficulty buttons on the start screen
			showGameEndScreen : true,                      // Indicates whether or not to show the "game complete" screen after you have played the final level (only works for games with a level select screen)
			showLevelMap : true,                           // Indicates whether the level select screen should be shown
			usePerWorldLevelNumbering : true               // Indicates whether the level number displayed  in the levelEndScreen should be per world or accumulated over all worlds
		},
		levelEnd : {
			backButtonType : "retry",                      // 
			emphasizedStatsItem : "totalScore",            // 
			forwardButtonType : "next",                    // 
			showMedal : true,                              // 
			showStars : true,                              // 
			statsItems : "highscore",                      // 
			subTitleItem : "",                             // 
			titleItem : "title_level"                      // 
		}
	};

	// *****************************************
	// Element Type: track
	// *****************************************

	gameSettingsVar.track = {
		"double_crossroad" : {
			width : tgScale(3190),
			height : tgScale(2560),
			items : [
				{ x : tgScale(290), y : tgScale(162), id : "tp_corner_07" },
				{ x : tgScale(177), y : tgScale(266), id : "tp_corner_06" },
				{ x : tgScale(1972), y : tgScale(162), id : "tp_corner_07" },
				{ x : tgScale(2396), y : tgScale(156), id : "tp_corner_00" },
				{ x : tgScale(2499), y : tgScale(267), id : "tp_corner_01" },
				{ x : tgScale(2505), y : tgScale(692), id : "tp_corner_02" },
				{ x : tgScale(2394), y : tgScale(795), id : "tp_corner_03" },
				{ x : tgScale(1971), y : tgScale(801), id : "tp_corner_04" },
				{ x : tgScale(1163), y : tgScale(1152), id : "tp_crossroad_01" },
				{ x : tgScale(1373), y : tgScale(1879), id : "tp_corner_05" },
				{ x : tgScale(1476), y : tgScale(1990), id : "tp_corner_04" },
				{ x : tgScale(2598), y : tgScale(1984), id : "tp_corner_03" },
				{ x : tgScale(1887), y : tgScale(1885), id : "tp_straight_00" },
				{ x : tgScale(2709), y : tgScale(1881), id : "tp_corner_02" },
				{ x : tgScale(2703), y : tgScale(1457), id : "tp_corner_01" },
				{ x : tgScale(2600), y : tgScale(1347), id : "tp_corner_00" },
				{ x : tgScale(183), y : tgScale(690), id : "tp_corner_05" },
				{ x : tgScale(779), y : tgScale(1295), id : "tp_corner_04" },
				{ x : tgScale(1887), y : tgScale(1190), id : "tp_straight_00" },
				{ x : tgScale(700), y : tgScale(-1), id : "tp_straight_00" },
				{ x : tgScale(1485), y : tgScale(281), id : "tp_crossroad_00" },
				{ x : tgScale(1414), y : tgScale(154), id : "tp_corner_00" },
				{ x : tgScale(1367), y : tgScale(759), id : "tp_corner_06" },
				{ x : tgScale(320), y : tgScale(797), id : "tp_straight_03" },
				{ x : tgScale(274), y : tgScale(806), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(844), y : tgScale(860), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(2294), y : tgScale(1718), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(610), y : tgScale(572), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2314), y : tgScale(548), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(2510), y : tgScale(1034), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(498), y : tgScale(262), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1610), y : tgScale(1922), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2946), y : tgScale(1654), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1942), y : tgScale(1550), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1798), y : tgScale(1018), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2916), y : tgScale(2268), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1305), y : tgScale(2199), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(543), y : tgScale(1472), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1151), y : tgScale(1134), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1788), y : tgScale(1876), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1194), y : tgScale(1716), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(2515), y : tgScale(1769), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2030), y : tgScale(1783), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1450), y : tgScale(1456), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(2065), y : tgScale(2294), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(2117), y : tgScale(2147), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(653), y : tgScale(372), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(2878), y : tgScale(322), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(1619), y : tgScale(344), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1592), y : tgScale(-2), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1247), y : tgScale(199), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 0 },
				{ x : tgScale(39), y : tgScale(309), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(-2), y : tgScale(806), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(69), y : tgScale(66), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2651), y : tgScale(1132), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1369), y : tgScale(589), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2390), y : tgScale(184), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(2997), y : tgScale(1727), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(2669), y : tgScale(1712), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(603), y : tgScale(882), id : "decal_track_07", image : s_decal_track_07 },
				{ x : tgScale(566), y : tgScale(1280), id : "decal_track_08", image : s_decal_track_08 },
				{ x : tgScale(1120), y : tgScale(1986), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(745), y : tgScale(1727), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1854), y : tgScale(98), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2564), y : tgScale(2), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2872), y : tgScale(80), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2916), y : tgScale(972), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2922), y : tgScale(1270), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(896), y : tgScale(626), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1120), y : tgScale(568), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1144), y : tgScale(822), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(68), y : tgScale(1110), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(362), y : tgScale(1302), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(356), y : tgScale(-10), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2612), y : tgScale(1056), id : "checkpoint", index : 1 },
				{ x : tgScale(2232), y : tgScale(378), id : "checkpoint", index : 3 },
				{ x : tgScale(1567), y : tgScale(1090), id : "checkpoint", index : 4 },
				{ x : tgScale(1589), y : tgScale(2086), id : "checkpoint", index : 5 },
				{ x : tgScale(1205), y : tgScale(1529), id : "checkpoint", index : 9 },
				{ x : tgScale(460), y : tgScale(448), id : "checkpoint", index : 10 },
				{ x : tgScale(2698), y : tgScale(516), id : "checkpoint", index : 2 },
				{ x : tgScale(2806), y : tgScale(2224), id : "checkpoint", index : 6 },
				{ x : tgScale(2430), y : tgScale(1548), id : "checkpoint", index : 8 },
				{ x : tgScale(1480), y : tgScale(367), id : "checkpoint", index : 0 },
				{ x : tgScale(2904), y : tgScale(1703), id : "checkpoint", index : 7 },
				{ x : tgScale(1191), y : tgScale(268), id : "start_position", angle : 270, index : 2 },
				{ x : tgScale(1041), y : tgScale(290), id : "start_position", angle : 270, index : 1 },
				{ x : tgScale(1125), y : tgScale(387), id : "start_position", angle : 270, index : 0 },
				{ x : tgScale(987), y : tgScale(408), id : "start_position", angle : 270, index : 3 },
				{ x : tgScale(1422), y : tgScale(356), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(1756), y : tgScale(539), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(2309), y : tgScale(972), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(2706), y : tgScale(832), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(2712), y : tgScale(569), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(2476), y : tgScale(509), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(1993), y : tgScale(676), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(1709), y : tgScale(1036), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(1589), y : tgScale(1416), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(1542), y : tgScale(1829), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(1702), y : tgScale(2063), id : "ai_path_point", index : 10, lane : 0 },
				{ x : tgScale(2036), y : tgScale(2174), id : "ai_path_point", index : 11, lane : 0 },
				{ x : tgScale(2652), y : tgScale(2182), id : "ai_path_point", index : 12, lane : 0 },
				{ x : tgScale(2926), y : tgScale(1972), id : "ai_path_point", index : 13, lane : 0 },
				{ x : tgScale(2762), y : tgScale(1628), id : "ai_path_point", index : 14, lane : 0 },
				{ x : tgScale(2156), y : tgScale(1509), id : "ai_path_point", index : 15, lane : 0 },
				{ x : tgScale(1438), y : tgScale(1596), id : "ai_path_point", index : 16, lane : 0 },
				{ x : tgScale(936), y : tgScale(1418), id : "ai_path_point", index : 17, lane : 0 },
				{ x : tgScale(432), y : tgScale(876), id : "ai_path_point", index : 18, lane : 0 },
				{ x : tgScale(512), y : tgScale(526), id : "ai_path_point", index : 19, lane : 0 },
				{ x : tgScale(809), y : tgScale(346), id : "ai_path_point", index : 20, lane : 0 },
				{ x : tgScale(2261), y : tgScale(1065), id : "ai_path_point", index : 2, lane : 1 },
				{ x : tgScale(2647), y : tgScale(827), id : "ai_path_point", index : 3, lane : 1 },
				{ x : tgScale(2651), y : tgScale(559), id : "ai_path_point", index : 4, lane : 1 },
				{ x : tgScale(2453), y : tgScale(320), id : "ai_path_point", index : 5, lane : 1 },
				{ x : tgScale(1634), y : tgScale(1819), id : "ai_path_point", index : 9, lane : 1 },
				{ x : tgScale(1651), y : tgScale(2111), id : "ai_path_point", index : 10, lane : 1 },
				{ x : tgScale(2021), y : tgScale(2319), id : "ai_path_point", index : 11, lane : 1 },
				{ x : tgScale(2664), y : tgScale(2274), id : "ai_path_point", index : 12, lane : 1 },
				{ x : tgScale(2863), y : tgScale(1962), id : "ai_path_point", index : 13, lane : 1 },
				{ x : tgScale(2799), y : tgScale(1574), id : "ai_path_point", index : 14, lane : 1 },
				{ x : tgScale(1429), y : tgScale(1461), id : "ai_path_point", index : 16, lane : 1 },
				{ x : tgScale(357), y : tgScale(901), id : "ai_path_point", index : 18, lane : 1 },
				{ x : tgScale(556), y : tgScale(544), id : "ai_path_point", index : 19, lane : 1 },
				{ x : tgScale(802), y : tgScale(422), id : "ai_path_point", index : 20, lane : 1 }
			]
		},
		"Mario1" : {
			width : tgScale(2000),
			height : tgScale(3200),
			items : [
				{ x : tgScale(177), y : tgScale(1194), id : "tp_straight_02" },
				{ x : tgScale(707), y : tgScale(666), id : "tp_corner_01" },
				{ x : tgScale(67), y : tgScale(1653), id : "tp_corner_06" },
				{ x : tgScale(72), y : tgScale(2078), id : "tp_corner_05" },
				{ x : tgScale(213), y : tgScale(2149), id : "tp_corner_01" },
				{ x : tgScale(277), y : tgScale(2572), id : "tp_corner_05" },
				{ x : tgScale(379), y : tgScale(2683), id : "tp_corner_04" },
				{ x : tgScale(804), y : tgScale(2677), id : "tp_corner_03" },
				{ x : tgScale(915), y : tgScale(2573), id : "tp_corner_02" },
				{ x : tgScale(908), y : tgScale(2148), id : "tp_corner_01" },
				{ x : tgScale(768), y : tgScale(2077), id : "tp_corner_05" },
				{ x : tgScale(762), y : tgScale(1652), id : "tp_corner_06" },
				{ x : tgScale(872), y : tgScale(1194), id : "tp_straight_02" },
				{ x : tgScale(1408), y : tgScale(1092), id : "tp_corner_02" },
				{ x : tgScale(1402), y : tgScale(666), id : "tp_corner_01" },
				{ x : tgScale(1261), y : tgScale(595), id : "tp_corner_05" },
				{ x : tgScale(1197), y : tgScale(172), id : "tp_corner_01" },
				{ x : tgScale(1095), y : tgScale(60), id : "tp_corner_00" },
				{ x : tgScale(670), y : tgScale(66), id : "tp_corner_07" },
				{ x : tgScale(558), y : tgScale(170), id : "tp_corner_06" },
				{ x : tgScale(565), y : tgScale(595), id : "tp_corner_05" },
				{ x : tgScale(714), y : tgScale(1092), id : "tp_corner_02" },
				{ x : tgScale(1694), y : tgScale(943), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(1202), y : tgScale(2425), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(674), y : tgScale(919), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(1370), y : tgScale(468), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1473), y : tgScale(19), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1760), y : tgScale(215), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1724), y : tgScale(502), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(994), y : tgScale(441), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(357), y : tgScale(67), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(51), y : tgScale(249), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(310), y : tgScale(415), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(190), y : tgScale(750), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(386), y : tgScale(1192), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1208), y : tgScale(1007), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1767), y : tgScale(1436), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1066), y : tgScale(669), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(475), y : tgScale(947), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(130), y : tgScale(1070), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(465), y : tgScale(1967), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1309), y : tgScale(1878), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(757), y : tgScale(2530), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1421), y : tgScale(2779), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(37), y : tgScale(2526), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1198), y : tgScale(2906), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1304), y : tgScale(2106), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(360), y : tgScale(2642), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1145), y : tgScale(1554), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(172), y : tgScale(2049), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(237), y : tgScale(1667), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 3 },
				{ x : tgScale(1408), y : tgScale(2481), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(54), y : tgScale(2788), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(249), y : tgScale(2954), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(587), y : tgScale(2172), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1561), y : tgScale(1601), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(960), y : tgScale(1275), id : "checkpoint", index : 9 },
				{ x : tgScale(459), y : tgScale(2593), id : "checkpoint", index : 1 },
				{ x : tgScale(962), y : tgScale(2928), id : "checkpoint", index : 2 },
				{ x : tgScale(1160), y : tgScale(2418), id : "checkpoint", index : 3 },
				{ x : tgScale(1098), y : tgScale(1798), id : "checkpoint", index : 4 },
				{ x : tgScale(1662), y : tgScale(1002), id : "checkpoint", index : 5 },
				{ x : tgScale(1446), y : tgScale(476), id : "checkpoint", index : 6 },
				{ x : tgScale(956), y : tgScale(268), id : "checkpoint", index : 7 },
				{ x : tgScale(766), y : tgScale(752), id : "checkpoint", index : 8 },
				{ x : tgScale(311), y : tgScale(1927), id : "checkpoint", index : 0 },
				{ x : tgScale(460), y : tgScale(1641), id : "start_position", angle : 135, index : 1 },
				{ x : tgScale(632), y : tgScale(1699), id : "start_position", angle : 135, index : 0 },
				{ x : tgScale(572), y : tgScale(1531), id : "start_position", angle : 135, index : 2 },
				{ x : tgScale(743), y : tgScale(1583), id : "start_position", angle : 135, index : 3 },
				{ x : tgScale(308), y : tgScale(1905), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(373), y : tgScale(1970), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(376), y : tgScale(2322), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(582), y : tgScale(2844), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(1034), y : tgScale(2784), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(1048), y : tgScale(2242), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(1126), y : tgScale(1804), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(1696), y : tgScale(1122), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(1436), y : tgScale(562), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(1184), y : tgScale(338), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(828), y : tgScale(470), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(870), y : tgScale(842), id : "ai_path_point", index : 10, lane : 0 },
				{ x : tgScale(1000), y : tgScale(1192), id : "ai_path_point", index : 11, lane : 0 },
				{ x : tgScale(980), y : tgScale(1802), id : "ai_path_point", index : 5, lane : 1 },
				{ x : tgScale(1578), y : tgScale(1116), id : "ai_path_point", index : 6, lane : 1 },
				{ x : tgScale(1286), y : tgScale(292), id : "ai_path_point", index : 8, lane : 1 },
				{ x : tgScale(830), y : tgScale(374), id : "ai_path_point", index : 9, lane : 1 },
				{ x : tgScale(818), y : tgScale(900), id : "ai_path_point", index : 10, lane : 1 },
				{ x : tgScale(912), y : tgScale(1188), id : "ai_path_point", index : 11, lane : 1 }
			]
		},
		"mario2" : {
			width : tgScale(1500),
			height : tgScale(3000),
			items : [
				{ x : tgScale(752), y : tgScale(76), id : "tp_corner_00" },
				{ x : tgScale(855), y : tgScale(187), id : "tp_corner_01" },
				{ x : tgScale(861), y : tgScale(1312), id : "tp_corner_02" },
				{ x : tgScale(333), y : tgScale(1396), id : "tp_crossroad_00" },
				{ x : tgScale(222), y : tgScale(1311), id : "tp_corner_05" },
				{ x : tgScale(216), y : tgScale(1874), id : "tp_corner_06" },
				{ x : tgScale(222), y : tgScale(2299), id : "tp_corner_05" },
				{ x : tgScale(325), y : tgScale(2410), id : "tp_corner_04" },
				{ x : tgScale(750), y : tgScale(2404), id : "tp_corner_03" },
				{ x : tgScale(861), y : tgScale(2300), id : "tp_corner_02" },
				{ x : tgScale(856), y : tgScale(1875), id : "tp_corner_01" },
				{ x : tgScale(914), y : tgScale(594), id : "tp_straight_01" },
				{ x : tgScale(325), y : tgScale(83), id : "tp_corner_07" },
				{ x : tgScale(218), y : tgScale(595), id : "tp_straight_01" },
				{ x : tgScale(214), y : tgScale(186), id : "tp_corner_06" },
				{ x : tgScale(1148), y : tgScale(2148), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(823), y : tgScale(2128), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(747), y : tgScale(104), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(939), y : tgScale(876), id : "decal_track_06", image : s_decal_track_06 },
				{ x : tgScale(362), y : tgScale(2052), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1094), y : tgScale(598), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(456), y : tgScale(1482), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(700), y : tgScale(2234), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(648), y : tgScale(492), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(624), y : tgScale(1254), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(692), y : tgScale(974), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(157), y : tgScale(1673), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(610), y : tgScale(720), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1190), y : tgScale(30), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1267), y : tgScale(321), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(94), y : tgScale(2486), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(130), y : tgScale(96), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(2), y : tgScale(334), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(9), y : tgScale(654), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1097), y : tgScale(2703), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1166), y : tgScale(1719), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1263), y : tgScale(2419), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(264), y : tgScale(512), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 2 },
				{ x : tgScale(1252), y : tgScale(1949), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(40), y : tgScale(1944), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(477), y : tgScale(223), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(431), y : tgScale(575), id : "checkpoint", index : 0 },
				{ x : tgScale(1111), y : tgScale(464), id : "checkpoint", index : 1 },
				{ x : tgScale(415), y : tgScale(2282), id : "checkpoint", index : 3 },
				{ x : tgScale(1102), y : tgScale(1449), id : "checkpoint", index : 2 },
				{ x : tgScale(839), y : tgScale(2660), id : "checkpoint", index : 4 },
				{ x : tgScale(1109), y : tgScale(2149), id : "checkpoint", index : 5 },
				{ x : tgScale(429), y : tgScale(1483), id : "checkpoint", index : 6 },
				{ x : tgScale(483), y : tgScale(841), id : "start_position", angle : 0, index : 1 },
				{ x : tgScale(359), y : tgScale(887), id : "start_position", angle : 0, index : 0 },
				{ x : tgScale(360), y : tgScale(1052), id : "start_position", angle : 0, index : 2 },
				{ x : tgScale(481), y : tgScale(1006), id : "start_position", angle : 0, index : 3 },
				{ x : tgScale(485), y : tgScale(582), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(722), y : tgScale(364), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(1061), y : tgScale(893), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(1132), y : tgScale(1407), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(460), y : tgScale(2205), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(664), y : tgScale(2524), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(985), y : tgScale(2465), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(969), y : tgScale(2067), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(460), y : tgScale(1300), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(382), y : tgScale(550), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(1204), y : tgScale(590), id : "ai_path_point", index : 2, lane : 1 },
				{ x : tgScale(1008), y : tgScale(1415), id : "ai_path_point", index : 3, lane : 1 },
				{ x : tgScale(1005), y : tgScale(1919), id : "ai_path_point", index : 7, lane : 1 }
			]
		},
		"Mario4" : {
			width : tgScale(3000),
			height : tgScale(2000),
			items : [
				{ x : tgScale(370), y : tgScale(1416), id : "tp_corner_04" },
				{ x : tgScale(271), y : tgScale(1304), id : "tp_corner_05" },
				{ x : tgScale(272), y : tgScale(593), id : "tp_straight_01" },
				{ x : tgScale(392), y : tgScale(79), id : "tp_corner_07" },
				{ x : tgScale(277), y : tgScale(183), id : "tp_corner_06" },
				{ x : tgScale(820), y : tgScale(72), id : "tp_corner_00" },
				{ x : tgScale(1542), y : tgScale(509), id : "tp_straight_04" },
				{ x : tgScale(2038), y : tgScale(679), id : "tp_straight_07" },
				{ x : tgScale(1473), y : tgScale(1312), id : "tp_straight_00" },
				{ x : tgScale(2290), y : tgScale(1308), id : "tp_corner_02" },
				{ x : tgScale(778), y : tgScale(1313), id : "tp_straight_00" },
				{ x : tgScale(2180), y : tgScale(1412), id : "tp_corner_03" },
				{ x : tgScale(1923), y : tgScale(525), id : "tp_corner_00" },
				{ x : tgScale(2282), y : tgScale(882), id : "tp_corner_01" },
				{ x : tgScale(1142), y : tgScale(473), id : "tp_corner_04" },
				{ x : tgScale(932), y : tgScale(227), id : "tp_straight_07" },
				{ x : tgScale(1928), y : tgScale(1506), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 0 },
				{ x : tgScale(2574), y : tgScale(1162), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(2250), y : tgScale(1139), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(755), y : tgScale(1494), id : "decal_track_01", image : s_decal_track_01 },
				{ x : tgScale(1577), y : tgScale(742), id : "decal_track_02", image : s_decal_track_02 },
				{ x : tgScale(1155), y : tgScale(1691), id : "decal_track_02", image : s_decal_track_02 },
				{ x : tgScale(298), y : tgScale(770), id : "decal_track_06", image : s_decal_track_06 },
				{ x : tgScale(690), y : tgScale(494), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1203), y : tgScale(1252), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(725), y : tgScale(1227), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1132), y : tgScale(867), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1550), y : tgScale(1039), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(806), y : tgScale(895), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1547), y : tgScale(310), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1307), y : tgScale(537), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(731), y : tgScale(1673), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(1932), y : tgScale(1017), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(87), y : tgScale(1505), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(142), y : tgScale(23), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(80), y : tgScale(941), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(2550), y : tgScale(1713), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(2427), y : tgScale(1068), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2462), y : tgScale(582), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1378), y : tgScale(49), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2145), y : tgScale(342), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1779), y : tgScale(627), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(49), y : tgScale(337), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1882), y : tgScale(189), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(545), y : tgScale(397), id : "checkpoint", index : 3 },
				{ x : tgScale(1666), y : tgScale(726), id : "checkpoint", index : 2 },
				{ x : tgScale(2160), y : tgScale(1668), id : "checkpoint", index : 0 },
				{ x : tgScale(543), y : tgScale(1593), id : "checkpoint", index : 4 },
				{ x : tgScale(2515), y : tgScale(1168), id : "checkpoint", index : 1 },
				{ x : tgScale(1861), y : tgScale(1754), id : "start_position", angle : 270, index : 0 },
				{ x : tgScale(1798), y : tgScale(1668), id : "start_position", angle : 270, index : 1 },
				{ x : tgScale(1738), y : tgScale(1582), id : "start_position", angle : 270, index : 2 },
				{ x : tgScale(617), y : tgScale(1541), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(483), y : tgScale(604), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(825), y : tgScale(361), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(1274), y : tgScale(581), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(1958), y : tgScale(728), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(2314), y : tgScale(947), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(2576), y : tgScale(1455), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(2187), y : tgScale(1709), id : "ai_path_point", index : 0, lane : 0 }
			]
		},
		"Mario5" : {
			width : tgScale(3000),
			height : tgScale(2300),
			items : [
				{ x : tgScale(207), y : tgScale(717), id : "tp_straight_02" },
				{ x : tgScale(706), y : tgScale(224), id : "tp_straight_02" },
				{ x : tgScale(95), y : tgScale(1179), id : "tp_corner_06" },
				{ x : tgScale(101), y : tgScale(1606), id : "tp_corner_05" },
				{ x : tgScale(1207), y : tgScale(83), id : "tp_corner_07" },
				{ x : tgScale(1623), y : tgScale(-83), id : "tp_straight_00" },
				{ x : tgScale(2447), y : tgScale(181), id : "tp_corner_01" },
				{ x : tgScale(205), y : tgScale(1718), id : "tp_corner_04" },
				{ x : tgScale(630), y : tgScale(1713), id : "tp_corner_03" },
				{ x : tgScale(2204), y : tgScale(721), id : "tp_straight_06" },
				{ x : tgScale(2048), y : tgScale(927), id : "tp_corner_06" },
				{ x : tgScale(1993), y : tgScale(1358), id : "tp_corner_02" },
				{ x : tgScale(1877), y : tgScale(1461), id : "tp_corner_03" },
				{ x : tgScale(1454), y : tgScale(1468), id : "tp_corner_04" },
				{ x : tgScale(1381), y : tgScale(1317), id : "tp_corner_00" },
				{ x : tgScale(954), y : tgScale(1323), id : "tp_corner_07" },
				{ x : tgScale(748), y : tgScale(1472), id : "tp_straight_06" },
				{ x : tgScale(2339), y : tgScale(71), id : "tp_corner_00" },
				{ x : tgScale(2451), y : tgScale(609), id : "tp_corner_02" },
				{ x : tgScale(2414), y : tgScale(439), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(2338), y : tgScale(101), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(1897), y : tgScale(295), id : "decal_track_02", image : s_decal_track_02 },
				{ x : tgScale(1597), y : tgScale(540), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1252), y : tgScale(1750), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(2650), y : tgScale(1075), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(56), y : tgScale(1913), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(1682), y : tgScale(1132), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(1437), y : tgScale(239), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(708), y : tgScale(1025), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1822), y : tgScale(1693), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2280), y : tgScale(982), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1948), y : tgScale(477), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2210), y : tgScale(550), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2005), y : tgScale(792), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1353), y : tgScale(692), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(819), y : tgScale(290), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(529), y : tgScale(359), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(408), y : tgScale(582), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(918), y : tgScale(0), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(85), y : tgScale(1025), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(152), y : tgScale(752), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(507), y : tgScale(1462), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(750), y : tgScale(1377), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(954), y : tgScale(1072), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2666), y : tgScale(20), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1489), y : tgScale(1890), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1002), y : tgScale(1984), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2517), y : tgScale(1437), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2315), y : tgScale(1704), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1183), y : tgScale(284), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 3 },
				{ x : tgScale(1752), y : tgScale(200), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(1418), y : tgScale(369), id : "checkpoint", index : 0 },
				{ x : tgScale(2683), y : tgScale(492), id : "checkpoint", index : 1 },
				{ x : tgScale(2343), y : tgScale(1098), id : "checkpoint", index : 2 },
				{ x : tgScale(1903), y : tgScale(1712), id : "checkpoint", index : 3 },
				{ x : tgScale(1292), y : tgScale(1549), id : "checkpoint", index : 4 },
				{ x : tgScale(405), y : tgScale(1852), id : "checkpoint", index : 5 },
				{ x : tgScale(554), y : tgScale(1182), id : "checkpoint", index : 6 },
				{ x : tgScale(1246), y : tgScale(652), id : "start_position", angle : 315, index : 0 },
				{ x : tgScale(1135), y : tgScale(633), id : "start_position", angle : 315, index : 1 },
				{ x : tgScale(1032), y : tgScale(612), id : "start_position", angle : 315, index : 2 },
				{ x : tgScale(354), y : tgScale(1787), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(600), y : tgScale(1185), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(2439), y : tgScale(287), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(2627), y : tgScale(759), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(1590), y : tgScale(294), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(2278), y : tgScale(1236), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(2092), y : tgScale(1591), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(1612), y : tgScale(1592), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(1161), y : tgScale(1602), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(856), y : tgScale(1886), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(1551), y : tgScale(408), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(2495), y : tgScale(400), id : "ai_path_point", index : 1, lane : 1 },
				{ x : tgScale(2382), y : tgScale(1324), id : "ai_path_point", index : 3, lane : 1 },
				{ x : tgScale(1242), y : tgScale(1692), id : "ai_path_point", index : 6, lane : 1 },
				{ x : tgScale(458), y : tgScale(1797), id : "ai_path_point", index : 8, lane : 1 },
				{ x : tgScale(439), y : tgScale(1244), id : "ai_path_point", index : 9, lane : 1 }
			]
		},
		"Mario6" : {
			width : tgScale(2500),
			height : tgScale(3400),
			items : [
				{ x : tgScale(251), y : tgScale(2179), id : "tp_corner_07" },
				{ x : tgScale(140), y : tgScale(2284), id : "tp_corner_06" },
				{ x : tgScale(145), y : tgScale(2710), id : "tp_corner_05" },
				{ x : tgScale(249), y : tgScale(2821), id : "tp_corner_04" },
				{ x : tgScale(674), y : tgScale(2814), id : "tp_corner_03" },
				{ x : tgScale(787), y : tgScale(2710), id : "tp_corner_02" },
				{ x : tgScale(634), y : tgScale(1278), id : "tp_crossroad_01" },
				{ x : tgScale(839), y : tgScale(595), id : "tp_straight_01" },
				{ x : tgScale(675), y : tgScale(76), id : "tp_corner_00" },
				{ x : tgScale(249), y : tgScale(1421), id : "tp_corner_04" },
				{ x : tgScale(145), y : tgScale(1311), id : "tp_corner_05" },
				{ x : tgScale(140), y : tgScale(596), id : "tp_straight_01" },
				{ x : tgScale(1723), y : tgScale(2113), id : "tp_corner_03" },
				{ x : tgScale(1347), y : tgScale(2156), id : "tp_straight_04" },
				{ x : tgScale(1346), y : tgScale(1459), id : "tp_straight_04" },
				{ x : tgScale(1828), y : tgScale(1583), id : "tp_corner_01" },
				{ x : tgScale(1834), y : tgScale(2008), id : "tp_corner_02" },
				{ x : tgScale(1724), y : tgScale(1473), id : "tp_corner_00" },
				{ x : tgScale(250), y : tgScale(81), id : "tp_corner_07" },
				{ x : tgScale(140), y : tgScale(186), id : "tp_corner_06" },
				{ x : tgScale(778), y : tgScale(188), id : "tp_corner_01" },
				{ x : tgScale(635), y : tgScale(1978), id : "tp_crossroad_01" },
				{ x : tgScale(668), y : tgScale(104), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(1719), y : tgScale(1503), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(2119), y : tgScale(1858), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(165), y : tgScale(879), id : "decal_track_06", image : s_decal_track_06 },
				{ x : tgScale(1277), y : tgScale(1240), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(603), y : tgScale(1999), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1277), y : tgScale(2622), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(27), y : tgScale(144), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1050), y : tgScale(61), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(13), y : tgScale(2907), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(554), y : tgScale(1053), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(363), y : tgScale(1422), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1157), y : tgScale(1690), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(384), y : tgScale(2488), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(835), y : tgScale(3042), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1272), y : tgScale(2279), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(654), y : tgScale(1570), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(887), y : tgScale(533), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 2 },
				{ x : tgScale(783), y : tgScale(2407), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(2139), y : tgScale(1432), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1638), y : tgScale(1869), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1849), y : tgScale(1198), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1552), y : tgScale(1159), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1291), y : tgScale(1971), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2025), y : tgScale(2517), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1640), y : tgScale(2576), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1568), y : tgScale(2924), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1043), y : tgScale(3113), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1251), y : tgScale(2868), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(627), y : tgScale(514), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(545), y : tgScale(798), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1234), y : tgScale(563), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(78), y : tgScale(1650), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(112), y : tgScale(2133), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(322), y : tgScale(1862), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1234), y : tgScale(926), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1298), y : tgScale(54), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1400), y : tgScale(312), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1502), y : tgScale(920), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1496), y : tgScale(654), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(590), y : tgScale(2564), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2238), y : tgScale(2246), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(464), y : tgScale(329), id : "checkpoint", index : 1 },
				{ x : tgScale(341), y : tgScale(1396), id : "checkpoint", index : 2 },
				{ x : tgScale(1733), y : tgScale(1674), id : "checkpoint", index : 3 },
				{ x : tgScale(1052), y : tgScale(505), id : "checkpoint", index : 0 },
				{ x : tgScale(2086), y : tgScale(2131), id : "checkpoint", index : 4 },
				{ x : tgScale(1445), y : tgScale(2382), id : "checkpoint", index : 5 },
				{ x : tgScale(356), y : tgScale(2555), id : "checkpoint", index : 6 },
				{ x : tgScale(586), y : tgScale(3059), id : "checkpoint", index : 7 },
				{ x : tgScale(1030), y : tgScale(2766), id : "checkpoint", index : 8 },
				{ x : tgScale(949), y : tgScale(880), id : "start_position", angle : 0, index : 1 },
				{ x : tgScale(1042), y : tgScale(933), id : "start_position", angle : 0, index : 0 },
				{ x : tgScale(1133), y : tgScale(986), id : "start_position", angle : 0, index : 2 },
				{ x : tgScale(1093), y : tgScale(1134), id : "start_position", angle : 0, index : 3 },
				{ x : tgScale(990), y : tgScale(1075), id : "start_position", angle : 0, index : 4 },
				{ x : tgScale(983), y : tgScale(640), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(690), y : tgScale(367), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(329), y : tgScale(724), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(497), y : tgScale(1534), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(1727), y : tgScale(1769), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(2042), y : tgScale(1941), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(1765), y : tgScale(2256), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(678), y : tgScale(2382), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(359), y : tgScale(2723), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(832), y : tgScale(3034), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(1053), y : tgScale(2517), id : "ai_path_point", index : 10, lane : 0 },
				{ x : tgScale(1080), y : tgScale(548), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(444), y : tgScale(754), id : "ai_path_point", index : 2, lane : 1 },
				{ x : tgScale(1702), y : tgScale(1672), id : "ai_path_point", index : 4, lane : 1 },
				{ x : tgScale(1727), y : tgScale(2364), id : "ai_path_point", index : 6, lane : 1 },
				{ x : tgScale(928), y : tgScale(2736), id : "ai_path_point", index : 10, lane : 1 },
				{ x : tgScale(1958), y : tgScale(2004), id : "ai_path_point", index : 5, lane : 1 },
				{ x : tgScale(591), y : tgScale(2503), id : "ai_path_point", index : 7, lane : 1 },
				{ x : tgScale(460), y : tgScale(2740), id : "ai_path_point", index : 8, lane : 1 },
				{ x : tgScale(695), y : tgScale(2952), id : "ai_path_point", index : 9, lane : 1 }
			]
		},
		"Shanghai1" : {
			width : tgScale(2000),
			height : tgScale(3500),
			items : [
				{ x : tgScale(170), y : tgScale(1314), id : "tp_straight_01" },
				{ x : tgScale(171), y : tgScale(619), id : "tp_straight_01" },
				{ x : tgScale(280), y : tgScale(115), id : "tp_corner_07" },
				{ x : tgScale(170), y : tgScale(2010), id : "tp_straight_01" },
				{ x : tgScale(174), y : tgScale(2721), id : "tp_corner_05" },
				{ x : tgScale(276), y : tgScale(2826), id : "tp_corner_04" },
				{ x : tgScale(699), y : tgScale(2816), id : "tp_corner_03" },
				{ x : tgScale(810), y : tgScale(2709), id : "tp_corner_02" },
				{ x : tgScale(805), y : tgScale(2282), id : "tp_corner_01" },
				{ x : tgScale(663), y : tgScale(2210), id : "tp_corner_05" },
				{ x : tgScale(659), y : tgScale(1783), id : "tp_corner_06" },
				{ x : tgScale(769), y : tgScale(1673), id : "tp_corner_07" },
				{ x : tgScale(1194), y : tgScale(1604), id : "tp_corner_03" },
				{ x : tgScale(1304), y : tgScale(1500), id : "tp_corner_02" },
				{ x : tgScale(1339), y : tgScale(1124), id : "tp_straight_05" },
				{ x : tgScale(704), y : tgScale(116), id : "tp_corner_00" },
				{ x : tgScale(1296), y : tgScale(727), id : "tp_corner_01" },
				{ x : tgScale(169), y : tgScale(213), id : "tp_corner_06" },
				{ x : tgScale(802), y : tgScale(262), id : "tp_straight_03" },
				{ x : tgScale(773), y : tgScale(2537), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(196), y : tgScale(1915), id : "decal_track_06", image : s_decal_track_06 },
				{ x : tgScale(1055), y : tgScale(751), id : "decal_track_08", image : s_decal_track_08 },
				{ x : tgScale(1383), y : tgScale(1092), id : "decal_track_06", image : s_decal_track_06 },
				{ x : tgScale(1097), y : tgScale(2555), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(658), y : tgScale(576), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(893), y : tgScale(781), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(569), y : tgScale(826), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1142), y : tgScale(1402), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(638), y : tgScale(1632), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1037), y : tgScale(1063), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1114), y : tgScale(2064), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1472), y : tgScale(2020), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1040), y : tgScale(1902), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(288), y : tgScale(2818), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(482), y : tgScale(216), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(368), y : tgScale(1770), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(-7), y : tgScale(1158), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1352), y : tgScale(2574), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(670), y : tgScale(2636), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1082), y : tgScale(12), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1030), y : tgScale(292), id : "decal_track_07", image : s_decal_track_07 },
				{ x : tgScale(1263), y : tgScale(215), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(1584), y : tgScale(247), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(58), y : tgScale(3010), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(953), y : tgScale(3167), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(594), y : tgScale(3267), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1632), y : tgScale(608), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(28), y : tgScale(225), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(184), y : tgScale(10), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(647), y : tgScale(1265), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(209), y : tgScale(848), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 2 },
				{ x : tgScale(209), y : tgScale(3240), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1254), y : tgScale(3148), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1244), y : tgScale(2880), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1665), y : tgScale(1785), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1315), y : tgScale(2295), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(372), y : tgScale(807), id : "checkpoint", index : 0 },
				{ x : tgScale(886), y : tgScale(324), id : "checkpoint", index : 1 },
				{ x : tgScale(1567), y : tgScale(1357), id : "checkpoint", index : 2 },
				{ x : tgScale(874), y : tgScale(2183), id : "checkpoint", index : 3 },
				{ x : tgScale(1023), y : tgScale(2955), id : "checkpoint", index : 4 },
				{ x : tgScale(417), y : tgScale(2952), id : "checkpoint", index : 5 },
				{ x : tgScale(314), y : tgScale(1171), id : "start_position", angle : 0, index : 0 },
				{ x : tgScale(433), y : tgScale(1222), id : "start_position", angle : 0, index : 1 },
				{ x : tgScale(437), y : tgScale(1362), id : "start_position", angle : 0, index : 2 },
				{ x : tgScale(312), y : tgScale(1324), id : "start_position", angle : 0, index : 3 },
				{ x : tgScale(441), y : tgScale(510), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(911), y : tgScale(379), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(1484), y : tgScale(1045), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(1437), y : tgScale(1698), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(976), y : tgScale(2115), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(962), y : tgScale(2446), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(866), y : tgScale(3027), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(401), y : tgScale(2469), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(361), y : tgScale(1510), id : "ai_path_point", index : 9, lane : 0 }
			]
		},
		"Mario7" : {
			width : tgScale(2900),
			height : tgScale(2700),
			items : [
				{ x : tgScale(588), y : tgScale(2052), id : "tp_straight_00" },
				{ x : tgScale(75), y : tgScale(2044), id : "tp_corner_05" },
				{ x : tgScale(178), y : tgScale(2155), id : "tp_corner_04" },
				{ x : tgScale(1287), y : tgScale(2052), id : "tp_straight_00" },
				{ x : tgScale(68), y : tgScale(1620), id : "tp_corner_06" },
				{ x : tgScale(178), y : tgScale(1516), id : "tp_corner_07" },
				{ x : tgScale(605), y : tgScale(1511), id : "tp_corner_00" },
				{ x : tgScale(673), y : tgScale(1662), id : "tp_corner_04" },
				{ x : tgScale(1099), y : tgScale(1655), id : "tp_corner_03" },
				{ x : tgScale(1211), y : tgScale(1550), id : "tp_corner_02" },
				{ x : tgScale(1205), y : tgScale(1124), id : "tp_corner_01" },
				{ x : tgScale(1065), y : tgScale(1051), id : "tp_corner_05" },
				{ x : tgScale(2347), y : tgScale(355), id : "tp_corner_01" },
				{ x : tgScale(1864), y : tgScale(219), id : "tp_straight_04" },
				{ x : tgScale(1397), y : tgScale(23), id : "tp_corner_00" },
				{ x : tgScale(968), y : tgScale(26), id : "tp_corner_07" },
				{ x : tgScale(854), y : tgScale(129), id : "tp_corner_06" },
				{ x : tgScale(860), y : tgScale(555), id : "tp_corner_05" },
				{ x : tgScale(1001), y : tgScale(627), id : "tp_corner_01" },
				{ x : tgScale(2244), y : tgScale(239), id : "tp_corner_00" },
				{ x : tgScale(1465), y : tgScale(178), id : "tp_corner_04" },
				{ x : tgScale(2354), y : tgScale(785), id : "tp_corner_02" },
				{ x : tgScale(2108), y : tgScale(899), id : "tp_straight_06" },
				{ x : tgScale(1952), y : tgScale(1105), id : "tp_corner_06" },
				{ x : tgScale(1958), y : tgScale(1535), id : "tp_corner_05" },
				{ x : tgScale(2098), y : tgScale(1611), id : "tp_corner_01" },
				{ x : tgScale(2104), y : tgScale(2040), id : "tp_corner_02" },
				{ x : tgScale(1997), y : tgScale(2146), id : "tp_corner_03" },
				{ x : tgScale(1367), y : tgScale(2245), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 0 },
				{ x : tgScale(1597), y : tgScale(2236), id : "decal_track_01", image : s_decal_track_01 },
				{ x : tgScale(1890), y : tgScale(450), id : "decal_track_02", image : s_decal_track_02 },
				{ x : tgScale(1391), y : tgScale(53), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(603), y : tgScale(1541), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(2071), y : tgScale(1863), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(1173), y : tgScale(1378), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(963), y : tgScale(1429), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(880), y : tgScale(1192), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(697), y : tgScale(863), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(535), y : tgScale(1287), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1930), y : tgScale(933), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1417), y : tgScale(667), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1760), y : tgScale(626), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1894), y : tgScale(1903), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2413), y : tgScale(1483), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2653), y : tgScale(1296), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2566), y : tgScale(1816), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2641), y : tgScale(2184), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2390), y : tgScale(2450), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1390), y : tgScale(1979), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1734), y : tgScale(1673), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2233), y : tgScale(7), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1879), y : tgScale(23), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2600), y : tgScale(64), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(13), y : tgScale(2336), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(1512), y : tgScale(1034), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(719), y : tgScale(74), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1192), y : tgScale(270), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2369), y : tgScale(980), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(316), y : tgScale(1776), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1666), y : tgScale(2450), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(607), y : tgScale(2352), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(2148), y : tgScale(628), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1304), y : tgScale(418), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(540), y : tgScale(304), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(610), y : tgScale(568), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(250), y : tgScale(1220), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(656), y : tgScale(1088), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(32), y : tgScale(1094), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(76), y : tgScale(1418), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(567), y : tgScale(1931), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1698), y : tgScale(1998), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1680), y : tgScale(1418), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1603), y : tgScale(2405), id : "checkpoint", index : 0 },
				{ x : tgScale(2351), y : tgScale(1978), id : "checkpoint", index : 1 },
				{ x : tgScale(2225), y : tgScale(1275), id : "checkpoint", index : 2 },
				{ x : tgScale(2498), y : tgScale(514), id : "checkpoint", index : 3 },
				{ x : tgScale(1413), y : tgScale(237), id : "checkpoint", index : 4 },
				{ x : tgScale(1048), y : tgScale(660), id : "checkpoint", index : 5 },
				{ x : tgScale(1448), y : tgScale(1440), id : "checkpoint", index : 6 },
				{ x : tgScale(1060), y : tgScale(1904), id : "checkpoint", index : 7 },
				{ x : tgScale(484), y : tgScale(1728), id : "checkpoint", index : 8 },
				{ x : tgScale(328), y : tgScale(2300), id : "checkpoint", index : 9 },
				{ x : tgScale(1225), y : tgScale(2355), id : "start_position", angle : 270, index : 1 },
				{ x : tgScale(1202), y : tgScale(2470), id : "start_position", angle : 270, index : 0 },
				{ x : tgScale(1087), y : tgScale(2357), id : "start_position", angle : 270, index : 2 },
				{ x : tgScale(1065), y : tgScale(2470), id : "start_position", angle : 270, index : 3 },
				{ x : tgScale(2109), y : tgScale(2384), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(2295), y : tgScale(1827), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(2320), y : tgScale(454), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(1716), y : tgScale(366), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(1259), y : tgScale(251), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(1089), y : tgScale(703), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(1401), y : tgScale(1354), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(1261), y : tgScale(1796), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(521), y : tgScale(1703), id : "ai_path_point", index : 10, lane : 0 },
				{ x : tgScale(269), y : tgScale(2102), id : "ai_path_point", index : 11, lane : 0 },
				{ x : tgScale(674), y : tgScale(2470), id : "ai_path_point", index : 12, lane : 0 },
				{ x : tgScale(2160), y : tgScale(1457), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(2571), y : tgScale(942), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(2258), y : tgScale(2384), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(2277), y : tgScale(1507), id : "ai_path_point", index : 2, lane : 1 },
				{ x : tgScale(2447), y : tgScale(417), id : "ai_path_point", index : 4, lane : 1 },
				{ x : tgScale(1768), y : tgScale(498), id : "ai_path_point", index : 5, lane : 1 },
				{ x : tgScale(1491), y : tgScale(1295), id : "ai_path_point", index : 8, lane : 1 },
				{ x : tgScale(727), y : tgScale(2354), id : "ai_path_point", index : 12, lane : 1 },
				{ x : tgScale(2498), y : tgScale(890), id : "ai_path_point", index : 3, lane : 1 },
				{ x : tgScale(1392), y : tgScale(336), id : "ai_path_point", index : 6, lane : 1 },
				{ x : tgScale(1146), y : tgScale(570), id : "ai_path_point", index : 7, lane : 1 },
				{ x : tgScale(511), y : tgScale(1838), id : "ai_path_point", index : 10, lane : 1 }
			]
		},
		"longTrack" : {
			width : tgScale(2800),
			height : tgScale(2700),
			items : [
				{ x : tgScale(138), y : tgScale(190), id : "tp_corner_06" },
				{ x : tgScale(2071), y : tgScale(83), id : "tp_corner_00" },
				{ x : tgScale(2181), y : tgScale(619), id : "tp_corner_02" },
				{ x : tgScale(1657), y : tgScale(701), id : "tp_crossroad_00" },
				{ x : tgScale(1584), y : tgScale(573), id : "tp_corner_00" },
				{ x : tgScale(657), y : tgScale(-77), id : "tp_straight_00" },
				{ x : tgScale(1538), y : tgScale(1178), id : "tp_corner_06" },
				{ x : tgScale(1155), y : tgScale(575), id : "tp_corner_07" },
				{ x : tgScale(1043), y : tgScale(679), id : "tp_corner_06" },
				{ x : tgScale(253), y : tgScale(2063), id : "tp_corner_04" },
				{ x : tgScale(679), y : tgScale(2056), id : "tp_corner_03" },
				{ x : tgScale(789), y : tgScale(1951), id : "tp_corner_02" },
				{ x : tgScale(2072), y : tgScale(1713), id : "tp_corner_03" },
				{ x : tgScale(1647), y : tgScale(1716), id : "tp_corner_04" },
				{ x : tgScale(1543), y : tgScale(1604), id : "tp_corner_05" },
				{ x : tgScale(991), y : tgScale(1455), id : "tp_corner_02" },
				{ x : tgScale(840), y : tgScale(1523), id : "tp_corner_06" },
				{ x : tgScale(1027), y : tgScale(1077), id : "tp_straight_05" },
				{ x : tgScale(2175), y : tgScale(194), id : "tp_corner_01" },
				{ x : tgScale(1357), y : tgScale(-76), id : "tp_straight_00" },
				{ x : tgScale(2177), y : tgScale(1182), id : "tp_corner_01" },
				{ x : tgScale(2185), y : tgScale(1607), id : "tp_corner_02" },
				{ x : tgScale(143), y : tgScale(1527), id : "tp_corner_06" },
				{ x : tgScale(148), y : tgScale(1953), id : "tp_corner_05" },
				{ x : tgScale(296), y : tgScale(1461), id : "tp_corner_02" },
				{ x : tgScale(282), y : tgScale(685), id : "tp_corner_01" },
				{ x : tgScale(331), y : tgScale(1082), id : "tp_straight_05" },
				{ x : tgScale(142), y : tgScale(616), id : "tp_corner_05" },
				{ x : tgScale(251), y : tgScale(82), id : "tp_corner_07" },
				{ x : tgScale(1144), y : tgScale(127), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 0 },
				{ x : tgScale(1703), y : tgScale(301), id : "decal_track_02", image : s_decal_track_02 },
				{ x : tgScale(1579), y : tgScale(602), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(2146), y : tgScale(1436), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(2257), y : tgScale(1266), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1720), y : tgScale(1750), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(735), y : tgScale(881), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(1999), y : tgScale(1526), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(616), y : tgScale(1849), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(106), y : tgScale(1019), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1424), y : tgScale(166), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(519), y : tgScale(1507), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2414), y : tgScale(442), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1066), y : tgScale(1536), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1430), y : tgScale(780), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2027), y : tgScale(540), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(853), y : tgScale(470), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(596), y : tgScale(537), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1019), y : tgScale(2405), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(0), y : tgScale(2173), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1218), y : tgScale(2180), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1357), y : tgScale(2452), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(134), y : tgScale(2435), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(91), y : tgScale(39), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1240), y : tgScale(1939), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1721), y : tgScale(230), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(509), y : tgScale(2166), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1783), y : tgScale(1248), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(-4), y : tgScale(234), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1085), y : tgScale(488), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(126), y : tgScale(1218), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(5), y : tgScale(1457), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1523), y : tgScale(959), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1427), y : tgScale(1165), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1524), y : tgScale(2010), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1362), y : tgScale(1689), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(412), y : tgScale(2471), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(811), y : tgScale(1320), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(882), y : tgScale(738), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2465), y : tgScale(1016), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1438), y : tgScale(298), id : "checkpoint", index : 0 },
				{ x : tgScale(2426), y : tgScale(602), id : "checkpoint", index : 1 },
				{ x : tgScale(1754), y : tgScale(1605), id : "checkpoint", index : 2 },
				{ x : tgScale(2221), y : tgScale(1960), id : "checkpoint", index : 3 },
				{ x : tgScale(2435), y : tgScale(1461), id : "checkpoint", index : 4 },
				{ x : tgScale(1450), y : tgScale(805), id : "checkpoint", index : 5 },
				{ x : tgScale(1234), y : tgScale(1545), id : "checkpoint", index : 6 },
				{ x : tgScale(851), y : tgScale(2305), id : "checkpoint", index : 7 },
				{ x : tgScale(349), y : tgScale(2037), id : "checkpoint", index : 8 },
				{ x : tgScale(556), y : tgScale(1204), id : "checkpoint", index : 9 },
				{ x : tgScale(483), y : tgScale(379), id : "checkpoint", index : 10 },
				{ x : tgScale(1135), y : tgScale(211), id : "start_position", angle : 270, index : 2 },
				{ x : tgScale(1044), y : tgScale(348), id : "start_position", angle : 270, index : 1 },
				{ x : tgScale(951), y : tgScale(209), id : "start_position", angle : 270, index : 0 },
				{ x : tgScale(858), y : tgScale(344), id : "start_position", angle : 270, index : 3 },
				{ x : tgScale(773), y : tgScale(208), id : "start_position", angle : 270, index : 4 },
				{ x : tgScale(2148), y : tgScale(407), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(2482), y : tgScale(674), id : "ai_path_point", index : 1, lane : 2 },
				{ x : tgScale(1762), y : tgScale(1498), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(1988), y : tgScale(1876), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(2425), y : tgScale(1734), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(2273), y : tgScale(1379), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(1676), y : tgScale(790), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(1242), y : tgScale(1144), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(980), y : tgScale(2154), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(447), y : tgScale(2138), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(544), y : tgScale(1316), id : "ai_path_point", index : 10, lane : 0 },
				{ x : tgScale(357), y : tgScale(578), id : "ai_path_point", index : 11, lane : 0 },
				{ x : tgScale(744), y : tgScale(232), id : "ai_path_point", index : 12, lane : 0 },
				{ x : tgScale(1853), y : tgScale(1564), id : "ai_path_point", index : 2, lane : 1 },
				{ x : tgScale(2250), y : tgScale(1473), id : "ai_path_point", index : 5, lane : 1 },
				{ x : tgScale(1594), y : tgScale(880), id : "ai_path_point", index : 6, lane : 1 },
				{ x : tgScale(1181), y : tgScale(1205), id : "ai_path_point", index : 7, lane : 1 },
				{ x : tgScale(480), y : tgScale(1406), id : "ai_path_point", index : 10, lane : 1 },
				{ x : tgScale(473), y : tgScale(574), id : "ai_path_point", index : 11, lane : 1 },
				{ x : tgScale(669), y : tgScale(345), id : "ai_path_point", index : 12, lane : 1 },
				{ x : tgScale(597), y : tgScale(403), id : "ai_path_point", index : 12, lane : 2 },
				{ x : tgScale(2320), y : tgScale(575), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(2205), y : tgScale(220), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(2343), y : tgScale(1313), id : "ai_path_point", index : 5, lane : 2 },
				{ x : tgScale(1381), y : tgScale(1017), id : "ai_path_point", index : 7, lane : 2 },
				{ x : tgScale(844), y : tgScale(2179), id : "ai_path_point", index : 8, lane : 1 },
				{ x : tgScale(431), y : tgScale(1482), id : "ai_path_point", index : 10, lane : 2 },
				{ x : tgScale(2303), y : tgScale(1727), id : "ai_path_point", index : 4, lane : 1 },
				{ x : tgScale(2420), y : tgScale(585), id : "ai_path_point", index : 1, lane : 1 },
				{ x : tgScale(1814), y : tgScale(1818), id : "ai_path_point", index : 3, lane : 1 },
				{ x : tgScale(2211), y : tgScale(320), id : "ai_path_point", index : 0, lane : 2 }
			]
		},
		"Sita1" : {
			width : tgScale(2700),
			height : tgScale(3000),
			items : [
				{ x : tgScale(1327), y : tgScale(1134), id : "tp_straight_00" },
				{ x : tgScale(2003), y : tgScale(637), id : "tp_corner_05" },
				{ x : tgScale(2143), y : tgScale(709), id : "tp_corner_01" },
				{ x : tgScale(2147), y : tgScale(1132), id : "tp_corner_02" },
				{ x : tgScale(2036), y : tgScale(1236), id : "tp_corner_03" },
				{ x : tgScale(597), y : tgScale(1100), id : "tp_crossroad_01" },
				{ x : tgScale(808), y : tgScale(1831), id : "tp_corner_05" },
				{ x : tgScale(912), y : tgScale(1942), id : "tp_corner_04" },
				{ x : tgScale(1337), y : tgScale(1936), id : "tp_corner_03" },
				{ x : tgScale(1410), y : tgScale(1795), id : "tp_corner_07" },
				{ x : tgScale(1833), y : tgScale(1789), id : "tp_corner_00" },
				{ x : tgScale(1936), y : tgScale(1900), id : "tp_corner_01" },
				{ x : tgScale(1942), y : tgScale(2326), id : "tp_corner_02" },
				{ x : tgScale(1830), y : tgScale(2431), id : "tp_corner_03" },
				{ x : tgScale(1119), y : tgScale(2334), id : "tp_straight_00" },
				{ x : tgScale(214), y : tgScale(1304), id : "tp_corner_07" },
				{ x : tgScale(104), y : tgScale(1408), id : "tp_corner_06" },
				{ x : tgScale(706), y : tgScale(2441), id : "tp_corner_04" },
				{ x : tgScale(246), y : tgScale(1941), id : "tp_straight_03" },
				{ x : tgScale(110), y : tgScale(1833), id : "tp_corner_05" },
				{ x : tgScale(743), y : tgScale(709), id : "tp_corner_01" },
				{ x : tgScale(602), y : tgScale(638), id : "tp_corner_05" },
				{ x : tgScale(596), y : tgScale(212), id : "tp_corner_06" },
				{ x : tgScale(710), y : tgScale(108), id : "tp_corner_07" },
				{ x : tgScale(1120), y : tgScale(-54), id : "tp_straight_00" },
				{ x : tgScale(1839), y : tgScale(105), id : "tp_corner_00" },
				{ x : tgScale(1938), y : tgScale(219), id : "tp_corner_01" },
				{ x : tgScale(1890), y : tgScale(1333), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 0 },
				{ x : tgScale(1081), y : tgScale(130), id : "decal_track_01", image : s_decal_track_01 },
				{ x : tgScale(468), y : tgScale(1968), id : "decal_track_07", image : s_decal_track_07 },
				{ x : tgScale(511), y : tgScale(2440), id : "decal_track_08", image : s_decal_track_08 },
				{ x : tgScale(1116), y : tgScale(2518), id : "decal_track_01", image : s_decal_track_01 },
				{ x : tgScale(1904), y : tgScale(2153), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(2112), y : tgScale(959), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(2228), y : tgScale(2172), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(1052), y : tgScale(516), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(494), y : tgScale(1078), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(376), y : tgScale(790), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1305), y : tgScale(562), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1254), y : tgScale(998), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2396), y : tgScale(194), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2406), y : tgScale(562), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1502), y : tgScale(1092), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1236), y : tgScale(1730), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1938), y : tgScale(1064), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(632), y : tgScale(20), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(454), y : tgScale(2658), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(930), y : tgScale(1552), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(1243), y : tgScale(347), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(1534), y : tgScale(2764), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(328), y : tgScale(1486), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2056), y : tgScale(464), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1575), y : tgScale(240), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(1584), y : tgScale(503), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1796), y : tgScale(589), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1608), y : tgScale(794), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(205), y : tgScale(1136), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(398), y : tgScale(548), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(169), y : tgScale(2322), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(191), y : tgScale(2589), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(13), y : tgScale(2152), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2206), y : tgScale(1698), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2347), y : tgScale(1930), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2371), y : tgScale(1507), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1027), y : tgScale(2329), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(523), y : tgScale(1678), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(628), y : tgScale(1897), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2439), y : tgScale(2158), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2357), y : tgScale(2377), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2217), y : tgScale(43), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2460), y : tgScale(2688), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2233), y : tgScale(2705), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2228), y : tgScale(1474), id : "checkpoint", index : 0 },
				{ x : tgScale(2321), y : tgScale(878), id : "checkpoint", index : 1 },
				{ x : tgScale(801), y : tgScale(627), id : "checkpoint", index : 3 },
				{ x : tgScale(1007), y : tgScale(1956), id : "checkpoint", index : 4 },
				{ x : tgScale(1630), y : tgScale(2075), id : "checkpoint", index : 5 },
				{ x : tgScale(1725), y : tgScale(324), id : "checkpoint", index : 2 },
				{ x : tgScale(2159), y : tgScale(2075), id : "checkpoint", index : 6 },
				{ x : tgScale(2052), y : tgScale(2646), id : "checkpoint", index : 7 },
				{ x : tgScale(1028), y : tgScale(2671), id : "checkpoint", index : 8 },
				{ x : tgScale(367), y : tgScale(2056), id : "checkpoint", index : 9 },
				{ x : tgScale(525), y : tgScale(1499), id : "checkpoint", index : 10 },
				{ x : tgScale(1838), y : tgScale(1561), id : "start_position", angle : 270, index : 1 },
				{ x : tgScale(1738), y : tgScale(1438), id : "start_position", angle : 270, index : 3 },
				{ x : tgScale(1634), y : tgScale(1560), id : "start_position", angle : 270, index : 2 },
				{ x : tgScale(1530), y : tgScale(1437), id : "start_position", angle : 270, index : 0 },
				{ x : tgScale(1425), y : tgScale(1557), id : "start_position", angle : 270, index : 4 },
				{ x : tgScale(2235), y : tgScale(1420), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(1063), y : tgScale(439), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(2253), y : tgScale(955), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(2002), y : tgScale(368), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(853), y : tgScale(837), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(1019), y : tgScale(1845), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(1299), y : tgScale(2196), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(1879), y : tgScale(2113), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(2140), y : tgScale(2337), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(1683), y : tgScale(2693), id : "ai_path_point", index : 10, lane : 0 },
				{ x : tgScale(904), y : tgScale(2606), id : "ai_path_point", index : 11, lane : 0 },
				{ x : tgScale(329), y : tgScale(1965), id : "ai_path_point", index : 12, lane : 0 },
				{ x : tgScale(612), y : tgScale(1496), id : "ai_path_point", index : 13, lane : 0 },
				{ x : tgScale(2208), y : tgScale(1329), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(1988), y : tgScale(454), id : "ai_path_point", index : 3, lane : 1 },
				{ x : tgScale(925), y : tgScale(731), id : "ai_path_point", index : 5, lane : 1 },
				{ x : tgScale(1100), y : tgScale(1889), id : "ai_path_point", index : 6, lane : 1 },
				{ x : tgScale(1816), y : tgScale(2578), id : "ai_path_point", index : 10, lane : 1 },
				{ x : tgScale(1055), y : tgScale(2551), id : "ai_path_point", index : 11, lane : 1 },
				{ x : tgScale(443), y : tgScale(1978), id : "ai_path_point", index : 12, lane : 1 },
				{ x : tgScale(500), y : tgScale(1643), id : "ai_path_point", index : 13, lane : 1 },
				{ x : tgScale(2349), y : tgScale(926), id : "ai_path_point", index : 1, lane : 1 },
				{ x : tgScale(2148), y : tgScale(379), id : "ai_path_point", index : 3, lane : 2 },
				{ x : tgScale(1007), y : tgScale(371), id : "ai_path_point", index : 4, lane : 1 },
				{ x : tgScale(954), y : tgScale(1911), id : "ai_path_point", index : 6, lane : 2 },
				{ x : tgScale(1321), y : tgScale(2053), id : "ai_path_point", index : 7, lane : 1 },
				{ x : tgScale(1866), y : tgScale(1997), id : "ai_path_point", index : 8, lane : 1 },
				{ x : tgScale(2239), y : tgScale(2268), id : "ai_path_point", index : 9, lane : 1 },
				{ x : tgScale(1802), y : tgScale(2786), id : "ai_path_point", index : 10, lane : 2 },
				{ x : tgScale(2370), y : tgScale(1417), id : "ai_path_point", index : 0, lane : 2 },
				{ x : tgScale(2427), y : tgScale(1015), id : "ai_path_point", index : 1, lane : 2 },
				{ x : tgScale(966), y : tgScale(290), id : "ai_path_point", index : 4, lane : 2 },
				{ x : tgScale(1347), y : tgScale(2126), id : "ai_path_point", index : 7, lane : 2 }
			]
		},
		"Sita2" : {
			width : tgScale(4000),
			height : tgScale(2600),
			items : [
				{ x : tgScale(1404), y : tgScale(544), id : "tp_straight_00" },
				{ x : tgScale(2116), y : tgScale(644), id : "tp_corner_03" },
				{ x : tgScale(2231), y : tgScale(405), id : "tp_straight_06" },
				{ x : tgScale(2435), y : tgScale(260), id : "tp_corner_07" },
				{ x : tgScale(2858), y : tgScale(196), id : "tp_corner_03" },
				{ x : tgScale(2929), y : tgScale(56), id : "tp_corner_07" },
				{ x : tgScale(3354), y : tgScale(50), id : "tp_corner_00" },
				{ x : tgScale(3458), y : tgScale(160), id : "tp_corner_01" },
				{ x : tgScale(3464), y : tgScale(585), id : "tp_corner_02" },
				{ x : tgScale(3353), y : tgScale(688), id : "tp_corner_03" },
				{ x : tgScale(2930), y : tgScale(752), id : "tp_corner_07" },
				{ x : tgScale(2819), y : tgScale(855), id : "tp_corner_06" },
				{ x : tgScale(2824), y : tgScale(1280), id : "tp_corner_05" },
				{ x : tgScale(2964), y : tgScale(1350), id : "tp_corner_01" },
				{ x : tgScale(2970), y : tgScale(1775), id : "tp_corner_02" },
				{ x : tgScale(2433), y : tgScale(1883), id : "tp_corner_04" },
				{ x : tgScale(1972), y : tgScale(1380), id : "tp_straight_03" },
				{ x : tgScale(1872), y : tgScale(1237), id : "tp_corner_00" },
				{ x : tgScale(992), y : tgScale(648), id : "tp_corner_04" },
				{ x : tgScale(1447), y : tgScale(1243), id : "tp_corner_07" },
				{ x : tgScale(890), y : tgScale(536), id : "tp_corner_05" },
				{ x : tgScale(825), y : tgScale(112), id : "tp_corner_01" },
				{ x : tgScale(722), y : tgScale(0), id : "tp_corner_00" },
				{ x : tgScale(299), y : tgScale(4), id : "tp_corner_07" },
				{ x : tgScale(187), y : tgScale(106), id : "tp_corner_06" },
				{ x : tgScale(1338), y : tgScale(1353), id : "tp_corner_06" },
				{ x : tgScale(1290), y : tgScale(1783), id : "tp_corner_02" },
				{ x : tgScale(1184), y : tgScale(1887), id : "tp_corner_03" },
				{ x : tgScale(764), y : tgScale(1954), id : "tp_corner_07" },
				{ x : tgScale(698), y : tgScale(2095), id : "tp_corner_03" },
				{ x : tgScale(275), y : tgScale(2105), id : "tp_corner_04" },
				{ x : tgScale(173), y : tgScale(1998), id : "tp_corner_05" },
				{ x : tgScale(172), y : tgScale(1576), id : "tp_corner_06" },
				{ x : tgScale(192), y : tgScale(528), id : "tp_corner_05" },
				{ x : tgScale(336), y : tgScale(638), id : "tp_straight_07" },
				{ x : tgScale(330), y : tgScale(1373), id : "tp_straight_06" },
				{ x : tgScale(575), y : tgScale(1268), id : "tp_corner_02" },
				{ x : tgScale(572), y : tgScale(841), id : "tp_corner_01" },
				{ x : tgScale(2860), y : tgScale(1879), id : "tp_corner_03" },
				{ x : tgScale(1918), y : tgScale(746), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 0 },
				{ x : tgScale(541), y : tgScale(1090), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(2933), y : tgScale(1600), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(3425), y : tgScale(415), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(3256), y : tgScale(1627), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(862), y : tgScale(1119), id : "decal_track_04", image : s_decal_track_04 },
				{ x : tgScale(717), y : tgScale(30), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(1868), y : tgScale(1266), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(3349), y : tgScale(79), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(1988), y : tgScale(1632), id : "decal_track_08", image : s_decal_track_08 },
				{ x : tgScale(2769), y : tgScale(2185), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(1103), y : tgScale(2150), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(1336), y : tgScale(954), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(330), y : tgScale(1156), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1058), y : tgScale(1056), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1094), y : tgScale(1368), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1358), y : tgScale(1164), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(130), y : tgScale(969), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(918), y : tgScale(1610), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(351), y : tgScale(1896), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2213), y : tgScale(1500), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2911), y : tgScale(1126), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2662), y : tgScale(375), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2286), y : tgScale(1236), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(3310), y : tgScale(1220), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(1252), y : tgScale(113), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(1927), y : tgScale(495), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(3268), y : tgScale(513), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1830), y : tgScale(1786), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1629), y : tgScale(2136), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(191), y : tgScale(1376), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(662), y : tgScale(1832), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1977), y : tgScale(2073), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2742), y : tgScale(725), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2600), y : tgScale(1023), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2685), y : tgScale(57), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2360), y : tgScale(110), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(3370), y : tgScale(2187), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(3442), y : tgScale(1822), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(3120), y : tgScale(2295), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(630), y : tgScale(489), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(370), y : tgScale(240), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(959), y : tgScale(255), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(3445), y : tgScale(235), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2173), y : tgScale(320), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1888), y : tgScale(237), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1610), y : tgScale(388), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2826), y : tgScale(2316), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2302), y : tgScale(2170), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2612), y : tgScale(1286), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(3642), y : tgScale(2064), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(3578), y : tgScale(1128), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(3746), y : tgScale(924), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1322), y : tgScale(500), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(58), y : tgScale(766), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(14), y : tgScale(1218), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(48), y : tgScale(1564), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1132), y : tgScale(2364), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(2224), y : tgScale(890), id : "checkpoint", index : 0 },
				{ x : tgScale(3394), y : tgScale(270), id : "checkpoint", index : 1 },
				{ x : tgScale(3743), y : tgScale(616), id : "checkpoint", index : 2 },
				{ x : tgScale(3244), y : tgScale(964), id : "checkpoint", index : 3 },
				{ x : tgScale(3116), y : tgScale(1520), id : "checkpoint", index : 4 },
				{ x : tgScale(3055), y : tgScale(2093), id : "checkpoint", index : 5 },
				{ x : tgScale(2490), y : tgScale(1922), id : "checkpoint", index : 6 },
				{ x : tgScale(1766), y : tgScale(1449), id : "checkpoint", index : 7 },
				{ x : tgScale(1363), y : tgScale(2089), id : "checkpoint", index : 8 },
				{ x : tgScale(435), y : tgScale(2252), id : "checkpoint", index : 9 },
				{ x : tgScale(535), y : tgScale(1699), id : "checkpoint", index : 10 },
				{ x : tgScale(806), y : tgScale(1196), id : "checkpoint", index : 11 },
				{ x : tgScale(396), y : tgScale(623), id : "checkpoint", index : 12 },
				{ x : tgScale(796), y : tgScale(213), id : "checkpoint", index : 13 },
				{ x : tgScale(1106), y : tgScale(693), id : "checkpoint", index : 14 },
				{ x : tgScale(1887), y : tgScale(834), id : "start_position", angle : 270, index : 2 },
				{ x : tgScale(1743), y : tgScale(831), id : "start_position", angle : 270, index : 0 },
				{ x : tgScale(1822), y : tgScale(969), id : "start_position", angle : 270, index : 1 },
				{ x : tgScale(1673), y : tgScale(967), id : "start_position", angle : 270, index : 3 },
				{ x : tgScale(1595), y : tgScale(832), id : "start_position", angle : 270, index : 4 },
				{ x : tgScale(2482), y : tgScale(708), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(3315), y : tgScale(326), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(3640), y : tgScale(593), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(3373), y : tgScale(947), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(3025), y : tgScale(1355), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(3213), y : tgScale(1716), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(2726), y : tgScale(2103), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(1981), y : tgScale(1452), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(1564), y : tgScale(1678), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(1270), y : tgScale(2137), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(709), y : tgScale(2360), id : "ai_path_point", index : 10, lane : 0 },
				{ x : tgScale(357), y : tgScale(1932), id : "ai_path_point", index : 11, lane : 0 },
				{ x : tgScale(843), y : tgScale(1322), id : "ai_path_point", index : 12, lane : 0 },
				{ x : tgScale(421), y : tgScale(692), id : "ai_path_point", index : 13, lane : 0 },
				{ x : tgScale(623), y : tgScale(235), id : "ai_path_point", index : 14, lane : 0 },
				{ x : tgScale(1062), y : tgScale(385), id : "ai_path_point", index : 15, lane : 0 },
				{ x : tgScale(1184), y : tgScale(843), id : "ai_path_point", index : 16, lane : 0 },
				{ x : tgScale(2496), y : tgScale(838), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(3223), y : tgScale(283), id : "ai_path_point", index : 1, lane : 1 },
				{ x : tgScale(3701), y : tgScale(485), id : "ai_path_point", index : 2, lane : 1 },
				{ x : tgScale(3326), y : tgScale(1056), id : "ai_path_point", index : 3, lane : 1 },
				{ x : tgScale(3136), y : tgScale(1753), id : "ai_path_point", index : 5, lane : 1 },
				{ x : tgScale(2883), y : tgScale(2063), id : "ai_path_point", index : 6, lane : 1 },
				{ x : tgScale(1966), y : tgScale(1551), id : "ai_path_point", index : 7, lane : 1 },
				{ x : tgScale(1228), y : tgScale(2046), id : "ai_path_point", index : 9, lane : 1 },
				{ x : tgScale(707), y : tgScale(2245), id : "ai_path_point", index : 10, lane : 1 },
				{ x : tgScale(736), y : tgScale(1311), id : "ai_path_point", index : 12, lane : 1 },
				{ x : tgScale(490), y : tgScale(591), id : "ai_path_point", index : 13, lane : 1 },
				{ x : tgScale(1333), y : tgScale(804), id : "ai_path_point", index : 16, lane : 1 }
			]
		},
		"sita3" : {
			width : tgScale(3300),
			height : tgScale(2500),
			items : [
				{ x : tgScale(1219), y : tgScale(1484), id : "tp_crossroad_00" },
				{ x : tgScale(1704), y : tgScale(2005), id : "tp_corner_04" },
				{ x : tgScale(1142), y : tgScale(1997), id : "tp_corner_03" },
				{ x : tgScale(1706), y : tgScale(1366), id : "tp_corner_07" },
				{ x : tgScale(2129), y : tgScale(1302), id : "tp_corner_03" },
				{ x : tgScale(2241), y : tgScale(1198), id : "tp_corner_02" },
				{ x : tgScale(2235), y : tgScale(773), id : "tp_corner_01" },
				{ x : tgScale(2131), y : tgScale(662), id : "tp_corner_00" },
				{ x : tgScale(1143), y : tgScale(1361), id : "tp_corner_00" },
				{ x : tgScale(716), y : tgScale(1306), id : "tp_corner_04" },
				{ x : tgScale(613), y : tgScale(1195), id : "tp_corner_05" },
				{ x : tgScale(606), y : tgScale(772), id : "tp_corner_06" },
				{ x : tgScale(718), y : tgScale(669), id : "tp_corner_07" },
				{ x : tgScale(2129), y : tgScale(2000), id : "tp_corner_03" },
				{ x : tgScale(2737), y : tgScale(1403), id : "tp_corner_02" },
				{ x : tgScale(2202), y : tgScale(1505), id : "tp_straight_02" },
				{ x : tgScale(1143), y : tgScale(662), id : "tp_corner_00" },
				{ x : tgScale(1210), y : tgScale(814), id : "tp_corner_04" },
				{ x : tgScale(1635), y : tgScale(808), id : "tp_corner_03" },
				{ x : tgScale(1706), y : tgScale(667), id : "tp_corner_07" },
				{ x : tgScale(2732), y : tgScale(630), id : "tp_corner_01" },
				{ x : tgScale(2773), y : tgScale(1025), id : "tp_straight_05" },
				{ x : tgScale(717), y : tgScale(2003), id : "tp_corner_04" },
				{ x : tgScale(256), y : tgScale(1503), id : "tp_straight_03" },
				{ x : tgScale(119), y : tgScale(1398), id : "tp_corner_05" },
				{ x : tgScale(98), y : tgScale(1022), id : "tp_straight_05" },
				{ x : tgScale(115), y : tgScale(623), id : "tp_corner_06" },
				{ x : tgScale(227), y : tgScale(166), id : "tp_straight_02" },
				{ x : tgScale(718), y : tgScale(27), id : "tp_corner_07" },
				{ x : tgScale(2233), y : tgScale(168), id : "tp_straight_03" },
				{ x : tgScale(2132), y : tgScale(23), id : "tp_corner_00" },
				{ x : tgScale(1143), y : tgScale(20), id : "tp_corner_00" },
				{ x : tgScale(1707), y : tgScale(29), id : "tp_corner_07" },
				{ x : tgScale(1635), y : tgScale(168), id : "tp_corner_03" },
				{ x : tgScale(1209), y : tgScale(173), id : "tp_corner_04" },
				{ x : tgScale(2128), y : tgScale(691), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(1136), y : tgScale(1389), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(2204), y : tgScale(1027), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(522), y : tgScale(1573), id : "decal_track_07", image : s_decal_track_07 },
				{ x : tgScale(521), y : tgScale(2005), id : "decal_track_08", image : s_decal_track_08 },
				{ x : tgScale(2264), y : tgScale(435), id : "decal_track_08", image : s_decal_track_08 },
				{ x : tgScale(2019), y : tgScale(1831), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1934), y : tgScale(506), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(46), y : tgScale(598), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(408), y : tgScale(128), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1029), y : tgScale(452), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(181), y : tgScale(1938), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1087), y : tgScale(1802), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(508), y : tgScale(2219), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(513), y : tgScale(1804), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2642), y : tgScale(1838), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2406), y : tgScale(1160), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2679), y : tgScale(523), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2601), y : tgScale(21), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2581), y : tgScale(2237), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1473), y : tgScale(1280), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1839), y : tgScale(1172), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1204), y : tgScale(1188), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1569), y : tgScale(993), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(2093), y : tgScale(2306), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(1514), y : tgScale(431), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(710), y : tgScale(219), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 3 },
				{ x : tgScale(2856), y : tgScale(1490), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(954), y : tgScale(1498), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(112), y : tgScale(198), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1556), y : tgScale(642), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1584), y : tgScale(46), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(2896), y : tgScale(87), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2946), y : tgScale(2000), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2708), y : tgScale(2068), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(262), y : tgScale(2202), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(876), y : tgScale(1710), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2992), y : tgScale(1774), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2014), y : tgScale(1040), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1012), y : tgScale(1056), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(23), y : tgScale(1707), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1570), y : tgScale(2262), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2943), y : tgScale(382), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(940), y : tgScale(293), id : "checkpoint", index : 0 },
				{ x : tgScale(2265), y : tgScale(230), id : "checkpoint", index : 1 },
				{ x : tgScale(2986), y : tgScale(1008), id : "checkpoint", index : 2 },
				{ x : tgScale(2782), y : tgScale(1795), id : "checkpoint", index : 3 },
				{ x : tgScale(2071), y : tgScale(2246), id : "checkpoint", index : 4 },
				{ x : tgScale(1163), y : tgScale(1578), id : "checkpoint", index : 5 },
				{ x : tgScale(808), y : tgScale(1150), id : "checkpoint", index : 6 },
				{ x : tgScale(1265), y : tgScale(865), id : "checkpoint", index : 7 },
				{ x : tgScale(2394), y : tgScale(981), id : "checkpoint", index : 9 },
				{ x : tgScale(2479), y : tgScale(1438), id : "checkpoint", index : 10 },
				{ x : tgScale(1968), y : tgScale(1587), id : "checkpoint", index : 11 },
				{ x : tgScale(1176), y : tgScale(2246), id : "checkpoint", index : 12 },
				{ x : tgScale(546), y : tgScale(1823), id : "checkpoint", index : 13 },
				{ x : tgScale(313), y : tgScale(1116), id : "checkpoint", index : 14 },
				{ x : tgScale(1716), y : tgScale(1053), id : "checkpoint", index : 8 },
				{ x : tgScale(688), y : tgScale(462), id : "start_position", angle : 315, index : 2 },
				{ x : tgScale(741), y : tgScale(586), id : "start_position", angle : 315, index : 1 },
				{ x : tgScale(584), y : tgScale(563), id : "start_position", angle : 315, index : 0 },
				{ x : tgScale(639), y : tgScale(688), id : "start_position", angle : 315, index : 3 },
				{ x : tgScale(482), y : tgScale(656), id : "start_position", angle : 315, index : 4 },
				{ x : tgScale(913), y : tgScale(315), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(1671), y : tgScale(425), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(2068), y : tgScale(279), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(2936), y : tgScale(903), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(2890), y : tgScale(1662), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(2252), y : tgScale(2242), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(1288), y : tgScale(1606), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(884), y : tgScale(1318), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(1195), y : tgScale(927), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(1855), y : tgScale(992), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(2328), y : tgScale(1012), id : "ai_path_point", index : 10, lane : 0 },
				{ x : tgScale(2401), y : tgScale(1449), id : "ai_path_point", index : 11, lane : 0 },
				{ x : tgScale(1544), y : tgScale(2017), id : "ai_path_point", index : 12, lane : 0 },
				{ x : tgScale(1175), y : tgScale(2256), id : "ai_path_point", index : 13, lane : 0 },
				{ x : tgScale(336), y : tgScale(1530), id : "ai_path_point", index : 14, lane : 0 },
				{ x : tgScale(343), y : tgScale(902), id : "ai_path_point", index : 15, lane : 0 },
				{ x : tgScale(1117), y : tgScale(320), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(2146), y : tgScale(326), id : "ai_path_point", index : 2, lane : 1 },
				{ x : tgScale(2823), y : tgScale(900), id : "ai_path_point", index : 3, lane : 1 },
				{ x : tgScale(2178), y : tgScale(2158), id : "ai_path_point", index : 5, lane : 1 },
				{ x : tgScale(1211), y : tgScale(1669), id : "ai_path_point", index : 6, lane : 1 },
				{ x : tgScale(1183), y : tgScale(801), id : "ai_path_point", index : 8, lane : 1 },
				{ x : tgScale(1828), y : tgScale(1081), id : "ai_path_point", index : 9, lane : 1 },
				{ x : tgScale(2316), y : tgScale(1370), id : "ai_path_point", index : 11, lane : 1 },
				{ x : tgScale(1465), y : tgScale(1948), id : "ai_path_point", index : 12, lane : 1 },
				{ x : tgScale(426), y : tgScale(1498), id : "ai_path_point", index : 14, lane : 1 },
				{ x : tgScale(468), y : tgScale(898), id : "ai_path_point", index : 15, lane : 1 }
			]
		},
		"sita4" : {
			width : tgScale(3000),
			height : tgScale(3100),
			items : [
				{ x : tgScale(1278), y : tgScale(1075), id : "tp_straight_00" },
				{ x : tgScale(552), y : tgScale(1032), id : "tp_crossroad_01" },
				{ x : tgScale(874), y : tgScale(161), id : "tp_crossroad_00" },
				{ x : tgScale(757), y : tgScale(639), id : "tp_corner_06" },
				{ x : tgScale(1362), y : tgScale(681), id : "tp_corner_04" },
				{ x : tgScale(167), y : tgScale(1174), id : "tp_corner_04" },
				{ x : tgScale(64), y : tgScale(1063), id : "tp_corner_05" },
				{ x : tgScale(58), y : tgScale(638), id : "tp_corner_06" },
				{ x : tgScale(799), y : tgScale(34), id : "tp_corner_00" },
				{ x : tgScale(374), y : tgScale(40), id : "tp_corner_07" },
				{ x : tgScale(263), y : tgScale(144), id : "tp_corner_06" },
				{ x : tgScale(211), y : tgScale(571), id : "tp_corner_02" },
				{ x : tgScale(700), y : tgScale(1757), id : "tp_corner_02" },
				{ x : tgScale(585), y : tgScale(1853), id : "tp_corner_03" },
				{ x : tgScale(165), y : tgScale(1912), id : "tp_corner_07" },
				{ x : tgScale(52), y : tgScale(2009), id : "tp_corner_06" },
				{ x : tgScale(57), y : tgScale(2430), id : "tp_corner_05" },
				{ x : tgScale(160), y : tgScale(2537), id : "tp_corner_04" },
				{ x : tgScale(585), y : tgScale(2526), id : "tp_corner_03" },
				{ x : tgScale(655), y : tgScale(2029), id : "tp_straight_02" },
				{ x : tgScale(1148), y : tgScale(1885), id : "tp_corner_07" },
				{ x : tgScale(1994), y : tgScale(1237), id : "tp_corner_00" },
				{ x : tgScale(1570), y : tgScale(1875), id : "tp_corner_00" },
				{ x : tgScale(1671), y : tgScale(1978), id : "tp_corner_01" },
				{ x : tgScale(1732), y : tgScale(2395), id : "tp_corner_05" },
				{ x : tgScale(1833), y : tgScale(2502), id : "tp_corner_04" },
				{ x : tgScale(2254), y : tgScale(2490), id : "tp_corner_03" },
				{ x : tgScale(2362), y : tgScale(2380), id : "tp_corner_02" },
				{ x : tgScale(2110), y : tgScale(1392), id : "tp_straight_07" },
				{ x : tgScale(2352), y : tgScale(1597), id : "tp_corner_01" },
				{ x : tgScale(2395), y : tgScale(1997), id : "tp_straight_05" },
				{ x : tgScale(1362), y : tgScale(39), id : "tp_corner_07" },
				{ x : tgScale(1785), y : tgScale(676), id : "tp_corner_03" },
				{ x : tgScale(1890), y : tgScale(147), id : "tp_corner_01" },
				{ x : tgScale(1786), y : tgScale(35), id : "tp_corner_00" },
				{ x : tgScale(1898), y : tgScale(574), id : "tp_corner_02" },
				{ x : tgScale(1772), y : tgScale(1285), xScale : 100, yScale : 100, angle : 0, id : "decal_finish", image : s_decal_finish, subimage : 0 },
				{ x : tgScale(1150), y : tgScale(1448), id : "decal_track_02", image : s_decal_track_02 },
				{ x : tgScale(1778), y : tgScale(63), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(1566), y : tgScale(1906), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(791), y : tgScale(61), id : "decal_track_03", image : s_decal_track_03 },
				{ x : tgScale(2976), y : tgScale(1333), id : "decal_track_06", image : s_decal_track_06 },
				{ x : tgScale(2440), y : tgScale(1979), id : "decal_track_06", image : s_decal_track_06 },
				{ x : tgScale(2104), y : tgScale(1619), id : "decal_track_08", image : s_decal_track_08 },
				{ x : tgScale(1857), y : tgScale(405), id : "decal_track_05", image : s_decal_track_05 },
				{ x : tgScale(2262), y : tgScale(1353), id : "decal_track_07", image : s_decal_track_07 },
				{ x : tgScale(834), y : tgScale(1484), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(1112), y : tgScale(1350), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(248), y : tgScale(876), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1876), y : tgScale(902), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1132), y : tgScale(2262), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2622), y : tgScale(2438), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(2142), y : tgScale(2800), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(498), y : tgScale(2686), id : "decal_puddletrack", image : s_decal_puddletrack },
				{ x : tgScale(2), y : tgScale(1360), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(2406), y : tgScale(1214), id : "decal_damagedgrass", image : s_decal_damagedgrass },
				{ x : tgScale(530), y : tgScale(2338), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1112), y : tgScale(2652), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1206), y : tgScale(1652), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1690), y : tgScale(1711), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1204), y : tgScale(1070), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(680), y : tgScale(481), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(587), y : tgScale(719), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(533), y : tgScale(1018), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(228), y : tgScale(74), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(508), y : tgScale(1710), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(944), y : tgScale(2872), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1544), y : tgScale(2505), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1265), y : tgScale(2453), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1493), y : tgScale(2314), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1222), y : tgScale(42), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(28), y : tgScale(216), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1624), y : tgScale(456), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2082), y : tgScale(1012), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2316), y : tgScale(788), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2344), y : tgScale(406), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2164), y : tgScale(2316), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(1918), y : tgScale(1634), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2170), y : tgScale(1852), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1446), y : tgScale(1622), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2212), y : tgScale(16), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2438), y : tgScale(198), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2594), y : tgScale(626), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1800), y : tgScale(2854), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2658), y : tgScale(2758), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2432), y : tgScale(2860), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2746), y : tgScale(2552), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(1502), y : tgScale(2780), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(66), y : tgScale(2816), id : "decal_rocks", image : s_decal_rocks },
				{ x : tgScale(182), y : tgScale(2332), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(692), y : tgScale(2016), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(1018), y : tgScale(798), id : "decal_puddle", image : s_decal_puddle },
				{ x : tgScale(14), y : tgScale(512), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2092), y : tgScale(2078), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2730), y : tgScale(1578), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2738), y : tgScale(1348), id : "decal_tree", depth : -4, image : s_decal_tree },
				{ x : tgScale(2071), y : tgScale(1443), id : "checkpoint", index : 0 },
				{ x : tgScale(2618), y : tgScale(2199), id : "checkpoint", index : 1 },
				{ x : tgScale(2182), y : tgScale(2737), id : "checkpoint", index : 2 },
				{ x : tgScale(2142), y : tgScale(645), id : "checkpoint", index : 9 },
				{ x : tgScale(1687), y : tgScale(224), id : "checkpoint", index : 8 },
				{ x : tgScale(1734), y : tgScale(2092), id : "checkpoint", index : 3 },
				{ x : tgScale(1309), y : tgScale(2257), id : "checkpoint", index : 4 },
				{ x : tgScale(440), y : tgScale(2785), id : "checkpoint", index : 5 },
				{ x : tgScale(345), y : tgScale(2197), id : "checkpoint", index : 6 },
				{ x : tgScale(945), y : tgScale(1820), id : "checkpoint", index : 7 },
				{ x : tgScale(1625), y : tgScale(920), id : "checkpoint", index : 10 },
				{ x : tgScale(760), y : tgScale(247), id : "checkpoint", index : 11 },
				{ x : tgScale(261), y : tgScale(934), id : "checkpoint", index : 12 },
				{ x : tgScale(523), y : tgScale(1430), id : "checkpoint", index : 13 },
				{ x : tgScale(1760), y : tgScale(1367), id : "start_position", angle : 270, index : 4 },
				{ x : tgScale(1614), y : tgScale(1365), id : "start_position", angle : 270, index : 2 },
				{ x : tgScale(1703), y : tgScale(1499), id : "start_position", angle : 270, index : 1 },
				{ x : tgScale(1554), y : tgScale(1501), id : "start_position", angle : 270, index : 0 },
				{ x : tgScale(1454), y : tgScale(1363), id : "start_position", angle : 270, index : 3 },
				{ x : tgScale(2210), y : tgScale(1501), id : "ai_path_point", index : 0, lane : 0 },
				{ x : tgScale(2612), y : tgScale(2088), id : "ai_path_point", index : 1, lane : 0 },
				{ x : tgScale(2516), y : tgScale(2522), id : "ai_path_point", index : 2, lane : 0 },
				{ x : tgScale(1993), y : tgScale(2599), id : "ai_path_point", index : 3, lane : 0 },
				{ x : tgScale(1892), y : tgScale(2276), id : "ai_path_point", index : 4, lane : 0 },
				{ x : tgScale(1300), y : tgScale(2247), id : "ai_path_point", index : 5, lane : 0 },
				{ x : tgScale(768), y : tgScale(2724), id : "ai_path_point", index : 6, lane : 0 },
				{ x : tgScale(262), y : tgScale(2396), id : "ai_path_point", index : 7, lane : 0 },
				{ x : tgScale(944), y : tgScale(1878), id : "ai_path_point", index : 8, lane : 0 },
				{ x : tgScale(1063), y : tgScale(828), id : "ai_path_point", index : 9, lane : 0 },
				{ x : tgScale(1594), y : tgScale(322), id : "ai_path_point", index : 10, lane : 0 },
				{ x : tgScale(968), y : tgScale(319), id : "ai_path_point", index : 14, lane : 0 },
				{ x : tgScale(519), y : tgScale(404), id : "ai_path_point", index : 15, lane : 0 },
				{ x : tgScale(280), y : tgScale(954), id : "ai_path_point", index : 16, lane : 0 },
				{ x : tgScale(615), y : tgScale(1354), id : "ai_path_point", index : 17, lane : 0 },
				{ x : tgScale(1347), y : tgScale(1444), id : "ai_path_point", index : 18, lane : 0 },
				{ x : tgScale(2090), y : tgScale(560), id : "ai_path_point", index : 11, lane : 0 },
				{ x : tgScale(1655), y : tgScale(874), id : "ai_path_point", index : 12, lane : 0 },
				{ x : tgScale(1425), y : tgScale(710), id : "ai_path_point", index : 13, lane : 0 },
				{ x : tgScale(2165), y : tgScale(1570), id : "ai_path_point", index : 0, lane : 1 },
				{ x : tgScale(2521), y : tgScale(1986), id : "ai_path_point", index : 1, lane : 1 },
				{ x : tgScale(2171), y : tgScale(2636), id : "ai_path_point", index : 3, lane : 1 },
				{ x : tgScale(1745), y : tgScale(2261), id : "ai_path_point", index : 4, lane : 1 },
				{ x : tgScale(716), y : tgScale(2638), id : "ai_path_point", index : 6, lane : 1 },
				{ x : tgScale(248), y : tgScale(2504), id : "ai_path_point", index : 7, lane : 1 },
				{ x : tgScale(785), y : tgScale(1910), id : "ai_path_point", index : 8, lane : 1 },
				{ x : tgScale(958), y : tgScale(811), id : "ai_path_point", index : 9, lane : 1 },
				{ x : tgScale(887), y : tgScale(353), id : "ai_path_point", index : 14, lane : 1 },
				{ x : tgScale(384), y : tgScale(1134), id : "ai_path_point", index : 16, lane : 1 },
				{ x : tgScale(725), y : tgScale(1485), id : "ai_path_point", index : 17, lane : 1 }
			]
		},
		order : ["double_crossroad", "Mario1", "mario2", "Mario4", "Mario5", "Mario6", "Shanghai1", "Mario7", "longTrack", "Sita1", "Sita2", "sita3", "sita4"]
	};

	// *****************************************
	// Element Type: track_piece
	// *****************************************

	gameSettingsVar.track_piece = {
		"tp_corner_00" : {
			width : tgScale(560),
			height : tgScale(560),
			items : [
				{ x : tgScale(62), y : tgScale(18), id : "tp_corner_00" },
				{ x : tgScale(78), y : tgScale(45), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(178), y : tgScale(55), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(286), y : tgScale(88), id : "pp_a", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(375), y : tgScale(137), id : "pp_a", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(450), y : tgScale(199), id : "pp_a", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(77), y : tgScale(397), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(114), y : tgScale(401), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(147), y : tgScale(412), id : "pp_b", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(173), y : tgScale(425), id : "pp_b", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(201), y : tgScale(448), id : "pp_b", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(78), y : tgScale(221), id : "connector", index : 0 },
				{ x : tgScale(325), y : tgScale(324), id : "connector", index : 1 }
			],
			visual : {
				image : s_race_track_corner_00,               // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_corner_01" : {
			width : tgScale(560),
			height : tgScale(560),
			items : [
				{ x : tgScale(10), y : tgScale(-42), id : "tp_corner_01" },
				{ x : tgScale(294), y : tgScale(28), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(357), y : tgScale(105), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(402), y : tgScale(183), id : "pp_a", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(435), y : tgScale(281), id : "pp_a", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(447), y : tgScale(398), id : "pp_a", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(44), y : tgScale(276), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(70), y : tgScale(308), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(86), y : tgScale(340), id : "pp_b", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(92), y : tgScale(368), id : "pp_b", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(96), y : tgScale(399), id : "pp_b", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(169), y : tgScale(152), id : "connector", index : 0 },
				{ x : tgScale(271), y : tgScale(399), id : "connector", index : 1 }
			],
			visual : {
				image : s_race_track_corner_01,               // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_corner_02" : {
			width : tgScale(560),
			height : tgScale(560),
			items : [
				{ x : tgScale(30), y : tgScale(45), id : "tp_corner_02" },
				{ x : tgScale(59), y : tgScale(184), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(80), y : tgScale(158), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(94), y : tgScale(133), id : "pp_b", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(105), y : tgScale(99), id : "pp_b", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(110), y : tgScale(61), id : "pp_b", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(307), y : tgScale(432), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(372), y : tgScale(354), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(421), y : tgScale(264), id : "pp_a", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(450), y : tgScale(170), id : "pp_a", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(461), y : tgScale(61), id : "pp_a", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(183), y : tgScale(308), id : "connector", index : 0 },
				{ x : tgScale(286), y : tgScale(61), id : "connector", index : 1 }
			],
			visual : {
				image : s_race_track_corner_02,               // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_corner_03" : {
			width : tgScale(560),
			height : tgScale(560),
			items : [
				{ x : tgScale(45), y : tgScale(-13), id : "tp_corner_03" },
				{ x : tgScale(63), y : tgScale(73), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(98), y : tgScale(69), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(128), y : tgScale(59), id : "pp_b", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(161), y : tgScale(42), id : "pp_b", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(185), y : tgScale(22), id : "pp_b", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(62), y : tgScale(424), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(170), y : tgScale(414), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(268), y : tgScale(384), id : "pp_a", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(350), y : tgScale(340), id : "pp_a", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(434), y : tgScale(271), id : "pp_a", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(63), y : tgScale(248), id : "connector", index : 0 },
				{ x : tgScale(310), y : tgScale(145), id : "connector", index : 1 }
			],
			visual : {
				image : s_race_track_corner_03,               // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_corner_04" : {
			width : tgScale(560),
			height : tgScale(560),
			items : [
				{ x : tgScale(-29), y : tgScale(1), id : "tp_corner_04" },
				{ x : tgScale(291), y : tgScale(30), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(311), y : tgScale(47), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(339), y : tgScale(63), id : "pp_b", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(377), y : tgScale(76), id : "pp_b", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(414), y : tgScale(81), id : "pp_b", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(43), y : tgScale(278), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(110), y : tgScale(337), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(206), y : tgScale(390), id : "pp_a", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(315), y : tgScale(423), id : "pp_a", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(414), y : tgScale(432), id : "pp_a", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(167), y : tgScale(154), id : "connector", index : 0 },
				{ x : tgScale(414), y : tgScale(257), id : "connector", index : 1 }
			],
			visual : {
				image : s_race_track_corner_04,               // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_corner_05" : {
			width : tgScale(560),
			height : tgScale(560),
			items : [
				{ x : tgScale(53), y : tgScale(46), id : "tp_corner_05" },
				{ x : tgScale(75), y : tgScale(64), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(83), y : tgScale(161), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(112), y : tgScale(261), id : "pp_a", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(163), y : tgScale(356), id : "pp_a", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(228), y : tgScale(435), id : "pp_a", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(426), y : tgScale(64), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(430), y : tgScale(98), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(440), y : tgScale(130), id : "pp_b", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(458), y : tgScale(163), id : "pp_b", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(477), y : tgScale(187), id : "pp_b", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(354), y : tgScale(311), id : "connector", index : 1 },
				{ x : tgScale(251), y : tgScale(63), id : "connector", index : 0 }
			],
			visual : {
				image : s_race_track_corner_05,               // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_corner_06" : {
			width : tgScale(560),
			height : tgScale(560),
			items : [
				{ x : tgScale(66), y : tgScale(-35), id : "tp_corner_06" },
				{ x : tgScale(248), y : tgScale(37), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(199), y : tgScale(93), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(141), y : tgScale(190), id : "pp_a", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(105), y : tgScale(297), id : "pp_a", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(94), y : tgScale(408), id : "pp_a", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(445), y : tgScale(408), id : "pp_b", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(449), y : tgScale(374), id : "pp_b", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(459), y : tgScale(341), id : "pp_b", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(477), y : tgScale(308), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(496), y : tgScale(285), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(269), y : tgScale(409), id : "connector", index : 1 },
				{ x : tgScale(373), y : tgScale(161), id : "connector", index : 0 }
			],
			visual : {
				image : s_race_track_corner_06,               // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_corner_07" : {
			width : tgScale(560),
			height : tgScale(560),
			items : [
				{ x : tgScale(-3), y : tgScale(-4), id : "tp_corner_07" },
				{ x : tgScale(315), y : tgScale(420), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(336), y : tgScale(402), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(363), y : tgScale(386), id : "pp_b", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(395), y : tgScale(375), id : "pp_b", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(438), y : tgScale(369), id : "pp_b", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(67), y : tgScale(171), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(137), y : tgScale(112), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(247), y : tgScale(53), id : "pp_a", correspondingConnectorIndex : -1, index : 2 },
				{ x : tgScale(333), y : tgScale(27), id : "pp_a", correspondingConnectorIndex : -1, index : 3 },
				{ x : tgScale(436), y : tgScale(18), id : "pp_a", correspondingConnectorIndex : 1, index : 4 },
				{ x : tgScale(192), y : tgScale(296), id : "connector", index : 0 },
				{ x : tgScale(438), y : tgScale(194), id : "connector", index : 1 }
			],
			visual : {
				image : s_race_track_corner_07,               // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_straight_00" : {
			width : tgScale(900),
			height : tgScale(900),
			items : [
				{ x : tgScale(28), y : tgScale(-72), id : "tp_straight_00" },
				{ x : tgScale(59), y : tgScale(112), id : "pp_a", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(758), y : tgScale(112), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(59), y : tgScale(465), id : "pp_b", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(758), y : tgScale(465), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(59), y : tgScale(289), id : "connector", index : 1 },
				{ x : tgScale(758), y : tgScale(289), id : "connector", index : 0 }
			],
			visual : {
				image : s_race_track_straight_00,             // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_straight_01" : {
			width : tgScale(900),
			height : tgScale(900),
			items : [
				{ x : tgScale(98), y : tgScale(2), id : "tp_straight_01" },
				{ x : tgScale(123), y : tgScale(36), id : "pp_b", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(476), y : tgScale(36), id : "pp_a", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(123), y : tgScale(735), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(476), y : tgScale(735), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(300), y : tgScale(36), id : "connector", index : 1 },
				{ x : tgScale(300), y : tgScale(735), id : "connector", index : 0 }
			],
			visual : {
				image : s_race_track_straight_01,             // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_straight_02" : {
			width : tgScale(900),
			height : tgScale(900),
			items : [
				{ x : tgScale(0), y : tgScale(0), id : "tp_straight_02" },
				{ x : tgScale(70), y : tgScale(530), id : "pp_a", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(320), y : tgScale(779), id : "pp_b", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(814), y : tgScale(285), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(564), y : tgScale(35), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(195), y : tgScale(655), id : "connector", index : 1 },
				{ x : tgScale(689), y : tgScale(160), id : "connector", index : 0 }
			],
			visual : {
				image : s_race_track_straight_02,             // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_straight_03" : {
			width : tgScale(900),
			height : tgScale(900),
			items : [
				{ x : tgScale(-8), y : tgScale(-21), id : "tp_straight_03" },
				{ x : tgScale(28), y : tgScale(263), id : "pp_a", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(523), y : tgScale(758), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(278), y : tgScale(15), id : "pp_b", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(773), y : tgScale(509), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(153), y : tgScale(139), id : "connector", index : 1 },
				{ x : tgScale(648), y : tgScale(633), id : "connector", index : 0 }
			],
			visual : {
				image : s_race_track_straight_03,             // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_straight_04" : {
			width : tgScale(500),
			height : tgScale(500),
			items : [
				{ x : tgScale(10), y : tgScale(0), id : "tp_straight_04" },
				{ x : tgScale(55), y : tgScale(394), id : "pp_a", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(404), y : tgScale(395), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(55), y : tgScale(43), id : "pp_b", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(404), y : tgScale(43), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(55), y : tgScale(219), id : "connector", index : 1 },
				{ x : tgScale(404), y : tgScale(219), id : "connector", index : 0 }
			],
			visual : {
				image : s_race_track_straight_04,             // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_straight_05" : {
			width : tgScale(500),
			height : tgScale(500),
			items : [
				{ x : tgScale(10), y : tgScale(5), id : "tp_straight_05" },
				{ x : tgScale(406), y : tgScale(50), id : "pp_a", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(406), y : tgScale(399), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(53), y : tgScale(50), id : "pp_b", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(53), y : tgScale(399), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(229), y : tgScale(50), id : "connector", index : 1 },
				{ x : tgScale(229), y : tgScale(399), id : "connector", index : 0 }
			],
			visual : {
				image : s_race_track_straight_05,             // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_straight_06" : {
			width : tgScale(700),
			height : tgScale(700),
			items : [
				{ x : tgScale(20), y : tgScale(13), id : "tp_straight_06" },
				{ x : tgScale(295), y : tgScale(536), id : "pp_a", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(46), y : tgScale(287), id : "pp_b", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(293), y : tgScale(41), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(170), y : tgScale(412), id : "connector", index : 1 },
				{ x : tgScale(417), y : tgScale(164), id : "connector", index : 0 },
				{ x : tgScale(542), y : tgScale(289), id : "pp_a", correspondingConnectorIndex : 0, index : 0 }
			],
			visual : {
				image : s_race_track_straight_06,             // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_straight_07" : {
			width : tgScale(700),
			height : tgScale(700),
			items : [
				{ x : tgScale(43), y : tgScale(31), id : "tp_straight_07" },
				{ x : tgScale(70), y : tgScale(307), id : "pp_a", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(317), y : tgScale(554), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(319), y : tgScale(59), id : "pp_b", correspondingConnectorIndex : 1, index : 1 },
				{ x : tgScale(566), y : tgScale(306), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(194), y : tgScale(182), id : "connector", index : 1 },
				{ x : tgScale(441), y : tgScale(430), id : "connector", index : 0 }
			],
			visual : {
				image : s_race_track_straight_07,             // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_crossroad_00" : {
			width : tgScale(800),
			height : tgScale(800),
			items : [
				{ x : tgScale(-44), y : tgScale(-43), id : "tp_crossroad_00" },
				{ x : tgScale(144), y : tgScale(631), id : "connector", index : 2 },
				{ x : tgScale(638), y : tgScale(631), id : "connector", index : 3 },
				{ x : tgScale(639), y : tgScale(135), id : "connector", index : 1 },
				{ x : tgScale(144), y : tgScale(137), id : "connector", index : 0 },
				{ x : tgScale(19), y : tgScale(506), id : "pp_a", correspondingConnectorIndex : 2, index : 2 },
				{ x : tgScale(140), y : tgScale(384), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(19), y : tgScale(261), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(269), y : tgScale(12), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(391), y : tgScale(132), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(513), y : tgScale(11), id : "pp_b", correspondingConnectorIndex : 1, index : 2 },
				{ x : tgScale(763), y : tgScale(261), id : "pp_c", correspondingConnectorIndex : 1, index : 0 },
				{ x : tgScale(641), y : tgScale(383), id : "pp_c", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(763), y : tgScale(506), id : "pp_c", correspondingConnectorIndex : 3, index : 2 },
				{ x : tgScale(514), y : tgScale(756), id : "pp_d", correspondingConnectorIndex : 3, index : 0 },
				{ x : tgScale(391), y : tgScale(634), id : "pp_d", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(269), y : tgScale(755), id : "pp_d", correspondingConnectorIndex : 2, index : 2 }
			],
			visual : {
				image : s_race_track_crossroad_00,            // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		"tp_crossroad_01" : {
			width : tgScale(800),
			height : tgScale(800),
			items : [
				{ x : tgScale(-34), y : tgScale(-30), id : "tp_crossroad_01" },
				{ x : tgScale(25), y : tgScale(369), id : "connector", index : 2 },
				{ x : tgScale(374), y : tgScale(718), id : "connector", index : 3 },
				{ x : tgScale(724), y : tgScale(369), id : "connector", index : 1 },
				{ x : tgScale(374), y : tgScale(19), id : "connector", index : 0 },
				{ x : tgScale(25), y : tgScale(192), id : "pp_a", correspondingConnectorIndex : 2, index : 2 },
				{ x : tgScale(197), y : tgScale(192), id : "pp_a", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(197), y : tgScale(20), id : "pp_a", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(551), y : tgScale(19), id : "pp_b", correspondingConnectorIndex : 0, index : 0 },
				{ x : tgScale(552), y : tgScale(191), id : "pp_b", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(724), y : tgScale(192), id : "pp_b", correspondingConnectorIndex : 1, index : 2 },
				{ x : tgScale(724), y : tgScale(545), id : "pp_c", correspondingConnectorIndex : 1, index : 0 },
				{ x : tgScale(551), y : tgScale(545), id : "pp_c", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(551), y : tgScale(718), id : "pp_c", correspondingConnectorIndex : 3, index : 2 },
				{ x : tgScale(197), y : tgScale(718), id : "pp_d", correspondingConnectorIndex : 3, index : 0 },
				{ x : tgScale(197), y : tgScale(545), id : "pp_d", correspondingConnectorIndex : -1, index : 1 },
				{ x : tgScale(25), y : tgScale(545), id : "pp_d", correspondingConnectorIndex : 2, index : 2 }
			],
			visual : {
				image : s_race_track_crossroad_01,            // The image to use in the game for drawing this track piece
				subimage : 0                                  // The number of subimage from the image to use in the game for drawing this track piece
			}
		},
		order : ["tp_corner_00", "tp_corner_01", "tp_corner_02", "tp_corner_03", "tp_corner_04", "tp_corner_05", "tp_corner_06", "tp_corner_07", "tp_straight_00", "tp_straight_01", "tp_straight_02", "tp_straight_03", "tp_straight_04", "tp_straight_05", "tp_straight_06", "tp_straight_07", "tp_crossroad_00", "tp_crossroad_01"]
	};

	// *****************************************
	// Levels
	// *****************************************

	gameSettingsVar.levels = [
		{   // LEVEL 0
			name : "level01",
			track : [gameSettingsVar.track["Mario4"]],
			track_piece : [],
			carController : {
				difficulty : 0                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 3                                  // The number of laps for this level
			}
		},
		{   // LEVEL 1
			name : "level02",
			track : [gameSettingsVar.track["Mario5"]],
			track_piece : [],
			carController : {
				difficulty : 0                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 3                                  // The number of laps for this level
			}
		},
		{   // LEVEL 2
			name : "level03",
			track : [gameSettingsVar.track["Shanghai1"]],
			track_piece : [],
			carController : {
				difficulty : 0                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 4                                  // The number of laps for this level
			}
		},
		{   // LEVEL 3
			name : "level04",
			track : [gameSettingsVar.track["mario2"]],
			track_piece : [],
			carController : {
				difficulty : 0                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 4                                  // The number of laps for this level
			}
		},
		{   // LEVEL 4
			name : "level05",
			track : [gameSettingsVar.track["Mario7"]],
			track_piece : [],
			carController : {
				difficulty : 0                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 3                                  // The number of laps for this level
			}
		},
		{   // LEVEL 5
			name : "level06",
			track : [gameSettingsVar.track["double_crossroad"]],
			track_piece : [],
			carController : {
				difficulty : 1                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 3                                  // The number of laps for this level
			}
		},
		{   // LEVEL 6
			name : "level07",
			track : [gameSettingsVar.track["Mario1"]],
			track_piece : [],
			carController : {
				difficulty : 1                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 5                                  // The number of laps for this level
			}
		},
		{   // LEVEL 7
			name : "level08",
			track : [gameSettingsVar.track["Mario6"]],
			track_piece : [],
			carController : {
				difficulty : 1                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 4                                  // The number of laps for this level
			}
		},
		{   // LEVEL 8
			name : "level10",
			track : [gameSettingsVar.track["longTrack"]],
			track_piece : [],
			carController : {
				difficulty : 1                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 3                                  // The number of laps for this level
			}
		},
		{   // LEVEL 9
			name : "level11",
			track : [gameSettingsVar.track["Sita2"]],
			track_piece : [],
			carController : {
				difficulty : 2                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 2                                  // The number of laps for this level
			}
		},
		{   // LEVEL 10
			name : "level12",
			track : [gameSettingsVar.track["Sita1"]],
			track_piece : [],
			carController : {
				difficulty : 2                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 2                                  // The number of laps for this level
			}
		},
		{   // LEVEL 11
			name : "level13",
			track : [gameSettingsVar.track["sita4"]],
			track_piece : [],
			carController : {
				difficulty : 2                                // The higher the number the more difficult it is to win of the AI cars
			},
			raceController : {
				lapCount : 2                                  // The number of laps for this level
			}
		}
	];
};

//******************************************************
//*****    Script Resource: dictionary
//******************************************************

// **********************************************
// Localization file for product: standalone_Racer
//
// created on 15-1-2016 12:12:31
// **********************************************

/*exported dictionaryVar*/
var dictionaryVar = dictionaryVar || {};
dictionaryVar["nl-nl"] = dictionaryVar["nl-nl"] || {};
dictionaryVar["nl-nl"]["TutorialTitle_5"] = "Titel 6";
dictionaryVar["nl-nl"]["TutorialTitle_4"] = "Rondjes";
dictionaryVar["nl-nl"]["TutorialTitle_3"] = "Positie";
dictionaryVar["nl-nl"]["TutorialTitle_2"] = "Richting";
dictionaryVar["nl-nl"]["TutorialTitle_1"] = "Rijden";
dictionaryVar["nl-nl"]["TutorialText_4"] = "Hier zie je hoeveel rondjes je moet rijden.";
dictionaryVar["nl-nl"]["TutorialText_3"] = "Hier staat je huidige positie.";
dictionaryVar["nl-nl"]["TutorialText_2"] = "Als je de weg kwijtraakt, wijst de pijl boven in het scherm je de juiste kant weer op.";
dictionaryVar["nl-nl"]["TutorialText_1"] = "#touch{Klik}{Tik} en hou vast om je gekozen richting op te rijden. Als je vlak achter je auto klikt of tikt, rij je achteruit.";
dictionaryVar["nl-nl"]["levelStartHeader"] = "Doel";
dictionaryVar["nl-nl"]["levelStartText"] = "Probeer als eerste te finishen!";
dictionaryVar["nl-nl"]["TutorialTitle_0"] = "Doel";
dictionaryVar["nl-nl"]["TutorialText_0"] = "Finish als eerste, tweede of derde om door te mogen naar het volgende level.";
dictionaryVar["nl-nl"]["TutorialText_5"] = "Info 6";
dictionaryVar["nl-nl"]["race_go"] = "Start!";
dictionaryVar["nl-nl"]["race_place"] = "Positie";
dictionaryVar["nl-nl"]["race_lap"] = "Ronde";
dictionaryVar["nl-nl"]["raceOverviewHeader"] = "Overzicht van race <VALUE>";
dictionaryVar["nl-nl"]["raceOverviewInfo"] = "Klik om door te gaan";
dictionaryVar["nl-nl"]["levelEndScreenTitle_level"] = "Race <VALUE>";
dictionaryVar["nl-nl"]["levelEndScreenSubTitle_levelFailed"] = "Helaas";
dictionaryVar["nl-nl"]["levelMapScreenTitle"] = "Kies een race";
dictionaryVar["nl-nl"]["levelMapScreenWorld_0"] = "Kies een race";
dictionaryVar["nl-nl"]["driverNameYou"] = "Jij";
dictionaryVar["nl-nl"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["nl-nl"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["nl-nl"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["nl-nl"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["nl-nl"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["nl-nl"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["en-us"] = dictionaryVar["en-us"] || {};
dictionaryVar["en-us"]["TutorialTitle_5"] = "Title 6";
dictionaryVar["en-us"]["TutorialTitle_4"] = "Laps";
dictionaryVar["en-us"]["TutorialTitle_3"] = "Position";
dictionaryVar["en-us"]["TutorialTitle_2"] = "Directions";
dictionaryVar["en-us"]["TutorialTitle_1"] = "Driving";
dictionaryVar["en-us"]["TutorialText_4"] = "You can see how many laps you need to race here";
dictionaryVar["en-us"]["TutorialText_3"] = "You can see your current racing position here";
dictionaryVar["en-us"]["TutorialText_2"] = "When you get lost, the arrow at the top will point you in the right direction.";
dictionaryVar["en-us"]["TutorialText_1"] = "#touch{Click}{Tap} and hold anywhere to drive in that direction. Clicking or tapping directly behind the car will put it in reverse.";
dictionaryVar["en-us"]["levelStartHeader"] = "Goal";
dictionaryVar["en-us"]["levelStartText"] = "Try to finish first!";
dictionaryVar["en-us"]["TutorialTitle_0"] = "Goal";
dictionaryVar["en-us"]["TutorialText_0"] = "Finish first, second, or third to reach the next level.";
dictionaryVar["en-us"]["TutorialText_5"] = "Info 6";
dictionaryVar["en-us"]["race_go"] = "Go!";
dictionaryVar["en-us"]["race_place"] = "Place";
dictionaryVar["en-us"]["race_lap"] = "Lap";
dictionaryVar["en-us"]["raceOverviewHeader"] = "Race <VALUE> Overview";
dictionaryVar["en-us"]["raceOverviewInfo"] = "Click to continue";
dictionaryVar["en-us"]["levelEndScreenTitle_level"] = "Race <VALUE>";
dictionaryVar["en-us"]["levelEndScreenSubTitle_levelFailed"] = "Race failed";
dictionaryVar["en-us"]["levelMapScreenTitle"] = "Select a race";
dictionaryVar["en-us"]["levelMapScreenWorld_0"] = "Select a race";
dictionaryVar["en-us"]["driverNameYou"] = "You";
dictionaryVar["en-us"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["en-us"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["en-us"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["en-us"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["en-us"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["en-us"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["en-gb"] = dictionaryVar["en-gb"] || {};
dictionaryVar["en-gb"]["TutorialTitle_5"] = "Title 6";
dictionaryVar["en-gb"]["TutorialTitle_4"] = "Laps";
dictionaryVar["en-gb"]["TutorialTitle_3"] = "Position";
dictionaryVar["en-gb"]["TutorialTitle_2"] = "Directions";
dictionaryVar["en-gb"]["TutorialTitle_1"] = "Driving";
dictionaryVar["en-gb"]["TutorialText_4"] = "You can see how many laps you need to race here";
dictionaryVar["en-gb"]["TutorialText_3"] = "You can see your current racing position here";
dictionaryVar["en-gb"]["TutorialText_2"] = "When you get lost, the arrow at the top will point you in the right direction.";
dictionaryVar["en-gb"]["TutorialText_1"] = "#touch{Click}{Tap} and hold anywhere to drive in that direction. Clicking or tapping directly behind the car will put it in reverse.";
dictionaryVar["en-gb"]["levelStartHeader"] = "Goal";
dictionaryVar["en-gb"]["levelStartText"] = "Try to finish first!";
dictionaryVar["en-gb"]["TutorialTitle_0"] = "Goal";
dictionaryVar["en-gb"]["TutorialText_0"] = "Finish first, second, or third to reach the next level.";
dictionaryVar["en-gb"]["TutorialText_5"] = "Info 6";
dictionaryVar["en-gb"]["race_go"] = "Go!";
dictionaryVar["en-gb"]["race_place"] = "Place";
dictionaryVar["en-gb"]["race_lap"] = "Lap";
dictionaryVar["en-gb"]["raceOverviewHeader"] = "Race <VALUE> Overview";
dictionaryVar["en-gb"]["raceOverviewInfo"] = "Click to continue";
dictionaryVar["en-gb"]["levelEndScreenTitle_level"] = "Race <VALUE>";
dictionaryVar["en-gb"]["levelEndScreenSubTitle_levelFailed"] = "Race failed";
dictionaryVar["en-gb"]["levelMapScreenTitle"] = "Select a race";
dictionaryVar["en-gb"]["levelMapScreenWorld_0"] = "Select a race";
dictionaryVar["en-gb"]["driverNameYou"] = "You";
dictionaryVar["en-gb"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["en-gb"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["en-gb"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["en-gb"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["en-gb"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["en-gb"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["de-de"] = dictionaryVar["de-de"] || {};
dictionaryVar["de-de"]["TutorialTitle_5"] = "Titel 6";
dictionaryVar["de-de"]["TutorialTitle_4"] = "Runden";
dictionaryVar["de-de"]["TutorialTitle_3"] = "Position";
dictionaryVar["de-de"]["TutorialTitle_2"] = "Richtungen";
dictionaryVar["de-de"]["TutorialTitle_1"] = "Fahren";
dictionaryVar["de-de"]["TutorialText_4"] = "Hier kannst du sehen, wie viele Runden du absolvieren musst.";
dictionaryVar["de-de"]["TutorialText_3"] = "Hier kannst du deine aktuelle Position im Rennen sehen.";
dictionaryVar["de-de"]["TutorialText_2"] = "Wenn du dich verfranzt hast, zeigt dir der Pfeil oben die richtige Richtung an.";
dictionaryVar["de-de"]["TutorialText_1"] = "#touch{Click}{Tap} auf eine beliebige Stelle und halte sie gedrückt, um in die entsprechende Richtung zu fahren. Wenn du direkt hinter das Fahrzeug klickst oder tippst, schaltet es in den Rückwärtsgang.";
dictionaryVar["de-de"]["levelStartHeader"] = "Ziel";
dictionaryVar["de-de"]["levelStartText"] = "Überquere als Erster die Ziellinie!";
dictionaryVar["de-de"]["TutorialTitle_0"] = "Ziel";
dictionaryVar["de-de"]["TutorialText_0"] = "Überquere die Ziellinie als Erster, Zweiter oder Dritter, um das nächste Level zu erreichen.";
dictionaryVar["de-de"]["TutorialText_5"] = "Info 6";
dictionaryVar["de-de"]["race_go"] = "Los!";
dictionaryVar["de-de"]["race_place"] = "Platz";
dictionaryVar["de-de"]["race_lap"] = "Runde";
dictionaryVar["de-de"]["raceOverviewHeader"] = "Rennen <VALUE> - Übersicht";
dictionaryVar["de-de"]["raceOverviewInfo"] = "Weiter mit Klick";
dictionaryVar["de-de"]["levelEndScreenTitle_level"] = "Rennen <VALUE>";
dictionaryVar["de-de"]["levelEndScreenSubTitle_levelFailed"] = "Rennen nicht geschafft";
dictionaryVar["de-de"]["levelMapScreenTitle"] = "Wähle ein Rennen aus!";
dictionaryVar["de-de"]["levelMapScreenWorld_0"] = "Wähle ein Rennen aus!";
dictionaryVar["de-de"]["driverNameYou"] = "Du";
dictionaryVar["de-de"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["de-de"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["de-de"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["de-de"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["de-de"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["de-de"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["fr-fr"] = dictionaryVar["fr-fr"] || {};
dictionaryVar["fr-fr"]["TutorialTitle_5"] = "Titre 6";
dictionaryVar["fr-fr"]["TutorialTitle_4"] = "Tours";
dictionaryVar["fr-fr"]["TutorialTitle_3"] = "Position";
dictionaryVar["fr-fr"]["TutorialTitle_2"] = "Directions";
dictionaryVar["fr-fr"]["TutorialTitle_1"] = "Pilotage";
dictionaryVar["fr-fr"]["TutorialText_4"] = "Vous pouvez voir combien de tours vous devez faire ici. ";
dictionaryVar["fr-fr"]["TutorialText_3"] = "Vous pouvez voir ici votre position dans la course.";
dictionaryVar["fr-fr"]["TutorialText_2"] = "Lorsque vous vous perdez, la flèche en haut de l'écran vous indique la bonne direction.";
dictionaryVar["fr-fr"]["TutorialText_1"] = "#touch{Click}{Tap} un emplacement et maintenez pour aller dans cette direction. Si vous cliquez sur (ou touchez) l'emplacement situé juste derrière la voiture, vous ferez marche arrière.";
dictionaryVar["fr-fr"]["levelStartHeader"] = "Objectif";
dictionaryVar["fr-fr"]["levelStartText"] = "Essayez de finir premier !";
dictionaryVar["fr-fr"]["TutorialTitle_0"] = "Objectif";
dictionaryVar["fr-fr"]["TutorialText_0"] = "Finissez premier, second ou troisième pour atteindre le niveau suivant.";
dictionaryVar["fr-fr"]["TutorialText_5"] = "Info 6";
dictionaryVar["fr-fr"]["race_go"] = "Go !";
dictionaryVar["fr-fr"]["race_place"] = "Position";
dictionaryVar["fr-fr"]["race_lap"] = "Tour";
dictionaryVar["fr-fr"]["raceOverviewHeader"] = "Aperçu course <VALUE> ";
dictionaryVar["fr-fr"]["raceOverviewInfo"] = "Cliquez pour continuer";
dictionaryVar["fr-fr"]["levelEndScreenTitle_level"] = "Course <VALUE> ";
dictionaryVar["fr-fr"]["levelEndScreenSubTitle_levelFailed"] = "Défaite course";
dictionaryVar["fr-fr"]["levelMapScreenTitle"] = "Sélectionner une course";
dictionaryVar["fr-fr"]["levelMapScreenWorld_0"] = "Sélectionner une course";
dictionaryVar["fr-fr"]["driverNameYou"] = "Vous";
dictionaryVar["fr-fr"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["fr-fr"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["fr-fr"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["fr-fr"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["fr-fr"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["fr-fr"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["pt-br"] = dictionaryVar["pt-br"] || {};
dictionaryVar["pt-br"]["TutorialTitle_5"] = "Título 6";
dictionaryVar["pt-br"]["TutorialTitle_4"] = "Voltas";
dictionaryVar["pt-br"]["TutorialTitle_3"] = "Posição";
dictionaryVar["pt-br"]["TutorialTitle_2"] = "Direções";
dictionaryVar["pt-br"]["TutorialTitle_1"] = "Pilotagem";
dictionaryVar["pt-br"]["TutorialText_4"] = "Veja quantas voltas precisa correr aqui.";
dictionaryVar["pt-br"]["TutorialText_3"] = "Veja sua posição atual na corrida aqui.";
dictionaryVar["pt-br"]["TutorialText_2"] = "Quando se perder, a seta no topo aponta para a direção certa.";
dictionaryVar["pt-br"]["TutorialText_1"] = "#touch{Click}{Tap} e segure em qualquer lugar para dirigir naquela direção. Clicar ou tocar atrás do carro faz com que ele dê ré.";
dictionaryVar["pt-br"]["levelStartHeader"] = "Objetivo";
dictionaryVar["pt-br"]["levelStartText"] = "Tente terminar em primeiro lugar!";
dictionaryVar["pt-br"]["TutorialTitle_0"] = "Objetivo";
dictionaryVar["pt-br"]["TutorialText_0"] = "Chegue em primeiro, segundo ou terceiro lugar para avançar para o próximo nível.";
dictionaryVar["pt-br"]["TutorialText_5"] = "Informação 6";
dictionaryVar["pt-br"]["race_go"] = "Vai!";
dictionaryVar["pt-br"]["race_place"] = "Colocação";
dictionaryVar["pt-br"]["race_lap"] = "Volta";
dictionaryVar["pt-br"]["raceOverviewHeader"] = "Visão geral da corrida <VALUE>";
dictionaryVar["pt-br"]["raceOverviewInfo"] = "Clique para continuar";
dictionaryVar["pt-br"]["levelEndScreenTitle_level"] = "Corrida <VALUE>";
dictionaryVar["pt-br"]["levelEndScreenSubTitle_levelFailed"] = "Corrida fracassada";
dictionaryVar["pt-br"]["levelMapScreenTitle"] = "Selecione uma corrida";
dictionaryVar["pt-br"]["levelMapScreenWorld_0"] = "Selecione uma corrida";
dictionaryVar["pt-br"]["driverNameYou"] = "Você";
dictionaryVar["pt-br"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["pt-br"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["pt-br"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["pt-br"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["pt-br"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["pt-br"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["es-es"] = dictionaryVar["es-es"] || {};
dictionaryVar["es-es"]["TutorialTitle_5"] = "Título 6";
dictionaryVar["es-es"]["TutorialTitle_4"] = "Vueltas";
dictionaryVar["es-es"]["TutorialTitle_3"] = "Puesto";
dictionaryVar["es-es"]["TutorialTitle_2"] = "Orientación";
dictionaryVar["es-es"]["TutorialTitle_1"] = "Conducir";
dictionaryVar["es-es"]["TutorialText_4"] = "Puedes ver cuántas vueltas tienes que correr aquí";
dictionaryVar["es-es"]["TutorialText_3"] = "Puedes ver tu puesto en la carrera actual aquí";
dictionaryVar["es-es"]["TutorialText_2"] = "Si te pierdes, la flecha de la parte superior te indica el camino correcto.";
dictionaryVar["es-es"]["TutorialText_1"] = "#touch{Click}{Tap} y mantén en cualquier sitio para conducir en esa dirección. Si haces clic o tocas justo detrás del coche, pondrás la marcha atrás.";
dictionaryVar["es-es"]["levelStartHeader"] = "Objetivo";
dictionaryVar["es-es"]["levelStartText"] = "¡Intenta llegar primero!";
dictionaryVar["es-es"]["TutorialTitle_0"] = "Objetivo";
dictionaryVar["es-es"]["TutorialText_0"] = "Termina en primer, segundo o tercer puesto para pasar de nivel.";
dictionaryVar["es-es"]["TutorialText_5"] = "Info 6";
dictionaryVar["es-es"]["race_go"] = "¡Ya!";
dictionaryVar["es-es"]["race_place"] = "Puesto";
dictionaryVar["es-es"]["race_lap"] = "Vuelta";
dictionaryVar["es-es"]["raceOverviewHeader"] = "Vista general de carrera <VALUE>";
dictionaryVar["es-es"]["raceOverviewInfo"] = "Clic para continuar";
dictionaryVar["es-es"]["levelEndScreenTitle_level"] = "Carrera <VALUE>";
dictionaryVar["es-es"]["levelEndScreenSubTitle_levelFailed"] = "Carrera fallida";
dictionaryVar["es-es"]["levelMapScreenTitle"] = "Elige una carrera";
dictionaryVar["es-es"]["levelMapScreenWorld_0"] = "Elige una carrera";
dictionaryVar["es-es"]["driverNameYou"] = "Tú";
dictionaryVar["es-es"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["es-es"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["es-es"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["es-es"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["es-es"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["es-es"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["tr-tr"] = dictionaryVar["tr-tr"] || {};
dictionaryVar["tr-tr"]["TutorialTitle_5"] = "Başlık 6";
dictionaryVar["tr-tr"]["TutorialTitle_4"] = "Turlar";
dictionaryVar["tr-tr"]["TutorialTitle_3"] = "Pozisyon";
dictionaryVar["tr-tr"]["TutorialTitle_2"] = "Yönler";
dictionaryVar["tr-tr"]["TutorialTitle_1"] = "Sürüş";
dictionaryVar["tr-tr"]["TutorialText_4"] = "Kaç tur yarışman gerektiğini buradan görebilirsin";
dictionaryVar["tr-tr"]["TutorialText_3"] = "Pozisyonunu buradan görebilirsin";
dictionaryVar["tr-tr"]["TutorialText_2"] = "Üstteki ok kaybolduğunda sana doğru yönü gösterir.";
dictionaryVar["tr-tr"]["TutorialText_1"] = "#touch Herhangi bir yere {Click}{Tap} tuttuğunda o yöne doğru sürersin. Aracın arkasına tıklamak veya dokunmak aracı geri vitese alır.";
dictionaryVar["tr-tr"]["levelStartHeader"] = "Amaç";
dictionaryVar["tr-tr"]["levelStartText"] = "Birinci bitirmek!";
dictionaryVar["tr-tr"]["TutorialTitle_0"] = "Amaç";
dictionaryVar["tr-tr"]["TutorialText_0"] = "Sonraki bölüme geçmek için birinci, ikinci veya üçüncü bitirmelisin.";
dictionaryVar["tr-tr"]["TutorialText_5"] = "Bilgi 6";
dictionaryVar["tr-tr"]["race_go"] = "Başla!";
dictionaryVar["tr-tr"]["race_place"] = "Sıra";
dictionaryVar["tr-tr"]["race_lap"] = "Tur";
dictionaryVar["tr-tr"]["raceOverviewHeader"] = "<VALUE>. Yarışa Bakış";
dictionaryVar["tr-tr"]["raceOverviewInfo"] = "Devam etmek için tıkla";
dictionaryVar["tr-tr"]["levelEndScreenTitle_level"] = "Yarış <VALUE>";
dictionaryVar["tr-tr"]["levelEndScreenSubTitle_levelFailed"] = "Yarışı kaybettin";
dictionaryVar["tr-tr"]["levelMapScreenTitle"] = "Bir yarış seç";
dictionaryVar["tr-tr"]["levelMapScreenWorld_0"] = "Bir yarış seç";
dictionaryVar["tr-tr"]["driverNameYou"] = "Sen";
dictionaryVar["tr-tr"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["tr-tr"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["tr-tr"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["tr-tr"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["tr-tr"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["tr-tr"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["ru-ru"] = dictionaryVar["ru-ru"] || {};
dictionaryVar["ru-ru"]["TutorialTitle_5"] = "Title 6";
dictionaryVar["ru-ru"]["TutorialTitle_4"] = "Laps";
dictionaryVar["ru-ru"]["TutorialTitle_3"] = "Position";
dictionaryVar["ru-ru"]["TutorialTitle_2"] = "Directions";
dictionaryVar["ru-ru"]["TutorialTitle_1"] = "Driving";
dictionaryVar["ru-ru"]["TutorialText_4"] = "You can see how many laps you need to race here";
dictionaryVar["ru-ru"]["TutorialText_3"] = "You can see your current racing position here";
dictionaryVar["ru-ru"]["TutorialText_2"] = "When you get lost, the arrow at the top will point you in the right direction.";
dictionaryVar["ru-ru"]["TutorialText_1"] = "#touch{Click}{Tap} and hold anywhere to drive in that direction. Clicking or tapping directly behind the car will put it in reverse.";
dictionaryVar["ru-ru"]["levelStartHeader"] = "Goal";
dictionaryVar["ru-ru"]["levelStartText"] = "Try to finish first!";
dictionaryVar["ru-ru"]["TutorialTitle_0"] = "Goal";
dictionaryVar["ru-ru"]["TutorialText_0"] = "Finish first, second, or third to reach the next level.";
dictionaryVar["ru-ru"]["TutorialText_5"] = "Info 6";
dictionaryVar["ru-ru"]["race_go"] = "Go!";
dictionaryVar["ru-ru"]["race_place"] = "Place";
dictionaryVar["ru-ru"]["race_lap"] = "Lap";
dictionaryVar["ru-ru"]["raceOverviewHeader"] = "Race <VALUE> Overview";
dictionaryVar["ru-ru"]["raceOverviewInfo"] = "Click to continue";
dictionaryVar["ru-ru"]["levelEndScreenTitle_level"] = "Race <VALUE>";
dictionaryVar["ru-ru"]["levelEndScreenSubTitle_levelFailed"] = "Race failed";
dictionaryVar["ru-ru"]["levelMapScreenTitle"] = "Select a race";
dictionaryVar["ru-ru"]["levelMapScreenWorld_0"] = "Select a race";
dictionaryVar["ru-ru"]["driverNameYou"] = "You";
dictionaryVar["ru-ru"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["ru-ru"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["ru-ru"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["ru-ru"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["ru-ru"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["ru-ru"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["ar-eg"] = dictionaryVar["ar-eg"] || {};
dictionaryVar["ar-eg"]["TutorialTitle_5"] = "Title 6";
dictionaryVar["ar-eg"]["TutorialTitle_4"] = "Laps";
dictionaryVar["ar-eg"]["TutorialTitle_3"] = "Position";
dictionaryVar["ar-eg"]["TutorialTitle_2"] = "Directions";
dictionaryVar["ar-eg"]["TutorialTitle_1"] = "Driving";
dictionaryVar["ar-eg"]["TutorialText_4"] = "You can see how many laps you need to race here";
dictionaryVar["ar-eg"]["TutorialText_3"] = "You can see your current racing position here";
dictionaryVar["ar-eg"]["TutorialText_2"] = "When you get lost, the arrow at the top will point you in the right direction.";
dictionaryVar["ar-eg"]["TutorialText_1"] = "#touch{Click}{Tap} and hold anywhere to drive in that direction. Clicking or tapping directly behind the car will put it in reverse.";
dictionaryVar["ar-eg"]["levelStartHeader"] = "Goal";
dictionaryVar["ar-eg"]["levelStartText"] = "Try to finish first!";
dictionaryVar["ar-eg"]["TutorialTitle_0"] = "Goal";
dictionaryVar["ar-eg"]["TutorialText_0"] = "Finish first, second, or third to reach the next level.";
dictionaryVar["ar-eg"]["TutorialText_5"] = "Info 6";
dictionaryVar["ar-eg"]["race_go"] = "Go!";
dictionaryVar["ar-eg"]["race_place"] = "Place";
dictionaryVar["ar-eg"]["race_lap"] = "Lap";
dictionaryVar["ar-eg"]["raceOverviewHeader"] = "Race <VALUE> Overview";
dictionaryVar["ar-eg"]["raceOverviewInfo"] = "Click to continue";
dictionaryVar["ar-eg"]["levelEndScreenTitle_level"] = "Race <VALUE>";
dictionaryVar["ar-eg"]["levelEndScreenSubTitle_levelFailed"] = "Race failed";
dictionaryVar["ar-eg"]["levelMapScreenTitle"] = "Select a race";
dictionaryVar["ar-eg"]["levelMapScreenWorld_0"] = "Select a race";
dictionaryVar["ar-eg"]["driverNameYou"] = "You";
dictionaryVar["ar-eg"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["ar-eg"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["ar-eg"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["ar-eg"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["ar-eg"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["ar-eg"]["driverNameOpponent_6"] = "Colin";
dictionaryVar["ko-kr"] = dictionaryVar["ko-kr"] || {};
dictionaryVar["ko-kr"]["TutorialTitle_5"] = "Title 6";
dictionaryVar["ko-kr"]["TutorialTitle_4"] = "Laps";
dictionaryVar["ko-kr"]["TutorialTitle_3"] = "Position";
dictionaryVar["ko-kr"]["TutorialTitle_2"] = "Directions";
dictionaryVar["ko-kr"]["TutorialTitle_1"] = "Driving";
dictionaryVar["ko-kr"]["TutorialText_4"] = "You can see how many laps you need to race here";
dictionaryVar["ko-kr"]["TutorialText_3"] = "You can see your current racing position here";
dictionaryVar["ko-kr"]["TutorialText_2"] = "When you get lost, the arrow at the top will point you in the right direction.";
dictionaryVar["ko-kr"]["TutorialText_1"] = "#touch{Click}{Tap} and hold anywhere to drive in that direction. Clicking or tapping directly behind the car will put it in reverse.";
dictionaryVar["ko-kr"]["levelStartHeader"] = "Goal";
dictionaryVar["ko-kr"]["levelStartText"] = "Try to finish first!";
dictionaryVar["ko-kr"]["TutorialTitle_0"] = "Goal";
dictionaryVar["ko-kr"]["TutorialText_0"] = "Finish first, second, or third to reach the next level.";
dictionaryVar["ko-kr"]["TutorialText_5"] = "Info 6";
dictionaryVar["ko-kr"]["race_go"] = "Go!";
dictionaryVar["ko-kr"]["race_place"] = "Place";
dictionaryVar["ko-kr"]["race_lap"] = "Lap";
dictionaryVar["ko-kr"]["raceOverviewHeader"] = "Race <VALUE> Overview";
dictionaryVar["ko-kr"]["raceOverviewInfo"] = "Click to continue";
dictionaryVar["ko-kr"]["levelEndScreenTitle_level"] = "Race <VALUE>";
dictionaryVar["ko-kr"]["levelEndScreenSubTitle_levelFailed"] = "Race failed";
dictionaryVar["ko-kr"]["levelMapScreenTitle"] = "Select a race";
dictionaryVar["ko-kr"]["levelMapScreenWorld_0"] = "Select a race";
dictionaryVar["ko-kr"]["driverNameYou"] = "You";
dictionaryVar["ko-kr"]["driverNameOpponent_1"] = "Sebastian";
dictionaryVar["ko-kr"]["driverNameOpponent_2"] = "Marcus";
dictionaryVar["ko-kr"]["driverNameOpponent_3"] = "Tom";
dictionaryVar["ko-kr"]["driverNameOpponent_4"] = "Richard";
dictionaryVar["ko-kr"]["driverNameOpponent_5"] = "Peter";
dictionaryVar["ko-kr"]["driverNameOpponent_6"] = "Colin";

//******************************************************
//*****    Script Resource: game_configuration
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************
/* exported configuration_product */
var configuration_product = configuration_product || {};
configuration_product.ga = {
	gameKey: "116e808b7a64cac3b813c6e5b11f42f8", 
	secretKey: "8474522df7e7ea110a7be28a6c4b3dff7bcf9e6a"
};



//******************************************************
//*****    Script Resource: theme_settings
//******************************************************

//////////////////////////////////////////////////////
// Settings file for game theme                     //
// Created from levels file rally_theme_settings    //
//                                                  //
// Created by the Tingly Level Editor               //
//     on 31-8-2015 09:18:44                        //
//////////////////////////////////////////////////////

// Directives for jshint
/* global tgScale */
/* global tgSelect */
/* exported themeSettingsVar */
/* exported initThemeSettings */

var themeSettingsVar = null;

var initThemeSettings = function() {
	"use strict";

	// *****************************************
	// Global Settings
	// *****************************************

	themeSettingsVar = {
		buttons : {
			"bigPlay" : "green",                           // font color of big play button (play button on start screen)
			"default_color" : "green"                      // default font color used on buttons
		},
		game : {
			gameName : "RallyRacer"                        // official name of the game, capitalized but without spaces (i.e. BubbleCharms)
		},
		gameEndScreen : {
			font : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "middle", fontSize: tgSelect({big: 52, small: 26}), fillColor: "#FFFFFF"}// font properties of text
		},
		levelEnd : {
			backButtonX : {align: "center", offset: tgScale(0)},// x position of back button
			backButtonY : tgScale(498),                    // y position of back button
			closeButtonY : tgScale(10),                    // y position of close button
			emphasizedStatsFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "top", fontSize:146, fillColor:"#ffffff"},// font properties of big/emphasized stats text
			emphasizedStatsHeaderFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "top", fontSize:32, fillColor:"#7a7c7d"},// font properties of big/emphasized stats header
			emphasizedStatsHeaderY : tgScale(400),         // y position of emphasized header
			emphasizedStatsMaxHeight : tgScale(150),       // max height of emphasized stats
			emphasizedStatsY : tgScale(280),               // y position of emphasized stats
			forwardButtonX : {align: "center", offset: tgScale(150)},// x position of forward button
			forwardButtonY : tgScale(438),                 // y position of forward button
			overlayImageOffsetY : tgScale(10),             // y position of overlay
			star1X : {align: "center", offset: tgScale(-179, "round")},// x position of first star
			star1Y : tgScale(95),                          // y position of first star
			star2Y : tgScale(71),                          // y position of second star
			star3X : {align: "center", offset: tgScale(181, "round")},// x position of third star
			star3Y : tgScale(95),                          // y position of third star
			statsFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "top",fontSize:38, fillColor:"#ffffff"},// font properties of normal stats text
			statsHeaderFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "top", fontSize:38, fillColor:"#ffffff"},// font properties of normal stats header
			statsHeaderY : tgScale(276),                   // y position of stats header
			subTitleFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "middle", fontSize:50, fillColor:"#ffffff"},// font properties of sub title (failed)
			subTitleY : tgScale(246),                      // y position of subtitle
			titleFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "middle", fontSize:32, fillColor:"#ffffff"},// font properties of title
			titleY : tgScale(42)                           // y position of title
		},
		levelMapScreen : {
			pointOverviewFont : {fontFace: f_themeDefault.fontFace, fontSize:38, fillColor:"#ffffff", align: "center"},// font of point overview text
			pointOverviewY : {align: "top", offset: tgScale(5500)},// y position of points overview text
			starsOverviewFont : {fontFace: f_themeDefault.fontFace, fontSize:32, fillColor:"#ffffff", align: "center"},// font of stars overview text
			titleFont : {fontFace: f_themeDefault.fontFace, baseline: "bottom", fontSize:38, fillColor:"#ffffff"}// font properties of title
		},
		levelStart : {
			assignmentFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "middle", fontSize:48, fillColor:"#ffffff"},// font properties of assignment (body) content
			assignmentMaxHeight : tgScale(100),            // max height of assignment (body) text
			assignmentMaxWidth : tgScale(300),             // max width of assignment (body) text
			assignmentOffsetY : tgScale(135),              // y position of assignment (body) text
			headerFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "middle", fontSize:38, fillColor:"#ffffff"},// font properties of header
			headerMaxHeight : tgScale(50),                 // max height of header text
			headerMaxWidth : tgScale(250),                 // max width of header text
			headerOffsetY : tgScale(50)                    // y position of header text
		},
		music : {
			backgroundFadeInDuration : 500                 // duration (ms) of background music fade in after clicking big play button
		},
		options : {
			aboutHeaderFont : {fontFace: f_themeDefault.fontFace, align:"center", baseline:"top", fillColor:"#3C0058", fontSize:tgSelect({big:26,small:13}), spacing:tgScale(6)},// Font of the about header
			aboutTextFont : {fontFace: f_themeDefault.fontFace, align:"center", baseline:"top", fillColor:"#3C0058", fontSize:tgSelect({big:26,small:13}), spacing:tgScale(6)},// Font of the about text
			aboutVersionFont : {fontFace: f_themeDefault.fontFace},// The font of the about version text
			buttonsOffsetY : {align: "center", offset: tgScale(26)},// y offset of buttons from overlay
			closeButtonX : tgScale(495),                   // x position of close button
			confirmQuestionTextHeight : tgScale(250),      // height of question text
			confirmQuestionTextY : tgScale(120),           // y position of question text
			overlayImageOffsetY : tgScale(10),             // y position of overlay after animation
			quitConfirmFont : {fontFace: f_themeDefault.fontFace, fontSize:32, fillColor:"#ffffff"},// font properties for confirming quit (and other questions)
			titleFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline: "top", fontSize:38, fillColor:"#ffffff"},// font properties of title
			titleY : tgScale(30),                          // y position of title
			
			tutorialFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline:"top", fontSize: tgSelect({big: 36, small: 18})},// font properties for tutorial body
			tutorialTitleFont : {fontFace: f_themeDefault.fontFace, align: "center", baseline:"top", fontSize: tgSelect({big: 36, small: 18})}, // font properties for tutorial title
			tutorialTitleOffsetY: tgScale(75, "round"),
			tutorialImageOffsetY: tgScale(123, "round"),
			tutorialTextOffsetY: tgScale(341, "round"),
			tutorialButtonPreviousY: tgScale(510, "round"),
			tutorialButtonNextY: tgScale(510, "round")
		}
	};
};



//******************************************************
//*****    Script Resource: TG_Hooks
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

TG.hooks = TG.hooks || {};

TG.hooks.handleGameInitialized = function(){
	"use strict";
	TG.controller.continueGameFlow();
};

TG.hooks.informStartTextureLoaded = function(){
	"use strict";
};

TG.hooks.loadingProgress = function(progress){
	"use strict";
};

TG.hooks.handleGameLoaded = function(){
	"use strict";
	TG.controller.continueGameFlow();
};

TG.hooks.informGameStart = function(){
	"use strict";
};

TG.hooks.informGameRestart = function(){
	"use strict";
};

TG.hooks.informStartScreenShown = function(){
	"use strict";
};

TG.hooks.informLevelStart = function(worldIdx, levelIdx){
	"use strict";
};

TG.hooks.informLevelEndScreenShown = function(){
	"use strict";
};

TG.hooks.informLevelEndScreenStart = function(){
	"use strict";
};

TG.hooks.informLevelQuit = function(){
	"use strict";
};

TG.hooks.handleLevelInitialized = function(worldIdx, levelIdx){
	"use strict";
	TG.controller.continueGameFlow();
};

TG.hooks.handleLevelLoaded = function(worldIdx, levelIdx){
	"use strict";
	TG.controller.continueGameFlow();
};

TG.hooks.handleLevelCompleted = function(){
	"use strict";
	TG.controller.continueGameFlow();
};

TG.hooks.handleGameCompleted = function(){
	"use strict";
	TG.controller.continueGameFlow();
};

TG.hooks.getStoredData = function(defaultValue, callback){
	"use strict";
	if(TG.controller.persistence === undefined){
		TG.controller.persistence = new TG_Persistence(true);
	}
	return TG.controller.persistence.loadData(defaultValue, callback);
};

TG.hooks.updateStoredData = function(data){
	"use strict";
	if(TG.controller.persistence === undefined){
		TG.controller.persistence = new TG_Persistence(true);
	}
	return TG.controller.persistence.saveData(data);
};

TG.hooks.openUrl = function(url){
	"use strict";
	window.open(url);
};

TG.hooks.getStartScreenLogos = function(){
	"use strict";
	return [{image: s_logo_coolgames_start, url: TG.config.homeUrl}];
};

TG.hooks.informResize = function(){
	"use strict";
};

//******************************************************
//*****    Script Resource: TG_AdvertisementHooks
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

TG.adHooks = TG.adHooks || {};

TG.adHooks.handleGameInitialized = function(){
    "use strict";
    TG.controller.continueGameFlowAfterAd();
};

TG.adHooks.loadingProgress = function(progress){
    "use strict";
};

TG.adHooks.handleGameLoaded = function(){
    "use strict";
    TG.controller.continueGameFlowAfterAd();
};

TG.adHooks.handleLevelCompleted = function(){
    "use strict";
    TG.controller.continueGameFlowAfterAd();
};
//******************************************************
//*****    Script Resource: Inheritance
//******************************************************


/* exported Inheritance */
var Inheritance = {
	copyPrototype: function(classFrom, classTo) {
		"use strict";
		for ( var prop in classFrom.prototype) {
			classTo.prototype[prop] = classFrom.prototype[prop];
		}
	}
};
//******************************************************
//*****    Script Resource: Easer
//******************************************************

/**
 * @constructor Easer
 */
var Easer = function(initial, defaultDuration, easeFunction, clampFunction) {
	"use strict";
	this.from = initial;
	this.to = initial;
	this.defaultDuration = defaultDuration;
	this.duration = 1;
	this.clampFunction = clampFunction;
	this.easeFunction = easeFunction;
	this.callBackFunction = null;
	this.totalTimePassed = 0;
};

Easer.prototype.addTime = function(timePassed) {
	"use strict";
	this.totalTimePassed += timePassed;
	if (this.totalTimePassed > this.duration) {
		if (this.callBackFunction) {
			this.callBackFunction();
			this.callBackFunction = null;
		}
	}
};

Easer.prototype.getValue = function() {
	"use strict";

	if (this.totalTimePassed >= this.duration) {
		return this.easeFunction(this.duration, this.from, this.to - this.from, this.duration);
	}

	var result = this.easeFunction(this.totalTimePassed, this.from, this.to - this.from, this.duration);

	if (this.clampFunction) {
		result = this.clampFunction(result);
	}
	return result;
};

Easer.prototype.easeTo = function(to, duration, callBackFunction) {
	"use strict";
	this.from = this.getValue();
	this.to = to;
	this.duration = duration || this.defaultDuration;
	this.callBackFunction = callBackFunction;
	this.totalTimePassed = 0;
};

Easer.prototype.isDone = function() {
	"use strict";
	return this.totalTimePassed > this.duration;
};
//******************************************************
//*****    Script Resource: TG_BrowserScaling
//******************************************************

/* global
	tbBrowser
 */

var TG_BrowserScaling = function() {
	"use strict";
	this.minGrade = 1;
	this.maxGrade = 3;

	this.grade = this.maxGrade;
	this._determineGrade();

	TG.version["browser_name"] = tbBrowser.name;
	TG.version["browser_version"] = tbBrowser.browser.version;
	TG.version["os_version"] = tbBrowser.os.version;
	TG.version["browser_grade"] = this.grade;

};

TG_BrowserScaling.prototype._determineGrade = function() {
	"use strict";

	if (tbBrowser.browser.stockandroid) {
		if (tbBrowser.os.versionAsNumber < 3) {
			this.grade = 1;
		}
		else if (tbBrowser.os.versionAsNumber < 4.4) {
			this.grade = 2;
		}
		else {
			this.grade = 3;
		}
	}

	if (tbBrowser.os.ios) {

		if (tbBrowser.os.versionAsNumber < 7) {
			this.grade = 2;
		}
		else {
			this.grade = 3;
		}
	}

	if (tbBrowser.os.windowsphone) {
		if (tbBrowser.os.versionAsNumber < 8) {
			this.grade = 2;
		}
		else {
			this.grade = 3;
		}
	}

};

TG_BrowserScaling.prototype.hasGrade1 = function() {
	"use strict";
	return this.grade >= 1;
};

TG_BrowserScaling.prototype.hasGrade2 = function() {
	"use strict";
	return this.grade >= 2;
};

TG_BrowserScaling.prototype.hasGrade3 = function() {
	"use strict";
	return this.grade >= 3;
};

TG_BrowserScaling.prototype.getGradedSetting = function(settingTriplet) {
	"use strict";
	if (typeof settingTriplet === "object" && typeof settingTriplet.length !== "undefined")	 {
		return settingTriplet[this.grade-1];
	}
	else {
		return settingTriplet;
	}

};

TG_BrowserScaling.prototype.forceGrade = function(grade) {
	"use strict";
	this.grade = grade;
};
//******************************************************
//*****    Script Resource: TG_Globals
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

/*
 * Fill TG object with data
 */
TG.environment = (TG["environment"] !== undefined)? TG["environment"] : "development";
TG.analyticsProperty = (TG["ga"] !== undefined)? TG["ga"] : TG.environment;
if(typeof TG["mediaUrl"] !== "undefined"){
	tbLoader.setDataLocation(TG["mediaUrl"]);
}else{
	tbLoader.setDataLocation(TG.size);
}

/*
 * Special event id's
 */
TG.backButtonEventId = "backButton";
TG.languageSetEventId = "languageSet";
TG.resizeEventId = "resizeEvent";

TG.version = {
    "builder": builderVersion,
    "build-time": buildTime,
    "build-date": buildDate,
    "audio": (tbAudio.usingWebAudio)? "web audio api" : ((tbAudio.usingHTMLAudio)? "html5 audio" : "no audio")
};

TG.browserScaling = new TG_BrowserScaling();

TG.settings = {};
// init settings
if(typeof initTGSettings === "function"){
	initTGSettings();
}
if(typeof initGameSettings === "function"){
	initGameSettings();
}
if(typeof initThemeSettings === "function"){
	initThemeSettings();
}
if(typeof initGameThemeSettings === "function"){
	initGameThemeSettings();
}

TG.settings.tg = (typeof tgSettingsVar !== "undefined")? tgSettingsVar : {};
TG.settings.game = (typeof gameSettingsVar !== "undefined")? gameSettingsVar : {};
TG.settings.theme = (typeof themeSettingsVar !== "undefined")? themeSettingsVar : {};
TG.settings.gameTheme = (typeof gameThemeSettingsVar !== "undefined")? gameThemeSettingsVar : {};
TG.publisherSettings = window["publisherSettings"];

/*
 * Set-up configuration
 */
TG.config = (typeof game_configuration !== "undefined")? game_configuration : {};
if(typeof configuration_general !== "undefined"){
	TG.config = configuration_general;
}
if(typeof configuration_product !== "undefined"){
	for( var s in configuration_product){
		TG.config[s] = configuration_product[s];
	}
}

/*
 * Set-up dictionary
 */
(function(){
	"use strict";
	var defaultLanguage, states, i, finalLanguageSet, browserLangPrefs, j, l, regex, urlLanguageSet, urlParams;
	TG.dictionary = {};
	TG.dictionary._dictionary = (typeof dictionaryVar !== "undefined")? dictionaryVar : {};

	//determine available languages based on client configuration
	TG.dictionary._availableLanguages = (TG.config.languages !== undefined && TG.config.languages.available !== undefined)? TG.config.languages.available
	        : TG.settings.tg.languages.available;
	//remove languages from available list if they are not supported by the game
	if(TG.config.supportedLanguages){
		for(i = TG.dictionary._availableLanguages.length - 1; i >= 0; i--){
			if(TG.config.supportedLanguages.indexOf(TG.dictionary._availableLanguages[i]) < 0){
				TG.dictionary._availableLanguages.splice(i, 1);
			}
		}
	}
	// check url parameters and remove languages that are not in param
	try{
		urlParams = (function(){
			var queryString, params, queries, temp, i, l;
			params = {};
			queryString = window.location.search.substring(1);
			if(queryString){
				// Split into key/value pairs
				queries = queryString.split("&");

				// Convert the array of strings into an object
				for(i = 0, l = queries.length; i < l; i++){
					temp = queries[i].split("=");
					params[temp[0]] = temp[1];
				}
			}
			return params;
		}());

		if(urlParams["lang"]){
			urlLanguageSet = urlParams["lang"].toLowerCase().split("+");
			for(i = TG.dictionary._availableLanguages.length - 1; i >= 0; i--){
				if(urlLanguageSet.indexOf(TG.dictionary._availableLanguages[i]) < 0){
					TG.dictionary._availableLanguages.splice(i, 1);
				}
			}
		}
	}catch(e){
	}
	
	// make sure available language set is non empty
	if(TG.dictionary._availableLanguages.length === 0){
		TG.dictionary._availableLanguages.push("en-us");
	}
	// try to determine browser language
	browserLangPrefs = navigator["languages"]? navigator["languages"] : [navigator["language"] || navigator["userLanguage"]];
	for(i = 0; i < browserLangPrefs.length; i++){
		if(typeof browserLangPrefs[i] === "string"){
			l = browserLangPrefs[i].toLowerCase();
			for(j = 0; j < TG.dictionary._availableLanguages.length; j++){
				if(TG.dictionary._availableLanguages[j].search(l) >= 0){
					defaultLanguage = TG.dictionary._availableLanguages[j];
					break;
				}
			}
			if(defaultLanguage !== undefined){
				break;
			}
		}
	}
	if(defaultLanguage === undefined){
		defaultLanguage = (TG.config.languages !== undefined && TG.config.languages.initial !== undefined)? TG.config.languages.initial
		        : TG.settings.tg.languages.initial;
	}
	TG.dictionary._language = (TG.dictionary._availableLanguages.indexOf(defaultLanguage) >= 0)? defaultLanguage : TG.dictionary._availableLanguages[0];
	TG.dictionary._langDictionary = TG.dictionary._dictionary[TG.dictionary._language];
	// setup language toggle button
	if(TG.settings.tg.buttonDefinitions["language_toggle"] !== undefined && TG.settings.tg.buttonDefinitions["language_toggle"].states !== undefined){
		states = TG.settings.tg.buttonDefinitions["language_toggle"].states;
		finalLanguageSet = [];
		for(i = 0; i < states.length; i++){
			if(TG.dictionary._availableLanguages.indexOf(states[i].id) >= 0){
				finalLanguageSet.push(states[i]);
			}
		}
		TG.settings.tg.buttonDefinitions["language_toggle"].states = finalLanguageSet;
	}

	// add dictionary functions
	TG.dictionary.getText = function(key, defaultText){
		var text, subStringsToReplace, replacement, i, touch;
		if(TG.dictionary._langDictionary !== undefined && TG.dictionary._langDictionary[key] !== undefined){
			text = TG.dictionary._langDictionary[key];
			subStringsToReplace = text.match(/#touch{.*}\s*{.*}/g);
			if(subStringsToReplace){
				for(i = 0; i < subStringsToReplace.length; i++){
					touch = tbBrowser.features.tablet || tbBrowser.features.mobile;
					// specifications
					replacement = touch? subStringsToReplace[i].match(/{[^}]*}/g)[1] : subStringsToReplace[i].match(/{[^}]*}/g)[0];
					replacement = replacement.substring(1, replacement.length - 1);
					text = text.replace(subStringsToReplace[i], replacement);
				}
			}
			return text;
		}
		return defaultText;
	};

	TG.dictionary.setLanguage = function(languageKey){
		TG.dictionary._language = languageKey;
		TG.dictionary._langDictionary = TG.dictionary._dictionary[languageKey];
		tbGame.addSpecial(TG.languageSetEventId, languageKey);
	};

	TG.dictionary.getLanguage = function(){
		return TG.dictionary._language;
	};

	TG.dictionary.getAvailableLanguages = function(){
		return TG.dictionary._availableLanguages;
	};
	
	TG.dictionary.isLanguageAvailable = function(languageKey){
		return TG.dictionary._availableLanguages.indexOf(languageKey) >= 0;
	};

}());

// determine device/browser data
TG.deviceData = (function(){
	"use strict";
	var data = {};
	data.os = "";
	data.os_major = "";
	data.os_minor = "";
	data.device = "";

	return data;
}());

// Set-up google analytics
/*
 * (function(){ if(TG.config.track !== false){ (function(i,s,o,g,r,a,m){
 * i["GoogleAnalyticsObject"] = r; i[r] = i[r] || function(){(i[r]["q"] =
 * i[r]["q"] || []).push(arguments);}; i[r]["l"] = 1*new Date(); a =
 * s.createElement(o); m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g;
 * m.parentNode.insertBefore(a,m); })(window, document, "script",
 * "//www.google-analytics.com/analytics.js", "gameAnalytics");
 * window["gameAnalytics"]("create", "UA-44198463-9", "tinglygames.com"); //test
 * //window["gameAnalytics"]("create", "UA-44198463-10", "greetinggames.com");
 *
 * window["gameAnalytics"]("send", "pageview"); } })(); TG.analytics =
 * window["gameAnalytics"];
 */
/*
 * Define Global functions
 */
TG.functions = {};

TG.functions.createEvent = function(eventName, params){
	"use strict";
	var e, d, b, c;
	d = params.detail || {};
	b = params.bubbles || false;
	c = params.cancelable || false;
	if(typeof CustomEvent === "function"){
		e = new CustomEvent(eventName, {
		    detail: d,
		    bubbles: b,
		    cancelable: c
		});
	}else{
		try{
			e = document.createEvent("CustomEvent");
			e.initCustomEvent(eventName, b, c, d);
		}catch(err){
			e = document.createEvent("Event");
			e.initEvent(eventName, b, c);
			e.data = d;
		}
	}
	return e;
};

TG.functions.timeToStr = function(value){
	"use strict";
	var sign = (value < 0)? "-" : "";
	var minutes = Math.floor(value / 60000);
	var seconds = Math.floor((value % 60000) / 1000);
	return sign + minutes + (seconds < 10? ":0" : ":") + seconds;
};

TG.functions.inherit = function(C, P){
	"use strict";
	var F = function(){
	};
	F.prototype = P.prototype;
	C.prototype = new F();
};

TG.functions.setupCanvas = function(id, depth, top, left, width, height){
	"use strict";
	var element, shouldAdd = false, canvas = document.getElementById(id);
	if(!canvas){
		shouldAdd = true;
		canvas = document.createElement("canvas");
		canvas.id = id;
	}
	canvas.style.zIndex = depth;
	canvas.style.top = top + "px";
	canvas.style.left = left + "px";
	canvas.width = width;
	canvas.height = height;
	if(shouldAdd){
		element = document.getElementById("viewport");
		if(element){
			element.appendChild(canvas);
		}else{
			document.body.appendChild(canvas);
		}
	}

	TG.canvasses.push(canvas);
	return canvas;
};

/*
 * Setup Canvasses & Layers
 */
(function(){
	"use strict";
	var setting, forceDOMUpdate, updateCanvases, updateViewport, startHeight, iterations, createCanvas, gameCanvasSettings, defaultCanvasSettings;

	// setup parameters for resizing/positioning script
	TG.lastWindowHeight = 0;
	TG.lastWindowWidth = 0;
	TG.scrollAndResizeTimerId = false;

	// use DOM update hack on stockbrowser for android 4 or higher
	TG.usesDOMUpdateHack = tbBrowser.browser.stockandroid && tbBrowser.browser.versionAsNumber && tbBrowser.browser.versionAsNumber >= 4;
	TG.DOMUpdating = false;

	//determine if full screen should be used (not on pc)
	TG.usesFullScreen = tbBrowser.features.tablet || tbBrowser.features.mobile;

	// determine orientation and settings
	TG.orientation = (buildTags.indexOf("landscape") >= 0)? "landscape" : "portrait";
	defaultCanvasSettings = (TG.orientation === "landscape")? TG.settings.tg.canvasses_landscape : TG.settings.tg.canvasses;
	gameCanvasSettings = (TG.orientation === "landscape")? TG.settings.game.canvasses_landscape : TG.settings.game.canvasses;
	if(gameCanvasSettings !== undefined){
		if(gameCanvasSettings.canvasGame !== undefined){
			for(setting in gameCanvasSettings.canvasGame){
				defaultCanvasSettings.canvasGame[setting] = gameCanvasSettings.canvasGame[setting];
			}
		}
		if(gameCanvasSettings.canvasGameUI !== undefined){
			for(setting in gameCanvasSettings.canvasGameUI){
				defaultCanvasSettings.canvasGameUI[setting] = gameCanvasSettings.canvasGameUI[setting];
			}
		}
	}

	forceDOMUpdate = function(){
		var canvasses, i, canvas, event, images;
		if(TG.usesDOMUpdateHack && !TG.DOMUpdating){
			TG.DOMUpdating = true;

			// find all canvases
			canvasses = document.getElementsByTagName("canvas");
			if(canvasses){
				for(i = 0; i < canvasses.length; i++){
					canvas = canvasses[i];
					if(!(canvas.getContext && canvas.getContext("2d"))){ // no
						// support
						TG.DOMUpdating = false;
						return;
					}
				}
			}

			// pause game
			event = document.createEvent("Event");
			event.params = [false];
			event.initEvent("gameSetPause", false, false);
			window.dispatchEvent(event);

			// copy canvas image data and clear canvasses
			images = [];
			for(i = 0; i < canvasses.length; i++){
				canvas = canvasses[i];
				var context = canvas.getContext("2d");
				try{
					var image = context.getImageData(0, 0, canvas.width, canvas.height);
					images.push(image);
				}catch(e){
					if(testMode){
						console.log("error in getting image data: " + e.name + ", " + e.message);
					}
				}
				context.clearRect(0, 0, canvas.width, canvas.height);
				canvas.style.visibility = "hidden";
			}

			// DOM refresh
			setTimeout(function(){
				for(var i = 0; i < canvasses.length; i++){
					var canvas = canvasses[i];
					canvas.style.visibility = "visible";
				}
			}, 1);

			// redraw image data
			setTimeout(function(){
				for(var i = 0; i < canvasses.length; i++){
					var context = canvasses[i].getContext("2d");
					try{
						context.putImageData(images[i], 0, 0);
					}catch(e){
						if(testMode){
							console.log("error in putting image data: " + e.name + ", " + e.message);
						}
					}
				}

				// activate engine
				var event = document.createEvent("Event");
				event.initEvent("gameResume", false, false);
				window.dispatchEvent(event);

				TG.DOMUpdating = false;
			}, 100);
		}
	};

	updateCanvases = function(){
		var windowSizes, settingSizes, minSize, preferredAspect, aspect, minAspect, _shortSide, _longSide, _scalingRatio, defaultOffsetTop, defaultOffsetLeft, _width, _height, divWidth, divHeight, defaultTopOffset, resizeCanvas;

		// determine aspect ratio
		if(TG.orientation === "landscape"){
			windowSizes = [window.innerWidth, window.innerHeight];
			settingSizes = [defaultCanvasSettings.defaultImageWidth, defaultCanvasSettings.defaultHeight];
			minSize = defaultCanvasSettings.minWidth;
		}else{
			windowSizes = [window.innerHeight, window.innerWidth];
			settingSizes = [defaultCanvasSettings.defaultHeight, defaultCanvasSettings.defaultWidth];
			minSize = defaultCanvasSettings.minHeight;
		}
		preferredAspect = settingSizes[0] / settingSizes[1];
		aspect = windowSizes[0] / windowSizes[1];
		minAspect = minSize / settingSizes[1];
		if(aspect < preferredAspect){
			if(aspect < minAspect){
				// resize short side to match long side
				_shortSide = Math.floor(windowSizes[0] / minAspect);
				_longSide = windowSizes[0];
			}else{
				// use total of short side and total of long side
				_shortSide = windowSizes[1];
				_longSide = windowSizes[0];
			}
		}else{
			// use total of short side, adapt long side
			_shortSide = windowSizes[1];
			_longSide = Math.floor(windowSizes[1] * preferredAspect);
		}
		_scalingRatio = _shortSide / settingSizes[1];

		// check if scaling should be applied (for example not for desktops)
		if(!TG.usesFullScreen && _scalingRatio > 1){
			// only centre screen not resize(up) except if forced
			_longSide = Math.min(windowSizes[0], settingSizes[0]);
			_shortSide = Math.min(windowSizes[1], settingSizes[1]);
			_scalingRatio = 1;
		}
		_width = (TG.orientation === "landscape")? _longSide : _shortSide;
		_height = (TG.orientation === "landscape")? _shortSide : _longSide;

		// determine position
		defaultOffsetTop = 0;
		defaultOffsetLeft = 0;
		if(window.innerHeight < Math.floor(defaultCanvasSettings.defaultHeight * _scalingRatio)){
			defaultOffsetTop = Math.max(defaultCanvasSettings.minTop, window.innerHeight - Math.floor(defaultCanvasSettings.defaultHeight * _scalingRatio));
		}
		if(window.innerWidth < Math.floor(defaultCanvasSettings.defaultWidth * _scalingRatio)){
			defaultOffsetLeft = Math.floor(Math.max((defaultCanvasSettings.defaultImageWidth - defaultCanvasSettings.defaultWidth), (window.innerWidth - Math
			        .floor(defaultCanvasSettings.defaultWidth * _scalingRatio))
			        / _scalingRatio));
			if(window.innerWidth < Math.floor(defaultCanvasSettings.defaultWidth * _scalingRatio) + defaultOffsetLeft * _scalingRatio){
				defaultOffsetLeft += Math.floor(Math.max((minSize - defaultCanvasSettings.defaultImageWidth) / 2,
				        ((window.innerWidth - (defaultCanvasSettings.defaultWidth * _scalingRatio + defaultOffsetLeft * _scalingRatio)) / 2) / _scalingRatio));
			}
		}

		// set global variables for reference outside script
		TG.backgroundOffsetTop = defaultCanvasSettings.defaultHeight - defaultCanvasSettings.defaultImageHeight;
		TG.backgroundOffsetLeft = defaultCanvasSettings.defaultWidth - defaultCanvasSettings.defaultImageWidth;
		TG.canvasTopOffset = defaultOffsetTop;
		TG.canvasLeftOffset = defaultOffsetLeft;
		TG.canvasCenterLeftOffset = Math.min(TG.backgroundOffsetLeft, TG.canvasOffsetLeft * -1);

		//only update gameUIOffsetY because it is the only canvas that moves relatively to the main canvas and only in a vertical direction
		//TG.gameUIOffsetX = (defaultCanvasSettings.canvasGameUI.left || defaultCanvasSettings.defaultLeft) - TG.canvasLeftOffset;
		TG.gameUIOffsetY = (defaultCanvasSettings.canvasGameUI.top || defaultCanvasSettings.defaultTop) - TG.canvasTopOffset;

		TG.visibleArea = {
		    top: defaultOffsetTop * -1,
		    left: defaultOffsetLeft * -1,
		    height: Math.min(defaultCanvasSettings.defaultHeight, Math.round(Math.min(_height, window.innerHeight) / _scalingRatio)),
		    width: Math.min(defaultCanvasSettings.defaultWidth, Math.round(Math.min(_width, window.innerWidth) / _scalingRatio))
		};
		
		TG.safeZone = (TG.orientation === "landscape")? {
			top: 0,
			left: Math.floor((defaultCanvasSettings.defaultImageWidth - defaultCanvasSettings.minWidth)/2),
			width: defaultCanvasSettings.minWidth,
			height: defaultCanvasSettings.minHeight
		} : {
			top: Math.abs(defaultCanvasSettings.minTop),
			left: defaultCanvasSettings.defaultLeft,
			width: defaultCanvasSettings.defaultWidth,
			height: defaultCanvasSettings.minHeight
		};
		
		// resize div
		divHeight = Math.min(window.innerHeight, _height);
		divWidth = Math.min(window.innerWidth, _width);

		if((TG.orientation === "landscape")){
			document.getElementById("viewport").setAttribute(
			        "style",
			        "position:fixed; overflow:hidden; z-index: 0; width:" + divWidth + "px; left:50%; margin-left:" + (-divWidth / 2) + "px; height: "
			                + divHeight + "px; top:50%; margin-top:" + (-divHeight / 2) + "px");
		}else{
			document.getElementById("viewport").setAttribute(
			        "style",
			        "position:absolute; overflow:hidden; z-index: 0; width:" + divWidth + "px; left:50%; margin-left:" + (-divWidth / 2) + "px; height: "
			                + divHeight + "px");

		}
		// resize canvasses
		resizeCanvas = function(canvas, settings, addTopOffset, addLeftOffset){
			var t, l, w, h;
			t = (settings.top !== undefined)? settings.top : defaultCanvasSettings.defaultTop;
			l = (settings.left !== undefined)? settings.left : defaultCanvasSettings.defaultLeft;
			w = (settings.width !== undefined)? settings.width : defaultCanvasSettings.defaultWidth;
			h = (settings.height !== undefined)? settings.height : defaultCanvasSettings.defaultHeight;
			canvas.cssTop = Math.floor(_scalingRatio * t);
			canvas.cssLeft = Math.floor(_scalingRatio * l);
			canvas.cssWidth = Math.floor(_scalingRatio * w);
			canvas.cssHeight = Math.floor(_scalingRatio * h);
			if(addTopOffset !== false){
				t += defaultOffsetTop;
			}
			if(addLeftOffset !== false){
				l += defaultOffsetLeft;
			}

			canvas.setAttribute("style", "position:absolute; left:" + Math.floor(_scalingRatio * l) + "px; top:" + Math.floor(_scalingRatio * t) + "px; width:"
			        + Math.floor(_scalingRatio * w) + "px; height:" + Math.floor(_scalingRatio * h) + "px; z-index: " + settings.depth);
		};

		resizeCanvas(TG.backgroundCanvas, defaultCanvasSettings.canvasBackground);
		resizeCanvas(TG.gameCanvas, defaultCanvasSettings.canvasGame);
		resizeCanvas(TG.gameUICanvas, defaultCanvasSettings.canvasGameUI, false, true);
		resizeCanvas(TG.mainCanvas, defaultCanvasSettings.canvasMain);

		forceDOMUpdate();
		//add additional DOM updates because sometimes the first update seems to be too early
		//and the loading bar will remain visible on top of the game
		setTimeout(forceDOMUpdate, 5000);
		setTimeout(forceDOMUpdate, 10000);
		setTimeout(forceDOMUpdate, 20000);
		tbGame.addSpecial(TG.resizeEventId);
	};

	updateViewport = function(){
		if(TG.lastWindowHeight === window.innerHeight && TG.lastWindowWidth === window.innerWidth){
			return false;
		}

		/*
		// if we are running in webapp mode (iOS), there"s nothing to scroll
		// away
		if(navigator["standalone"] || !TG.deviceNeedsResizing){
			document.documentElement["style"]["min-height"] = "100%";
			document.getElementById("viewport")["style"]["height"] = window.innerHeight + "px";
			TG.lastWindowWidth = window.innerWidth;
			TG.lastWindowHeight = window.innerHeight;
			updateCanvases();
			return false;
		}*/

		if(TG.scrollAndResizeTimerId){
			return false;
		}

		// maximise the document element"s height to be able to scroll away the
		// url bar
		document.documentElement["style"]["min-height"] = 5000;

		startHeight = window.innerHeight;
		iterations = 40;
		TG.scrollAndResizeTimerId = window.setInterval(function(){
			// set viewport and document size
			document.documentElement["style"]["minHeight"] = "";
			document.documentElement["style"]["min-height"] = "";

			// Android needs to scroll by at least 1px
			window.scrollTo(0, tbBrowser.browser.stockandroid? 1 : 0);
			iterations--;
			if((tbBrowser.browser.stockandroid? false : (window.innerHeight > startHeight)) || iterations < 0){
				TG.lastWindowWidth = window.innerWidth;
				TG.lastWindowHeight = window.innerHeight;
				clearInterval(TG.scrollAndResizeTimerId);
				TG.scrollAndResizeTimerId = false;

				// set viewport and document size
				document.documentElement["style"]["min-height"] = window.innerHeight + "px";
				document.getElementById("viewport")["style"]["height"] = window.innerHeight + "px";

				updateCanvases();
			}
		}, 10);
	};
	
	// store game and gameUI offsets
	TG.gameOffsetX = defaultCanvasSettings.canvasGame.left || defaultCanvasSettings.defaultLeft;
	TG.gameOffsetY = defaultCanvasSettings.canvasGame.top || defaultCanvasSettings.defaultTop;
	TG.gameWidth = defaultCanvasSettings.canvasGame.width || defaultCanvasSettings.defaultWidth;
	TG.gameHeight = defaultCanvasSettings.canvasGame.height || defaultCanvasSettings.defaultHeight;
	TG.gameUIOffsetX = defaultCanvasSettings.canvasGameUI.left || defaultCanvasSettings.defaultLeft;
	TG.gameUIOffsetY = defaultCanvasSettings.canvasGameUI.top || defaultCanvasSettings.defaultTop;
	TG.gameUIWidth = defaultCanvasSettings.canvasGameUI.width || defaultCanvasSettings.defaultWidth;
	TG.gameUIHeight = defaultCanvasSettings.canvasGameUI.height || defaultCanvasSettings.defaultHeight;
	TG.mainOffsetX = defaultCanvasSettings.canvasMain.left || defaultCanvasSettings.defaultLeft;
	TG.mainOffsetY = defaultCanvasSettings.canvasMain.top || defaultCanvasSettings.defaultTop;
	TG.mainWidth = defaultCanvasSettings.canvasMain.width || defaultCanvasSettings.defaultWidth;
	TG.mainHeight = defaultCanvasSettings.canvasMain.height || defaultCanvasSettings.defaultHeight;
	
	// create canvasses
	createCanvas = function(settings){
		var t = (settings.top !== undefined)? settings.top : defaultCanvasSettings.defaultTop, l = (settings.left !== undefined)? settings.left
		        : defaultCanvasSettings.defaultLeft, w = (settings.width !== undefined)? settings.width : defaultCanvasSettings.defaultWidth, h = (settings.height !== undefined)? settings.height
		        : defaultCanvasSettings.defaultHeight;
		return TG.functions.setupCanvas(settings.id, settings.depth, t, l, w, h);
	};
	TG.canvasses = [];
	TG.backgroundCanvas = createCanvas(defaultCanvasSettings.canvasBackground);
	TG.gameCanvas = createCanvas(defaultCanvasSettings.canvasGame);
	TG.gameUICanvas = createCanvas(defaultCanvasSettings.canvasGameUI);
	TG.mainCanvas = createCanvas(defaultCanvasSettings.canvasMain);

	updateCanvases();

	// add event listeners + timer to react to scrolling, size and orientation
	// changes
	document.body.addEventListener("touchmove", function(event){
		event.preventDefault();
	}, true);
	document.body.addEventListener("touchstart", updateViewport, true);
	window.addEventListener("resize", updateViewport, true);// used for
	// orientation &&
	// resize
	window.setInterval(updateViewport, 200);

	TG.layerCanvasMap = {};
	TG.layerCanvasMap[TG.gameBackgroundLayer] = TG.backgroundCanvas;
	TG.layerCanvasMap[TG.gameLayer] = TG.gameCanvas;
	TG.layerCanvasMap[TG.gameUILayer] = TG.gameUICanvas;
	TG.layerCanvasMap[TG.gameEffectsLayer] = TG.mainCanvas;
	TG.layerCanvasMap[TG.frameworkBackgroundLayer] = TG.backgroundCanvas;
	TG.layerCanvasMap[TG.frameworkUILayer] = TG.mainCanvas;
	TG.layerCanvasMap[TG.frameworkEffectsLayer] = TG.mainCanvas;
}());

TG.functions.addBanner = function(show, clickable){
	"use strict";
	var image, listenerUp, div = document.getElementById("viewport");
	if(div){
		image = document.createElement("img");
		image.className = "banner";
		image.src = tbLoader.getDataLocation() + "/media/banner_game_640x100.png";
		image.style.position = "absolute";
		image.style.bottom = "0px";
		image.style.width = "100%";
		image.style.zIndex = 300;
		div.appendChild(image);
		TG.bannerClickable = true;
		TG.bannerVisible = true;
		listenerUp = function(e){
			if(TG.bannerClickable && TG.bannerVisible){
				TG.hooks.openUrl("http://www.tinglygames.com/html5-games/");
				e.preventDefault();
				if(e.stopPropagation){
					e.stopPropagation();
				}else{
					e.cancelBubble = true;
				}
			}
		};
		image.addEventListener("mouseup", listenerUp, true);
		image.addEventListener("touchend", listenerUp, true);
		image.addEventListener("mousedown", function(e){
			if(TG.bannerVisible){
				e.preventDefault();
				if(e.stopPropagation){
					e.stopPropagation();
				}else{
					e.cancelBubble = true;
				}
			}
		}, true);
		image.addEventListener("touchstart", function(e){
			if(TG.bannerVisible){
				e.preventDefault();
				if(e.stopPropagation){
					e.stopPropagation();
				}else{
					e.cancelBubble = true;
				}
			}
		}, true);
		if(!show){
			image.style.display = "none";
			TG.bannerVisible = false;
			return true;
		}
	}
};

TG.functions.showBanner = function(){
	"use strict";
	var i, images = document.getElementsByClassName("banner"); // images =
	// document.getElementsByClassName("myAd");
	if(images){
		for(i = 0; i < images.length; i++){
			images[i].style.display = "inline";
		}
		TG.bannerVisible = true;
	}
};

TG.functions.hideBanner = function(){
	"use strict";
	var i, images = document.getElementsByClassName("banner"); // images =
	// document.getElementsByClassName("myAd");
	if(images){
		for(i = 0; i < images.length; i++){
			images[i].style.display = "none";
		}
		TG.bannerVisible = false;
	}
};

TG.functions.getCanvasMainOffset = function(canvas){
	"use strict";
	if(canvas === TG.gameCanvas){
		return {
		    x: TG.gameOffsetX,
		    y: TG.gameOffsetY
		};
	}else if(canvas === TG.gameUICanvas){
		return {
		    x: TG.gameUIOffsetX,
		    y: TG.gameUIOffsetY
		};
	}else{
		return {
		    x: TG.mainOffsetX,
		    y: TG.mainOffsetY
		};
	}
};

/**
 * Returns canvas to which the specified layer is assigned
 *
 * @param {Number}
 *            layer identifier
 * @return {Object}
 */
TG.functions.getCanvas = function(layer){
	"use strict";
	return TG.layerCanvasMap[layer];
};

/**
 * Sets active canvas (tbGraphics.canvas) to the canvas to which the specified
 * layer is assigned
 *
 * @param {Number}
 *            layer
 * @returns {Boolean} true if canvas is set, false if associated canvas could
 *          not be found
 */
TG.functions.setCanvas = function(layer){
	"use strict";
	if(TG.layerCanvasMap[layer]){
		if(tbGraphics.canvas !== TG.layerCanvasMap[layer]){
			tbGraphics.setCanvas(TG.layerCanvasMap[layer]);
		}
		return true;
	}
	return false;
};

/**
 * Sets the layer and canvas of the specified token
 *
 * @param {Object}
 *            token for which to set layer and canvas
 * @param {Number}
 *            layer identifier
 * @return {Boolean} true if canvas is set, false if associated canvas could not
 *         be found
 */
TG.functions.setLayerAndCanvas = function(token, layer){
	"use strict";
	if(TG.layerCanvasMap[layer]){
		tbGame.setTokenLayer(token, layer);
		token.canvas = TG.layerCanvasMap[layer];
		return true;
	}
	return false;
};

TG.functions.computeImgCoordinatesFromSettings = function(settingsObj, canvasDimension, imageDimension, origin){
	"use strict";
	var offset;
	canvasDimension = canvasDimension || 0;
	imageDimension = imageDimension || 0;
	origin = origin || 0;

	if(typeof settingsObj === "number"){
		return settingsObj;
	}
	if(typeof settingsObj === "object"){
		offset = settingsObj.offset || 0;
		switch(settingsObj.align){
			case "center":
				return Math.round(canvasDimension / 2 - (imageDimension / 2 - origin)) + offset;
			case "left":
			case "top":
				return offset - origin;
			case "right":
			case "bottom":
				return canvasDimension - imageDimension - offset - origin;
			default:
				return offset + 0;
		}
	}
	return 0;
};

TG.functions.computeTextCoordinatesFromSettings = function(settingsObj, canvasDimension, textDimension, textAlignment){
	"use strict";
	var offset;
	canvasDimension = canvasDimension || 0;
	textDimension = textDimension || 0;

	if(typeof settingsObj === "number"){
		return settingsObj;
	}
	if(typeof settingsObj === "object"){
		offset = settingsObj.offset || 0;
		switch(settingsObj.align){
			case "center":
				if(textAlignment === "center" || textAlignment === "middle"){
					return Math.round(canvasDimension / 2) + offset;
				}else if(textAlignment === "left" || textAlignment === "top"){
					return Math.round(canvasDimension / 2 - textDimension / 2) + offset;
				}else{
					return Math.round(canvasDimension / 2 + textDimension / 2) - offset;
				}
			break;
			case "left":
				// no break
			case "top":
				if(textAlignment === "center" || textAlignment === "middle"){
					return Math.round(textDimension / 2) + offset;
				}else if(textAlignment === "left" || textAlignment === "top"){
					return offset;
				}else{
					return textDimension + offset;
				}
			break;
			case "right":
				// no break
			case "bottom":
				if(textAlignment === "center" || textAlignment === "middle"){
					return canvasDimension - Math.round(textDimension / 2) - offset;
				}else if(textAlignment === "left" || textAlignment === "top"){
					return canvasDimension - Math.round(textDimension / 2) - offset;
				}else{
					return canvasDimension - offset;
				}
			break;
			default:
				return offset + 0;
		}
	}
	return 0;
};

TG.functions.computeTextSurfaceCoordinatesFromSettings = function(offset, canvasDimension, textDimension, textAlignment){
	"use strict";
	switch(textAlignment){
		case "center":
		case "middle":
			return Math.round(canvasDimension / 2) + offset;
		case "left":
		case "top":
			return offset;
		case "right":
		case "bottom":
			return textDimension + offset;
	}
	return 0;
};
//******************************************************
//*****    Script Resource: Provider_GameAnalytics
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

TG.analyticsProvider = TG.analyticsProvider || {};

TG.analyticsProvider.showDebugDataAnalytics = false;


TG.analyticsProvider.initialise = function(args){
    "use strict";
    if(args instanceof Array){
        this.gameKey = args[0];
        this.secretKey = args[1];
        this.baseUrl = "http://api.gameanalytics.com/1/"+this.gameKey;
        this.initialised = true;
    }
};

TG.analyticsProvider._sendEvent = function(category, message){
    "use strict";
    var request,
        msg = JSON.stringify(message),
        md5Msg = TG_MD5.createMD5Hash(msg + this.secretKey),
        url = this.baseUrl+"/"+category;

    try{ //might fail in IE9
        //create xmlhttp request
        request=new XMLHttpRequest();
        request.open("POST", url, true);
        if(this.showDebugDataAnalytics){
            request.onreadystatechange = function(){
                if(request.readyState === 4){
                    if(request.status === 200){
                        console.log("GOOD! statusText: " + request.statusText);
                        console.log(message);
                    }
                    else{
                        console.log("ERROR ajax call error: " + request.statusText + ", url: " + url);
                    }
                }
            };
        }
        request.setRequestHeader("Content-Type", "text/plain");
        request.setRequestHeader("Authorization", md5Msg);
        request.send(msg);
    }catch(e){}
};

TG.analyticsProvider._createJSONObject = function(){
    "use strict";
    return {
        "user_id": this.userId,
        "session_id": this.sessionId,
        "build": this.build
    };
};

TG.analyticsProvider.startSession = function(sessionId, gameId, themeId, publisherId, version, userInfo, deviceInfo){
    "use strict";
    var userData;
    this.sessionId = sessionId;
    if(userInfo && typeof userInfo === "object"){
        this.userId = userInfo.userId;
    }
    this.build = version;
    this.active = true;

    //send user data
    if(this.initialised){
        userData = this._createJSONObject();
        userData["device"] = deviceInfo.device;
        userData["platform"] = deviceInfo.os;
        userData["os_major"] = deviceInfo.os_major;
        userData["os_minor"] = deviceInfo.os_minor;
        userData["install_publisher"] = publisherId;
        userData["install_site"] = (window["location"] !== window["parent"]["location"]) ? document["referrer"]: document["location"].href;
        this._sendEvent("user", userData);
    }
    this.reportEvent("start", "session");
};

TG.analyticsProvider.endSession = function(){
    "use strict";
    this.active = false;
    this.reportEvent("end", "session");
};

TG.analyticsProvider.reportEvent = function(eventName, categories, value){
    "use strict";
    //check if tracking should be done
    if(!this.active || !this.initialised){
        return;
    }

    var data,
        eventId = "";
    if(categories){
        if(categories instanceof Array){
            eventId = categories.toString().replace(",",":");
        }else{
            eventId += categories;
        }
    }
    //create JSON object
    data = this._createJSONObject();
    data["event_id"] = eventId + ":" + eventName;
    data["value"] = value;
    //send event
    this._sendEvent("design", data);
};

TG.analyticsProvider.reportTimedEvent = function(eventName, categories, duration){
    "use strict";
    this.reportEvent(eventName, categories, duration);
};

TG.analyticsProvider.reportError = function(errorMessage, errorSeverity){
    "use strict";
    var data = this._createJSONObject();
    data["message"] = errorMessage;
    data["severity"] = errorSeverity;
    this._sendEvent("error", data);
};


//******************************************************
//*****    Token Resource: TG_Analytics
//******************************************************

// ***************************************
// Definition of game token TG_Analytics
// ***************************************

// The constructor for the TG_Analytics game token.
var TG_Analytics = function() {
	"use strict";
	// Properties used by the engine
	this.depth = 0;
	this.layer = 0;
	this.visible = false;
	this.active = true;
	// Your own properties
	this.settings = TG.settings.tg.analytics;
	this.poolSize = this.settings.timerPoolSize;
	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, "system");
};

TG_Analytics.prototype._getSessionId = function(){
    "use strict";
    return this._generateUniqueId();
};

TG_Analytics.prototype._getUserId = function(){
    "use strict";
    var userId = TG.controller._getGameData("userId", "");
    if(userId === ""){
        userId = this._generateUniqueId();
        TG.controller._updateGameData("userId", userId);
    }
    return userId;
};

TG_Analytics.prototype._generateUniqueId = function(){
    "use strict";
    var guid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
    return guid.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0, v = c === "x" ? r : (r&0x3|0x8);
        return v.toString(16);
    });
};

TG_Analytics.prototype.start = function(args){
    "use strict";
    TG.analyticsProvider.initialise(args);
    TG.analyticsProvider.startSession(TG.analytics._getSessionId(), TG.settings.game.framework.gameId, TG.settings.theme.id, TG.config.publisherId, TG.controller.getShortVersion(), {userId: TG.analytics._getUserId()}, TG.deviceData);
};

TG_Analytics.prototype.reportEvent = function(eventName, parents, value){
    "use strict";
    TG.analyticsProvider.reportEvent(eventName, parents, value);
};

TG_Analytics.prototype.reportTimedEventStart = function(eventName, parents, tag, reportStart){
    "use strict";
    var i;
    for(i=0; i<this.timers.length; i++){
        if(!this.timers[i].active){
            this.timers[i].timer = 0;
            this.timers[i].paused = 0;
            this.timers[i].active = true;
            this.timers[i].eventName = eventName;
            this.timers[i].parents = parents;
            this.timers[i].tag = tag;
            break;
        }
    }
    if(i === this.timers.length){
        this.timers.push({active: true, timer: 0, paused: 0, eventName: eventName, parents: parents, tag:tag});
    }

    if(reportStart){
        this.reportEvent(eventName, parents);
    }
};

TG_Analytics.prototype.reportTimedEventStop = function(tag, eventName, parents){
    "use strict";
    var i, timer;
    for(i=0; i<this.timers.length; i++){
        if(this.timers[i] !== undefined && this.timers[i].tag === tag){
            timer = this.timers[i];
            this.reportEvent((eventName !== undefined)? eventName : timer.eventName, (parents !== undefined)? parents: timer.parents, timer.timer);
            timer.active = false;
        }
    }
};

TG_Analytics.prototype.pauseTimedEvent = function(tag){
    "use strict";
    var i;
    for(i=0; i<this.timers.length; i++){
        if(this.timers[i] !== undefined && this.timers[i].tag === tag){
            this.timers[i].paused += 1;
        }
    }
};

TG_Analytics.prototype.resumeTimedEvent = function(tag){
    "use strict";
    var i;
    for(i=0; i<this.timers.length; i++){
        if(this.timers[i] !== undefined && this.timers[i].tag === tag){
            this.timers[i].paused -= 1;
            this.timers[i].paused = Math.max(this.timers[i].paused, 0);
        }
    }
};

TG_Analytics.prototype.pauseAllTimedEvents = function(){
    "use strict";
    var i;
    for(i=0; i<this.timers.length; i++){
        if(this.timers[i].active){
            this.timers[i].paused += 1;
        }
    }
};

TG_Analytics.prototype.resumeAllTimedEvents = function(){
    "use strict";
    var i;
    for(i=0; i<this.timers.length; i++){
        if(this.timers[i].active){
            this.timers[i].paused -= 1;
            this.timers[i].paused = Math.max(this.timers[i].paused, 0);
        }
    }
};

TG_Analytics.prototype.reportError = function(message, severity){
    "use strict";
    TG.analyticsProvider.reportError(message, severity);
};

// handleAdd is called when the token is (re-) added to the game.
TG_Analytics.prototype.handleAdd = function() {
	"use strict";
	this.timers = [];
};

// handleBeginStep is called each step before processing other events.
TG_Analytics.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	var i, toRemove, lastActiveTimerIdx = 0;
	for(i=0; i<this.timers.length; i++){
	    if(this.timers[i].active){
	        if(this.timers[i].paused === 0){
	            this.timers[i].timer += timePassed;
	        }
	        lastActiveTimerIdx = i;
	    }
	}
	if(lastActiveTimerIdx < this.timers.length - 1){
	    toRemove = this.timers.length - Math.max(this.poolSize, lastActiveTimerIdx + 1);
	    if(toRemove > 0){
	        this.timers.splice(this.timers.length - toRemove, toRemove);
	    }
	}
};

//******************************************************
//*****    Script Resource: TG_Persistence
//******************************************************

/* global
	tbText
 */

/** @constructor */
var TG_Persistence = function(localOnly, host, service) {
	"use strict";
    this.localOnly = localOnly || false;
    this.host = host || "http://localhost:8080";
    this.service = service || this.host+"/services/storage/gamestate";
    this.supportLocalStorage =  typeof window["localStorage"] !== "undefined";
    this.useParentWindowCommunication = false;

    this.initialized = false;
	var _this = this;

    if ((window.parent !== window && (tbBrowser.browser.safari || tbBrowser.os.ios))) {

    	window.addEventListener("message", function(event) {
    		_this.handleMessage(event);
    	}, false);

    	this.getItemCallBack = null;

    	window.parent.postMessage({"command": "init"}, "*");
    }

    this.onInitialized = [];

    window.setTimeout(function() {
    	_this.initialized = true;

    	for (var i = 0; i < _this.onInitialized.length; ++i) {
    		_this.onInitialized[i]();
    	}

    	_this.onInitialized = [];
    }, 2000);

};

TG_Persistence.prototype.handleMessage = function(event) {
	"use strict";

	var data = event.data;
	var command = data["command"];

	if (command === "init") {
	    this.useParentWindowCommunication = data["result"] === "ok";
	}
	else if (command === "getItem") {
		if (this.getItemCallBack) {
			if (data["result"] === "ok") {
				this.getItemCallBack(data["value"]);
			}
			else {
				this.getItemCallBack(data["defaultValue"]);
			}
		}
	}
	else if (command === "setItem") {
	}

};

TG_Persistence.prototype.createKey = function(){
	"use strict";
	if(typeof TG.config.storageKey === "string" && TG.config.storageKey !== ""){
		return TG.config.storageKey;
	}
	if(TG.settings.game.framework !== undefined && TG.settings.game.framework.gameId !== undefined){
		return TG.settings.game.framework.gameId;
	}
	return "0";
};

TG_Persistence.prototype.loadData = function(defaultValue, callback){
	"use strict";
	if(typeof callback === "function"){

		if (!this.initialized) {
			var _this = this;
			this.onInitialized.push(function() {
				_this.loadState(defaultValue, callback);
			});
		}
		else {
			this.loadState(defaultValue, callback);
		}
	}
};

TG_Persistence.prototype.saveData = function(data){
    "use strict";
    if (!this.initialized) {
		var _this = this;
		this.onInitialized.push(function() {
			_this.saveState(data);
		});
	}
	else {
		this.saveState(data);
	}
};


TG_Persistence.prototype.saveState = function(state) {
	"use strict";
    var stateWrapper = null, gameId = this.createKey();

    try{
        stateWrapper = JSON.stringify({
            "lastChanged": new Date(),
            "gameState": JSON.stringify(state)
        });
    }catch(e){}

    if (this.useParentWindowCommunication) {
    	window.parent.postMessage({"command": "setItem", "key": "TG_" + gameId, "value": stateWrapper}, "*");
    }
    else {
        //save locally
        if(this.supportLocalStorage){
            try {
                window["localStorage"].setItem(gameId, stateWrapper);
            }catch(e){}
        }
        //save on server
        if(!this.localOnly){
            var remoteStorageText = new tbText("gameState_" + gameId);
            remoteStorageText.stringifyJSON(state);
            remoteStorageText.post(this.service+"/my_ip/"+gameId);
        }
    }
};

TG_Persistence.prototype.loadState = function(defaultValue, callback) {
	"use strict";

    var localStateWrapper = null, remoteStateWrapper = null,
        gameId = this.createKey();


    if (this.useParentWindowCommunication) {
    	this.getItemCallBack = function(data) {
    		var value;
    		try {
        		localStateWrapper = JSON.parse(data);
        		value = JSON.parse(localStateWrapper["gameState"]);
    		} catch (e) {
    			value = defaultValue;
    		}
            callback(value);
    	};
    	window.parent.postMessage({"command": "getItem", "key": "TG_" + gameId}, "*");
    	return;
    }
    else {
        //get data from local storage
        if(this.supportLocalStorage) {
            try {
                localStateWrapper = window["localStorage"].getItem(gameId);
                if (localStateWrapper) {
                    localStateWrapper = JSON.parse(localStateWrapper);
                }
            }catch(e){
            	callback(defaultValue);
                return;
            }
        }


        //get data from server
        if(!this.localOnly){
            var remoteStorageText = new tbText("gameState_" + gameId);
            remoteStateWrapper = null;
            if (remoteStorageText.getSynchronous(TG_Persistence.remoteStorageService+"/my_ip/"+gameId)) {
                remoteStateWrapper = remoteStorageText.parseJSON();
            }
        }

        try{
            //compare timestamps
            if(localStateWrapper){
                if(remoteStateWrapper && Date.parse(remoteStateWrapper["lastChanged"]) > Date.parse(localStateWrapper["lastChanged"]) ){
                	callback(JSON.parse(remoteStateWrapper["gameState"]));
                	return;
                }
                callback(JSON.parse(localStateWrapper["gameState"]));
                return;
            }else if(remoteStateWrapper){
            	callback(JSON.parse(remoteStateWrapper["gameState"]));
                return;
            }
        }catch(e){
        	callback(defaultValue);
            return;
        }
    }

    callback(defaultValue);
    return;
};
//******************************************************
//*****    Token Resource: TG_LoadingScreen
//******************************************************

// ***************************************
// Definition of game token TG_LoadingScreen
// ***************************************

// The constructor for the TG_LoadingScreen game token.
var TG_LoadingScreen = function(callbackEnd, callbackProgress, visible){
	"use strict";
	//Report what URL we are running on. This is what we site-lock against, so we report it a reasonable distance away from where
	//the sitelocking code actually happens.
	if(console && console.log) {
		var site = (window.location.origin)? window.location.origin : window.location.protocol + "//" + window.location.hostname;
		console.log("Hosted on: " + site);
	}	
	// Properties used by the engine
	this.depth = 1000;
	this.visible = (visible !== false);
	this.forceDraw = this.visible;
	this.active = true;
	//use background canvas to avoid android back buffer bug
	TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
	var setting;
	this.settings = TG.settings.tg.loadingScreen;
	if(TG.orientation === "landscape" && TG.settings.tg.loadingScreen_landscape){
		for(setting in TG.settings.tg.loadingScreen_landscape){
			this.settings[setting] = TG.settings.tg.loadingScreen_landscape[setting];
		}
	}
	//apply theme specific setting overwrites
	for(setting in TG.settings.theme.loadingScreen){
		this.settings[setting] = TG.settings.theme.loadingScreen[setting];
	}
	//apply customer specific setting overwrites
	if(TG.config.loadingScreen){
		for(setting in TG.config.loadingScreen){
			this.settings[setting] = TG.config.loadingScreen[setting];
		}
	}
	this.callback = callbackEnd;
	this.callbackProgress = callbackProgress;
	this.done = false;
	
	//background fade in
	this.backgroundAlpha = 0;
	this.backgroundFadeInRunning = false;
	this.backgroundFadeInTimer = 0;
	this.backgroundFadeInDuration = this.settings.backgroundFadeDuration;

	//if set to true the background will be drawn each step on the main canvas instead of once on the background canvas
	//true is the default value to avoid artifacts caused by the canvasses resizing a lot at the start of a game on mobile devices
	this.redrawBackground = true;
	
	this.loadingbarFillMultiplier = 0.6 / Math.log(this.settings.maxAudioLoadDuration + 1);
	this.waitAfterReadyTimer = (TG.config.loadingScreenMinimalVisibilityDuration !== undefined)? TG.config.loadingScreenMinimalVisibilityDuration
	        : this.settings.minimalVisibilityDuration;
	this.maxLoadDuration = this.waitAfterReadyTimer + this.settings.maxWaitDuration;
	
	// Add it to the game engine
	tbGame.addToken(this);
};

/*
 * Replaces loading bar and throbber with error message
 */
TG_LoadingScreen.prototype.showError = function(errorKey){
	"use strict";
	var font, text;
	TG.functions.setCanvas(TG.frameworkBackgroundLayer);
	tbGraphics.drawRectangle(0, 0, this.canvas.width, this.canvas.height, "white", false);
	font = f_default.clone();
	if((TG.config.loadingScreen && TG.config.loadingScreen.textFont) || this.settings.textFont){
		font.setProperties((TG.config.loadingScreen && TG.config.loadingScreen.textFont)? TG.config.loadingScreen.textFont : this.settings.textFont);
	}
	text = TG.dictionary.getText(errorKey, "<" + errorKey.toUpperCase() + ">");
	font.drawSimple(text, this.canvas.width / 2, this.canvas.height / 2, this.settings.textMaxWidth);

	this.error = true;
	this.forceDraw = false;
	this.visible = false;
	this.canvas.drawTokens = true;
};

/*
 * Updates the position of all docked elements
 */
TG_LoadingScreen.prototype.positionDockedElements = function(){
	"use strict";
	//the logo-surface should always be as close to the bottom of the screen as possible, but in portrait mode
	//the bottom of the screen and the bottom of the canvas are often not the same, therefore the positions of the
	//logo-surface has to be adjusted to the visible area
	if(this.logosSurface){
		this.logosSurfaceX = TG.functions.computeImgCoordinatesFromSettings(this.settings.logosSurfaceX, TG.visibleArea.width, this.logosSurface.width) + TG.visibleArea.left;
		this.logosSurfaceY = TG.functions.computeImgCoordinatesFromSettings(this.settings.logosSurfaceY, TG.visibleArea.height, this.logosSurface.height) + TG.visibleArea.top;
	}
};

/*
 * Creates and draws the surface containing all logos
 */
TG_LoadingScreen.prototype.createLogosSurface = function(){
	"use strict";
	var x, y, i, scale, l, maxLogoWidth;
	if(typeof TG.hooks.getStartScreenLogos === "function"){
		maxLogoWidth = this.settings.logosSurfaceMaxWidth;
		this.logos = TG.hooks.getStartScreenLogos();
		if(this.logos && this.logos.length > 0){
			if(this.logosSurface){
				this.logosSurface.clear();
			}else{
				this.logosSurface = new tbSurface(this.settings.logosSurfaceMaxWidth, this.settings.logosSurfaceMaxHeight);
			}
			this.logosSurface.setTarget();
			maxLogoWidth /= this.logos.length;
			for(i=0; i<this.logos.length; i++){
				try{
					l = this.logos[i].image;
					scale = Math.min(1, Math.min((maxLogoWidth - 20) / l.width, this.settings.logosSurfaceMaxHeight / l.height));
					if(this.settings.logosAlign === "center"){
						x = maxLogoWidth * i + Math.round((maxLogoWidth - l.width * scale) / 2);
					}else{
						x = maxLogoWidth * i + Math.round((maxLogoWidth - l.width * scale)) - 10;
					}
					y = this.logosSurface.height - l.height * scale;
					if(l instanceof tbImage){
						l.drawExt(0, x, y, scale, scale, 0, 1);
					}else{
						tbGraphics.context.drawImage(l, x, y, l.width * scale, l.height * scale);
					}
				}catch(e){
					if(testMode){
						console.log("error in drawing logo: " + e);
					}
				}
			}
			this.logosSurface.resetTarget();
			this.logosSurfaceAlpha = 0;
			this.logosSurfaceAnimating = true;
			this.logosSurfaceAlphaTimer = 0;
			this.logoSurfaceMask = tbMaskRectangle(0, 0, this.logosSurface.width, this.logosSurface.height);
			this.positionDockedElements();
		}
	}
};

/*
 * Draws the background of the Loading Screen, scaling it up when necessary
 */
TG_LoadingScreen.prototype.drawBackground = function(){
	"use strict";
	var top, left, scale, font, text, fillwidth, width, height, i, logo, img, x, y;
	// set canvas
	if(!this.redrawBackground){
		TG.functions.setCanvas(TG.frameworkBackgroundLayer);
	}else{
		tbGraphics.clear();
	}
	// draw background
	if(this.settings.backgroundImage){
		img = this.settings.backgroundImage;
		top = Math.abs(TG.canvasTopOffset);
		
		//in portrait mode the background might have to be scaled up a bit to accomodate
		//taller screens. Check the canvasTopOffset to see if this is the case. If the canvasTopOffset is
		//-80 the canvas (which is bigger than the background) is partially out of view and the background scale is 1,
		//if the offset becomes bigger (less negative) more of the canvas will be in view and the background should become bigger 
		if(img.number > 1){
			scale = (tbGraphics.canvas.height - top) / img.combinedHeight;
			left = -(img.combinedWidth * scale - tbGraphics.canvas.width) / 2;
			img.drawCombinedAlpha(left, top, this.backgroundAlpha);
		}else{
			scale = (this.canvas.height - top) / img.height;
			left = -Math.floor((img.width * scale - this.canvas.width) / 2);
			if(img instanceof tbImage){
				img.drawExt(0, left, top, scale, scale, 0, this.backgroundAlpha);
			}else if(img instanceof tbSurface){
				img.drawExt(left, top, scale, scale, 0, this.backgroundAlpha);
			}
		}
	}
	//draw loading bar background
	width = this.settings.loadingBarBackgroundLeftWidth + this.settings.loadingBarBackgroundRightWidth + this.settings.loadingBarInnerWidth;
	height = s_loadingbar_background.height;
	fillwidth = s_loadingbar_background.width - (this.settings.loadingBarBackgroundLeftWidth + this.settings.loadingBarBackgroundRightWidth);
	this.loadingBarX = TG.functions.computeImgCoordinatesFromSettings(this.settings.loadingBarX, tbGraphics.canvas.width, width);
	this.loadingBarY = TG.functions.computeImgCoordinatesFromSettings(this.settings.loadingBarY, tbGraphics.canvas.height, height);
	s_loadingbar_background.drawPart(0, 0, 0, this.settings.loadingBarBackgroundLeftWidth, height, this.loadingBarX, this.loadingBarY, 1);
	s_loadingbar_background.drawPartTiled(0, this.settings.loadingBarBackgroundLeftWidth, 0, fillwidth, height, this.loadingBarX
	        + this.settings.loadingBarBackgroundLeftWidth, this.loadingBarY, this.settings.loadingBarInnerWidth, height, 1);
	s_loadingbar_background.drawPart(0, this.settings.loadingBarBackgroundLeftWidth + fillwidth, 0, this.settings.loadingBarBackgroundRightWidth, height,
	        this.loadingBarX + this.settings.loadingBarBackgroundLeftWidth + this.settings.loadingBarInnerWidth, this.loadingBarY, 1);
};

/*
 * Starts the loading of the "optional" loading moments and updates the visuals of the loading screen
 */
TG_LoadingScreen.prototype.handleStartTextureLoaded = function(){
	"use strict";
	var i, l, x, y, btn, callback, logos;

	TG.hooks.informStartTextureLoaded();
	
	if(this.redrawBackground){
		this.backgroundFadeInRunning = true;
	}

	if(this.visible){
		//draw background
		this.drawBackground();

		//add logos
		this.createLogosSurface();
		
		//splashscreen
		if(typeof TG.hooks.getSplashScreenSurface === "function"){
			this.splashScreenSurface = TG.hooks.getSplashScreenSurface();
			if(this.splashScreenSurface instanceof tbSurface){
				this.splashScreenVisible = true;
				this.splashScreenSurfaceX = Math.floor((this.canvas.width - this.splashScreenSurface.width) / 2);
				this.splashScreenSurfaceY = Math.floor((this.canvas.height - this.splashScreenSurface.height) / 2);
			}
		}
	}
	//start loading audio
	if(TG.controller.loadSfx){
		tbLoader.startLoading("audio");
	}
	if(TG.controller.loadMusic){
		tbLoader.startLoading("audio_music");
	}
	tbLoader.startLoading("fonts");
};

// handleAdd is called when the token is (re-) added to the game.
TG_LoadingScreen.prototype.handleAdd = function(){
	"use strict";
	//check site-lock
	var i, proceed = false; //&& TG.config.siteLock.domainMD5Hashed
	if(TG.config.siteLock !== undefined){
		if(TG.config.siteLock.lock === false){
			proceed = true;
		}else{
			if(TG.config.siteLock.domains !== undefined){
				for(i = 0; i < TG.config.siteLock.domains.length; i++){
					if(TG_SiteLock.checkSiteLock(TG.config.siteLock.domains[i])){
						proceed = true;
						break;
					}
				}
			}
		}
	}else{
		proceed = true;
	}
	//check time-lock
	if(proceed && typeof TG.config.timeLock === "number"){
		if(new Date().getTime() > TG.config.timeLock){
			proceed = false;
		}
	}
	if(!proceed){
		tbGame.pause();
		return;
	}

	//initialise variables
	this.btns = [];
	this.error = false;
	this.timer = 0;
	this.audioTimer = 0;
	this.fontsTimer = 0;
	this.throbberFrame = 0;
	this.splashScreenVisible = false;
	this.ready = false;
	this.loadingBarXDiff = (this.settings.loadingBarFillXOffset !== undefined)? this.settings.loadingBarFillXOffset
	        : this.settings.loadingBarBackgroundLeftWidth - this.settings.loadingBarFillLeftWidth;
	this.loadingBarYDiff = (this.settings.loadingBarFillYOffset !== undefined)? this.settings.loadingBarFillYOffset : Math
	        .floor((s_loadingbar_background.height - s_loadingbar_fill.height) / 2);
	this.loadingBarMiddleWidth = s_loadingbar_fill.width - (this.settings.loadingBarFillLeftWidth + this.settings.loadingBarFillRightWidth);

	//check what is and isn't already loaded
	this.audioLoaded = false;
	this.musicLoaded = false;
	this.fontsLoaded = false;
	this.startTextureLoaded = tbLoader.complete("start");
	if(this.startTextureLoaded){
		this.handleStartTextureLoaded();
	}
	this.loadTextureLoaded = tbLoader.complete("load");

	//initialise throbber
	if(this.visible){
		this.throbberImage = document.getElementById("throbber_image");
		this.throbberWidth = this.settings.throbberWidth;
		this.throbberX = TG.functions.computeImgCoordinatesFromSettings(this.settings.throbberX, this.canvas.width, this.throbberWidth);
		this.throbberY = TG.functions.computeImgCoordinatesFromSettings(this.settings.throbberY, this.canvas.height, this.throbberWidth);
	}
};

// handleBeginStep is called each step before processing other events.
TG_LoadingScreen.prototype.handleBeginStep = function(timePassed){
	"use strict";
	this.timer += timePassed;

	//splashscreen
	if(typeof TG.hooks.getSplashScreenSurface === "function" && this.splashScreenSurface === undefined){
		this.splashScreenSurface = TG.hooks.getSplashScreenSurface();
		if(this.splashScreenSurface instanceof tbSurface){
			this.splashScreenVisible = true;
			this.splashScreenSurfaceX = Math.floor((this.canvas.width - this.splashScreenSurface.width) / 2);
			this.splashScreenSurfaceY = Math.floor((this.canvas.height - this.splashScreenSurface.height) / 2);
		}
	}
	if(this.splashScreenVisible && this.settings.splashScreenVisibilityDuration >= 0 && this.timer >= this.settings.splashScreenVisibilityDuration){
		this.splashScreenVisible = false;
	}

	// update fadein animation
	if (this.backgroundFadeInRunning) {
		this.backgroundFadeInTimer += timePassed;
		if (this.backgroundFadeInTimer >= this.backgroundFadeInDuration) {
			this.backgroundFadeInRunning = false;
			this.backgroundAlpha = 1;
		}
		else {
			this.backgroundAlpha = tbEase.easeInCubic(this.backgroundFadeInTimer, 0, 1, this.backgroundFadeInDuration);
		}

	}

	//update loading timers
	if(this.startTextureLoaded){
		this.audioTimer += timePassed;
		this.fontsTimer += timePassed;
	}

	//update throbber
	this.throbberFrame = Math.round((this.timer / this.settings.throbberFrameDuration) % (this.settings.throbberFrames - 1));

	//update logo animation
	if(this.logosSurfaceAnimating ){
		this.logosSurfaceAlpha = tbEase.easeLinear(this.logosSurfaceAlphaTimer, 0, 1, this.settings.logosSurfaceAnimDuration);
		this.logosSurfaceAlphaTimer += timePassed;
		if(this.logosSurfaceAlphaTimer >= this.settings.logosSurfaceAnimDuration){
			this.logosSurfaceAnimating = false;
			this.logosSurfaceAlpha = 1;
		}
	}

	//send progress reports if required
	if(typeof this.callbackProgress === "function"){
		this.callbackProgress(Math.round((tbLoader.percentage("load") + tbLoader.percentage("audio") + tbLoader.percentage("audio_music")) / 2));
	}

	//check if "start" and "load" moment are completed and if either "audio", "audio_music" and "fonts" have completed
	//or the max loading time has been exceeded
	if(!this.ready && this.loadTextureLoaded
			&& (this.fontsLoaded || (this.fontsTimer >= this.settings.maxAudioLoadDuration))
	        && (!TG.controller.loadSfx || this.audioLoaded || (tbAudio.usingHTMLAudio && this.audioTimer >= this.settings.maxAudioLoadDuration))
	        && (!TG.controller.loadMusic || this.musicLoaded || (tbAudio.usingHTMLAudio && this.audioTimer >= this.settings.maxAudioLoadDuration))){
		this.ready = true;
	}

	//if loading conditions have been met, check if the loading screen has to remain visible still
	//(because the framework is still waiting for a backe-nd or for promotional reasons)
	//and if not signal main controller to proceed
	if(!this.done && !this.error && this.ready && ((this.timer >= this.waitAfterReadyTimer) || testMode) && (TG.controller._readyForStart() || this.timer >= this.maxLoadDuration)){
		this.done = true;
		this.callback();
	}
};

TG_LoadingScreen.prototype.handleImmediateTouchDown = function(finger, x, y){
	"use strict";
	//check if one of the logos has been touched
    if(!this.splashScreenVisible && this.logoSurfaceMask && this.logoSurfaceMask.collisionPoint(this.logosSurfaceX, this.logosSurfaceY, x, y)){
        this.logoClickIdx = Math.floor((x - this.logosSurfaceX)/(this.logosSurface.width/this.logos.length));
    }
};

TG_LoadingScreen.prototype.handleImmediateTouchUp = function(finger, x, y){
	"use strict";
	//check if one of the logos has been touched and if so open url or call function associated with logo
    if(this.logoClickIdx !== undefined && (this.logos[this.logoClickIdx].url || this.logos[this.logoClickIdx].action)){
        if(this.logoSurfaceMask.collisionPoint(this.logosSurfaceX, this.logosSurfaceY, x, y)){
            x -= this.logosSurfaceX;
            if(x >= this.logoClickIdx * (this.logosSurface.width/this.logos.length) && x < (this.logoClickIdx + 1)* (this.logosSurface.width/this.logos.length)){
                if(this.logos[this.logoClickIdx].url){
                    TG.hooks.openUrl(this.logos[this.logoClickIdx].url);
                }else{
                    this.logos[this.logoClickIdx].action();
                }
            }
        }
    }
    this.logoClickIdx = undefined;
};

// handleSpecial is called if a special or user-defined event happens.
TG_LoadingScreen.prototype.handleSpecial = function(id, args){
	"use strict";
	//check for the completion of loading moments
	if(id === "Load Complete" && args.moment === "start"){
		this.startTextureLoaded = true;
		this.handleStartTextureLoaded();
	}else if(id === "Load Complete" && args.moment === "load"){
		this.loadTextureLoaded = true;
	}else if(id === "Load Complete" && args.moment === "audio"){
		this.audioLoaded = true;
	}else if(id === "Load Complete" && args.moment === "audio_music"){
		this.musicLoaded = true;
	}else if(id === "Load Complete" && args.moment === "fonts"){
		this.fontsLoaded = true;
	}
	if(id === TG.resizeEventId){
        this.positionDockedElements();
    }
};

// handleDraw is called at the end of a step to draw the token.
TG_LoadingScreen.prototype.handleDraw = function(){
	"use strict";
	if(!this.error){
		//draw background (image and loading bar background)
		if(this.redrawBackground && this.startTextureLoaded){
			this.drawBackground();
		}else{
			tbGraphics.clear();
		}
		
		//draw throbber, has to be done in try catch because sometime the throbber image might not be ready yet
		try{
			if(this.throbberImage){
				tbGraphics.context.drawImage(this.throbberImage, this.throbberWidth * this.throbberFrame, 0, this.throbberWidth, this.throbberWidth, this.throbberX, this.throbberY,
				        this.throbberWidth, this.throbberWidth);
			}
		}catch(e){
			if(testMode){
				console.log("error in drawing throbber: " + e.name + ", " + e.message);
			}
		}
		if(this.startTextureLoaded){
			//draw loading bar fill
			var xSource = 0, x = this.loadingBarX + this.loadingBarXDiff, y = this.loadingBarY + this.loadingBarYDiff, fillHeight = s_loadingbar_fill.height;
			s_loadingbar_fill.drawPart(0, xSource, 0, this.settings.loadingBarFillLeftWidth, fillHeight, x, y, 1);
			xSource += this.settings.loadingBarFillLeftWidth;
			x += this.settings.loadingBarFillLeftWidth;
			if(!this.ready){
				s_loadingbar_fill.drawPartTiled(0, xSource, 0, this.loadingBarMiddleWidth, fillHeight, x, y, Math.floor(Math.min(
				        ((tbLoader.percentage("load") + tbLoader.percentage("audio")) / 500 + this.loadingbarFillMultiplier * Math.log(this.timer + 1)), 1)
				        * this.settings.loadingBarInnerWidth), fillHeight, 1);
			}else{
				s_loadingbar_fill.drawPartTiled(0, xSource, 0, this.loadingBarMiddleWidth, fillHeight, x, y, this.settings.loadingBarInnerWidth, fillHeight, 1);
				xSource += this.loadingBarMiddleWidth;
				x += this.settings.loadingBarInnerWidth;
				s_loadingbar_fill.drawPart(0, xSource, 0, this.settings.loadingBarFillRightWidth, fillHeight, x, y, 1);
			}
			//draw logo surface
			if(this.logosSurface){
				this.logosSurface.drawAlpha(this.logosSurfaceX, this.logosSurfaceY, this.logosSurfaceAlpha);
			}
		}
		//draw splash screen
		if(this.splashScreenVisible){
			this.splashScreenSurface.drawSimple(this.splashScreenSurfaceX, this.splashScreenSurfaceY);
		}
	}
};

//******************************************************
//*****    Token Resource: TG_StartScreen
//******************************************************

// ***************************************
// Definition of game token TG_StartScreen
// ***************************************

// The constructor for the TG_StartScreen game token.
var TG_StartScreen = function() {
	"use strict";
	var setting, self, playbuttonDelay;
	self = this;
	// Properties used by the engine
	this.depth = 100;
	this.visible = true;
	this.active = true;
    TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
    //read settings
    this.settings = TG.settings.tg.startScreen;
    if(TG.orientation === "landscape" && TG.settings.tg.startScreen_landscape){
		for(setting in TG.settings.tg.startScreen_landscape){
			this.settings[setting] = TG.settings.tg.startScreen_landscape[setting];
		}
	}
    this.buttonDefinitions = TG.settings.tg.buttonDefinitions;
    if(TG.orientation === "landscape" && TG.settings.tg.buttonDefinitions_landscape){
		for(setting in TG.settings.tg.buttonDefinitions_landscape){
			this.buttonDefinitions[setting] = TG.settings.tg.buttonDefinitions_landscape[setting];
		}
	}
    this.buttonColors = TG.settings.tg.buttonColorDefinitions;
    //apply theme specific setting overwrites
    for(setting in TG.settings.theme.startScreen){
        this.settings[setting] = TG.settings.theme.startScreen[setting];
    }
    
    //init variables
    this.btns = [];
    var challengeInfo = TG.controller.getChallengeInformation();
    this.challenge = challengeInfo !== undefined && challengeInfo !== null;
    
    //define timeLine
    this.timeLine = new tbTimeLine();
	this.timeLine.addMoment(this.settings.gameLogoDelay, function(){
		self.startGameLogoAnimation.call(self);
	});
	this.timeLine.addMoment(this.settings.optinalButtonsDelay, function(){
		self.startOptionalButtonsAnimation.call(self);
	});
	playbuttonDelay = (TG.gameFlowSettings.showDifficulty && !this.challenge)? this.settings.playButtonsDelay : this.settings.optinalButtonsDelay;
	this.timeLine.addMoment(playbuttonDelay, function(){
		self.startPlayButtonsAnimation.call(self);
	});
	this.timeLine.addMoment(this.settings.menuButtonDelay, function(){
		self.startMenuAnimation.call(self);
	});
	    
    // Add it to the game engine
	tbGame.addToken(this, false);
};

/*
 * Defines and starts the animated appearance of the game logo
 */
TG_StartScreen.prototype.startGameLogoAnimation = function(){
	"use strict";
	this.gameLogoShown = true;
	if(this.settings.gameLogoImage){
		this.gameLogoStartX = TG.functions.computeImgCoordinatesFromSettings(this.settings.gameLogoStartX, this.canvas.width, s_logo.width);
		this.gameLogoEndX = TG.functions.computeImgCoordinatesFromSettings(this.settings.gameLogoEndX, this.canvas.width, s_logo.width);
		this.gameLogoStartY = TG.functions.computeImgCoordinatesFromSettings(this.settings.gameLogoStartY, this.canvas.height, s_logo.height);
		this.gameLogoEndY = TG.functions.computeImgCoordinatesFromSettings(this.settings.gameLogoEndY, this.canvas.height, s_logo.height);
		this.gameLogoX = this.gameLogoStartX;
		this.gameLogoY = this.gameLogoStartY;
		this.gameLogoScaleX = this.settings.gameLogoStartScaleX;
		this.gameLogoScaleY = this.settings.gameLogoStartScaleY;
		this.gameLogoAlpha = this.settings.gameLogoStartAlpha;
		this.gameLogoTimer = 0;
		this.positionDockedElements();
	}
};

/*
 * Defines and starts the animated appearance of the difficulty button
 */
TG_StartScreen.prototype.startOptionalButtonsAnimation = function(animate){
	"use strict";
	var x, y, btn, ease = function(t, s, c, d){
		return tbEase.easeOutElastic(t, s, c, d, 3, 15);
	};
	this.optionalButtonsShown = true;
	if(TG.gameFlowSettings.showDifficulty && !this.challenge){
		x = TG.functions.computeImgCoordinatesFromSettings(this.settings.difficultyButtonX, this.canvas.width, this.settings.difficultyButtonWidth, Math.floor(this.settings.difficultyButtonWidth / 2));
		y = TG.functions.computeImgCoordinatesFromSettings(this.settings.difficultyButtonY, this.canvas.height, s_btn_toggle.height, Math.floor(s_btn_toggle.height / 2));
		btn = new TG_ButtonToggleText("difficulty_toggle", x, y, this.depth - 20, TG.controller.getDifficulty() + "",
		        this.settings.difficultyButtonWidth, {callbackFunc: function(toggleValue){
			        TG.controller._setDifficulty(parseInt(toggleValue, 10));
			        return true;
		        }, immediate: true});
		btn.originX = Math.floor(this.settings.difficultyButtonWidth / 2);
		btn.originY = Math.floor(s_btn_toggle.height / 2);
		if(animate !== false){
			btn.addAnimation("xScale", ease, 0, 1, this.settings.difficultyButtonAnimationDuration);
			btn.addAnimation("yScale", ease, 0, 1, this.settings.difficultyButtonAnimationDuration);
		}
		this.difficultyButton = btn;
		this.difficultyButtonY = btn.y;
		this.btns.push(btn);
		this.positionDockedElements();
	}
};

/*
 * Defines and starts the animated appearance of the play button
 */
TG_StartScreen.prototype.startPlayButtonsAnimation = function(animate){
	"use strict";
	var x, y, btn, self = this, ease = function(t, s, c, d){
		return tbEase.easeOutElastic(t, s, c, d, 3, 15);
	};
	this.playButtonsShown = true;
	x = TG.functions.computeImgCoordinatesFromSettings(this.settings.playButtonX, this.canvas.width, this.settings.playButtonWidth, Math.floor(this.settings.playButtonWidth / 2));
	y = TG.functions.computeImgCoordinatesFromSettings(this.settings.playButtonY, this.canvas.height, s_btn_bigtext.height, Math.floor(s_btn_bigtext.height / 2));
	btn = new TG_ButtonText("bigPlay", x, y, this.depth - 20, "startScreenPlay", this.settings.playButtonWidth, {
	    callbackFunc: function(){
		    tbGame.removeToken(self);
		    TG.controller._startGame();
		    return true;
	    },
	    immediate: true
	});
	btn.originX = Math.floor(this.settings.playButtonWidth / 2);
	btn.originY = Math.floor(s_btn_bigtext.height / 2);
	if(animate !== false){
		btn.addAnimation("xScale", ease, 0, 1, this.settings.playButtonAnimationDuration);
		btn.addAnimation("yScale", ease, 0, 1, this.settings.playButtonAnimationDuration);
		this.playButtonAnimationTimer = 0;
	}else{
		this.playButtonAnimationTimer = this.settings.playButtonAnimationDuration;
	}
	this.playButton = btn;
	this.playButtonY = btn.y;
	this.btns.push(btn);
	this.positionDockedElements();
};

/*
 * Defines and starts the play button "wiggle" animation
 */
TG_StartScreen.prototype.startPlayButtonWiggleAnimation = function(){
	"use strict";
	var elasticEase = function(time, begin, change, duration, oscillations, stiffness){
		return tbEase.easeOutElastic(time, begin, change, duration, 3, 2);
	};
	var startButtonEaseFunction = tbEase.easeCreateCombined([tbEase.easeOutOvershoot, elasticEase, tbEase.easeConstant], [true, false, false], [0.02,
	        0.1, 0.88]);
	this.playButtonAnimating = true;
	this.playButton.addAnimation("xScale", tbEase.easeCreateRepeat(startButtonEaseFunction, tbEase.repeatRepeat), 1, 0.25, 4000, false);
	this.playButton.addAnimation("yScale", tbEase.easeCreateRepeat(startButtonEaseFunction, tbEase.repeatRepeat), 1, -0.1, 4000, false);
};

/*
 * Defines and starts the animated appearance of the options button
 */
TG_StartScreen.prototype.startMenuAnimation = function(animate){
	"use strict";
	var x, y, btn;
	this.menuButtonShown = true;
	x = TG.functions.computeImgCoordinatesFromSettings(this.settings.menuButtonX, this.canvas.width, s_btn_small_options.width);
	y = TG.functions.computeImgCoordinatesFromSettings(this.settings.menuButtonY, this.canvas.height, s_btn_small_options.height);
	btn = new TG_ButtonBase(x, y, this.depth - 20, new tbMaskImage(
	        s_btn_small_options), [s_btn_small_options], {callbackFunc: TG.controller.showOptions, immediate: true});
	if(animate !== false){
		btn.addAnimation("alpha", tbEase.easeLinear, 0, 1, this.settings.menuButtonAnimationDuration);
	}
	this.menuButton = btn;
	this.menuButtonY = btn.y;
	this.btns.push(btn);
	this.positionDockedElements();
};


/*
 * Draws the background of the Start Screen, scaling it up when necessary
 */
TG_StartScreen.prototype.drawBackground = function(){
	"use strict";
	var image, scale, top, left, x, y;
	// draw background
	image = this.settings.backgroundImage;
	if(image){
		TG.functions.setCanvas(TG.frameworkBackgroundLayer);
		top = Math.abs(TG.canvasTopOffset);
		if(image.number > 1){
			scale = (tbGraphics.canvas.height - top) / image.combinedHeight;
			left = -(image.combinedWidth * scale - tbGraphics.canvas.width) / 2;
			image.drawCombinedSimple(left, top);
		}else{
			scale = (tbGraphics.canvas.height - top) / image.height;
			left = -Math.floor((image.width * scale - this.canvas.width) / 2);
			image.drawExt(0, left, top, scale, scale, 0, 1);
		}
	}
};

/*
 * Creates and draws the surface containing all logos
 */
TG_StartScreen.prototype.createLogosSurface = function(){
	"use strict";
	var x, y, i, scale, l, maxLogoWidth, extraLogo;
	if(typeof TG.hooks.getStartScreenLogos === "function"){
		maxLogoWidth = this.settings.logosSurfaceMaxWidth;
		this.logos = TG.hooks.getStartScreenLogos();
		if(this.logos && this.logos.length > 0){
			if(this.logosSurface){
				this.logosSurface.clear();
			}else{
				this.logosSurface = new tbSurface(this.settings.logosSurfaceMaxWidth, this.settings.logosSurfaceMaxHeight);
			}
			this.logosSurface.setTarget();
			maxLogoWidth /= this.logos.length;
			for(i in this.logos){
				try{
					l = this.logos[i].image;
					scale = Math.min(1, Math.min((maxLogoWidth - 20) / l.width, this.settings.logosSurfaceMaxHeight / l.height));
					if(this.settings.logosAlign === "center"){
						x = maxLogoWidth * i + Math.round((maxLogoWidth - l.width * scale) / 2);
					}else{
						x = maxLogoWidth * i + Math.round((maxLogoWidth - l.width * scale)) - 10;
					}
					y = this.logosSurface.height - l.height * scale;
					if(l instanceof tbImage){
						l.drawExt(0, x, y, scale, scale, 0, 1);
					}else{
						tbGraphics.context.drawImage(l, x, y, l.width * scale, l.height * scale);
					}
				}catch(e){
					if(testMode){
						console.log("error in drawing logo: " + e);
					}
				}
			}
			this.logosSurface.resetTarget();
			this.logosSurfaceAlpha = 0;
			this.logosSurfaceAnimating = true;
			this.logosSurfaceAlphaTimer = 0;
			this.logoSurfaceMask = tbMaskRectangle(0, 0, this.logosSurface.width, this.logosSurface.height);
			this.positionDockedElements();
		}
	}
};

/*
 * Updates the position of all docked elements
 */
TG_StartScreen.prototype.positionDockedElements = function(){
    "use strict";
    var i, btn, buttonOffsetY, buttonsMaxY = 0;
    //move buttons up if necessary
    buttonOffsetY = 0;
    if(TG.visibleArea.height < this.settings.btnMinCanvasHeight){
        buttonOffsetY = this.settings.btnMinCanvasHeight - TG.visibleArea.height;
    }
    if(this.playButtonsShown){
		this.playButton.y = this.playButtonY - buttonOffsetY;
	}
	if(this.menuButtonShown){
		this.menuButton.y = this.menuButtonY - buttonOffsetY;
		this.menuButton.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.menuButtonX, TG.visibleArea.width, s_btn_small_options.width) + TG.visibleArea.left;
	}
	if(this.difficultyButton){
		this.difficultyButton.y = this.difficultyButtonY - buttonOffsetY;
	}
	
	//move game logo
	if(this.gameLogoShown && this.gameLogoTimer >= this.settings.gameLogoAnimationDuration){
		this.gameLogoY = this.gameLogoEndY - TG.canvasTopOffset;
	}
	
	//move company logos
    if(this.logosSurface){
		this.logosSurfaceX = TG.functions.computeImgCoordinatesFromSettings(this.settings.logosSurfaceX, TG.visibleArea.width, this.logosSurface.width) + TG.visibleArea.left;
		this.logosSurfaceY = TG.functions.computeImgCoordinatesFromSettings(this.settings.logosSurfaceY, TG.visibleArea.height, this.logosSurface.height) + TG.visibleArea.top;
	}
};

// handleAdd is called when the token is (re-) added to the game.
TG_StartScreen.prototype.handleAdd = function() {
	"use strict";
	var i, btn, btnType, btnX = 0, btnY, state = "medium", startButton,
    buttons = this.settings.btns, buttonOffsetY = 0;

	//draw background
    this.drawBackground();

	//draw game logo outside screen to activate texture swap
	if(this.settings.gameLogoImage){
		TG.functions.setCanvas(TG.frameworkUILayer);
		this.settings.gameLogoImage.drawSimple(0, 0, -this.settings.gameLogoImage.height - 10);
	}
	
	//create company logosSurface
	this.createLogosSurface();
    
	this.timeLine.start();
};

// handleRemove is called when the token is removed from the game.
TG_StartScreen.prototype.handleRemove = function() {
	"use strict";
	var i;
	for(i=0; i<this.btns.length; i++){
		tbGame.removeToken(this.btns[i]);
	}
};

//handleBeginStep is called each step before processing other events.
TG_StartScreen.prototype.handleBeginStep = function(timePassed){
	"use strict";
	this.canvas.drawTokens = true;
	if(this.gameLogoShown && this.gameLogoTimer < this.settings.gameLogoAnimationDuration){
		this.gameLogoX = this.settings.gameLogoEaseX(this.gameLogoTimer, this.gameLogoStartX, this.gameLogoEndX - this.gameLogoStartX,
		        this.settings.gameLogoAnimationDuration);
		this.gameLogoY = this.settings.gameLogoEaseY(this.gameLogoTimer, this.gameLogoStartY, this.gameLogoEndY - this.gameLogoStartY,
		        this.settings.gameLogoAnimationDuration) - TG.canvasTopOffset;
		this.gameLogoScaleX = this.settings.gameLogoEaseScaleX(this.gameLogoTimer, this.settings.gameLogoStartScaleX, this.settings.gameLogoEndScaleX
		        - this.settings.gameLogoStartScaleX, this.settings.gameLogoAnimationDuration);
		this.gameLogoScaleY = this.settings.gameLogoEaseScaleY(this.gameLogoTimer, this.settings.gameLogoStartScaleY, this.settings.gameLogoEndScaleY
		        - this.settings.gameLogoStartScaleY, this.settings.gameLogoAnimationDuration);
		this.gameLogoAlpha = this.settings.gameLogoEaseAlpha(this.gameLogoTimer, this.settings.gameLogoStartAlpha, this.settings.gameLogoEndAlpha
		        - this.settings.gameLogoStartAlpha, this.settings.gameLogoAnimationDuration);
		this.gameLogoTimer += timePassed;
		if(this.gameLogoTimer >= this.settings.gameLogoAnimationDuration){
			this.gameLogoX = this.gameLogoEndX;
			this.gameLogoY = this.gameLogoEndY - TG.canvasTopOffset;
			this.gameLogoScaleX = this.settings.gameLogoEndScaleX;
			this.gameLogoScaleY = this.settings.gameLogoEndScaleY;
			this.gameLogoAlpha = this.settings.gameLogoEndAlpha;
		}
	}
	if(this.playButtonsShown){
		if(!this.playButtonAnimating && this.playButtonAnimationTimer >= this.settings.playButtonAnimationDuration + this.settings.playButtonWiggleDelay){
			this.startPlayButtonWiggleAnimation();
		}
		this.playButtonAnimationTimer += timePassed;
	}
};

TG_StartScreen.prototype.handleImmediateTouchDown = function(finger, x, y){
	"use strict";
	//check if one of the logos has been touched
    if(this.logoSurfaceMask && this.logoSurfaceMask.collisionPoint(this.logosSurfaceX, this.logosSurfaceY, x, y)){
        this.logoClickIdx = Math.floor((x - this.logosSurfaceX)/(this.logosSurface.width/this.logos.length));
    }
};

TG_StartScreen.prototype.handleImmediateTouchUp = function(finger, x, y){
	"use strict";
	//check if one of the logos has been touched and if so open url or call function associated with logo
    if(this.logoClickIdx !== undefined && (this.logos[this.logoClickIdx].url || this.logos[this.logoClickIdx].action)){
        if(this.logoSurfaceMask.collisionPoint(this.logosSurfaceX, this.logosSurfaceY, x, y)){
            x -= this.logosSurfaceX;
            if(x >= this.logoClickIdx * (this.logosSurface.width/this.logos.length) && x < (this.logoClickIdx + 1)* (this.logosSurface.width/this.logos.length)){
                if(this.logos[this.logoClickIdx].url){
                    TG.hooks.openUrl(this.logos[this.logoClickIdx].url);
                }else{
                    this.logos[this.logoClickIdx].action();
                }
            }
        }
    }
    this.logoClickIdx = undefined;
};

//handleTouchDown is called when a touch is started or if a mouse button is
//pressed.
TG_StartScreen.prototype.handleTouchDown = function(finger, x, y){
	"use strict";
	this.down = true;
};

//handleTouchUp is called when a touch is ended or if a mouse button is
//released.
TG_StartScreen.prototype.handleTouchUp = function(finger, x, y){
	"use strict";
	if(this.down){
		//end all animations and add missing elements to screen
		this.timeLine.stop();
		
		//game logo
		if(this.gameLogoShown){
			if(this.gameLogoTimer < this.settings.gameLogoAnimationDuration){
				this.gameLogoTimer = this.settings.gameLogoAnimationDuration - 1;
			}
		}else{
			this.startGameLogoAnimation();
			this.gameLogoTimer = this.settings.gameLogoAnimationDuration - 1;
		}
		//difficulty button
		if(this.difficultyButton){
			this.difficultyButton.endAnimations(true);
		}else{
			this.startOptionalButtonsAnimation(false);
		}
		//menu
		if(this.menuButtonShown){
			this.menuButton.endAnimations(true);
		}else{
			this.startMenuAnimation(false);
		}
		//play button
		if(this.playButtonsShown){
			this.playButton.endAnimations(true);
			if(this.playButtonAnimating){
				this.startPlayButtonWiggleAnimation();
			}
		}else{
			this.startPlayButtonsAnimation(false);
		}
		this.down = false;
	}
};


TG_StartScreen.prototype.handleSpecial = function(id, args) {
    "use strict";
    if(id === TG.resizeEventId){
        this.drawBackground();
        this.positionDockedElements();
    }
};

TG_StartScreen.prototype.handleDraw = function(){
    "use strict";
    //draw game logo
	if(this.gameLogoShown && this.settings.gameLogoImage){
		this.settings.gameLogoImage.drawExt(0, this.gameLogoX, this.gameLogoY, this.gameLogoScaleX, this.gameLogoScaleY, 0, this.gameLogoAlpha);
	}
	//draw logo surface
	if(this.logosSurface){
		this.logosSurface.drawSimple(this.logosSurfaceX, this.logosSurfaceY);
	}
    this.forceDraw = false;
};


//******************************************************
//*****    Token Resource: TG_LevelMapScreen
//******************************************************

// ***************************************
// Definition of game token TG_LevelMapScreen
// ***************************************

/*global f_default, s_level_stars, s_level_lock, s_level_0, s_level_1, s_level_2, s_level_3 */
// The constructor for the TG_LevelMapScreen game token.
var TG_LevelMapScreen = function(){
	"use strict";
	// Properties used by the engine
	this.depth = 100;
	this.visible = true;
	this.active = true;
	TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
	var s;
	//read framework settings
	this.settings = TG.settings.tg.levelMapScreen;
	if(TG.orientation === "landscape"){
		for(s in TG.settings.tg.levelMapScreen_landscape){
			this.settings[s] = TG.settings.tg.levelMapScreen_landscape[s];
		}
	}
	//read game settings
	this.gameSettings = TG.settings.game.levelMap;
	if(TG.settings.game.levelMapScreen){
		for(s in TG.settings.game.levelMapScreen){
			this.settings[s] = TG.settings.game.levelMapScreen[s];
		}
	}
	//read button settings
	this.buttonSettings = TG.settings.tg.buttonDefinitions;
	//apply theme specific setting overwrites
	for( var setting in TG.settings.theme.levelMapScreen){
		this.settings[setting] = TG.settings.theme.levelMapScreen[setting];
	}

	this.levelPressed = -1;
	this.swipeOffsetX = 0;
	this.levels = [];
	// Add it to the game engine
	tbGame.addToken(this);
};

TG_LevelMapScreen.prototype.drawBackground = function(){
	"use strict";
	var image, scale, top, left, x, y;
	TG.functions.setCanvas(TG.frameworkBackgroundLayer);
	// draw background
	image = (this.settings.backgroundImages && this.settings.backgroundImages[0])? this.settings.backgroundImages[0].sprite : undefined;
	image = (this.settings.backgroundImage)? this.settings.backgroundImage : undefined;
	if(image){
		top = Math.abs(TG.canvasTopOffset);
		if(image.number > 1){
			scale = (tbGraphics.canvas.height - top) / image.combinedHeight;
			left = -(image.combinedWidth * scale - tbGraphics.canvas.width) / 2;
			image.drawCombinedSimple(left, top);
		}else{
			scale = (tbGraphics.canvas.height - top) / image.height;
			left = -Math.floor((image.width * scale - this.canvas.width) / 2);
			image.drawExt(0, left, top, scale, scale, 0, 1);
		}
	}
	this.drawStats();
};

TG_LevelMapScreen.prototype.drawLevels = function(){
	"use strict";
	if(this.settings.type === "grid"){
		this.levelSurface.setTarget();
		tbGraphics.clear();
		this.levelPositions = [];
		var self = this, drawOneWorld;

		drawOneWorld = function(worldIdx, offset, mapLevels){
			var colDistribution, r, c, idx, savedData, image, backgroundImage, x, y, text, font, state, stars, xOff, yOff, drawNumber, drawBackgroundImages, drawLock, scale, backgroundImageScale, tileWidth, tileHeight, noOfLevels, c_max, gridMarginY, xOffset, yOffset, c_tot, r_tot, centerLevels;

			noOfLevels = TG.gameFlowSettings.noOfLevels[worldIdx];
			gridMarginY = (self.useBigImages)? self.settings.gridMarginYBig : self.settings.gridMarginYSmall;
			xOffset = self.settings.gridOffsetX;
			yOffset = gridMarginY;

			//read or create the column distribution (the amount of columns per row)
			if (self.settings.colDistribution){
				colDistribution = self.settings.colDistribution[worldIdx];
			} else {
				c_max = (self.useBigImages)? self.settings.noOfColsBig : self.settings.noOfColsSmall;
				c_tot = c_max;
				r_tot = Math.floor(noOfLevels / c_tot);

				while(Math.abs(r_tot - c_tot) > 1){
					c_tot -= 1;
					r_tot = Math.floor(noOfLevels / c_tot);
				}

				colDistribution = [];
				while(noOfLevels > 0){
					colDistribution.push(Math.min(c_tot, noOfLevels));
					noOfLevels -= c_tot;
				}
				noOfLevels = TG.gameFlowSettings.noOfLevels[worldIdx];
			}

			r_tot = colDistribution.length;
			tileHeight = Math.round((((self.useBigImages)? self.settings.levelsMaxHeightBig : self.settings.levelsMaxHeightSmall) - (r_tot + 1) * gridMarginY) / r_tot);

			var centerLevels = (self.settings.centerLevels)?self.settings.centerLevels:false;
			if(!centerLevels){
				c_max = 1;
				for (r = 0; r < r_tot; r++){
					c_max = Math.max(colDistribution[r], c_max);
				}
				tileWidth = Math.round((self.canvas.width - 2 * xOffset) / c_max);
			}

			idx = 0;
			for (r = 0; r < r_tot; r++){
				c_tot = colDistribution[r];
				if(centerLevels){
					tileWidth = Math.round((self.canvas.width - 2 * xOffset) / c_tot);
				}
				for (c = 0; c < c_tot; c++){
					drawNumber = self.settings.drawNumbers;
					drawBackgroundImages = self.settings.drawBackgroundImages;

					//check saved data
					state = TG.gameFlowSettings.defaultLevelState || "locked";
					stars = 0;
					savedData = TG.controller.getLevelData(worldIdx, idx);
					if(typeof savedData === "object" && savedData !== null){
						if(savedData["state"] !== undefined){
							state = savedData["state"];
						}
						if(typeof savedData["stats"] === "object" && savedData["stats"] !== null){
							stars = savedData["stats"]["stars"] || 0;
						}
					}
					drawLock = state === "locked";

					//check if game wants to show custom level images
					if(typeof TG.game.getLevelImage === "function"){
						image = TG.game.getLevelImage(TG.controller.getSequentialLevelIdx(worldIdx, idx), worldIdx, idx, state);
						if(image){
							drawNumber = false;
							drawLock = false;
							drawBackgroundImages = false;
						}
					}

					//draw level
					x = xOffset + offset;
					y = yOffset;
					scale = 1;
					backgroundImageScale = 1;

					if(drawBackgroundImages !== false){
						backgroundImage = self.useBigImages? s_level_0 : s_level2_0;
						if(state === "played"){
							switch(stars){
								case 1:
									backgroundImage = self.useBigImages? s_level_1 : s_level2_1;
								break;
								case 2:
									backgroundImage = self.useBigImages? s_level_2 : s_level2_2;
								break;
								case 3:
									backgroundImage = self.useBigImages? s_level_3 : s_level2_3;
								break;
							}
						}else if(!self.useBigImages && state === "locked"){
							backgroundImage = s_level2_lock;
						}
						if(backgroundImage.width > tileWidth){
							backgroundImageScale = tileWidth / backgroundImage.width;
						}
						if(backgroundImage.height > tileHeight){
							backgroundImageScale = Math.min(scale, tileHeight / backgroundImage.height);
						}
						x += Math.round((tileWidth - backgroundImage.width * backgroundImageScale) / 2);
						y += Math.round((tileHeight - backgroundImage.height * backgroundImageScale) / 2);
						backgroundImage.drawExt(0, x, y, backgroundImageScale, backgroundImageScale, 0, 1);
						if(mapLevels){
							self.levelPositions[idx] = {
							    x: x,
							    y: y
							};
						}
					}
					if(image){
						if(image.width > tileWidth){
							scale = tileWidth / image.width;
						}
						if(image.height > tileHeight){
							scale = Math.min(scale, tileHeight / image.height);
						}
						if(backgroundImage !== undefined){
							xOff = TG.functions.computeImgCoordinatesFromSettings(self.settings.levelImageOffsetX,
							        backgroundImage.width * backgroundImageScale, image.width * scale);
							yOff = TG.functions.computeImgCoordinatesFromSettings(self.settings.levelImageOffsetY, backgroundImage.height
							        * backgroundImageScale, image.height * scale);
						}else{
							xOff = TG.functions.computeImgCoordinatesFromSettings(self.settings.levelImageOffsetX, tileWidth, image.width * scale);
							yOff = TG.functions.computeImgCoordinatesFromSettings(self.settings.levelImageOffsetY, tileHeight, image.height * scale);
							if(mapLevels){
								self.levelPositions[idx] = {
								    x: x + xOff,
								    y: y + yOff
								};
							}
						}

						if(image instanceof tbSurface){
							image.drawExt(x + xOff, y + yOff, scale, scale, 0, 1);
						}else{
							image.drawExt(0, x + xOff, y + yOff, scale, scale, 0, 1);
						}
					}
					if(drawNumber !== false && !drawLock){
						text = ""+ (TG.gameFlowSettings.usePerWorldLevelNumbering? (idx + 1) : (TG.controller.getSequentialLevelIdx(worldIdx, idx) + 1));
						font = self.fonts.general;
						if(state === "locked" && self.fonts.locked !== undefined){
							font = self.fonts.locked;
						}else if(state === "unlocked" && self.fonts.unlocked !== undefined){
							font = self.fonts.unlocked;
						}else if(state === "played" && self.fonts.played !== undefined){
							font = self.fonts.played;
						}
						if(backgroundImage !== undefined){
							xOff = TG.functions.computeTextCoordinatesFromSettings(self.settings.levelNoOffsetX, backgroundImage.width * backgroundImageScale,
							        font.textWidth(text), font.getAlign());
							yOff = TG.functions.computeTextCoordinatesFromSettings(self.settings.levelNoOffsetY, backgroundImage.height * backgroundImageScale,
							        font.textHeight(text), font.getBaseline());
						}else{
							xOff = TG.functions.computeTextCoordinatesFromSettings(self.settings.levelNoOffsetX, tileWidth, font.textWidth(text), font
							        .getAlign());
							yOff = TG.functions.computeTextCoordinatesFromSettings(self.settings.levelNoOffsetY, tileHeight, font.textHeight(text), font
							        .getBaseline());
						}
						font.drawSimple(text, x + xOff, y + yOff);
					}
					if(self.useBigImages && drawLock){
						if(backgroundImage !== undefined){
							xOff = TG.functions.computeImgCoordinatesFromSettings(self.settings.lockOffsetX, backgroundImage.width * backgroundImageScale,
							        s_level_lock.width);
							yOff = TG.functions.computeImgCoordinatesFromSettings(self.settings.lockOffsetY, backgroundImage.height * backgroundImageScale,
							        s_level_lock.height);
						}else{
							xOff = TG.functions.computeImgCoordinatesFromSettings(self.settings.lockOffsetX, tileWidth, s_level_lock.width);
							yOff = TG.functions.computeImgCoordinatesFromSettings(self.settings.lockOffsetY, tileHeight, s_level_lock.height);
						}
						s_level_lock.drawSimple(0, x + xOff, y + yOff);

					}
					xOffset += tileWidth;

					idx++;
				}
				xOffset = self.settings.gridOffsetX;
				yOffset += tileHeight + gridMarginY;
			}
		};

		if(this.hasPrevious){
			drawOneWorld(this.currentWorldIdx - 1, 0);
		}
		drawOneWorld(this.currentWorldIdx, this.canvas.width, true);
		if(this.hasNext){
			drawOneWorld(this.currentWorldIdx + 1, this.canvas.width * 2);
		}
		this.levelSurface.resetTarget();
	}
};

TG_LevelMapScreen.prototype.animateToWorld = function(worldIdx){
	"use strict";
	var idxDifference = worldIdx - this.currentWorldIdx;

	this.nextWorldIdx = worldIdx;
	switch(idxDifference){
		case 0:
			this.nextWorldX = 0;
		break;
		case 1:
			this.nextWorldX = -this.canvas.width;
		break;
		case -1:
			this.nextWorldX = this.canvas.width;
		break;
	}
	this.moving = true;
	this.moveTimer = 0;
	this.moveStart = this.swipeOffsetX;
	this.moveChange = this.nextWorldX - this.swipeOffsetX;
	this.moveDuration = Math.min(this.settings.moveTotalDuration - this.swipeTimer, Math.round(Math.abs(this.moveChange) / (this.swipeSpeed / 1000)));
	this.moveDuration = Math.max(this.settings.moveMinDuration, this.moveDuration);
};

TG_LevelMapScreen.prototype.addWorldButtons = function(){
	"use strict";
	if(TG.gameFlowSettings.noOfLevels.length > 1){
		var x, y, self = this;

		//previous button
		x = TG.functions.computeImgCoordinatesFromSettings(this.settings.worldButtonPreviousX, this.canvas.width, s_level2_arrow_left.width);
		y = TG.functions.computeImgCoordinatesFromSettings(this.settings.worldButtonPreviousY, TG.visibleArea.height, s_level2_arrow_left.height) + TG.visibleArea.top;
		this.previousBtn = new TG_ButtonBase(x, y, this.depth - 20, new tbMaskImage(s_level2_arrow_left), [s_level2_arrow_left], function(){
			self.swipeDirection = "previous";
			self.animateToWorld(self.currentWorldIdx - 1);
			return true;
		});

		//next button
		x = TG.functions.computeImgCoordinatesFromSettings(this.settings.worldButtonNextX, this.canvas.width, s_level2_arrow_right.width);
		y = TG.functions.computeImgCoordinatesFromSettings(this.settings.worldButtonNextY, TG.visibleArea.height, s_level2_arrow_right.height) + TG.visibleArea.top;
		this.nextBtn = new TG_ButtonBase(x, y, this.depth - 20, new tbMaskImage(s_level2_arrow_right), [s_level2_arrow_right], function(){
			self.swipeDirection = "next";
			self.animateToWorld(self.currentWorldIdx + 1);
			return true;
		});

		this.updateWorldButtons();
	}else{
		this.levelSurfaceY -= this.settings.gridOffsetYDifferenceNoWorldButtons;
	}
};

TG_LevelMapScreen.prototype.updateWorldButtons = function(){
	"use strict";
	if(TG.gameFlowSettings.noOfLevels.length > 1){
		var image;
		if(!this.hasPrevious){
			image = [new tbSurface(s_level2_arrow_left.width, s_level2_arrow_left.height)];
			image[0].setTarget();
			s_level2_arrow_left.drawSimple(1, 0, 0);
			image[0].resetTarget();
			this.previousBtn.enabled = false;
		}else{
			image = [s_level2_arrow_left];
			this.previousBtn.enabled = true;
		}
		this.previousBtn.setImages(image);

		if(!this.hasNext){
			image = [new tbSurface(s_level2_arrow_right.width, s_level2_arrow_right.height)];
			image[0].setTarget();
			s_level2_arrow_right.drawSimple(1, 0, 0);
			image[0].resetTarget();
			this.nextBtn.enabled = false;
		}else{
			image = [s_level2_arrow_right];
			this.nextBtn.enabled = true;
		}
		this.nextBtn.setImages(image);
	}
};

TG_LevelMapScreen.prototype.drawTitle = function(){
	"use strict";
	var font, text, maxFontSize;

	this.titleSurface.setTarget();

	tbGraphics.clear();
	font = f_default.clone();
	if(this.settings.titleFont){
		font.setProperties(this.settings.titleFont);
	}
	font.setAlign("center");
	font.setBaseline("middle");
	text = TG.dictionary.getText("levelMapScreenWorld_" + this.currentWorldIdx, "<LEVELMAPSCREENWORLD_" + this.currentWorldIdx + ">");
	maxFontSize = font.textFitSize(text, this.settings.titleMaxWidth - (font.getStroke()?font.getStrokeWidth():0), this.settings.titleMaxHeight - (font.getStroke()?font.getStrokeWidth():0), false);
	if(maxFontSize < font.getFontSize()){
		font.setFontSize(maxFontSize);
	}
	font.drawSimple(text, this.titleSurface.width / 2, this.titleSurface.height / 2);
	this.titleSurface.resetTarget();
	this.canvas.drawTokens = true;
};

TG_LevelMapScreen.prototype.drawStats = function(){
	"use strict";
	var font, text, x, y, maxFontSize, gameShowStars, gameShowScore, starsOverviewX, starsOverviewY;

	gameShowStars = TG.settings.tg.levelEnd.type[TG.gameFlowSettings.gameType].showStars;
	if(TG.settings.game.levelEnd && TG.settings.game.levelEnd.type && TG.settings.game.levelEnd.type[TG.gameFlowSettings.gameType]
	        && TG.settings.game.levelEnd.type[TG.gameFlowSettings.gameType]){
		gameShowStars = (TG.settings.game.levelEnd.type[TG.gameFlowSettings.gameType].showStars === false)? false : gameShowStars;
	}
	if(this.gameSettings !== undefined && this.gameSettings.showStars !== undefined){
		gameShowStars = this.gameSettings.showStars;
	}

	starsOverviewX = TG.functions.computeImgCoordinatesFromSettings(this.settings.starsOverviewX, this.canvas.width, s_level_stars.width);
	starsOverviewY = TG.functions.computeImgCoordinatesFromSettings(this.settings.starsOverviewY, TG.visibleArea.height, s_level_stars.height) + TG.visibleArea.top;
	if(gameShowStars){
		//draw stars
		s_level_stars.drawSimple(0, starsOverviewX, starsOverviewY);
		font = f_default.clone();
		font.setProperties(this.settings.starsOverviewFont);
		font.setAlign("center");
		font.drawSimple(this.stars + " / " + this.totStars, starsOverviewX + Math.floor(s_level_stars.width/2), starsOverviewY + s_level_stars.height + this.settings.starsTextOffsetY);
	}

	//draw total score
	gameShowScore = (this.gameSettings !== undefined && this.gameSettings.showScore !== undefined)? this.gameSettings.showScore : true;
	if(gameShowScore){
		font = f_default.clone();
		if(this.settings.pointOverviewHeaderFont !== undefined){
			font.setProperties(this.settings.pointOverviewHeaderFont);
		}else{
			font.setProperties(this.settings.pointOverviewFont);
		}
		text = TG.dictionary.getText("levelMapScreenTotalScore", "<TOTAL SCORE:>");
		maxFontSize = font.textFitSize(text, this.settings.pointOverviewMaxWidth, this.settings.pointOverviewMaxHeight);
		if(maxFontSize < font.getFontSize()){
			font.setFontSize(maxFontSize);
		}
		x = TG.functions.computeTextCoordinatesFromSettings(this.settings.pointOverviewX, this.canvas.width, font.textWidth(text), font.getAlign());
		y = TG.functions.computeTextCoordinatesFromSettings(this.settings.pointOverviewY, TG.visibleArea.height, font.textHeight(text), font.getBaseline()) + TG.visibleArea.top;
		font.drawSimple(text, x, y);
		text = "" + this.points;
		font.setProperties(this.settings.pointOverviewFont);
		x = TG.functions.computeTextCoordinatesFromSettings(this.settings.pointOverviewX, this.canvas.width, font.textWidth(text), font.getAlign());
		font.drawSimple(text, x, starsOverviewY + s_level_stars.height + this.settings.starsTextOffsetY);
	}
};

// handleAdd is called when the token is (re-) added to the game.
TG_LevelMapScreen.prototype.handleAdd = function(){
	"use strict";
	var btnType, btnX, btnY, setFonts, i, w, toManyLevels, stats, self = this;

	//determine whether to use big or small level images
	this.useBigImages = this.settings.useBigImages? true : false;
	if(!this.useBigImages){
		for(i = 0; i < TG.gameFlowSettings.noOfLevels.length; i++){
			if(TG.gameFlowSettings.noOfLevels[i] > 9){
				toManyLevels = true;
				break;
			}
		}
		if(!toManyLevels){
			this.useBigImages = true;
		}
	}

	//create surfaces and masks
	this.levelSurface = new tbSurface(this.canvas.width * 3, (this.useBigImages)? this.settings.levelsMaxHeightBig : this.settings.levelsMaxHeightSmall);
	this.levelSurfaceX = -this.canvas.width;
	this.levelSurfaceYSettings = ((this.useBigImages)? this.settings.gridOffsetYBig : this.settings.gridOffsetYSmall);
	this.levelSurfaceY = TG.functions.computeImgCoordinatesFromSettings(this.levelSurfaceYSettings, TG.visibleArea.height, this.levelSurface.height) + TG.visibleArea.top;

	this.titleSurface = new tbSurface(this.settings.titleMaxWidth, this.settings.titleMaxHeight);
	this.titleSurfaceX = TG.functions.computeImgCoordinatesFromSettings(this.settings.titleX, this.canvas.width, this.settings.titleMaxWidth);
	this.titleSurfaceClippingX = TG.functions.computeImgCoordinatesFromSettings(this.settings.titleX, this.canvas.width, this.settings.titleMaxWidth);
	this.titleSurfaceY = TG.functions.computeImgCoordinatesFromSettings(this.settings.titleY, TG.visibleArea.height, this.titleSurface.height) + TG.visibleArea.top;
	this.levelMask = (typeof s_level_mask !== "undefined")? s_level_mask : (this.useBigImages? tbMaskImage(s_level_0) : tbMaskImage(s_level2_0));

	//setup fonts
	if(this.settings.drawNumbers){
		this.fonts = {};
		setFonts = function(setting){
			var f, font;
			for(f in setting){
				font = f_default.clone();
				font.setProperties(setting[f]);
				self.fonts[f] = font;
			}
		};
		this.fonts = {};
		this.fonts.general = f_default;
		if(this.useBigImages){
			setFonts(this.settings.levelFontsBig);
		}else{
			setFonts(this.settings.levelFontsSmall);
		}
	}

	//initialise variables
	this.currentWorldIdx = TG.controller.getCurrentWorldIdx();
	this.noOfLevels = TG.gameFlowSettings.noOfLevels[this.currentWorldIdx];
	this.swiping = false;
	this.swipeTimer = 0;
	this.swipeDistance = 0;
	this.swipeSpeed = 0;
	this.swipeXStart = this.levelSurfaceX;
	this.swipeOffsetX = 0;
	this.hasPrevious = (this.currentWorldIdx > 0);
	this.hasNext = (this.currentWorldIdx < TG.gameFlowSettings.noOfLevels.length - 1);

	//request stats
	this.stars = 0;
	this.points = 0;
	this.totStars = 0;
	for(w = 0; w < TG.gameFlowSettings.noOfLevels.length; w++){
		for(i = 0; i < TG.gameFlowSettings.noOfLevels[w]; i++){
			stats = TG.controller.getLevelStatistics(undefined, i, w);
			this.totStars += 3;
			if(typeof stats === "object" && stats !== null){
				this.stars += (stats["stars"] !== undefined)? stats["stars"] : 0;
				this.points += (stats["highScore"] !== undefined)? stats["highScore"] : 0;
			}
		}
	}

	if (TG.game.getTotalScoreText) {
		this.points = TG.game.getTotalScoreText();
	}

	//draw background
	this.drawBackground();

	//create options buttons
	btnType = this.buttonSettings[this.settings.optionsBtnType];
	btnX = TG.functions.computeImgCoordinatesFromSettings(this.settings.optionsBtnX, this.canvas.width, btnType.sprite.width);
	btnY = TG.functions.computeImgCoordinatesFromSettings(this.settings.optionsBtnY, TG.visibleArea.height, btnType.sprite.height) + TG.visibleArea.top;
	this.optionsBtn = new TG_ButtonBase(btnX, btnY, this.depth - 20, new tbMaskImage(btnType.sprite), [btnType.sprite], {
	    callbackFunc: TG.controller.showOptions,
	    callbackObj: this
	});

	//add world buttons
	this.addWorldButtons();

	//add levels
	this.drawLevels();

	//add title
	this.drawTitle();

	this.forceDraw = true;
};

// handleRemove is called when the token is removed from the game.
TG_LevelMapScreen.prototype.handleRemove = function(){
	"use strict";
	if(this.previousBtn){
		tbGame.removeToken(this.previousBtn);
	}
	if(this.nextBtn){
		tbGame.removeToken(this.nextBtn);
	}
	tbGame.removeToken(this.optionsBtn);
};

// handleTouchDown is called when a touch is started or if a mouse button is
// pressed.
TG_LevelMapScreen.prototype.handleTouchDown = function(finger, x, y){
	"use strict";
	var i;
	if(!this.moving){
		for(i = 0; i < this.levelPositions.length; i++){
			if(this.levelMask.collisionPoint(this.levelPositions[i].x - this.canvas.width, this.levelPositions[i].y + this.levelSurfaceY, x, y)){
				this.levelPressed = i;
				break;
			}
		}
	}
	this.moving = false;
	// only check for swiping if there are worlds to swipe to
	if(TG.gameFlowSettings.noOfLevels.length > 1){
		this.swiping = true;
		this.swipeTimer = 0;
		this.swipeXStart = x;
		this.swipePreviousX = x;
		this.swipeDistance = 0;
		this.swipeSpeed = 0;
	}

};

// handleTouchUp is called when a touch is ended or if a mouse button is
// released.
TG_LevelMapScreen.prototype.handleTouchUp = function(finger, x, y){
	"use strict";
	// handle level buttons
	if(!this.moving
	        && this.levelPressed !== -1
	        && this.levelMask.collisionPoint(this.levelPositions[this.levelPressed].x - this.canvas.width, this.levelPositions[this.levelPressed].y
	                + this.levelSurfaceY, x, y)){
		var state = TG.gameFlowSettings.defaultLevelState || "locked", levelData = TG.controller.getLevelData(this.currentWorldIdx, this.levelPressed);
		if(typeof levelData === "object" && levelData !== null && levelData["state"] !== undefined){
			state = levelData["state"];
		}
		if(state !== "locked"){
			tbGame.removeToken(this);
			TG.controller._initGameLevel(this.levelPressed, this.currentWorldIdx);
			return true;
		}
	}
	this.levelPressed = -1;

	// handle swiping
	this.swiping = false;
	// only check for swiping if there are worlds to swipe to
	if(TG.gameFlowSettings.noOfLevels.length > 1){
		if(Math.abs(this.swipeOffsetX) >= this.settings.swipeMinDistance
		        && (this.swipeSpeed >= this.settings.swipeSpeedThreshold || Math.abs(this.swipeOffsetX) >= this.settings.swipeDistanceThreshold)){
			if(this.swipeDirection === "previous"){
				if(this.hasPrevious && this.swipeOffsetX >= 0 && this.swipeOffsetX <= this.canvas.width / 2){
					this.animateToWorld(this.currentWorldIdx - 1);
				}else if(this.swipeOffsetX < 0){
					this.animateToWorld(this.currentWorldIdx);
				}else{
					this.swipeDirection = "next";
					this.animateToWorld(this.currentWorldIdx);
				}
			}else if(this.swipeDirection === "next"){
				if(this.hasNext && this.swipeOffsetX <= 0 && this.swipeOffsetX >= -this.canvas.width / 2){
					this.animateToWorld(this.currentWorldIdx + 1);
				}else if(this.swipeOffsetX > 0){
					this.animateToWorld(this.currentWorldIdx);
				}else{
					this.swipeDirection = "previous";
					this.animateToWorld(this.currentWorldIdx);
				}
			}
		}else if(Math.abs(this.swipeOffsetX) > 0){
			this.swipeDirection = this.swipeDirection === "next"? "previous" : "next";
			this.animateToWorld(this.currentWorldIdx);
		}
	}
	return true;
};

TG_LevelMapScreen.prototype.handleSpecial = function(id){
	"use strict";
	if(id === TG.languageSetEventId || id === TG.resizeEventId){
		this.canvas.drawTokens = true;
		this.drawBackground();
		if(id === TG.resizeEventId){ //resize Event
			this.titleSurfaceY = TG.functions.computeImgCoordinatesFromSettings(this.settings.titleY, TG.visibleArea.height, this.titleSurface.height)
			        + TG.visibleArea.top;
			this.levelSurfaceY = TG.functions.computeImgCoordinatesFromSettings(this.levelSurfaceYSettings, TG.visibleArea.height, this.levelSurface.height)
			        + TG.visibleArea.top;
			this.optionsBtn.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.optionsBtnY, TG.visibleArea.height,
			        this.optionsBtn.images[0].height)
			        + TG.visibleArea.top;
			if(this.previousBtn){
				this.previousBtn.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.worldButtonPreviousY, TG.visibleArea.height,
				        s_level2_arrow_left.height)
				        + TG.visibleArea.top;
			}
			if(this.nextBtn){
				this.nextBtn.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.worldButtonNextY, TG.visibleArea.height,
				        s_level2_arrow_right.height)
				        + TG.visibleArea.top;
			}
			if(this.nextBtn === undefined && this.previousBtn === undefined){
				this.levelSurfaceY -= this.settings.gridOffsetYDifferenceNoWorldButtons;
			}
		}else{ //languageSet Event
			this.drawTitle();
			this.drawLevels();
		}
	}
};

TG_LevelMapScreen.prototype.handleEndStep = function(timePassed){
	"use strict";
	var x = tbGame.touchX(0);

	if(this.swiping){
		this.swipeDistance = Math.abs(this.swipeXStart - x);
		if(this.swipeTimer > 0){
			this.swipeSpeed = this.swipeDistance / (this.swipeTimer / 1000);
		}
		this.swipeDirection = (x > this.swipeXStart)? "previous" : "next";
		this.swipeTimer += timePassed;

		this.swipeOffsetX += x - this.swipePreviousX;
		this.swipePreviousX = x;
		this.canvas.drawTokens = true;
	}
	if(this.moving){
		this.swipeOffsetX = tbEase.easeOutQuadratic(this.moveTimer, this.moveStart, this.moveChange, this.moveDuration);
		if(this.moveTimer >= this.moveDuration){
			this.moving = false;
			this.swipeOffsetX = 0;
		}
		this.moveTimer += timePassed;
		this.canvas.drawTokens = true;
	}

	if(this.moving || this.swiping){
		if(this.swipeDirection === "previous" && this.swipeOffsetX >= this.canvas.width / 2){
			if(this.currentWorldIdx - 1 >= 0){
				this.currentWorldIdx -= 1;
				this.noOfLevels = TG.gameFlowSettings.noOfLevels[this.currentWorldIdx];
				this.hasPrevious = (this.currentWorldIdx > 0);
				this.hasNext = (this.currentWorldIdx < TG.gameFlowSettings.noOfLevels.length - 1);
				this.updateWorldButtons();
				this.swipeOffsetX -= this.canvas.width;
				this.drawTitle();
				this.drawLevels();
				this.canvas.drawTokens = true;
				this.moveStart -= this.canvas.width;
			}else{
				this.swipeOffsetX = Math.round(this.canvas.width / 2);
			}
		}else if(this.swipeDirection === "next" && this.swipeOffsetX <= -this.canvas.width / 2){
			if(this.currentWorldIdx + 1 < TG.gameFlowSettings.noOfLevels.length){
				this.currentWorldIdx += 1;
				this.noOfLevels = TG.gameFlowSettings.noOfLevels[this.currentWorldIdx];
				this.hasPrevious = (this.currentWorldIdx > 0);
				this.hasNext = (this.currentWorldIdx < TG.gameFlowSettings.noOfLevels.length - 1);
				this.updateWorldButtons();
				this.swipeOffsetX += this.canvas.width;
				this.drawTitle();
				this.drawLevels();
				this.canvas.drawTokens = true;
				this.moveStart += this.canvas.width;
			}else{
				this.swipeOffsetX = Math.round(-this.canvas.width / 2);
			}
		}
	}

};

TG_LevelMapScreen.prototype.handleDraw = function(){
	"use strict";
	this.titleSurface.drawSimple(this.titleSurfaceX, this.titleSurfaceY);
	this.levelSurface.drawSimple(Math.round(this.levelSurfaceX + this.swipeOffsetX), this.levelSurfaceY);
	this.forceDraw = false;
};

//******************************************************
//*****    Token Resource: TG_LevelEndDialog
//******************************************************

// ***************************************
// Definition of game token TG_LevelEndDialog
// ***************************************

/* global
	TG_MainController
 */

// The constructor for the TG_LevelEndDialog game token.
var TG_LevelEndDialog = function(type, stats, callbackFunc, callbackObj) {
	"use strict";
	// Properties used by the engine
	this.depth = 10;
	this.visible = true;
	this.active = true;
    TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
    var setting;
    this.type = stats["failed"]? "failed" : type;
    this.settings = TG.settings.tg.levelEnd;
    this.gameSettings = this.settings.type[this.type];
    if(TG.orientation === "landscape"){
        for(setting in TG.settings.tg.levelEnd_landscape){
            this.settings[setting] = TG.settings.tg.levelEnd_landscape[setting];
        }
    }
    //apply theme and game specific setting overwrites
    for(setting in TG.settings.theme.levelEnd){
        this.settings[setting] = TG.settings.theme.levelEnd[setting];
    }
    if(TG.settings.theme.levelEnd && TG.settings.theme.levelEnd.type && TG.settings.theme.levelEnd.type[this.type]){
        for(setting in TG.settings.theme.levelEnd.type[this.type]){
            this.settings[setting] = TG.settings.theme.levelEnd.type[this.type][setting];
        }
    }
    if(this.type === "failed"){
        if(TG.settings.game.levelEnd !== undefined && TG.settings.game.levelEnd.type && TG.settings.game.levelEnd.type["failed"] !== undefined){
            for(setting in TG.settings.game.levelEnd.type[this.type]){
                this.gameSettings[setting] = TG.settings.game.levelEnd.type[this.type][setting];
            }
        }
    }else{
        if(TG.settings.game.levelEnd !== undefined && TG.settings.game.levelEnd.type !== undefined){
            for(setting in TG.settings.game.levelEnd.type[this.type]){
                this.gameSettings[setting] = TG.settings.game.levelEnd.type[this.type][setting];
            }
        }
        for(setting in TG.settings.game.levelEnd){
            this.gameSettings[setting] = TG.settings.game.levelEnd[setting];
        }
    }

    this.stats = stats;
    this.callbackFunc = callbackFunc;
    this.callbackObj = callbackObj;

    this.showStarEffect = true;
    this.showCounterEffects = true;

    this.starAudio = [a_levelend_star_01, a_levelend_star_02, a_levelend_star_03];
    this.bonusCounters = [];
    this.timeLine = new tbTimeLine();
    this.timeLine.parent = this;
	// Add it to the game engine
	tbGame.addToken(this, false);
};

TG_LevelEndDialog.prototype.handleBtnClick = function() {
    "use strict";
    var i;
    //force end star animations
    for(i=0; i<this.stars.length; i++){
        this.stars[i].removeAnimator("all", true);
    }
    for(i=0; i<this.starEffects.length; i++){
        tbGame.removeToken(this.starEffects[i]);
    }
    this.starEffects = [];

    //force end medal
    if(this.medal){
        this.medal.removeAnimator("all", true);
    }
    this.medal = undefined;

    //disable buttons
    for(i=0; i<this.buttons.length; i++){
        this.buttons[i].enabled = false;
    }

    //stop time line
    this.timeLine.stop();
    this.timeLine = undefined;

    //start animation out
    this.startOverlayOutAnimation();

    return true;
};

TG_LevelEndDialog.prototype.addTitleItem = function(type){
    "use strict";
    var text;
    switch(type){
        case "title_level": text = TG.dictionary.getText("levelEndScreenTitle_level", "<LEVELENDSCREENTITLE_LEVEL>").replace("<VALUE>", this.stats["level"]); break;
        case "title_endless": text = TG.dictionary.getText("levelEndScreenTitle_endless", "<LEVELENDSCREENTITLE_ENDLESS>").replace("<VALUE>", this.stats["stage"]); break;
        case "title_difficulty": text = TG.dictionary.getText("levelEndScreenTitle_difficulty", "<LEVELENDSCREENTITLE_DIFFICULTY>"); break;
    }
    if(text !== undefined){
        this.drawText(this.settings.titleFont, text,this.settings.titleX, this.settings.titleY, this.settings.titleMaxWidth, this.settings.titleMaxHeight);
    }
};

TG_LevelEndDialog.prototype.addSubTitleItem = function(type){
    "use strict";
    var text;
    switch(type){
        case "subtitle_failed": text = TG.dictionary.getText("levelEndScreenSubTitle_levelFailed", "<LEVEL_FAILED>"); break;
    }
    if(text !== undefined){
        this.drawText(this.settings.subTitleFont, text, this.settings.subTitleX, this.settings.subTitleY);
    }
};

TG_LevelEndDialog.prototype.addStatsObjectToOverlay = function(obj, inLine){
	"use strict";
	var text, header, x, y, fontHeader, fontText, h, w, fontHeaderSettings, fontTextSettings, counter, counterX, counterY, counterHeight;
	header = TG.dictionary.getText(obj.key, "<" + obj.key.toUpperCase() + ">");
	text = obj.animate? obj.toString(obj.startValue) : obj.toString(obj.endValue);

	fontHeaderSettings = this.settings.statsHeaderFont;
	fontHeaderSettings.align = "left";
	fontHeaderSettings.baseline = "top";
	fontHeader = f_default.clone();
	fontHeader.setProperties(fontHeaderSettings);
	if(!inLine){
		// draw header
		if(header !== undefined){
			this.drawText(fontHeaderSettings, header, this.settings.statsHeaderX, this.settings.statsHeaderY);
			y = this.settings.statsHeaderY;
			if(typeof y === "object"){
				y.offset = (y.offset !== undefined)? y.offset + this.settings.statsHeaderMarginBottom : this.settings.statsHeaderMarginBottom;
				y.offset += fontHeader.textHeight(header);
			}else if(typeof y === "number"){
				y += this.settings.statsHeaderMarginBottom + fontHeader.textHeight(header);
			}
		}
		if(text !== undefined){
			fontTextSettings = this.settings.statsFont;
			fontTextSettings.baseline = "top";
			if(obj.animate){
				fontText = f_default.clone();
				fontTextSettings.align = "center";
				fontText.setProperties(fontTextSettings);
				counterX = TG.functions.computeImgCoordinatesFromSettings(this.settings.statsHeaderX, this.canvas.width, this.settings.statsMaxWidth)
				        - this.overlay.x;
				counterY = y - this.overlay.y;
				obj.counter = new TG_Counter(counterX, counterY, this.settings.statsMaxWidth, fontText.textHeight(text), this.depth - 100, obj.startValue,
				        fontText, this.settings.statsCounterMarginX, this.settings.statsCounterMarginY, this.overlay, obj.toString);
				//obj.counter.setBackgroundImage(this.image, counterX, counterY);
			}else{
				this.drawText(fontTextSettings, text, this.settings.statsHeaderX, y);
			}
		}
	}else{
		fontHeader.setBaseline("bottom");
		fontTextSettings = this.settings.statsFont;
		fontTextSettings.align = "left";
		fontTextSettings.baseline = "bottom";
		fontText = f_default.clone();
		fontText.setProperties(fontTextSettings);
		h = 0;
		w = 0;

		// compute width of header and text together to compute x position
		// header
		if(header !== undefined){
			w += fontHeader.textWidth(header) + this.settings.statsHeaderMarginRight;
		}
		if(text !== undefined){
			w += fontText.textWidth(text);
		}
		x = TG.functions.computeImgCoordinatesFromSettings(this.settings.statsHeaderX, this.canvas.width, w) - this.overlay.x;

		// draw header and update x coordinate for x
		if(header !== undefined){
			fontHeader.drawSimple(header, x, this.statsY + fontHeader.getFontSize());
			if (testMode) {
				TG_MainController.drawTextRect(fontHeader, x, this.statsY + fontHeader.getFontSize());
			}
			x += fontHeader.textWidth(header) + this.settings.statsHeaderMarginRight;
			h += fontHeader.textHeight(header);
		}

		// draw text
		if(text !== undefined){
			if(obj.animate){
				counterHeight = fontText.textHeight(text);
				counterY = this.statsY + fontHeader.getFontSize() - counterHeight;
				obj.counter = new TG_Counter(x, counterY, this.settings.statsMaxWidth, counterHeight, this.depth - 100, obj.startValue, fontText,
				        this.settings.statsCounterMarginX, this.settings.statsCounterMarginY, this.overlay, obj.toString);
				//obj.counter.setBackgroundImage(this.image, x, counterY);
				h = Math.max(h, counterHeight);
			}else{
				fontText.drawSimple(text, x, this.statsY + fontHeader.getFontSize() + this.settings.statsInlineOffset);
				if (testMode) {
					TG_MainController.drawTextRect(fontText, x, this.statsY + fontHeader.getFontSize() + this.settings.statsInlineOffset);
				}
				h = Math.max(h, fontText.textHeight(text));
			}
		}

		// update global y variable
		if(h > 0){
			this.statsY += h + this.settings.statsHeaderMarginBottom;
		}
	}
};

TG_LevelEndDialog.prototype.addStatsItem = function(type, inLine){
    "use strict";
    var text, header, x, y, fontHeader, fontText, h, w, fontHeaderSettings, fontTextSettings, counter, counterX, counterY, counterHeight;

    switch(type){
        case "totalScore":
            text = ""+ this.stats["totalScore"];
            header = TG.dictionary.getText("levelEndScreenTotalScore", "<LEVENENDSCREENTOTALSCORE>");
            counter = 0;
        break;
        case "highScore":
            header = TG.dictionary.getText("levelEndScreenHighScore", "<LEVENENDSCREENHIGHSCORE>");
            text = "" + this.stats["highScore"];
        break;
        case "timeLeft":
            header = TG.dictionary.getText("levelEndScreenTimeLeft", "<LEVENENDSCREENTIMELEFT>");
            text = "" + this.stats["timeLeft"];
        break;
        case "timeBonus":
            header = TG.dictionary.getText("levelEndScreenTimeBonus", "<LEVENENDSCREENTIMEBONUS>");
            text = "" + this.stats["timeBonus"];
            counter = this.stats["timeBonus"];
        break;
    }

    fontHeaderSettings = this.settings.statsHeaderFont;
    fontHeaderSettings.align = "left";
    fontHeaderSettings.baseline = "top";
    fontHeader = f_default.clone();
    fontHeader.setProperties(fontHeaderSettings);
    if(!inLine){
        if(header !== undefined){
            this.drawText(fontHeaderSettings, header, this.settings.statsHeaderX, this.settings.statsHeaderY);
            y = this.settings.statsHeaderY;
            if(typeof y === "object") {
                y.offset = (y.offset !== undefined) ? y.offset + this.settings.statsHeaderMarginBottom : this.settings.statsHeaderMarginBottom;
                y.offset += fontHeader.textHeight(header);
            }else if (typeof y === "number") {
                y += this.settings.statsHeaderMarginBottom + fontHeader.textHeight(header);
            }
        }
        if(text !== undefined){
            fontTextSettings = this.settings.statsFont;
            fontTextSettings.baseline = "top";
            if(counter !== undefined){
                fontText = f_default.clone();
                fontTextSettings.align = "center";
                fontText.setProperties(fontTextSettings);
                counterX = TG.functions.computeImgCoordinatesFromSettings(this.settings.statsHeaderX, this.canvas.width, this.settings.statsMaxWidth) - this.overlay.x;
                counterY = y - this.overlay.y;
                counter = new TG_Counter(counterX, counterY, this.settings.statsMaxWidth, fontText.textHeight(text), this.depth - 100, counter, fontText, this.settings.statsCounterMarginX, this.settings.statsCounterMarginY, this.overlay);
                //counter.setBackgroundImage(this.image, counterX, counterY);
            }else{
                this.drawText(fontTextSettings, text, this.settings.statsHeaderX, y);
            }
        }
    }else{
        fontHeader.setBaseline("bottom");
        fontTextSettings = this.settings.statsFont;
        fontTextSettings.align = "left";
        fontTextSettings.baseline = "bottom";
        fontText = f_default.clone();
        fontText.setProperties(fontTextSettings);
        h = 0;
        w = 0;

        //compute width of header and text together to compute x position header
        if(header !== undefined){
            w += fontHeader.textWidth(header) + this.settings.statsHeaderMarginRight;
        }
        if(text !== undefined){
            w += fontText.textWidth(text);
        }
        x = TG.functions.computeImgCoordinatesFromSettings(this.settings.statsHeaderX, this.canvas.width, w) - this.overlay.x;

        //draw header and update x coordinate for x
        if(header !== undefined){
            fontHeader.drawSimple(header, x, this.statsY + fontHeader.getFontSize());
            if (testMode) {
				TG_MainController.drawTextRect(fontHeader, x, this.statsY + fontHeader.getFontSize());
			}
            x += fontHeader.textWidth(header) + this.settings.statsHeaderMarginRight;
            h += fontHeader.textHeight(header);
        }

        //draw text
        if(text !== undefined){
            if(counter !== undefined){
                counterHeight = fontText.textHeight(text);
                counterY = this.statsY + fontHeader.getFontSize() - counterHeight;
                counter = new TG_Counter(x, counterY, this.settings.statsMaxWidth, counterHeight, this.depth - 100, counter, fontText, this.settings.statsCounterMarginX, this.settings.statsCounterMarginY, this.overlay);
                //counter.setBackgroundImage(this.image, x, counterY);
                h = Math.max(h, counterHeight);
            }else{
                fontText.drawSimple(text, x, this.statsY + fontHeader.getFontSize() + this.settings.statsInlineOffset);
                if (testMode) {
    				TG_MainController.drawTextRect(fontText, x, this.statsY + fontHeader.getFontSize() + this.settings.statsInlineOffset);
    			}
                h = Math.max(h, fontText.textHeight(text));
            }
        }

        //update global y variable
        if(h > 0){
            this.statsY += h + this.settings.statsHeaderMarginBottom;
        }
    }

    if(counter instanceof TG_Counter){
        if(type === "totalScore"){
            this.totalScoreCounter = counter;
        }else{
            this.bonusCounters.push(counter);
        }
    }
};

TG_LevelEndDialog.prototype.addEmphasizedStatsObjectToOverlay = function(obj){
    "use strict";
    var header, text, fontText, counter, counterX, counterY, fontTextSettings;
    header = TG.dictionary.getText(obj.key, "<" + obj.key.toUpperCase() + ">");
	text = obj.animate? obj.toString(obj.startValue) : obj.toString(obj.endValue);
    if(header !== undefined){
        this.drawText(this.settings.emphasizedStatsHeaderFont, header, this.settings.emphasizedStatsHeaderX, this.settings.emphasizedStatsHeaderY);
    }
    if(text !== undefined){
        if(obj.animate){
            fontText = f_default.clone();
            fontTextSettings = this.settings.emphasizedStatsFont;
            if (!this.settings.emphasizedStatsFontDontOverrideTextAlign) {
            	//By default the text font align setting is overridden with center,
            	//   but we are afraid to disable this therefore you can turn this
            	//   behavior off by setting emphasizedStatsFontDontOverrideTextAlign
            	//   to true
            	fontTextSettings.align = "center";
            }
            fontText.setProperties(fontTextSettings);
            counterX = TG.functions.computeImgCoordinatesFromSettings(this.settings.emphasizedStatsX, this.canvas.width, this.settings.emphasizedStatsMaxWidth) - this.overlay.x;
            counterY = TG.functions.computeImgCoordinatesFromSettings(this.settings.emphasizedStatsY, this.canvas.height, this.settings.emphasizedStatsMaxHeight) - this.overlay.y;
            obj.counter = new TG_Counter(counterX, counterY, this.settings.emphasizedStatsMaxWidth, this.settings.emphasizedStatsMaxHeight, this.depth - 100, obj.startValue, fontText, this.settings.statsCounterMarginX, this.settings.statsCounterMarginY, this.overlay, obj.toString);
            //obj.counter.setBackgroundImage(this.image, counterX, counterY);
        }else{
            this.drawText(this.settings.emphasizedStatsFont, text, this.settings.emphasizedStatsX, this.settings.emphasizedStatsY);
        }
    }
};

TG_LevelEndDialog.prototype.addEmphasizedStatsItem = function(type){
    "use strict";
    var header, text, fontText, counter, counterX, counterY, fontTextSettings;
    switch(type){
        case "totalScore":
            header = TG.dictionary.getText("levelEndScreenTotalScore", "<LEVENENDSCREENTOTALSCORE>");
            text = "" + this.stats["totalScore"];
            counter = 0;
        break;
        case "timeLeft":
            header = TG.dictionary.getText("levelEndScreenTimeLeft", "<LEVENENDSCREENTIMELEFT>");
            text = "" + this.stats["timeLeft"];
        break;
    }
    if(header !== undefined){
        this.drawText(this.settings.emphasizedStatsHeaderFont, header, this.settings.emphasizedStatsHeaderX, this.settings.emphasizedStatsHeaderY);
    }
    if(text !== undefined){
        if(counter !== undefined){
            fontText = f_default.clone();
            fontTextSettings = this.settings.emphasizedStatsFont;
            fontTextSettings.align = "center";
            fontText.setProperties(fontTextSettings);
            counterX = TG.functions.computeImgCoordinatesFromSettings(this.settings.emphasizedStatsX, this.canvas.width, this.settings.emphasizedStatsMaxWidth) - this.overlay.x;
            counterY = TG.functions.computeImgCoordinatesFromSettings(this.settings.emphasizedStatsY, this.canvas.height, this.settings.emphasizedStatsMaxHeight) - this.overlay.y;
            counter = new TG_Counter(counterX, counterY, this.settings.emphasizedStatsMaxWidth, this.settings.emphasizedStatsMaxHeight, this.depth - 100, counter, fontText, this.settings.statsCounterMarginX, this.settings.statsCounterMarginY, this.overlay);
            //counter.setBackgroundImage(this.image, counterX, counterY);
        }else{
            this.drawText(this.settings.emphasizedStatsFont, text, this.settings.emphasizedStatsX, this.settings.emphasizedStatsY);
        }
    }

    if(counter instanceof TG_Counter){
        if(type === "totalScore"){
            this.totalScoreCounter = counter;
        }else{
            this.bonusCounters.push(counter);
        }
    }
};

TG_LevelEndDialog.prototype.drawText = function(fontProperties, text, xSetting, ySetting, maxWidth, maxHeight){
    "use strict";
    var width, height, x, y, maxFontSize,
        font = f_default.clone();
    font.setProperties(fontProperties);
    if(maxWidth !== undefined && maxHeight !== undefined){
        maxFontSize = font.textFitSize(text, maxWidth, maxHeight, maxWidth);
        if(font.getFontSize() > maxFontSize){
            font.setFontSize(maxFontSize);
        }
    }
    width = font.textWidth(text);
    height = font.textHeight(text);
    x = TG.functions.computeTextCoordinatesFromSettings(xSetting, this.canvas.width, width, font.getAlign()) - this.overlay.x;
    y = TG.functions.computeTextCoordinatesFromSettings(ySetting, this.canvas.height, height, font.getBaseline()) - this.overlay.y;
    font.drawSimple(text, x, y, maxWidth);

    if (testMode) {
    	TG_MainController.drawTextRect(font, x, y, maxWidth, maxHeight);
    }
};

TG_LevelEndDialog.prototype.addBackButton = function(type){
    "use strict";
    var backButtonImage, backButtonCallback, x, y, self = this;
    switch(type) {
        case "retry":
            backButtonImage = s_btn_small_retry;
            backButtonCallback = function () {
                self.callbackParam = "retry";
                self.handleBtnClick();
            };
            break;
        case "exit":
            backButtonImage = s_btn_small_exit;
            backButtonCallback = function () {
                self.callbackParam = "exit";
                self.handleBtnClick();
            };
        break;
    }
    if (backButtonImage !== undefined) {
        x = TG.functions.computeImgCoordinatesFromSettings(this.settings.backButtonX, this.canvas.width, backButtonImage.width) - this.overlay.x;
        y = TG.functions.computeImgCoordinatesFromSettings(this.settings.backButtonY, this.canvas.height, backButtonImage.height) - this.overlay.y;
        this.buttons.push(new TG_ButtonBase(x, y, this.depth - 20, new tbMaskImage(backButtonImage), [backButtonImage], backButtonCallback, this.overlay));
    }
};

TG_LevelEndDialog.prototype.addForwardButton = function(type){
    "use strict";
    var forwardButtonImage, forwardButtonCallback, x, y, self = this;
    switch(type) {
        case "retry":
            forwardButtonImage = s_btn_big_restart;
            forwardButtonCallback = function () {
                self.callbackParam = "retry";
                self.handleBtnClick();
            };
            break;
        case "exit":
            forwardButtonImage = s_btn_big_start;
            forwardButtonCallback = function () {
                self.callbackParam = "exit";
                self.handleBtnClick();
            };
            break;
        case "next":
            forwardButtonImage = s_btn_big_start;
            forwardButtonCallback = function () {
                self.callbackParam = "next";
                self.handleBtnClick();
            };
        break;
    }
    if (forwardButtonImage !== undefined) {
        x = TG.functions.computeImgCoordinatesFromSettings(this.settings.forwardButtonX, this.canvas.width, forwardButtonImage.width) - this.overlay.x;
        y = TG.functions.computeImgCoordinatesFromSettings(this.settings.forwardButtonY, this.canvas.height, forwardButtonImage.height) - this.overlay.y;
        this.buttons.push(new TG_ButtonBase(x, y, this.depth - 20, new tbMaskImage(forwardButtonImage), [forwardButtonImage], forwardButtonCallback, this.overlay));
    }
};

// handleAdd is called when the token is (re-) added to the game.
TG_LevelEndDialog.prototype.handleAdd = function() {
	"use strict";
	this.timer = 0;
    this.stars = [];
    this.starEffects = [];
    this.buttons = [];
    this.canvas.drawTokens = true;
    this.callbackParam = "";
    this.failed = (this.stats["failed"])? true: false;
    this.showStars = (this.gameSettings.showStars && !this.failed);
    this.showMedal = (this.gameSettings.showMedal && !this.failed && this.stats.improvedHighScore);
    this.bonusCounterNextIdx = 0;
    this.alpha = 0;
    this.alphaTimer = 0;
    //pause all tokens
    TG.controller._pauseAll(this);

    //define local variables and helper functions
    var moment, updateHighScoreBtn, x, y, i, totalHeight, fontHeader, fontText, length, totalScoreCounterDuration, bonusMoment, bonusCounterCallback, obj,
        self = this;

       switch (this.gameSettings.backgroundImageType) {
           case "failed": this.image = this.settings.overlayImages.levelFail; break;
           case "level": this.image = this.settings.overlayImages.levelWin; break;
           case "difficulty": this.image = this.settings.overlayImages.difficulty; break;
           case "endless": this.image = this.settings.overlayImages.endless; break;
       }


    //create overlay surface
    this.overlay = new TG_AnimatedImage(this.depth - 10, this.layer, new tbSurface(this.image.width, this.image.height));
    this.overlay.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageOffsetX, this.canvas.width, this.image.width);
    this.overlay.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageOffsetY, this.canvas.height, this.image.height);
    this.overlay.image.setTarget();

	    // draw overlay background
	this.image.drawSimple(0, 0, 0);
	if(!this.failed && this.showStars){
		x = TG.functions.computeImgCoordinatesFromSettings(this.settings.star1X, this.canvas.width, 0) - this.overlay.x;
		y = TG.functions.computeImgCoordinatesFromSettings(this.settings.star1Y, this.canvas.height, s_star01_fill.height) - this.overlay.y
		        + Math.round(s_star01_empty.height / 2);
		s_star01_empty.drawSimple(0, x, y);
		x = TG.functions.computeImgCoordinatesFromSettings(this.settings.star2X, this.canvas.width, 0) - this.overlay.x;
		y = TG.functions.computeImgCoordinatesFromSettings(this.settings.star2Y, this.canvas.height, s_star02_fill.height) - this.overlay.y
		        + Math.round(s_star02_empty.height / 2);
		s_star02_empty.drawSimple(0, x, y);
		x = TG.functions.computeImgCoordinatesFromSettings(this.settings.star3X, this.canvas.width, 0) - this.overlay.x;
		y = TG.functions.computeImgCoordinatesFromSettings(this.settings.star3Y, this.canvas.height, s_star03_fill.height) - this.overlay.y
		        + Math.round(s_star03_empty.height / 2);
		s_star03_empty.drawSimple(0, x, y);
	}

    // add items to overlay
    if(this.gameSettings.titleItem !== undefined){
        this.addTitleItem(this.gameSettings.titleItem);
    }
    if(this.gameSettings.subTitleItem !== undefined){
        this.addSubTitleItem(this.gameSettings.subTitleItem);
    }

    // add emphasized stats object/item
	this.statsObjects = {};
	if(this.stats.emphasizedStatsObject !== undefined){
		obj = this.stats.emphasizedStatsObject;
		if(obj.visible){
			this.addEmphasizedStatsObjectToOverlay(obj);
		}
		this.statsObjects[obj.id] = obj;
	}else if(this.gameSettings.emphasizedStatsItem !== undefined){
		this.addEmphasizedStatsItem(this.gameSettings.emphasizedStatsItem);
	}

    // add stats objects/items
    if(this.stats.statsObjects !== undefined){
		length = this.stats.statsObjects.length;
		fontHeader = f_default.clone();
		fontHeader.setProperties(this.settings.statsHeaderFont);
		fontText = f_default.clone();
		fontText.setProperties(this.settings.statsFont);
		totalHeight = Math.max(fontHeader.textHeight("g"), fontText.textHeight("g")) * length + this.settings.statsHeaderMarginBottom * (length - 1);
		this.statsY = TG.functions.computeImgCoordinatesFromSettings(this.settings.statsHeaderY, this.canvas.height, totalHeight) - this.overlay.y;
		for(i = 0; i < length; i++){
			obj = this.stats.statsObjects[i];
			if(obj.visible){
				this.addStatsObjectToOverlay(this.stats.statsObjects[i], length > 1);
			}
			this.statsObjects[obj.id] = obj;
		}
	}else if(this.gameSettings.statsItems !== undefined){
		if(typeof this.gameSettings.statsItems === "string"){
			this.addStatsItem(this.gameSettings.statsItems, this.settings.forceStatsInline);
		}else if(this.gameSettings.statsItems instanceof Array){
			length = this.gameSettings.statsItems.length;
			fontHeader = f_default.clone();
			fontHeader.setProperties(this.settings.statsHeaderFont);
			fontText = f_default.clone();
			fontText.setProperties(this.settings.statsFont);
			totalHeight = Math.max(fontHeader.textHeight("g"), fontText.textHeight("g")) * length + this.settings.statsHeaderMarginBottom * (length - 1);
			this.statsY = TG.functions.computeImgCoordinatesFromSettings(this.settings.statsHeaderY, this.canvas.height, totalHeight) - this.overlay.y;
			for(i = 0; i < length; i++){
				this.addStatsItem(this.gameSettings.statsItems[i], length > 1 || this.settings.forceStatsInline);
			}
		}
	}
    this.overlay.image.resetTarget();

    // add forward/back buttons
    this.addBackButton(this.gameSettings.backButtonType);
    this.addForwardButton(this.gameSettings.forwardButtonType);

    //add highscore button
    if(TG.controller.useExternalHighScoreSystem){
        x = TG.functions.computeImgCoordinatesFromSettings(self.settings.highScoreBtnX, self.canvas.width, self.settings.highScoreBtnWidth) - this.overlay.x;
        y = TG.functions.computeImgCoordinatesFromSettings(this.settings.highScoreBtnY, this.canvas.height, this.settings.closeButtonMaskHeight) - this.overlay.y;
        this.highScoreBtn = new TG_ButtonText("default_text", x, y, self.depth - 20, "levelEndScreenViewHighscoreBtn", self.settings.highScoreBtnWidth, {
		    callbackFunc: function(){
			    TG_HighScores.submitHighScore(self.stats["totalScore"]);
		    },
		    immediate: true
		}, self.overlay);
        this.buttons.push(this.highScoreBtn);
        updateHighScoreBtn = function(isHighScore){
            if(isHighScore){
                self.highScoreBtn.updateText("levelEndScreenSubmitHighscoreBtn");
                self.isHighScore = isHighScore;
            }
        };
        TG_HighScores.checkHighScore(this.stats["totalScore"], updateHighScoreBtn);
    }

    //add close button
    x = TG.functions.computeImgCoordinatesFromSettings(this.settings.closeButtonX, this.canvas.width, this.settings.closeButtonMaskWidth) - this.overlay.x;
    y = TG.functions.computeImgCoordinatesFromSettings(this.settings.closeButtonY, this.canvas.height, this.settings.closeButtonMaskHeight) - this.overlay.y;

    this.buttons.push(new TG_ButtonBase(x, y, this.depth - 20,
        new tbMaskRectangle(0,0,this.settings.closeButtonMaskWidth, this.settings.closeButtonMaskHeight),
        undefined, function(){self.callbackParam = "exit"; self.handleBtnClick();}, this.overlay));
    for(i=0; i<this.buttons.length; i++){
        this.buttons[i].enabled = false;
    }

    this.overlay.y = -this.overlay.height;

    //setup timeLine
    moment = this.settings.textureSwapDelay;

    //start overlay animation in
    this.timeLine.addMoment(moment, this.startOverlayInAnimation);
    moment += this.settings.animInDuration;
    bonusMoment = 0;

    totalScoreCounterDuration = this.settings.totalScoreCounterDuration;
	if(this.showStars){
		totalScoreCounterDuration = Math.max(totalScoreCounterDuration, this.settings.starFillDuration + this.settings.starFillDelay * this.stats["stars"]);
	}

	if(this.totalScoreCounter){
		this.timeLine.addMoment(moment + this.settings.totalScoreCounterDelay, function(m, tl){
			tl.parent.totalScoreCounter.startCount(tl.parent.stats["totalScore"], totalScoreCounterDuration, tbEase.easeLinear);
		});
		bonusMoment = moment + this.settings.totalScoreCounterDelay + totalScoreCounterDuration;
		if(this.bonusCounters.length > 0){
			bonusCounterCallback = function(m, tl){
				var self = tl.parent, bonusCounter = self.bonusCounters[self.bonusCounterNextIdx];
				self.totalScoreCounter.startCount(self.totalScoreCounter.currentValue() + bonusCounter.currentValue(), self.settings.bonusCounterDuration,
				        tbEase.easeLinear);
				bonusCounter.startCount(0, self.settings.bonusCounterDuration, tbEase.easeLinear);
				self.bonusCounterNextIdx += 1;
			};
			for(i = 0; i < this.bonusCounters.length; i++){
				bonusMoment += this.settings.bonusCounterDelay;
				this.timeLine.addMoment(bonusMoment, bonusCounterCallback);
			}
			bonusMoment += this.settings.bonusCounterDuration;
		}
	}
	if(this.statsObjects !== undefined){
		bonusMoment = moment;
		bonusCounterCallback = function(m, tl){
			var self = tl.parent, statsObj = self.statUpdaters[self.bonusCounterNextIdx || 0], otherStatsObj = self.statsObjects[statsObj.statToUpdate];
			if(statsObj.updateFunction !== undefined){
				if(otherStatsObj.visible && otherStatsObj.animate){
					otherStatsObj.counter.startCount(statsObj.updateFunction(otherStatsObj.counter.currentValue()), self.settings.bonusCounterDuration,
				        tbEase.easeLinear);
				}else{
					otherStatsObj.endValue = statsObj.updateFunction(otherStatsObj.endValue);
				}
			}
			if(statsObj.visible && statsObj.animate){
				statsObj.counter.startCount(statsObj.endValue, self.settings.bonusCounterDuration, tbEase.easeLinear);
			}
			self.bonusCounterNextIdx += 1;
		};
		this.statUpdaters = [];
		if(this.stats.emphasizedStatsObject !== undefined && this.stats.emphasizedStatsObject.updateFunction !== undefined){
			this.timeLine.addMoment(moment + this.settings.totalScoreCounterDelay, bonusCounterCallback);
			this.statUpdaters.push(this.stats.emphasizedStatsObject);
			bonusMoment += this.settings.totalScoreCounterDelay + bonusCounterDuration;
		}
		if(this.stats.statsObjects !== undefined){
			for(i = 0; i < this.stats.statsObjects.length; i++){
				obj = this.stats.statsObjects[i];
				if(obj.updateFunction !== undefined){
					bonusMoment += this.settings.bonusCounterDelay;
					this.timeLine.addMoment(bonusMoment, bonusCounterCallback);
					this.statUpdaters.push(obj);
					bonusMoment += this.settings.bonusCounterDuration;
				}
			}
		}
	}


    // start star animations
    if(this.showStars){
        for(i=0; i<this.stats["stars"]; i++){
            moment += this.settings.starFillDelay;
            this.timeLine.addMoment(moment, this.startStarAnimation);
            this.timeLine.addMoment(moment, this.startStarEffectAnimation);
        }
        moment += this.settings.starFillDuration;
    }

    //start medal animation
    moment = Math.max(moment, bonusMoment);
    if(this.showMedal){
        moment += this.settings.medalDelay;
        this.timeLine.addMoment(moment, this.startMedalShadowAnimation);
        this.timeLine.addMoment(moment, this.startMedalAnimation);
        this.timeLine.addMoment(moment + this.settings.medalEffectDelay, this.startMedalEffectAnimation);
    }

    //inform portals that level end screen is shown
    this.timeLine.addMoment(moment + this.settings.moreGamesOverlayDelay, TG.hooks.informLevelEndScreenShown);

    TG.hooks.informLevelEndScreenStart();

    //start timeLine
    this.timeLine.start();

    //play sound
    if(this.failed){
        tbAudio.play(a_levelend_fail);
    }else{
        tbAudio.play(a_levelComplete);
    }
};

//handleBeginStep is called each step before processing other events.
TG_LevelEndDialog.prototype.handleBeginStep = function(timePassed){
	"use strict";
	this.alpha = this.settings.fadeAlpha * this.alphaTimer/this.settings.fadeDuration;
	this.alphaTimer += timePassed;
	if(this.alpha >= this.settings.fadeAlpha){
		this.alpha = this.settings.fadeAlpha;
		this.active = false;
	}
	this.canvas.drawTokens = true;
};

TG_LevelEndDialog.prototype.startOverlayInAnimation = function(moment, tl){
    "use strict";
    var self = tl.parent, end, direction,
        callback = function(){
            var i;
            for(i=0; i<self.buttons.length; i++){
                self.buttons[i].enabled = true;
            }
        };
    switch(self.settings.animInDirection){
        case "fromLeft":
            direction = "horizontal";
            end = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetX, self.canvas.width, self.overlay.width);
            self.overlay.x = -self.overlay.width;
            self.overlay.y = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetY, self.canvas.height, self.overlay.height) + Math.abs(TG.canvasTopOffset);
        break;
        case "fromRight":
            direction = "horizontal";
            end = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetX, self.canvas.width, self.overlay.width);
            self.overlay.x = self.canvas.width;
            self.overlay.y = TG.functions.computeImgCoordinatesFromSettings(this.parent.settings.overlayImageOffsetY, self.canvas.height, selft.overlay.height) + Math.abs(TG.canvasTopOffset);
        break;
        case "fromBottom":
            direction = "vertical";
            end = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetY, self.canvas.height, self.overlay.height) + Math.abs(TG.canvasTopOffset);
            self.overlay.x = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetX, self.canvas.width, self.overlay.width);
            self.overlay.y = self.canvas.height + self.overlay.height;
        break;
        default:
            direction = "vertical";
            end = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetY, self.canvas.height, self.overlay.height) + Math.abs(TG.canvasTopOffset);
            self.overlay.x = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetX, self.canvas.width, self.overlay.width);
            self.overlay.y = -self.overlay.height;
        break;
    }

    if(direction === "vertical"){
        self.overlay.addAnimator("y", end, self.settings.animInDuration, self.settings.animInEase, callback);
    }else{
        self.overlay.addAnimator("x", end, self.settings.animInDuration, self.settings.animInEase, callback);
    }
};

TG_LevelEndDialog.prototype.startOverlayOutAnimation = function(){
    "use strict";
    var self = this, end, direction,
        callback = function(){
            tbGame.removeToken(self);
            if(self.callbackObj){
                self.callbackFunc.call(self.callbackObj, self.callbackParam);
            }else{
                self.callbackFunc(self.callbackParam);
            }
        };
    switch(self.settings.animOutDirection){
        case "toLeft":
            direction = "horizontal";
            end = -self.overlay.width;
        break;
        case "toRight":
            direction = "horizontal";
            end = self.canvas.width;
        break;
        case "toBottom":
            direction = "vertical";
            end = self.canvas.height + self.overlay.height;
        break;
        default:
            direction = "vertical";
            end = -self.overlay.height;
        break;
    }

    if(direction === "vertical"){
        self.overlay.addAnimator("y", end, self.settings.animOutDuration, self.settings.animOutEase, callback);
    }else{
        self.overlay.addAnimator("x", end, self.settings.animOutDuration, self.settings.animOutEase, callback);
    }
};

TG_LevelEndDialog.prototype.startStarAnimation = function(moment, tl){
    "use strict";
    var star, self = tl.parent, top = Math.abs(TG.canvasTopOffset);
    function addStarToOverlay(starIdx) {
        var x, y, image;
        self.overlay.image.setTarget();
        switch (starIdx) {
            case 1:
                image = s_star01_fill;
                x = TG.functions.computeImgCoordinatesFromSettings(self.settings.star1X, self.canvas.width, 0) - self.overlay.x;// + Math.round(s_star01_empty.width/2);
                y = TG.functions.computeImgCoordinatesFromSettings(self.settings.star1Y, self.canvas.height, s_star01_fill.height) - self.overlay.y + top + Math.round(s_star01_empty.height/2);
                break;
            case 2:
                image = s_star02_fill;
                x = TG.functions.computeImgCoordinatesFromSettings(self.settings.star2X, self.canvas.width, 0) - self.overlay.x;// + Math.round(s_star02_empty.width/2);
                y = TG.functions.computeImgCoordinatesFromSettings(self.settings.star2Y, self.canvas.height, s_star01_fill.height) - self.overlay.y + top + Math.round(s_star02_empty.height/2);
                break;
            case 3:
                image = s_star03_fill;
                x = TG.functions.computeImgCoordinatesFromSettings(self.settings.star3X, self.canvas.width, 0) - self.overlay.x;// + Math.round(s_star03_empty.width/2);
                y = TG.functions.computeImgCoordinatesFromSettings(self.settings.star3Y, self.canvas.height, s_star01_fill.height) - self.overlay.y + top + Math.round(s_star03_empty.height/2);
                break;
        }
        image.drawSimple(0,x,y);
        self.overlay.image.resetTarget();
        self.overlay.forceDraw = true;
        tbGame.removeToken(self.stars[starIdx-1]);
    }
    if(self.stars.length < self.stats["stars"]) {
        switch (self.stars.length + 1) {
            case 1:
                star = new TG_AnimatedImage(self.depth - 30, TG.frameworkEffectsLayer, s_star01_fill);
                star.x = TG.functions.computeImgCoordinatesFromSettings(self.settings.star1X, self.canvas.width, 0);
                star.y = TG.functions.computeImgCoordinatesFromSettings(self.settings.star1Y, self.canvas.height, s_star01_fill.height) + top + Math.round(s_star01_empty.height/2);
                break;
            case 2:
                star = new TG_AnimatedImage(self.depth - 30, TG.frameworkEffectsLayer, s_star02_fill);
                star.x = TG.functions.computeImgCoordinatesFromSettings(self.settings.star2X, self.canvas.width, 0);
                star.y = TG.functions.computeImgCoordinatesFromSettings(self.settings.star2Y, self.canvas.height, s_star02_fill.height) + top + Math.round(s_star02_empty.height/2);
                break;
            case 3:
                star = new TG_AnimatedImage(self.depth - 30, TG.frameworkEffectsLayer, s_star03_fill);
                star.x = TG.functions.computeImgCoordinatesFromSettings(self.settings.star3X, self.canvas.width, 0);
                star.y = TG.functions.computeImgCoordinatesFromSettings(self.settings.star3Y, self.canvas.height, s_star03_fill.height) + top + Math.round(s_star03_empty.height/2);
                break;
        }
        star.xScale = self.settings.starFillStartScale;
        star.yScale = self.settings.starFillStartScale;
        star.alpha = self.settings.starFillStartAlpha;
        star.addAnimator("scale", 1, self.settings.starFillScaleDuration, tbEase.easeOutOvershoot, function(){addStarToOverlay(self.stars.length);});
        star.addAnimator("alpha", 1, self.settings.starFillAlphaDuration, tbEase.easeInQuadratic);
        self.stars.push(star);
        tbAudio.play(self.starAudio[self.stars.length - 1]);
    }
};

TG_LevelEndDialog.prototype.startStarEffectAnimation = function(moment, tl){
    "use strict";
    var self = tl.parent, star, starEffect;
    star = self.stars[self.starEffects.length];
    starEffect = new TG_AnimatedImage(self.depth - 50, TG.frameworkEffectsLayer, s_sfx_star);
    starEffect.x = star.x;
    starEffect.y = star.y;
    starEffect.addAnimator("subImage", s_sfx_star.number - 1, self.settings.starEffectDuration, undefined, function(){tbGame.removeToken(starEffect);});
    self.starEffects.push(starEffect);
};

TG_LevelEndDialog.prototype.startMedalAnimation = function(moment, tl) {
    "use strict";
    var self = tl.parent, surfaces, surf, font, maxFontSize, text, x, y, i;

    surfaces = [];

    //determine font properties
    font = f_default.clone();
    text = TG.dictionary.getText("levelEndScreenMedal", "<LEVELENDSCREENMEDAL>");
    if(self.settings.medalTextFont){
        font.setProperties(self.settings.medalTextFont);
    }
    maxFontSize = font.textFitSize(text, self.settings.medalTextMaxWidth, self.settings.medalTextMaxHeight, true);
    if(maxFontSize < font.getFontSize()){
        font.setFontSize(maxFontSize);
    }
    x = TG.functions.computeTextCoordinatesFromSettings(self.settings.medalTextOffsetX, s_medal_shine.width, font.textWidth(text, self.settings.medalTextMaxWidth), font.getAlign());
    y = TG.functions.computeTextCoordinatesFromSettings(self.settings.medalTextOffsetY, s_medal_shine.height, font.textHeight(text, self.settings.medalTextMaxWidth), font.getBaseline());

    //draw surface
    for(i=0; i<s_medal_shine.number; i++){
        surf = new tbSurface(s_medal_shine.width, s_medal_shine.height);
        surf.setTarget();
        s_medal_shine.drawSimple(i, 0, 0);
        font.drawSimple(text, x, y, self.settings.medalTextMaxWidth);
        surf.resetTarget();
        surfaces.push(surf);
    }

    //created animated surface
    self.medal = new TG_AnimatedImage(self.depth - 120, TG.frameworkEffectsLayer, surfaces);
    self.medal.originX = self.settings.medalImageOriginX;
    self.medal.originY = self.settings.medalImageOriginY;
    self.medal.x = TG.functions.computeImgCoordinatesFromSettings({align:"center"}, self.overlay.canvas.width, self.medal.width) - self.overlay.x;
    self.medal.y = TG.functions.computeImgCoordinatesFromSettings(self.settings.medalY, self.medal.canvas.height, self.medal.height)- self.overlay.y + Math.abs(TG.canvasTopOffset);
    x = TG.functions.computeImgCoordinatesFromSettings(self.settings.medalX, self.medal.canvas.width, self.medal.width) - self.overlay.x;
    self.medal.xScale = self.settings.medalScale;
    self.medal.yScale = self.settings.medalScale;
    self.medal.parent = self.overlay;
    self.medal.alpha = 0;
    self.medal.centerOrigin = true;
    self.medal.addAnimator("scale", 1, self.settings.medalDuration, tbEase.easeInQuadratic, function(){tbGame.removeToken(self.medalShadow); self.medalShadow = undefined;});
    self.medal.addAnimator("x", x, self.settings.medalDuration, tbEase.easeInQuadratic);
    self.medal.addAnimator("alpha", 1, 0, tbEase.easeInQuadratic);
    self.medal.addAnimator("subImage", s_medal_shine.number, self.settings.medalShineDuration, tbEase.easeInQuadratic, undefined, self.settings.medalDuration + self.settings.medalEffectDuration + self.settings.medalShineDelay, true, self.settings.medalShineLoopInterval);
};

TG_LevelEndDialog.prototype.startMedalShadowAnimation = function(moment, tl) {
    "use strict";
    var y, self = tl.parent;
    self.medalShadow = new TG_AnimatedImage(self.depth - 110, TG.frameworkEffectsLayer, s_medal_shadow);
    self.medalShadow.y = TG.functions.computeImgCoordinatesFromSettings(self.settings.medalY, self.medalShadow.canvas.height, s_medal_shadow.height)- self.overlay.y + self.settings.medalShadowOffsetY;
    self.medalShadow.originX = self.settings.medalImageOriginX;
    self.medalShadow.originY = self.settings.medalImageOriginY;
    self.medalShadow.x = TG.functions.computeImgCoordinatesFromSettings(self.settings.medalX, self.medalShadow.canvas.width, self.medalShadow.width) - self.overlay.x;
    y = TG.functions.computeImgCoordinatesFromSettings(self.settings.medalY, self.medalShadow.canvas.height, s_medal_shadow.height)- self.overlay.y + Math.abs(TG.canvasTopOffset);
    self.medalShadow.xScale = self.settings.medalScale*self.settings.medalShadowScaleFactor;
    self.medalShadow.yScale = self.settings.medalScale*self.settings.medalShadowScaleFactor;
    self.medalShadow.alpha = 0;
    self.medalShadow.parent = self.overlay;
    self.medalShadow.addAnimator("y", y, self.settings.medalDuration, tbEase.easeInQuadratic);
    self.medalShadow.addAnimator("scale", 1, self.settings.medalDuration, tbEase.easeInQuadratic);
    self.medalShadow.addAnimator("alpha", 1, self.settings.medalDuration, tbEase.easeInQuadratic);
};

TG_LevelEndDialog.prototype.startMedalEffectAnimation = function(moment, tl) {
    "use strict";
    var self = tl.parent;

    self.medalEffect = new TG_AnimatedImage(self.depth - 130, TG.frameworkEffectsLayer, s_pop_medal);
    self.medalEffect.parent = self.overlay;
    self.medalEffect.x = self.medal.x;
    self.medalEffect.y = self.medal.y + self.settings.medalEffectOffsetY;
    self.medalEffect.addAnimator("subImage", s_pop_medal.number - 1, self.settings.medalEffectDuration, undefined, function(){tbGame.removeToken(self.medalEffect); self.medalEffect = undefined;});
    tbAudio.play(a_medal);
};

// handleRemove is called when the token is removed from the game.
TG_LevelEndDialog.prototype.handleRemove = function() {
	"use strict";
    var i;
    for(i=0; i<this.buttons.length; i++){
        tbGame.removeToken(this.buttons[i]);
    }
    for(i=0; i<this.stars.length; i++){
        tbGame.removeToken(this.stars[i]);
    }
    for(i=0; i<this.starEffects.length; i++){
        tbGame.removeToken(this.starEffects[i]);
    }

    //remove medal
    if(this.medal){
        tbGame.removeToken(this.medal);
        if(this.medalEffect){
            tbGame.removeToken(this.medalEffect);
        }
        if(this.medalShadow){
            tbGame.removeToken(this.medalShadow);
        }
    }
    tbGame.removeToken(this.overlay);

    if(this.timeLine){
        this.timeLine.stop();
    }

    //remove counter objects
    if(this.totalScoreCounter){
        tbGame.removeToken(this.totalScoreCounter);
    }
    for(i=0; i<this.bonusCounters.length; i++){
        tbGame.removeToken(this.bonusCounters[i]);
    }

    TG.controller._resumeAll();
};

// handleDraw is called at the end of a step to draw the token.
TG_LevelEndDialog.prototype.handleDraw = function() {
	"use strict";
    var alpha = tbGraphics.context.globalAlpha;
    tbGraphics.context.globalAlpha = this.alpha; //this.settings.fadeAlpha;
    tbGraphics.drawRectangle(0, 0, tbGraphics.canvas.width, tbGraphics.canvas.height, this.settings.fadeColor, false);
    tbGraphics.context.globalAlpha = alpha;
};
//******************************************************
//*****    Token Resource: TG_ChallengeEndDialog
//******************************************************

// ***************************************
// Definition of game token TG_ChallengeEndDialog
// ***************************************

/* global
	TG_MainController
 */


// The constructor for the TG_ChallengeEndDialog game token.
var TG_ChallengeEndDialog = function(score, submitFunction, cancelFunction){
	"use strict";
	// Properties used by the engine
	this.depth = 10;
	this.visible = true;
	this.active = false;
	TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
	this.settings = TG.settings.tg.challengeEnd;
	// apply theme and game specific setting overwrites
	var setting;
	for(setting in TG.settings.theme.challengeEnd){
		this.settings[setting] = TG.settings.theme.challengeEnd[setting];
	}
	this.submitFunction = submitFunction;
	this.cancelFunction = cancelFunction;
	this.challengeInfo = TG.controller.getChallengeInformation();
	this.challengeInfo.playerValues[this.challengeInfo.currentPlayerIdx] = score;
	this.timeLine = new tbTimeLine();
	this.timeLine.parent = this;
	this.buttons = [];
	// Add it to the game engine
	tbGame.addToken(this, false);
};

TG_ChallengeEndDialog.prototype.showMessage = function(text){
	"use strict";
	var s, font, maxFontSize, anim, self = this;
	anim = function(){
		self.message.addAnimator("xScale", 1, self.settings.messageShowDuration, tbEase.easeOutOvershoot);
		self.message.addAnimator("yScale", 1, self.settings.messageShowDuration, tbEase.easeOutOvershoot);
		self.message.addAnimator("alpha", 1, self.settings.messageShowDuration, tbEase.easeLinear);
	};
	// create animated image if one does not already exists
	if(this.message === undefined){
		s = new tbSurface(this.settings.messageWidth + 2 * this.settings.messageMarginX, this.settings.messageHeight + 2 * this.settings.messageMarginY);
		this.message = new TG_AnimatedImage(this.depth - 20, TG.frameworkUILayer, s);
		this.message.xScale = 0;
		this.message.yScale = 0;
		this.message.alpha = 0;
		this.message.originX = Math.floor(s.width / 2);
		this.message.originY = Math.floor(s.height / 2);
		this.message.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.messageX, this.canvas.width, 0) - this.overlayEndX;
		this.message.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.messageY, this.canvas.height, s.height) + Math.floor(s.height / 2)
		        - this.overlayEndY;
		this.message.parent = this.overlay;
		if(this.timeLine.getMoment() >= this.settings.messageShowDelay){
			anim();
		}else{
			this.timeLine.addMoment(this.settings.messageShowDelay, anim);
		}
	}

	// clear text
	this.message.image.setTarget();
	tbGraphics.clear();

	// draw new text
	font = f_default.clone();
	if(this.settings.messageFont !== undefined){
		font.setProperties(this.settings.messageFont);
	}
	font.setAlign("center");
	font.setBaseline("middle");
	maxFontSize = font.textFitSize(text, this.settings.messageWidth, this.settings.messageHeight, true);
	if(maxFontSize < font.getFontSize()){
		font.setFontSize(maxFontSize);
	}
	font.drawSimple(text, Math.floor(this.message.width / 2), Math.floor(this.message.height / 2), this.settings.messageWidth);
	if (testMode) {
		TG_MainController.drawSurfaceBoundaries();
	}

	this.message.image.resetTarget();
	if(this.message.xScale > 0){
		this.message.forceDraw = true;
	}
};

TG_ChallengeEndDialog.prototype.showSubMessage = function(text){
	"use strict";
	var font, maxFontSize, x, y;
	font = f_default.clone();
	//font.setProperties(this.settings.subMessageFont);
	if(this.settings.winningsFont !== undefined){
		font.setProperties(this.settings.winningsFont);
	}
	maxFontSize = font.textFitSize(text, this.settings.subMessageWidth, this.settings.subMessageHeight, true);
	if(maxFontSize < font.getFontSize()){
		font.setFontSize(maxFontSize);
	}
	x = TG.functions.computeTextCoordinatesFromSettings(this.settings.subMessageX, this.overlay.width, this.settings.subMessageWidth, font.getAlign());
	y = TG.functions.computeTextCoordinatesFromSettings(this.settings.subMessageY, this.overlay.height, this.settings.subMessageHeight, font.getBaseline());
	this.overlay.image.setTarget();
	font.drawSimple(text, x, y, this.settings.subMessageWidth);
	if (testMode) {
		TG_MainController.drawTextRect(font, x, y, this.settings.subMessageWidth, this.settings.subMessageHeight);
	}
	this.overlay.image.resetTarget();
};

TG_ChallengeEndDialog.prototype.showWinnings = function(){
	"use strict";
	var s, text, font, maxFontSize, anim, self = this;

	anim = function(){
		self.winnings.addAnimator("xScale", 1, self.settings.messageShowDuration, tbEase.easeOutOvershoot);
		self.winnings.addAnimator("yScale", 1, self.settings.messageShowDuration, tbEase.easeOutOvershoot);
		self.winnings.addAnimator("alpha", 1, self.settings.messageShowDuration, tbEase.easeLinear);
	};

	// create animated image
	s = new tbSurface(this.settings.winningsWidth + 2 * this.settings.winningsMarginX, this.settings.winningsHeight + 2 * this.settings.winningsMarginY);
	this.winnings = new TG_AnimatedImage(this.depth - 20, TG.frameworkUILayer, s);
	this.winnings.xScale = 0;
	this.winnings.yScale = 0;
	this.winnings.alpha = 0;
	this.winnings.originX = Math.floor(s.width / 2);
	this.winnings.originY = Math.floor(s.height / 2);
	this.winnings.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.winningsX, this.canvas.width, 0) - this.overlayEndX;
	this.winnings.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.winningsY, this.canvas.height, s.height) + Math.floor(s.height / 2)
	        - this.overlayEndY;
	this.winnings.parent = this.overlay;
	if(this.timeLine.getMoment() >= this.settings.messageShowDelay){
		anim();
	}else{
		this.timeLine.addMoment(this.settings.messageShowDelay, anim);
	}


	// draw text
	text = TG.dictionary.getText("challengeEndScreenWinnings", "CHALLENGEENDSCREENWINNINGS");
	text = text.replace("<AMOUNT>", this.challengeInfo.wager);
	this.winnings.image.setTarget();
	font = f_default.clone();
	if(this.settings.winningsFont !== undefined){
		font.setProperties(this.settings.winningsFont);
	}
	font.setAlign("center");
	font.setBaseline("middle");
	maxFontSize = font.textFitSize(text, this.settings.winningsWidth, this.settings.winningsHeight, true);
	if(maxFontSize < font.getFontSize()){
		font.setFontSize(maxFontSize);
	}
	font.drawSimple(text, Math.floor(this.winnings.width / 2), Math.floor(this.winnings.height / 2), this.settings.winningsWidth);
	if (testMode) {
		TG_MainController.drawSurfaceBoundaries();
	}
	this.winnings.image.resetTarget();
	if(this.winnings.xScale > 0){
		this.winnings.forceDraw = true;
	}
};

TG_ChallengeEndDialog.prototype.updateOutcome = function(outcome){
	"use strict";
	if(typeof outcome === "string"){
		var text = TG.dictionary.getText("challengeEndScreenOutcomeMessage_" + outcome, "<CHALLENGEENDSCREEN_CHALLENGE" + outcome.toUpperCase() + ">");
		this.showMessage(text);
		if(outcome === "WON"){
			this.showWinnings();
		}
	}
};

TG_ChallengeEndDialog.prototype.addSubmitCancelButtons = function(){
	"use strict";
	var submit, cancel, x, y, self = this;

	submit = function(){
		var i;
		self.submitFunction();
		for(i = 0; i < self.buttons.length; i++){
			tbGame.removeToken(self.buttons[i]);
		}
		return true;
	};
	cancel = function(){
		var dialog, yesFunction, noFunction, i;
		yesFunction = function(){
			dialog.close();
			self.cancelFunction();
			for(i = 0; i < self.buttons.length; i++){
				tbGame.removeToken(self.buttons[i]);
			}
			return true;
		};
		noFunction = function(){
			dialog.close();
		};
		dialog = new TG_Dialog(TG.dictionary.getText("challengeCancelConfirmText", "<CHALLENGECANCELCONFIRMTEXT>"), [{
		    textKey: "challengeCancelConfirmBtn_yes",
		    callbackFunc: yesFunction
		}, {
		    textKey: "challengeCancelConfirmBtn_no",
		    callbackFunc: noFunction
		}], true);
	};

	// add submit button
	x = TG.functions.computeImgCoordinatesFromSettings(this.settings.submitBtnX, this.overlay.width, this.settings.textButtonsWidth);
	y = TG.functions.computeImgCoordinatesFromSettings(this.settings.submitBtnY, this.overlay.height, 0);
	this.buttons.push(new TG_ButtonText("default_text", x, y, this.depth - 20, "challengeEndScreensBtn_submit", this.settings.textButtonsWidth, submit,
	        this.overlay));
	// add cancel button
	x = TG.functions.computeImgCoordinatesFromSettings(this.settings.cancelBtnX, this.overlay.width, this.settings.textButtonsWidth);
	y = TG.functions.computeImgCoordinatesFromSettings(this.settings.cancelBtnY, this.overlay.height, 0);
	this.buttons.push(new TG_ButtonText("default_text", x, y, this.depth - 20, "challengeEndScreenBtn_cancel", this.settings.textButtonsWidth, cancel,
	        this.overlay));
};

TG_ChallengeEndDialog.prototype.handleAdd = function(){
	"use strict";
	var overlaySurface, titleSurface, font, maxFontSize, text, i, s, name, score, key, x, y, counter, fontHeader, order, idx, backLog, statsObj, nameTexts, setupAnimatedImageForScaleAnimation = function(
	        image){
		image.xScale = 0;
		image.yScale = 0;
		image.originX = Math.floor(image.image.width / 2);
		image.originY = Math.floor(image.image.height / 2);
	}, self = this;

	//pause everything else
	TG.controller._pauseAll(this);

	// create overlay
	if(typeof s_overlay_challenge_end !== "undefined"){
		overlaySurface = new tbSurface(s_overlay_challenge_end.width, s_overlay_challenge_end.height);
		overlaySurface.setTarget();
		s_overlay_challenge_end.drawSimple(0, 0, 0);
		overlaySurface.resetTarget();
	}else{
		overlaySurface = new tbSurface(tgScale(560), tgScale(560));
	}
	this.overlay = new TG_AnimatedImage(this.depth - 10, TG.frameworkUILayer, overlaySurface);
	this.overlay.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayStartX, this.canvas.width, this.overlay.width)
	        + this.settings.overlayOffsetX;
	this.overlay.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayStartY, this.canvas.height, this.overlay.height)
	        + TG.backgroundOffsetTop + this.settings.overlayOffsetY;
	this.overlayEndX = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayEndX, this.canvas.width, this.overlay.width)
	        + this.settings.overlayOffsetX;
	this.overlayEndY = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayEndY, this.canvas.height, this.overlay.height)
	        + this.settings.overlayOffsetY;

	// determine order in which player statistics should be shown
	order = new Array(this.challengeInfo.playerNames.length);
	idx = 0;
	backLog = [];
	for(i = 0; i < this.challengeInfo.playerNames.length; i++){
		if(i !== this.challengeInfo.currentPlayerIdx){
			if(this.challengeInfo.playerValues[i] !== undefined){
				order[i] = idx;
				idx++;
			}else{
				backLog.push(i);
			}
		}
	}
	order[this.challengeInfo.currentPlayerIdx] = idx;
	idx++;
	for(i = 0; i < backLog.length; i++){
		order[backLog[i]] = idx;
		idx++;
	}

	// create names
	font = f_default.clone();
	if(this.settings.namesFont !== undefined){
		font.setProperties(this.settings.namesFont);
	}
	font.setAlign("center");
	font.setBaseline("middle");
	//abbreviate names that are too long
	nameTexts = [];
	for(i = 0; i < this.challengeInfo.playerNames.length; i++){
		text = (i === this.challengeInfo.currentPlayerIdx)? TG.dictionary.getText("challengeEndScreenName_you", "<YOU>") : this.challengeInfo.playerNames[i];
		if(text.length > 13){
			text = text.substr(0, 10) + "...";
		}
		nameTexts.push(text);
	}
	maxFontSize = font.getFontSize();
	for(i = 0; i < nameTexts.length; i++){
		maxFontSize = Math.min(maxFontSize, font.textFitSize(nameTexts[i], this.settings.nameWidth, this.settings.nameHeight, false));
	}
	if(maxFontSize < font.getFontSize()){
		font.setFontSize(maxFontSize);
	}
	this.names = [];

	for(i = 0; i < nameTexts.length; i++){
		text = nameTexts[i];
		s = new tbSurface(this.settings.nameWidth + 2 * this.settings.nameMarginX, this.settings.nameHeight + 2 * this.settings.nameMarginY);
		s.setTarget();
		font.drawSimple(text, Math.floor(s.width / 2) + this.settings.nameOffsetX, Math.floor(s.height / 2) + this.settings.nameOffsetY);
		if (testMode) {
			TG_MainController.drawSurfaceBoundaries();
		}
		s.resetTarget();
		name = new TG_AnimatedImage(this.depth - 20, this.layer, s);
		name.alpha = 0;
		setupAnimatedImageForScaleAnimation(name);
		name.x = this.settings.namesLeftX + order[i] * (s.width + this.settings.namesBetweenX) + Math.floor(s.width / 2)
		        - this.overlayEndX;
		name.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.namesY, this.canvas.height, s.height) + Math.floor(s.height / 2)
		        - this.overlayEndY;
		name.parent = this.overlay;
		this.names.push(name);
	}

	// create score
	this.emphasizedScores = [];
	font = f_default.clone();
	if(this.settings.emphasizedScoresFont !== undefined){
		font.setProperties(this.settings.emphasizedScoresFont);
	}
	font.setAlign("center");
	font.setBaseline("middle");
	for(i = 0; i < this.challengeInfo.playerNames.length; i++){
		if(this.challengeInfo.playerValues[i] !== undefined){
			statsObj = new TG_StatObject("player_" + i, TG.gameFlowSettings.scoreType, "", this.challengeInfo.playerValues[i]);
		}else{
			statsObj = new TG_StatObject("player_" + i, "text", "", "?");
		}
		x = this.names[i].x + this.settings.emphasizedScoresCounterMarginX;
		y = TG.functions.computeImgCoordinatesFromSettings(this.settings.emphasizedScoresY, this.canvas.height, this.settings.emphasizedScoresHeight)
		        + Math.floor(s.height / 2) - this.overlayEndY;
		counter = new TG_Counter(x, y, this.settings.emphasizedScoresWidth, this.settings.emphasizedScoresHeight, this.depth - 18,
		        (i === this.challengeInfo.currentPlayerIdx)? 0 : statsObj.endValue, font, this.settings.emphasizedScoresCounterMarginX,
		        this.settings.emphasizedScoresCounterMarginY, this.overlay, statsObj.toString);
		setupAnimatedImageForScaleAnimation(counter.animatedImage);
		counter.animatedImage.alpha = 0;
		this.emphasizedScores.push(counter);
	}

	// set-up timeLine
	this.timer = 0;
	this.timeLine.addMoment(this.settings.animInDelay, function(){
		self.overlay.addAnimator("x", self.overlayEndX, self.settings.animInDuration, tbEase.easeOutOvershoot);
		self.overlay.addAnimator("y", self.overlayEndY + TG.backgroundOffsetTop, self.settings.animInDuration, tbEase.easeOutOvershoot);
	});
	this.timeLine.addMoment(this.settings.namesShowDelay, function(){
		var i;
		for(i = 0; i < self.names.length; i++){
			self.names[i].addAnimator("xScale", 1, self.settings.namesShowDuration, tbEase.easeOutOvershoot);
			self.names[i].addAnimator("yScale", 1, self.settings.namesShowDuration, tbEase.easeOutOvershoot);
			self.names[i].addAnimator("alpha", 1, self.settings.namesShowDuration, tbEase.easeLinear);
		}
	});
	this.timeLine.addMoment(this.settings.scoreShowDelay, function(){
		var i;
		for(i = 0; i < self.names.length; i++){
			self.emphasizedScores[i].animatedImage.addAnimator("xScale", 1, self.settings.scoresShowDuration, tbEase.easeOutOvershoot);
			self.emphasizedScores[i].animatedImage.addAnimator("yScale", 1, self.settings.scoresShowDuration, tbEase.easeOutOvershoot);
			self.emphasizedScores[i].animatedImage.addAnimator("alpha", 1, self.settings.scoresShowDuration, tbEase.easeLinear);
		}
	});

	this.timeLine.addMoment(this.settings.scoresCountDelay, function(){
		self.emphasizedScores[self.challengeInfo.currentPlayerIdx].startCount(self.challengeInfo.playerValues[self.challengeInfo.currentPlayerIdx],
		        self.settings.scoresCountDuration, tbEase.easeLinear);
	});

	if(typeof this.submitFunction === "function" && typeof this.cancelFunction === "function"){
		this.timeLine.addMoment(self.settings.buttonsShowDelay, function(){
			self.addSubmitCancelButtons();
		});
	}

	//inform portals that level end screen is shown
    this.timeLine.addMoment(this.settings.animInDelay, TG.hooks.informLevelEndScreenShown);

	this.timeLine.start();

	if(typeof this.submitFunction === "function" && typeof this.cancelFunction !== "function"){
		this.submitFunction();
	}

};

TG_ChallengeEndDialog.prototype.handleRemove = function(){
	"use strict";
	var i;
	if(this.message){
		tbGame.removeToken(this.message);
	}
	for(i=0; i<this.buttons.length; i++){
		tbGame.removeToken(this.buttons[i]);
	}
	for(i=0; i<this.names.length; i++){
		tbGame.removeToken(this.names[i]);
	}
	for(i=0; i<this.emphasizedScores.length; i++){
		tbGame.removeToken(this.emphasizedScores[i]);
	}

	TG.controller._resumeAll();
};

// handleDraw is called at the end of a step to draw the token.
TG_ChallengeEndDialog.prototype.handleDraw = function(){
	"use strict";
	var alpha = tbGraphics.context.globalAlpha;
	tbGraphics.context.globalAlpha = this.settings.fadeAlpha;
	tbGraphics.drawRectangle(0, 0, tbGraphics.canvas.width, tbGraphics.canvas.height, this.settings.fadeColor, false);
	tbGraphics.context.globalAlpha = alpha;
};
//******************************************************
//*****    Token Resource: TG_InterstitialController
//******************************************************

// ***************************************
// Definition of game token TG_InterstitialController
// ***************************************

// The constructor for the TG_InterstitialController game token.
var TG_InterstitialController = function(x, y, depth) {
	"use strict";
	// Properties used by the engine
	this.depth = depth;
	this.visible = true;
	this.active = true;
	// Your own properties
	this.x = x;
	this.y = y;
	// Add it to the game engine
	tbGame.addToken(this);
};

// handleAdd is called when the token is (re-) added to the game.
TG_InterstitialController.prototype.handleAdd = function() {
	"use strict";
};

// handleRemove is called when the token is removed from the game.
TG_InterstitialController.prototype.handleRemove = function() {
	"use strict";
};

// handleBeginStep is called each step before processing other events.
TG_InterstitialController.prototype.handleBeginStep = function(timePassed) {
	"use strict";
};

// handleTouchDown is called when a touch is started or if a mouse button is
// pressed.
TG_InterstitialController.prototype.handleTouchDown = function(finger, x, y) {
	"use strict";
};

// handleTouchUp is called when a touch is ended or if a mouse button is
// released.
TG_InterstitialController.prototype.handleTouchUp = function(finger, x, y) {
	"use strict";
};

// handleKeyDown is called if the key with the given keyCode is pressed.
TG_InterstitialController.prototype.handleKeyDown = function(keyCode) {
	"use strict";
};

// handleKeyUp is called if the key with the given keyCode is released.
TG_InterstitialController.prototype.handleKeyUp = function(keyCode) {
	"use strict";
};

// handleAlarm is called if a global alarm is reached.
TG_InterstitialController.prototype.handleAlarm = function(alarm) {
	"use strict";
};

// handleSpecial is called if a special or user-defined event happens.
TG_InterstitialController.prototype.handleSpecial = function(id, args) {
	"use strict";
};

// handleEndStep is called each step after processing other events (before
// draw).
TG_InterstitialController.prototype.handleEndStep = function(timePassed) {
	"use strict";
};

// handleDraw is called at the end of a step to draw the token.
TG_InterstitialController.prototype.handleDraw = function() {
	"use strict";
};

//******************************************************
//*****    Token Resource: TG_LevelPreviewDialog
//******************************************************

// ***************************************
// Definition of game token TG_LevelPreviewDialog
// ***************************************

// The constructor for the TG_LevelPreviewDialog game token.
var TG_LevelPreviewDialog = function(levelIdx, levelDescription, startLevelCallback, cancelCallback) {
	"use strict";
	// Properties used by the engine
	this.depth = 100;
	this.visible = true;
	this.active = true;
    TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
    this.settings = TG.settings.theme.levelPreview;
    this.levelIdx = levelIdx;
    this.levelDescription = levelDescription;
    this.startLevelCallback = startLevelCallback;
    this.cancelCallback = cancelCallback;
    this.overlay = {x: 0, y: 0, xScale: 1, yScale: 1, angle: 0, alpha: 1};
    this.touchStarted = false;

	// Add it to the game engine
	tbGame.addToken(this);
};

TG_LevelPreviewDialog.prototype.startLevel = function() {
    "use strict";
    tbGame.removeToken(this);
    this.startLevelCallback(this.levelIdx);
};

TG_LevelPreviewDialog.prototype.close = function() {
    "use strict";
    tbGame.removeToken(this);
    this.cancelCallback();
};

// handleAdd is called when the token is (re-) added to the game.
TG_LevelPreviewDialog.prototype.handleAdd = function() {
	"use strict";
    var canvas, context, alpha, img, width, height, imgIdx, font, txt, btnType, x, y,
        background = this.settings.background;
    //draw background
    if(background.type === "fade"){
        //draw background fade
        canvas = TG.functions.getCanvas(TG.frameworkBackgroundLayer);
        if(tbGraphics.canvas !== canvas){
            tbGraphics.setCanvas(canvas);
        }
        context = tbGraphics.context;
        alpha = context.globalAlpha;
        context.globalAlpha = background.alpha;
        tbGraphics.drawRectangle(0,0,tbGraphics.width, tbGraphics.height, background.color, false);
        context.globalAlpha = alpha;
    }

    //create overlay surface
    img = this.settings.popupImage;
    width = img.width;
    height = img.height;
    this.overlay.mask = new tbMaskRectangle(0,0,img.width, img.height);
    this.overlay.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.popupImageX, this.canvas.width, width);
    this.overlay.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.popupImageY, this.canvas.height, height);
    this.overlay.surface = new tbSurface(width, height);
    this.overlay.surface.setTarget();
    //draw overlay background
    img.drawSimple(0, 0, 0);
    //drawLevelTitle
    if(this.settings.levelTitleFont){
        font = f_default.clone();
        font.setProperties(this.settings.levelTitleFont);
        font.drawSimple(TG.dictionary.getText("levelTitle ", "<levelTitle> ")+(this.levelIdx+1),
            TG.functions.computeImgCoordinatesFromSettings(this.settings.levelTitleXOffset, width, 0),
            TG.functions.computeImgCoordinatesFromSettings(this.settings.levelTitleYOffset, height, 0));
    }
    //draw stars
    if(this.settings.starsImage) {
        img = this.settings.starsImage;
        imgIdx = this.levelDescription.stars || 0;
        img.drawSimple(imgIdx, TG.functions.computeImgCoordinatesFromSettings(this.settings.starsImageXOffset, width, img.width),
            TG.functions.computeImgCoordinatesFromSettings(this.settings.starsImageYOffset, height, img.height));
    }
    //draw assignment
    if(this.levelDescription.assignmentTextKey){
        font = f_default.clone();
        if(this.settings.assignmentFont) {
            font.setProperties(this.settings.assignmentFont);
        }
        font.drawSimple(TG.dictionary.getText(this.levelDescription.assignmentTextKey, "<"+this.levelDescription.assignmentTextKey+">"), TG.functions.computeImgCoordinatesFromSettings(this.settings.assignmentXOffset, width, 0),
            TG.functions.computeImgCoordinatesFromSettings(this.settings.assignmentYOffset, height, 0));
    }
    //draw target
    if(this.levelDescription.nextTarget !== undefined){
        txt =  TG.dictionary.getText("target", "<target <POINTS> points>").replace("<POINTS>", this.levelDescription.nextTarget+"");
        font = f_default.clone();
        if(this.settings.targetFont) {
            font.setProperties(this.settings.targetFont);
        }
        font.drawSimple(txt, TG.functions.computeImgCoordinatesFromSettings(this.settings.targetXOffset, width, 0),
            TG.functions.computeImgCoordinatesFromSettings(this.settings.targetYOffset, height, 0));
    }

    this.overlay.surface.resetTarget();


    //create buttons
    this.buttons = [];
    //close button
    btnType = TG.settings.theme.buttons[this.settings.closeBtnType];
    if(btnType.type === "image"){
        img = btnType.sprite;
        x = TG.functions.computeImgCoordinatesFromSettings(this.settings.closeBtnXOffset, this.overlay.surface.width, img.width);
        y = TG.functions.computeImgCoordinatesFromSettings(this.settings.closeBtnYOffset, this.overlay.surface.height, img.height);
        this.buttons.push(new TG_ButtonBase(x, y, this.depth - 10, new tbMaskImage(img), [img], {callbackFunc: this.close, callbackObj: this}, this.overlay));
    }
    //play button
    btnType = TG.settings.theme.buttons[this.settings.playBtnType];
    y = TG.functions.computeImgCoordinatesFromSettings(this.settings.playBtnYOffset, this.overlay.surface.height, btnType.sprite.height);
    if(btnType.type === "text"){
        x = TG.functions.computeImgCoordinatesFromSettings(this.settings.playBtnXOffset, this.overlay.surface.width, this.settings.playBtnWidth);
        this.buttons.push(new TG_ButtonToggleText(btnType, x, y, this.depth - 10, TG.dictionary.getText("play", "play"), this.settings.playBtnWidth, {callbackFunc: this.startLevel, callbackObj: this}, this.overlay));
    }else if(btnType.type === "image"){
        img = btnType.sprite;
        x = TG.functions.computeImgCoordinatesFromSettings(this.settings.playBtnXOffset, this.overlay.surface.width, img.width);
        this.buttons.push(new TG_ButtonBase(x, y, this.depth - 10, new tbMaskImage(img), [img], {callbackFunc: this.startLevel, callbackObj: this}, this.overlay));
    }

    //start overlay in-animation
    this.state = "animIn";
    this.canvas.drawTokens = true;
};

// handleRemove is called when the token is removed from the game.
TG_LevelPreviewDialog.prototype.handleRemove = function() {
	"use strict";
    var i;
    for(i=0; i<this.buttons.length; i++){
        tbGame.removeToken(this.buttons[i]);
    }
    this.canvas.drawTokens = true;
 };

// handleBeginStep is called each step before processing other events.
TG_LevelPreviewDialog.prototype.handleBeginStep = function(timePassed) {
	"use strict";

};

// handleTouchDown is called when a touch is started or if a mouse button is pressed.
TG_LevelPreviewDialog.prototype.handleTouchDown = function(finger, x, y) {
	"use strict";
    if(!this.overlay.mask.collisionPoint(this.overlay.x, this.overlay.y, x, y)){
        this.touchStarted = true;
    }
	return true;
};

// handleTouchUp is called when a touch is ended or if a mouse button is released.
TG_LevelPreviewDialog.prototype.handleTouchUp = function(finger, x, y) {
	"use strict";
    if(this.touchStarted && !this.overlay.mask.collisionPoint(this.overlay.x, this.overlay.y, x, y)){
        this.close();
    }
    this.touchStarted = false;
    return true;
};

// handleKeyDown is called if the key with the given keyCode is pressed.
TG_LevelPreviewDialog.prototype.handleKeyDown = function(keyCode) {
	"use strict";
};

// handleKeyUp is called if the key with the given keyCode is released.
TG_LevelPreviewDialog.prototype.handleKeyUp = function(keyCode) {
	"use strict";
};

// handleAlarm is called if a global alarm is reached.
TG_LevelPreviewDialog.prototype.handleAlarm = function(alarm) {
	"use strict";
};

// handleSpecial is called if a special or user-defined event happens.
TG_LevelPreviewDialog.prototype.handleSpecial = function(id, args) {
	"use strict";
};

// handleEndStep is called each step after processing other events (before draw).
TG_LevelPreviewDialog.prototype.handleEndStep = function(timePassed) {
	"use strict";
};

// handleDraw is called at the end of a step to draw the token.
TG_LevelPreviewDialog.prototype.handleDraw = function() {
	"use strict";
    this.overlay.surface.drawExt(this.overlay.x, this.overlay.y, this.overlay.xScale, this.overlay.yScale, this.overlay.angle, this.overlay.alpha);
};


//******************************************************
//*****    Token Resource: TG_Options
//******************************************************

// ***************************************
// Definition of game token TG_Options
// ***************************************

/* global
	TG_MainController,
	TG_ButtonBase,
	TG_ButtonImage,
	TG_ButtonToggleText,
	TG_ButtonText,
	TG_ButtonToggle,
	TG_AnimatedImage,
	f_default,
	s_tutorialButton_previous,
	s_tutorialButton_close,
	s_tutorialButton_next,
	s_logo_coolgames,
	tbKeyArea
 */

/**
 * The constructor for the TG_Options game token.
 *
 * @constructor
 */
function TG_Options(type, tutorial, challenge, paused) {
	"use strict";
	// Properties used by the engine
	this.depth = -100;
	this.visible = false;
	this.active = true;
	TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
	var setting, landscapeSettings, themeSettings;
	this.settings = challenge ? TG.settings.tg.options_challenge : TG.settings.tg.options;
	if (TG.orientation === "landscape") {
		landscapeSettings = challenge ? TG.settings.tg.options_challenge_landscape : TG.settings.tg.options_landscape;
		for (setting in landscapeSettings) {
			this.settings[setting] = landscapeSettings[setting];
		}
	}
	this.buttonSettings = TG.settings.tg.buttonDefinitions;
	// apply theme specific setting overwrites
	themeSettings = challenge ? TG.settings.theme.options_challenge : TG.settings.theme.options;
	for (setting in themeSettings) {
		this.settings[setting] = themeSettings[setting];
	}
	// allow custom buttons
	if (TG.config.options && TG.config.options.buttons) {
		for (setting in TG.config.options.buttons) {
			this.settings.buttons[setting] = TG.config.options.buttons[setting];
		}
	}

	this.type = type;
	this.tutorialVisibleOnStart = tutorial;
	this.challengeMode = challenge;
	this.shouldPause = paused !== false;
	// Add it to the game engine
	tbGame.addToken(this);
}

TG_Options.prototype.addButton = function(type, buttonX, buttonY, buttonWidth, enableButton) {
	"use strict";
	var btnType = undefined, textKey = undefined, state = undefined, callbackFunction = undefined, callbackImmediate = undefined, image = undefined;
	switch (type) {
	case "music":
		btnType = "music_toggle";
		callbackFunction = this.toggleMusic;
		state = (TG.controller.playMusic()) ? "on" : "off";
		break;
	case "music_big":
		btnType = "music_big_toggle";
		callbackFunction = this.toggleMusic;
		state = (TG.controller.playMusic()) ? "on" : "off";
		break;
	case "sfx_big":
		btnType = "sfx_big_toggle";
		callbackFunction = this.toggleSFX;
		state = (TG.controller.playSFX()) ? "on" : "off";
		break;
	case "sfx":
		btnType = "sfx_toggle";
		callbackFunction = this.toggleSFX;
		state = (TG.controller.playSFX()) ? "on" : "off";
		break;
	case "language":
		btnType = "language_toggle";
		callbackFunction = this.toggleLang;
		state = TG.controller.language();
		break;
	case "tutorial":
		btnType = "default_text";
		textKey = "optionsTutorial";
		callbackFunction = this.showTutorial;
		break;
	case "highScores":
		btnType = "default_text";
		textKey = "optionsHighScore";
		callbackFunction = this.sendAway;
		this.buttonCallback = this.showHighScores;
		break;
	case "moreGames":
		if (TG.config.moreGamesImage !== undefined) {
			btnType = "default_image";
			image = TG.config.moreGamesImage;
		}
		else {
			btnType = "default_text";
			textKey = "optionsMoreGames";
		}
		callbackFunction = this.showMoreGames;
		callbackImmediate = true;
		break;
	case "resume":
		btnType = "default_text";
		textKey = "optionsResume";
		callbackFunction = this.close;
		break;
	case "exit":
		btnType = "default_text";
		textKey = "optionsExit";
		callbackFunction = (TG.publisherSettings["customFunctions"] && typeof TG.publisherSettings["customFunctions"]["exit"] === "function") ? TG.publisherSettings["customFunctions"]["exit"]
				: function() {
				};
		break;
	case "quit":
		btnType = "default_text";
		textKey = "optionsQuit";
		callbackFunction = this.quit;
		break;
	case "restart":
		btnType = "default_text";
		textKey = "optionsRestart";
		callbackFunction = this.restart;
		break;
	case "startScreen":
		btnType = "default_text";
		textKey = "optionsStartScreen";
		callbackFunction = this.sendAway;
		this.buttonCallback = this.showStartScreen;
		break;
	case "about":
		return;
		btnType = "default_text";
		textKey = "optionsAbout";
		callbackFunction = this.showAbout;
		break;
	case "forfeitChallenge":
		btnType = "default_text";
		textKey = "optionsChallengeForfeit";
		callbackFunction = this.forfeitChallenge;
		break;
	case "cancelChallenge":
		btnType = "default_text";
		textKey = "optionsChallengeCancel";
		callbackFunction = this.cancelChallenge;
		break;
	}
	if (btnType !== undefined && callbackFunction !== undefined) {

		if (this.buttonSettings[btnType].type === "image") {
			this.buttons.push(new TG_ButtonImage(btnType, buttonX, buttonY, this.depth - 20, image, buttonWidth, {
				callbackFunc: callbackFunction,
				callbackObj: this,
				immediate: callbackImmediate
			}, this.overlay));
		}
		else if (this.buttonSettings[btnType].type === "toggleText") {
			this.buttons.push(new TG_ButtonToggleText(btnType, buttonX, buttonY, this.depth - 20, state, buttonWidth, {
				callbackFunc: callbackFunction,
				callbackObj: this,
				immediate: callbackImmediate
			}, this.overlay));
		}
		else if (this.buttonSettings[btnType].type === "text") {
			this.buttons.push(new TG_ButtonText(btnType, buttonX, buttonY, this.depth - 20, textKey, buttonWidth, {
				callbackFunc: callbackFunction,
				callbackObj: this,
				immediate: callbackImmediate
			}, this.overlay));
		}
		else if (this.buttonSettings[btnType].type === "toggle") {
			this.buttons.push(new TG_ButtonToggle(btnType, buttonX, buttonY, this.depth - 20, state, {
				callbackFunc: callbackFunction,
				callbackObj: this,
				immediate: callbackImmediate
			}, this.overlay));
		}
		this.buttons[this.buttons.length - 1].enabled = enableButton || false;
	}
};

TG_Options.prototype.sendAway = function() {
	"use strict";
	var end = (this.type !== "inGame") ? -this.overlay.image.height : this.canvas.height;
	var self = this;
	function callback() {
		tbGame.removeToken(self);
		if (self.buttonCallback !== undefined) {
			self.buttonCallback.call(self);
		}
	}
	self.overlay.addAnimator("y", end, this.settings.overlayAnimOutDuration, this.settings.overlayAnimOutEase, callback);
	return true;
};

TG_Options.prototype.drawBackground = function(overlayXOffset, overlayYOffset) {
	"use strict";
	var image, titleText, titleFont, titleX, titleY, maxFontSize;
	this.overlay.image.setTarget();
	tbGraphics.clear();

	// draw overlay background
	image = this.settings.backgroundImage;
	image.drawSimple(0, 0, 0);

	// draw overlay title
	titleText = TG.dictionary.getText("optionsTitle", "<OPTIONS_TITLE>");
	titleFont = f_default.clone();

	if (this.settings.titleFont) {
		titleFont.setProperties(this.settings.titleFont);
	}
	if (this.settings.titleMaxWidth !== undefined && this.settings.titleMaxHeight !== undefined) {
		maxFontSize = titleFont.textFitSize(titleText, this.settings.titleMaxWidth, this.settings.titleMaxHeight, this.settings.titleMaxWidth);
		if (titleFont.getFontSize() > maxFontSize) {
			titleFont.setFontSize(maxFontSize);
		}
	}
	titleX = TG.functions.computeTextCoordinatesFromSettings(this.settings.titleX, this.canvas.width, titleFont.textWidth(titleText), titleFont.getAlign())
			- overlayXOffset;
	titleY = TG.functions
			.computeTextCoordinatesFromSettings(this.settings.titleY, this.canvas.height, titleFont.textHeight(titleText, titleFont.getBaseline()))
			- overlayYOffset + TG.canvasTopOffset * -1;
	titleFont.drawSimple(titleText, titleX, titleY);

	if (testMode) {
		TG_MainController.drawTextRect(titleFont, titleX, titleY);
	}

	this.overlay.image.resetTarget();
};

TG_Options.prototype.addInitButtons = function(overlayXOffset, overlayYOffset, enableButtons) {
	"use strict";
	var i, j, buttonHeight, buttonMaxWidth, left, totalHeight, row, buttonX, buttonY, buttonWidth, stop = false, buttonsToShow = this.settings.buttons[this.type];
	if (this.type === "inGame" && TG.settings.game.framework.menuButtons) {
		buttonsToShow = TG.settings.game.framework.menuButtons;
	}

	// remove more games button if no more games url
	if (typeof TG.controller.getMoreGamesFunction() !== "function") {
		for (i = 0; i < buttonsToShow.length; i++) {
			if (typeof buttonsToShow[i] === "string" && buttonsToShow[i] === "moreGames") {
				buttonsToShow.splice(i, 1);
				break;
			}
			for (j = 0; j < buttonsToShow[i].length; j++) {
				if (buttonsToShow[i][j] === "moreGames") {
					buttonsToShow[i].splice(j, 1);
					break;
				}
			}
		}
	}

	// remove music button if no music
	if (TG.config.playMusic === false || TG.controller.loadMusic === false) {
		for (i = 0; i < buttonsToShow.length; i++) {
			if (buttonsToShow[i] instanceof Array) {
				for (j = 0; j < buttonsToShow[i].length; j++) {
					if (buttonsToShow[i][j] === "music") {
						if (TG.controller.loadSfx) {
							buttonsToShow[i] = "sfx_big";
						}
						else {
							buttonsToShow.splice(i, 1);
						}
						stop = true;
						break;
					}
				}
				if (stop) {
					break;
				}
			}
			else if (buttonsToShow[i] === "music_big") {
				buttonsToShow.splice(i, 1);
				break;
			}
		}
	}
	// remove sfx button if no sfx
	if (!TG.controller.loadSfx) {
		for (i = 0; i < buttonsToShow.length; i++) {
			if (buttonsToShow[i] instanceof Array) {
				for (j = 0; j < buttonsToShow[i].length; j++) {
					if (buttonsToShow[i][j] === "sfx") {
						if (TG.config.playMusic !== false && TG.controller.loadMusic) {
							buttonsToShow[i] = "music_big";
						}
						else {
							buttonsToShow.splice(i, 1);
						}
						stop = true;
						break;
					}
				}
				if (stop) {
					break;
				}
			}
			else if (buttonsToShow[i] === "sfx_big") {
				buttonsToShow.splice(i, 1);
				break;
			}
		}
	}

	// remove language
	if (TG.dictionary.getAvailableLanguages().length === 1) {
		for (i = 0; i < buttonsToShow.length; i++) {
			if (buttonsToShow[i] === "language") {
				buttonsToShow.splice(i, 1);
				break;
			}
		}
	}

	buttonHeight = this.buttonSettings["default_text"].sprite.height;
	buttonMaxWidth = this.settings.buttonsWidth;
	left = TG.functions.computeImgCoordinatesFromSettings(this.settings.buttonsOffsetX, this.canvas.width, buttonMaxWidth) - overlayXOffset;
	totalHeight = buttonHeight * buttonsToShow.length + this.settings.buttonsOffsetInBetween * (buttonsToShow.length - 1);
	buttonY = TG.functions.computeImgCoordinatesFromSettings(this.settings.buttonsOffsetY, this.overlay.image.height, totalHeight) - overlayYOffset
			+ TG.canvasTopOffset * -1;

	for (i = 0; i < buttonsToShow.length; i++) {
		buttonX = left;
		buttonWidth = buttonMaxWidth;
		if (typeof buttonsToShow[i] === "string") {
			this.addButton(buttonsToShow[i], buttonX, buttonY, buttonWidth, enableButtons);
		}
		else {
			row = buttonsToShow[i];
			buttonWidth = (buttonMaxWidth - (row.length - 1) * this.settings.buttonsOffsetInBetween) / row.length;
			for (j = 0; j < row.length; j++) {
				this.addButton(row[j], buttonX, buttonY, buttonWidth, enableButtons);
				buttonX += buttonWidth + this.settings.buttonsOffsetInBetween;
			}
		}
		buttonY += buttonHeight + this.settings.buttonsOffsetInBetween;
	}
};

TG_Options.prototype.toggleMusic = function(toggleValue) {
	"use strict";
	var value = true;
	if (toggleValue === "off") {
		value = false;
		TG.analytics.reportEvent("off", "options:music");
	}
	else {
		TG.analytics.reportEvent("on", "options:music");
	}
	TG.controller.playMusic(value);
	return true;
};

TG_Options.prototype.toggleSFX = function(toggleValue) {
	"use strict";
	var value = true;
	if (toggleValue === "off") {
		value = false;
		TG.analytics.reportEvent("off", "options:sfx");
	}
	else {
		TG.analytics.reportEvent("on", "options:sfx");
	}
	TG.controller.playSFX(value);
	return true;
};

TG_Options.prototype.toggleLang = function(langKey) {
	"use strict";
	TG.dictionary.setLanguage(langKey);
	TG.analytics.reportEvent(langKey, "options:language");
	return true;
};

TG_Options.prototype.showTutorial = function() {
	"use strict";
	var i, x, y, font, text, maxFontSize, image, self = this;
	var backgroundX = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetX, self.canvas.width, self.settings.backgroundImage.width);
	var backgroundY = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetY, self.canvas.height,
			self.settings.backgroundImage.height)
			+ TG.canvasTopOffset * -1;
	function next() {
		self.tutorialIdx += 1;
		self.showTutorial();
		return true;
	}
	function previous() {
		self.tutorialIdx -= 1;
		self.showTutorial();
		return true;
	}
	function close() {
		var i;
		// redraw background
		self.drawBackground(backgroundX, backgroundY);
		self.closeButton.enabled = true;
		// remove quit buttons
		for (i = 0; i < self.buttons.length; i++) {
			tbGame.removeToken(self.buttons[i]);
		}
		self.buttons = [];
		// add normal buttons
		self.addInitButtons(backgroundX, backgroundY, true);
	}
	if (self.tutorialIdx === undefined) {
		self.tutorialIdx = 0;
	}
	self.tutorialData = (TG.game.getTutorialData !== undefined) ? TG.game.getTutorialData(TG.controller.currentLevelIdx, TG.controller.getDifficulty()) : [];
	TG.analytics.reportEvent(((self.tutorialIdx < 10) ? "0" : "") + self.tutorialIdx, "options:tutorial");
	// remove all buttons except close button
	for (i = 0; i < self.buttons.length; i++) {
		tbGame.removeToken(self.buttons[i]);
	}
	self.buttons = [];

	if (!this.challengeMode) {
		self.drawBackground(backgroundX, backgroundY);
	}
	else {
		self.overlay.image.setTarget();
		tbGraphics.clear();
		self.closeButton.enabled = false;
	}
	self.overlay.image.setTarget();
	// draw tutorial background
	if (self.settings.tutorialBackgroundImage !== undefined) {
		x = TG.functions.computeImgCoordinatesFromSettings(self.settings.tutorialBackgroundOffsetX, self.overlay.image.width,
				self.settings.tutorialBackgroundImage.width);
		y = TG.functions.computeImgCoordinatesFromSettings(self.settings.tutorialBackgroundOffsetY, self.overlay.image.height,
				self.settings.tutorialBackgroundImage.height);
		self.settings.tutorialBackgroundImage.drawSimple(0, x, y);
	}

	// draw tutorial title
	text = self.tutorialData[self.tutorialIdx].title;
	if (text !== undefined && text !== "") {
		font = f_default.clone();
		if (self.settings.tutorialTitleFont) {
			font.setProperties(self.settings.tutorialTitleFont);
		}
		maxFontSize = font.textFitSize(text, self.settings.tutorialTitleMaxWidth, self.settings.tutorialTitleMaxHeight, self.settings.tutorialTitleMaxWidth);
		if (font.getFontSize() > maxFontSize) {
			font.setFontSize(maxFontSize);
		}
		x = TG.functions.computeTextCoordinatesFromSettings(self.settings.tutorialTitleOffsetX, self.overlay.image.width, font.textWidth(text,
				self.settings.tutorialTitleMaxWidth), font.getAlign());
		y = TG.functions.computeTextCoordinatesFromSettings(self.settings.tutorialTitleOffsetY, self.overlay.image.height, font.textHeight(text,
				self.settings.tutorialTitleMaxHeight), font.getBaseline());
		font.drawSimple(text, x, y);

		if (testMode) {
			TG_MainController.drawTextRect(font, x, y, self.settings.tutorialTitleMaxWidth, self.settings.tutorialTitleMaxHeight);
		}
	}

	// draw tutorial data
	if (self.tutorialIdx < self.tutorialData.length) {
		image = self.tutorialData[self.tutorialIdx].image;
		x = TG.functions.computeImgCoordinatesFromSettings(self.settings.tutorialImageOffsetX, self.overlay.image.width, image.width);
		y = TG.functions.computeImgCoordinatesFromSettings(self.settings.tutorialImageOffsetY, self.overlay.image.height, image.height);
		image.drawSimple(0, x, y);
		text = self.tutorialData[self.tutorialIdx].text;
		font = f_default.clone();
		if (self.settings.tutorialFont) {
			font.setProperties(self.settings.tutorialFont);
		}
		maxFontSize = font.textFitSize(text, self.settings.tutorialTextWidth, self.settings.tutorialTextHeight, self.settings.tutorialTextWidth);
		if (font.getFontSize() > maxFontSize) {
			font.setFontSize(maxFontSize);
		}
		x = TG.functions.computeTextCoordinatesFromSettings(self.settings.tutorialTextOffsetX, self.overlay.image.width, font.textWidth(text,
				self.settings.tutorialTextWidth), font.getAlign());
		y = TG.functions.computeTextCoordinatesFromSettings(self.settings.tutorialTextOffsetY, self.overlay.image.height, font.textHeight(text,
				self.settings.tutorialTextWidth), font.getBaseline());
		font.drawSimple(text, x, y, self.settings.tutorialTextWidth);

		if (testMode) {
			TG_MainController.drawTextRect(font, x, y, self.settings.tutorialTextWidth, self.settings.tutorialTextHeight);
		}

	}
	self.overlay.image.resetTarget();

	// add buttons
	image = s_tutorialButton_previous;
	x = TG.functions.computeImgCoordinatesFromSettings(self.settings.tutorialButtonPreviousX, self.canvas.width, image.width) - self.overlay.x;
	y = TG.functions.computeImgCoordinatesFromSettings(self.settings.tutorialButtonPreviousY, self.canvas.height, image.height) - self.overlay.y
			- TG.canvasTopOffset;
	if (self.tutorialIdx - 1 >= 0) {
		self.buttons.push(new TG_ButtonBase(x, y, self.depth - 20, new tbMaskImage(image), [image], {
			callbackFunc: previous,
			callbackObj: self
		}, self.overlay));
	}
	else {
		image = s_tutorialButton_close;
		self.buttons.push(new TG_ButtonBase(x, y, self.depth - 20, new tbMaskImage(image), [image], {
			callbackFunc: close,
			callbackObj: self
		}, self.overlay));
	}

	image = s_tutorialButton_next;
	x = TG.functions.computeImgCoordinatesFromSettings(this.settings.tutorialButtonNextX, self.canvas.width, image.width) - self.overlay.x;
	y = TG.functions.computeImgCoordinatesFromSettings(this.settings.tutorialButtonNextY, self.canvas.height, image.height) - self.overlay.y
			- TG.canvasTopOffset;
	if (self.tutorialIdx + 1 < self.tutorialData.length) {
		self.buttons.push(new TG_ButtonBase(x, y, self.depth - 20, new tbMaskImage(image), [image], {
			callbackFunc: next,
			callbackObj: self
		}, self.overlay));
	}
	else {
		image = s_tutorialButton_close;
		self.buttons.push(new TG_ButtonBase(x, y, self.depth - 20, new tbMaskImage(image), [image], {
			callbackFunc: close,
			callbackObj: self
		}, self.overlay));
	}

	return true;
};

TG_Options.prototype.showAbout = function() {
	"use strict";
	var i, x, y, self = this, t;

	var backgroundX = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetX, self.canvas.width, self.settings.backgroundImage.width);
	var backgroundY = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetY, self.canvas.height,
			self.settings.backgroundImage.height)
			+ TG.canvasTopOffset * -1;

	function drawText(text, fontDefinition, xOffset, yOffset, maxWidth, maxHeight) {
		var font, x, y, maxFontSize;
		font = f_default.clone();
		if (fontDefinition) {
			font.setProperties(fontDefinition);
		}
		maxFontSize = font.textFitSize(text, maxWidth, maxHeight, maxWidth);
		if (font.getFontSize() > maxFontSize) {
			font.setFontSize(maxFontSize);
		}
		x = TG.functions.computeTextCoordinatesFromSettings(xOffset, self.overlay.image.width, font.textWidth(text, maxWidth), font.getAlign());
		y = TG.functions.computeTextCoordinatesFromSettings(yOffset, self.overlay.image.height, font.textHeight(text, maxHeight), font.getBaseline());
		font.drawSimple(text, x, y, maxWidth);

		if (testMode) {
			TG_MainController.drawTextRect(font, x, y, maxWidth, maxHeight);
		}

		return y + maxHeight;
	}
	function drawSimpleImage(image, xOffset, yOffset) {
		var x, y;
		x = TG.functions.computeImgCoordinatesFromSettings(xOffset, self.overlay.image.width, image.width);
		y = TG.functions.computeImgCoordinatesFromSettings(yOffset, self.overlay.image.height, image.height);
		image.drawSimple(0, x, y);
		return y + image.height;
	}
	function close() {
		var i;
		// redraw background
		self.drawBackground(backgroundX, backgroundY);
		self.closeButton.enabled = true;
		// remove quit buttons
		for (i = 0; i < self.buttons.length; i++) {
			tbGame.removeToken(self.buttons[i]);
		}
		self.buttons = [];
		// add normal buttons
		self.addInitButtons(backgroundX, backgroundY, true);
		self.showingAbout = false;
	}

	TG.analytics.reportEvent("about", "options");
	// remove all buttons except close button
	for (i = 0; i < self.buttons.length; i++) {
		tbGame.removeToken(self.buttons[i]);
	}
	self.buttons = [];

	if (!this.challengeMode) {
		self.drawBackground(backgroundX, backgroundY);
	}
	else {
		self.overlay.image.setTarget();
		tbGraphics.clear();
		self.closeButton.enabled = false;
	}
	self.overlay.image.setTarget();

	// draw about background
	if (self.settings.tutorialBackgroundImage !== undefined) {
		drawSimpleImage(self.settings.tutorialBackgroundImage, self.settings.tutorialBackgroundOffsetX, self.settings.tutorialBackgroundOffsetY);
	}

	var aboutButtonSpec = null;

	if (typeof TG.hooks.drawAboutScreen === "function") {
		aboutButtonSpec = TG.hooks.drawAboutScreen(self.settings, drawText, drawSimpleImage, self.overlay.image);
	}
	else {
		t = TG.dictionary.getText("optionsAbout_header", "<OPTIONSABOUT_HEADER>");
		drawText(t, self.settings.aboutHeaderFont, self.settings.aboutHeaderOffsetX, self.settings.aboutHeaderOffsetY, self.settings.aboutHeaderMaxWidth,
				self.settings.aboutHeaderMaxHeight);

		// draw logo
		drawSimpleImage(s_logo_coolgames, self.settings.aboutLogoOffsetX, self.settings.aboutLogoOffsetY);

		// draw text
		t = TG.dictionary.getText("optionsAbout_text", "<OPTIONSABOUT_TEXT>");
		drawText(t, self.settings.aboutTextFont, self.settings.aboutTextOffsetX, self.settings.aboutTextOffsetY, self.settings.aboutTextMaxWidth,
				self.settings.aboutTextMaxHeight);
	}
	// draw version
	drawText(TG.dictionary.getText("optionsAbout_version", "<OPTIONSABOUT_VERSION>") + " " + TG.controller.getShortVersion()
			+ ((TG.size === "big") ? "b" : "s"), self.settings.aboutVersionFont, self.settings.aboutVersionOffsetX, self.settings.aboutVersionOffsetY,
			self.settings.aboutVersionMaxWidth, self.settings.aboutVersionMaxHeight);
	self.overlay.image.resetTarget();

	if (aboutButtonSpec) {
		var buttonSpecs = aboutButtonSpec;
		for (i = 0; i < buttonSpecs.length; ++i) {
			var buttonSpec = buttonSpecs[i];
			self.buttons.push(new TG_ButtonBase(buttonSpec.x, buttonSpec.y, self.depth - 10, tbMaskRectangle(0, 0, buttonSpec.width, buttonSpec.height), null,
					{
						callbackFunc: (function(url) {
							return function() {
								TG.hooks.openUrl(url);
							};
						})(buttonSpec.url),
						immediate: true
					}, self.overlay));
		}

	}
	else {
		// add invisible link button
		if (TG.config.homeUrl !== undefined) {

			var btn_x = TG.functions.computeImgCoordinatesFromSettings(self.settings.aboutLogoOffsetX, self.overlay.image.width, s_logo_coolgames.width);
			var btn_y = TG.functions.computeImgCoordinatesFromSettings(self.settings.aboutLogoOffsetY, self.overlay.image.height, s_logo_coolgames.height);

			btn_x = Math.min(btn_x, TG.functions.computeImgCoordinatesFromSettings(self.settings.aboutTextOffsetX, self.overlay.image.width, self.settings.aboutTextMaxWidth));
			btn_y = Math.min(btn_y, TG.functions.computeImgCoordinatesFromSettings(self.settings.aboutTextOffsetY, self.overlay.image.height, self.settings.aboutTextMaxHeight));

			var btn_w = Math.max(self.settings.aboutTextMaxWidth, s_logo_coolgames.width);
			var btn_h = TG.functions.computeImgCoordinatesFromSettings(self.settings.aboutTextOffsetY, self.overlay.image.height, self.settings.aboutTextMaxHeight) + self.settings.aboutTextMaxHeight - btn_y;

			self.buttons.push(new TG_ButtonBase(btn_x, btn_y, self.depth - 10, tbMaskRectangle(0, 0, btn_w, btn_h), null, {
				callbackFunc: function() {
					TG.hooks.openUrl(TG.config.homeUrl);
				},
				immediate: true
			}, self.overlay));
		}
	}

	// add backbutton
	x = TG.functions.computeImgCoordinatesFromSettings(self.settings.aboutBackBtnOffsetX, self.overlay.image.width, self.settings.aboutBackBtnWidth);
	y = self.settings.aboutBackBtnOffsetY;
	self.buttons.push(new TG_ButtonText("default_text", x, y, self.depth - 20, "optionsAbout_backBtn", self.settings.aboutBackBtnWidth, {
		callbackFunc: close,
		callbackObj: self
	}, self.overlay));

	this.showingAbout = true;
	return true;
};

TG_Options.prototype.showVersions = function() {
	"use strict";
	var i, x, y, self = this, t, f;
	var backgroundX = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetX, self.canvas.width, self.settings.backgroundImage.width);
	var backgroundY = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetY, self.canvas.height,
			self.settings.backgroundImage.height)
			+ TG.canvasTopOffset * -1;
	function close() {
		var i;
		// redraw background
		self.drawBackground(backgroundX, backgroundY);
		// remove quit buttons
		for (i = 0; i < self.buttons.length; i++) {
			tbGame.removeToken(self.buttons[i]);
		}
		self.buttons = [];
		// add normal buttons
		self.addInitButtons(backgroundX, backgroundY, true);
	}

	TG.analytics.reportEvent("versions", "options");
	// remove all buttons except close button
	for (i = 0; i < self.buttons.length; i++) {
		tbGame.removeToken(self.buttons[i]);
	}
	self.buttons = [];

	self.drawBackground(backgroundX, backgroundY);
	self.overlay.image.setTarget();
	// draw about background
	if (self.settings.tutorialBackgroundImage !== undefined) {
		self.settings.tutorialBackgroundImage.drawSimple(0, TG.functions.computeImgCoordinatesFromSettings(self.settings.tutorialBackgroundOffsetX,
				self.overlay.width, self.settings.tutorialBackgroundImage.width), TG.functions.computeImgCoordinatesFromSettings(
				self.settings.tutorialBackgroundOffsetY, self.overlay.height, self.settings.tutorialBackgroundImage.height));
	}

	// draw text
	f = f_default.clone();
	f.setProperties(self.settings.aboutVersionFont);
	f.setAlign("left");
	x = self.settings.versionsOffsetX;
	y = self.settings.versionsOffsetY;
	for (i in TG.version) {
		t = i + ": " + TG.version[i];
		f.drawSimple(t, x, y);
		y += f.textHeight(t) + self.settings.versionsMarginY;
	}

	// add backbutton
	x = TG.functions.computeImgCoordinatesFromSettings(self.settings.aboutBackBtnOffsetX, self.overlay.image.width, self.settings.aboutBackBtnWidth);
	y = self.settings.aboutBackBtnOffsetY;
	self.buttons.push(new TG_ButtonText("default_text", x, y, self.depth - 20, "optionsAbout_backBtn", self.settings.aboutBackBtnWidth, {
		callbackFunc: close,
		callbackObj: self
	}, self.overlay));

	return true;
};

TG_Options.prototype.showHighScores = function() {
	"use strict";
	return true;
};

TG_Options.prototype.showMoreGames = function() {
	onMoreGames();return true;
	TG.analytics.reportEvent("moreGames", "options");
	var moreGamesFunction = TG.controller.getMoreGamesFunction();
	if (typeof moreGamesFunction === "function") {
		moreGamesFunction();
	}
	return true;
};

TG_Options.prototype.quit = function() {
	"use strict";
	var quit, self = this;
	quit = function() {
		TG.analytics.reportEvent("confirm_yes", "options:quit");
		tbGame.removeToken(self);
		TG.controller._quitGame();
		return true;
	};
	this.showConfirmQuestion("optionsQuitConfirmationText", "optionsQuitConfirmBtn_Yes", "optionsQuitConfirmBtn_No", quit);
};

TG_Options.prototype.restart = function() {
	"use strict";
	var restart, self = this;
	restart = function() {
		TG.analytics.reportEvent("confirm_yes", "options:restart");
		tbGame.removeToken(self);
		TG.controller._restartGame();
		return true;
	};
	this.showConfirmQuestion("optionsRestartConfirmationText", "optionsQuitConfirmBtn_Yes", "optionsQuitConfirmBtn_No", restart);
};

TG_Options.prototype.forfeitChallenge = function() {
	"use strict";
	var callback, forfeit, self = this;
	callback = function(succes) {
		var key = succes ? "challengeForfeitMessage_success" : "challengeForfeitMessage_error";
		self.showMessage(TG.dictionary.getText(key, "<" + key.toUpperCase() + ">"));
		if (succes) {
			self.closeButton.enabled = false;
			if (!self.shouldPause) {
				TG.controller._pauseAll();
			}
		}
	};
	forfeit = function() {
		TG.controller.forfeitChallenge(callback);
		return true;
	};
	this.showConfirmQuestion("challengeForfeitConfirmText", "challengeForfeitConfirmBtn_yes", "challengeForfeitConfirmBtn_no", forfeit);
};

TG_Options.prototype.cancelChallenge = function() {
	"use strict";
	var callback, cancel, self = this;
	callback = function(succes) {
		var key = succes ? "challengeCancelMessage_success" : "challengeCancel_error";
		self.showMessage(TG.dictionary.getText(key, "<" + key.toUpperCase() + ">"));
		if (succes) {
			self.closeButton.enabled = false;
			if (!self.shouldPause) {
				TG.controller._pauseAll();
			}
		}
	};
	cancel = function() {
		TG.controller.cancelChallenge(callback);
		return true;
	};
	this.showConfirmQuestion("challengeCancelConfirmText", "challengeCancelConfirmBtn_yes", "challengeCancelConfirmBtn_no", cancel);
};

TG_Options.prototype.showConfirmQuestion = function(questionTextKey, confirmTextKey, cancelTextKey, confirmCallback, cancelCallback) {
	"use strict";
	var i, text, font, maxFontSize, x, y, self = this, w, h, yesCallback, noCallback;
	yesCallback = function() {
		if (typeof confirmCallback === "function") {
			return confirmCallback();
		}
		return true;
	};
	noCallback = function() {
		var i, x, y;
		x = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetX, self.canvas.width, self.settings.backgroundImage.width);
		y = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetY, self.canvas.height, self.settings.backgroundImage.height)
				+ TG.canvasTopOffset * -1;
		// redraw background
		self.drawBackground(x, y);
		// remove quit buttons
		for (i = 0; i < self.buttons.length; i++) {
			tbGame.removeToken(self.buttons[i]);
		}
		self.buttons = [];
		// add normal buttons
		self.addInitButtons(x, y, true);
		if (typeof cancelCallback === "function") {
			return cancelCallback();
		}
		return true;
	};

	// remove all buttons except close button
	for (i = 0; i < self.buttons.length; i++) {
		tbGame.removeToken(self.buttons[i]);
	}
	self.buttons = [];

	// draw confirm text
	text = TG.dictionary.getText(questionTextKey, "<" + questionTextKey.toUpperCase() + ">");
	font = f_default.clone();
	if (self.settings.confirmQuestionFont) {
		font.setProperties(self.settings.confirmQuestionFont);
	}
	else if (self.settings.quitConfirmFont) {
		font.setProperties(self.settings.quitConfirmFont);
	}
	maxFontSize = font.textFitSize(text, self.settings.confirmQuestionTextWidth, self.settings.confirmQuestionTextHeight, true);
	if (maxFontSize < font.getFontSize()) {
		font.setFontSize(maxFontSize);
	}
	w = font.textWidth(text, self.settings.confirmQuestionTextWidth) + 10;
	h = font.textHeight(text, self.settings.confirmQuestionTextWidth) + 10;
	x = TG.functions.computeTextCoordinatesFromSettings(self.settings.confirmQuestionTextX, self.overlay.image.width, w, font.getAlign());
	y = TG.functions.computeTextCoordinatesFromSettings(self.settings.confirmQuestionTextY, self.overlay.image.height, h, font.getBaseline());
	self.overlay.image.setTarget();
	font.drawSimple(text, x, y, w);
	if (testMode) {
		TG_MainController.drawTextRect(font, x, y, self.settings.confirmQuestionTextWidth, self.settings.confirmQuestionTextHeight);
	}
	self.overlay.image.resetTarget();
	// add buttons
	x = TG.functions.computeImgCoordinatesFromSettings(self.settings.confirmQuestionBtnNoX, self.canvas.width, self.settings.confirmQuestionBtnsWidth)
			- self.overlay.x;
	y = TG.functions.computeImgCoordinatesFromSettings(self.settings.confirmQuestionBtnNoY, self.canvas.height,
			this.buttonSettings["default_text"].sprite.height)
			- self.overlay.y - TG.canvasTopOffset;
	this.buttons.push(new TG_ButtonText("default_text", x, y, this.depth - 20, cancelTextKey, self.settings.confirmQuestionBtnsWidth, {
		callbackFunc: noCallback,
		callbackObj: self
	}, self.overlay));
	x = TG.functions.computeImgCoordinatesFromSettings(self.settings.confirmQuestionBtnYesX, self.canvas.width, self.settings.confirmQuestionBtnsWidth)
			- self.overlay.x;
	y = TG.functions.computeImgCoordinatesFromSettings(self.settings.confirmQuestionBtnYesY, self.canvas.height,
			this.buttonSettings["default_text"].sprite.height)
			- self.overlay.y - TG.canvasTopOffset;
	this.buttons.push(new TG_ButtonText("default_text", x, y, this.depth - 20, confirmTextKey, self.settings.confirmQuestionBtnsWidth, {
		callbackFunc: yesCallback,
		callbackObj: self
	}, self.overlay));
	return true;
};

TG_Options.prototype.showMessage = function(text) {
	"use strict";
	var i, font, maxFontSize, x, y, self = this, w, h;

	// remove all buttons except close button
	for (i = 0; i < self.buttons.length; i++) {
		tbGame.removeToken(self.buttons[i]);
	}
	self.buttons = [];

	// redraw background
	x = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetX, self.canvas.width, self.settings.backgroundImage.width);
	y = TG.functions.computeImgCoordinatesFromSettings(self.settings.overlayImageOffsetY, self.canvas.height, self.settings.backgroundImage.height)
			+ TG.canvasTopOffset * -1;
	// redraw background
	self.drawBackground(x, y);

	// draw message text
	font = f_default.clone();
	if (self.settings.messageFont) {
		font.setProperties(self.settings.messageFont);
	}
	maxFontSize = font.textFitSize(text, self.settings.messageTextWidth, self.settings.messageTextHeight, true);
	if (maxFontSize < font.getFontSize()) {
		font.setFontSize(maxFontSize);
	}
	w = font.textWidth(text, self.settings.messageTextWidth) + 10;
	h = font.textHeight(text, self.settings.messageTextWidth) + 10;
	x = TG.functions.computeTextCoordinatesFromSettings(self.settings.messageTextX, self.overlay.image.width, w, font.getAlign());
	y = TG.functions.computeTextCoordinatesFromSettings(self.settings.messageTextY, self.overlay.image.height, h, font.getBaseline());
	self.overlay.image.setTarget();
	font.drawSimple(text, x, y, w);
	if (testMode) {
		TG_MainController.drawTextRect(font, x, y, self.settings.messageTextWidth, self.settings.messageTextHeight);
	}
	self.overlay.image.resetTarget();
};

TG_Options.prototype.showStartScreen = function() {
	"use strict";
	TG.analytics.reportEvent("startScreen", "options");
	TG.controller._showStartScreen();
	return true;
};

TG_Options.prototype.close = function() {
	"use strict";
	tbGame.removeToken(this);
	this.canvas.drawTokens = true;
	return true;
};

// handleAdd is called when the token is (re-) added to the game.
TG_Options.prototype.handleAdd = function() {
	"use strict";
	var y, activateButtons, image, self;
	// pause all tokens
	if (this.shouldPause) {
		TG.controller._pauseAll(this);
	}
	TG.controller.activeModelDialog = this;
	this.fireLanguageEvent = false;
	this.fireResizeEvent = false;

	// create overlay surface
	image = this.settings.backgroundImage;
	this.overlay = new TG_AnimatedImage(this.depth - 10, this.layer, new tbSurface(image.width, image.height));
	this.overlay.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageOffsetX, this.canvas.width, image.width);
	y = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageOffsetY, this.canvas.height, image.height) + TG.canvasTopOffset * -1;
	this.overlay.y = y;
	// draw background
	this.drawBackground(this.overlay.x, this.overlay.y);

	this.buttons = [];
	if (this.tutorialVisibleOnStart) {
		this.showTutorial();
	}
	else {
		// add buttons
		this.addInitButtons(this.overlay.x, this.overlay.y);
	}
	// add close button
	this.closeButton = new TG_ButtonBase(this.settings.closeButtonX, this.settings.closeButtonY, this.depth - 20, new tbMaskRectangle(0, 0,
			this.settings.closeButtonMaskWidth, this.settings.closeButtonMaskHeight), undefined, {
		callbackFunc: this.close,
		callbackObj: this
	}, this.overlay);

	// add keyAreas
	this.versionsString = "versions";
	this.area = new tbKeyArea();
	TG.functions.setLayerAndCanvas(this.area, TG.frameworkUILayer);
	tbGame.setTokenDepth(this.area, this.depth - 1);
	this.area.addRectangle("keyAreaLeft", this.overlay.x, this.overlay.y + this.settings.tutorialBackgroundOffsetY, this.settings.aboutVersionKeyAreaWidth,
			this.settings.aboutVersionKeyAreaHeight, tbKeyCodes.vkL);
	this.area.addRectangle("keyAreaRight", this.overlay.x + this.overlay.width - this.settings.aboutVersionKeyAreaWidth, this.overlay.y
			+ this.settings.tutorialBackgroundOffsetY, this.settings.aboutVersionKeyAreaWidth, this.settings.aboutVersionKeyAreaHeight, tbKeyCodes.vkR);
	this.area.addRectangle("keyAreaCentre", TG.mainWidth / 2 - this.settings.aboutVersionKeyAreaWidth / 2, this.overlay.y
			+ this.settings.tutorialBackgroundOffsetY, this.settings.aboutVersionKeyAreaWidth, this.settings.aboutVersionKeyAreaHeight, tbKeyCodes.vkC);

	// start animation
	self = this;
	activateButtons = function() {
		var i;
		for (i = 0; i < self.buttons.length; i++) {
			self.buttons[i].enabled = true;
		}
	};
	if (this.type !== "inGame") {
		// slide in from bottom
		this.overlay.y = this.canvas.height;
	}
	else {
		// slide in from top
		this.overlay.y = -this.overlay.image.height;
	}
	this.overlay.addAnimator("y", y, this.settings.overlayAnimInDuration, this.settings.overlayAnimInEase, activateButtons);
};

// handleRemove is called when the token is removed from the game.
TG_Options.prototype.handleRemove = function() {
	"use strict";
	var i;
	if (this.shouldPause) {
		TG.controller._resumeAll();
	}
	if (this.fireLanguageEvent) {
		tbGame.addSpecial(TG.languageSetEventId, TG.dictionary.getLanguage());
	}
	if (this.fireResizeEvent) {
		tbGame.addSpecial(TG.resizeEventId);
	}
	for (i = 0; i < this.buttons.length; i++) {
		tbGame.removeToken(this.buttons[i]);
	}
	this.area.clear();
	tbGame.removeToken(this.area);
	tbGame.removeToken(this.closeButton);
	tbGame.removeToken(this.overlay);
	TG.controller.activeModelDialog = null;
};

TG_Options.prototype.handleTouchUp = function() {
	"use strict";
	return true;
};

TG_Options.prototype.handleTouchDown = function() {
	"use strict";
	return true;
};

TG_Options.prototype.handleKeyUp = function(keyCode) {
	"use strict";
	if (this.showingAbout) {
		if (keyCode === tbKeyCodes.vkC) {
			this.versionsString = "";
		}
		else if (keyCode === tbKeyCodes.vkL) {
			this.versionsString += "l";
		}
		else if (keyCode === tbKeyCodes.vkR) {
			this.versionsString += "r";
		}
		if (this.versionsString === "lrl") {
			this.showVersions();
		}
	}
};

TG_Options.prototype.handleSpecial = function(id) {
	"use strict";
	if (id === TG.languageSetEventId) {
		this.drawBackground(this.overlay.x, this.overlay.y);
		this.fireLanguageEvent = true;
	}
	else if (id === TG.resizeEventId) {
		this.fireResizeEvent = true;
	}
	else if (id === TG.backButtonEventId) {
		this.close();
	}
};

//******************************************************
//*****    Token Resource: TG_GameEndScreen
//******************************************************

// ***************************************
// Definition of game token TG_GameEndScreen
// ***************************************

// The constructor for the TG_GameEndScreen game token.
var TG_GameEndScreen = function(){
	"use strict";
	// Properties used by the engine
	this.depth = -200;
	this.visible = true;
	this.active = true;
	TG.functions.setLayerAndCanvas(this, TG.frameworkBackgroundLayer);
	// Your own properties
	var setting;
	this.settings = TG.settings.tg.gameEndScreen;
	if(TG.orientation === "landscape" && TG.settings.tg.gameEndScreen_landscape){
		for(setting in TG.settings.tg.gameEndScreen_landscape){
			this.settings[setting] = TG.settings.tg.gameEndScreen_landscape[setting];
		}
	}
	this.buttonSettings = TG.settings.tg.buttonDefinitions;
	// apply theme specific setting overwrites
	for(setting in TG.settings.theme.gameEndScreen){
		this.settings[setting] = TG.settings.theme.gameEndScreen[setting];
	}
	// Add it to the game engine
	tbGame.addToken(this);
};

TG_GameEndScreen.prototype.drawBackground = function(){
    "use strict";
    var x, y, font, text, maxFontSize,
        top = Math.abs(TG.canvasTopOffset),
        image = this.settings.backgroundImage,
        scale = (TG.mainHeight - top)/image.combinedHeight;
    this.overlay.image = new tbSurface(scale*image.combinedWidth, scale*image.combinedHeight);
    this.overlay.image.setTarget();
    this.overlay.y = Math.abs(TG.canvasTopOffset);
    image.drawCombinedExt(0,0, scale, scale, 0, 1);
    font = f_default.clone();
    font.setProperties(this.settings.font);
    text = TG.dictionary.getText("gameEndScreenTitle", "<GAMEENDSCREENTITLE>");
	maxFontSize = font.textFitSize(text, this.settings.textMaxWidth - (font.getStroke()?font.getStrokeWidth():0), this.settings.textMaxHeight - (font.getStroke()?font.getStrokeWidth():0), true);
	if(maxFontSize < font.getFontSize()){
		font.setFontSize(maxFontSize);
	}
    x = TG.functions.computeTextCoordinatesFromSettings(this.settings.textX, this.canvas.width, font.textWidth(text), font.getAlign());
    y = TG.functions.computeTextCoordinatesFromSettings(this.settings.textY, this.canvas.height, font.textHeight(text), font.getBaseline());
    font.drawSimple(text, x, y, this.settings.textMaxWidth);
    this.overlay.image.resetTarget();
    this.overlay.canvas.drawTokens = true;
};

// handleAdd is called when the token is (re-) added to the game.
TG_GameEndScreen.prototype.handleAdd = function() {
	"use strict";
    var x, y, callback, self = this,
        image = this.settings.backgroundImage,
        surface = new tbSurface(image.width, image.height);
    //create screen
    this.overlay = new TG_AnimatedImage(this.depth, TG.frameworkUILayer, surface);
    this.overlay.x = 0;
    this.overlay.y = Math.abs(TG.canvasTopOffset);
    this.drawBackground();

    //add button
    callback = function(){
        tbGame.removeToken(self);
        TG.controller._showStartScreen();
    };
    x = TG.functions.computeImgCoordinatesFromSettings(this.settings.btnX, this.canvas.width, this.settings.btnWidth);
    y = TG.functions.computeImgCoordinatesFromSettings(this.settings.btnY, this.canvas.height, this.buttonSettings[this.settings.btnType].sprite.height);
    this.button = new TG_ButtonText(this.settings.btnType, x, y, this.depth - 10, "gameEndScreenBtnText", this.settings.btnWidth, callback, this.overlay);

};

// handleRemove is called when the token is removed from the game.
TG_GameEndScreen.prototype.handleRemove = function() {
	"use strict";
    tbGame.removeToken(this.overlay);
    tbGame.removeToken(this.button);
};

TG_GameEndScreen.prototype.handleSpecial = function(id) {
    "use strict";
    if(id === TG.languageSetEventId || id === TG.resizeEventId){
        this.drawBackground();
    }
};
//******************************************************
//*****    Token Resource: TG_ButtonBase
//******************************************************

// ***************************************
// Definition of game token TG_ButtonBase
// ***************************************

// The constructor for the TG_ButtonBase game token.
var TG_ButtonBase = function(x, y, depth, mask, images, callback, parent){
	"use strict";
	// Properties used by the engine
	this.depth = depth;
	this.visible = true;
	this.active = true;
	this.group = "TG_Token";
	TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
	this.originX = 0;
	this.originY = 0;
	this.x = x;
	this.y = y;
	this.width = (images)? images[0].width : (mask.bBoxRight - mask.bBoxLeft);
	this.height = (images)? images[0].height : (mask.bBoxBottom - mask.bBoxTop);
	this.xScale = 1;
	this.yScale = 1;
	this.alpha = 1;
	this.angle = 0;
	this.mask = mask;
	this.images = images;
	this.imageIdx = 0;
	this.subImageIdx = 0;
	this.pressed = false;
	this.enabled = true;
	this.parent = (parent !== undefined)? parent : {
	    x: 0,
	    y: 0
	};
	this.scaleOffsetX = 0;
	this.scaleOffsetY = 0;
	this.forceDraw = true;

	// Set-up button click handling
	this.onClick = function(){
	};
	this.immediate = false;
	if(typeof callback === "object"){
		this.onClick = callback.callbackFunc;
		this.callbackObj = callback.callbackObj;
		this.immediate = callback.immediate;
	}else if(typeof callback === "function"){
		this.onClick = callback;
	}

	var self = this, handleDown = function(finger, touchX, touchY){
		var x, y, canvasOffset;
		canvasOffset = TG.functions.getCanvasMainOffset(self.canvas);
		x = Math.round(self.x + self.parent.x - self.originX * self.xScale);
		y = Math.round(self.y + self.parent.y - self.originY * self.yScale);
		if(self.enabled && self.mask.collisionPoint(x, y, touchX - canvasOffset.x, touchY - canvasOffset.y)){
			self.pressed = true;
			if(self.images){
				if(self.images.length > 1){
					self.imageIdx = 1;
					self.canvas.drawTokens = true;
				}else if(self.images[0].number > 1){
					self.subImageIdx = 1;
					self.canvas.drawTokens = true;
				}
			}
			if(typeof a_mouseDown !== undefined){
				tbAudio.play(a_mouseDown);
			}
			self.finger = finger;
			return true;
		}
	}, handleUp = function(finger, touchX, touchY){
		var x, y, canvasOffset;
		canvasOffset = TG.functions.getCanvasMainOffset(self.canvas);
		x = Math.round(self.x + self.parent.x - self.originX * self.xScale);
		y = Math.round(self.y + self.parent.y - self.originY * self.yScale);
		if(self.images && self.imageIdx > 0 || self.subImageIdx > 0){
			self.imageIdx = 0;
			self.subImageIdx = 0;
			self.canvas.drawTokens = true;
		}
		if(self.pressed && self.enabled && self.mask.collisionPoint(x, y, touchX - canvasOffset.x, touchY - canvasOffset.y)){
			self.pressed = false;
			if(self.callbackObj !== undefined){
				return self.onClick.call(self.callbackObj, self);
			}
			return self.onClick(self);
		}
	};

	if(this.immediate){
		this.handleImmediateTouchDown = handleDown;
		this.handleImmediateTouchUp = handleUp;
	}else{
		this.handleTouchDown = handleDown;
		this.handleTouchUp = handleUp;
	}

	// Add it to the game engine
	tbGame.addToken(this);
};

TG_ButtonBase.prototype.addAnimation = function(type, ease, start, change, duration){
	"use strict";
	if(this.animations === undefined){
		this.animations = [];
	}
	this.animations.push({
	    type: type,
	    start: start,
	    change: change,
	    ease: ease,
	    duration: duration,
	    timer: 0
	});
};

TG_ButtonBase.prototype.endAnimations = function(forceToEndValue){
	"use strict";
	var i, animation;
	if(this.animations !== undefined){
		for(i = 0; i < this.animations.length; i++){
			animation = this.animations[i];
			if(animation.active){
				if(forceToEndValue){
					switch(animation.type){
						case "xScale":
							this.xScale = animation.start + animation.change;
						break;
						case "yScale":
							this.yScale = animation.start + animation.change;
						break;
						case "alpha":
							this.alpha = animation.start + animation.change;
						break;
						case "angle":
							this.angle = animation.start + animation.change;
						break;
						case "x":
							this.x = animation.start + animation.change;
						break;
						case "y":
							this.y = animation.start + animation.change;
						break;
					}
				}
				animation.active = false;
			}
		}
		this.canvas.drawTokens = true;
	}
};

TG_ButtonBase.prototype.setImages = function(images){
	"use strict";
	this.images = images;
	this.canvas.drawTokens = true;
};

TG_ButtonBase.prototype.setPosition = function(x, y){
	"use strict";
	this.x = x;
	this.y = y;
	if(this.images){
		this.canvas.drawTokens = true;
	}
};

TG_ButtonBase.prototype.setVisible = function(visible){
	"use strict";
	this.active = visible;
	this.visible = visible;
};

// The following event handlers describe the behavior of the token

// handleRemove is called when the token is removed from the game.
TG_ButtonBase.prototype.handleRemove = function(){
	"use strict";
	if(this.images){
		this.canvas.drawTokens = true;
	}
};

//handleBeginStep is called each step before processing other events
TG_ButtonBase.prototype.handleBeginStep = function(timePassed){
	"use strict";
	var i, animation;
	if(this.animations !== undefined){
		for(i = 0; i < this.animations.length; i++){
			animation = this.animations[i];
			animation.timer += timePassed;
			switch(animation.type){
				case "xScale":

					var oldScaleX = this.xScale;
					var scaleOffsetX = this.scaleOffsetX;

					this.xScale = animation.ease(animation.timer, animation.start, animation.change, animation.duration);
					this.scaleOffsetX = -(this.images[0].width * this.xScale - this.images[0].width * animation.start) / 2;

					if (isNaN(this.xScale) || isNaN(this.scaleOffsetX)) {
						this.xScale = oldScaleX;
						this.scaleOffsetX = scaleOffsetX;
					}

				break;
				case "yScale":
					var oldScaleY = this.yScale;
					var scaleOffsetY = this.scaleOffsetY;

					this.yScale = animation.ease(animation.timer, animation.start, animation.change, animation.duration);
					this.scaleOffsetY = -(this.images[0].height * this.yScale - this.images[0].height * animation.start) / 2;

					if (isNaN(this.yScale) || isNaN(this.scaleOffsetY)) {
						this.yScale = oldScaleY;
						this.scaleOffsetY = scaleOffsetY;
					}

				break;
				case "alpha":
					this.alpha = animation.ease(animation.timer, animation.start, animation.change, animation.duration);
				break;
				case "angle":
					this.angle = animation.ease(animation.timer, animation.start, animation.change, animation.duration);
				break;
				case "x":
					var oldX = this.x;
					this.x = animation.ease(animation.timer, animation.start, animation.change, animation.duration);
					if (isNaN(this.x)) {
						this.x = oldX;
					}
				break;
				case "y":
					var oldY = this.y;
					this.y = animation.ease(animation.timer, animation.start, animation.change, animation.duration);
					if (isNaN(this.y)) {
						this.y = oldY;
					}
				break;
			}
		}
		this.canvas.drawTokens = true;
	}
};

// handleEndStep is called each step after processing other events (before
// draw).
TG_ButtonBase.prototype.handleEndStep = function(){
	"use strict";
	var x, y, canvasOffset;
	canvasOffset = TG.functions.getCanvasMainOffset(this.canvas);
	x = Math.round(this.x + this.parent.x - this.originX * this.xScale);
	y = Math.round(this.y + this.parent.y - this.originY * this.yScale);
	// reset button if no longer pressed
	if(this.pressed && !this.mask.collisionPoint(x, y, tbGame.touchX(this.finger) - canvasOffset.x, tbGame.touchY(this.finger) - canvasOffset.y)){
		if(this.images){
			this.imageIdx = 0;
			this.subImageIdx = 0;
			this.canvas.drawTokens = true;
		}
		this.pressed = false;
	}
};

// handleDraw is called at the end of a step to draw the token.
TG_ButtonBase.prototype.handleDraw = function(){
	"use strict";
	var x, y;
	x = Math.round(this.x + this.parent.x - this.originX * this.xScale);
	y = Math.round(this.y + this.parent.y - this.originY * this.yScale);
	if(this.images){
		if(this.images[this.imageIdx] instanceof tbSurface){
			this.images[this.imageIdx].drawExt(x, y, this.xScale, this.yScale, this.angle, this.alpha);
		}else{
			this.images[this.imageIdx].drawExt(this.subImageIdx, x, y, this.xScale, this.yScale, this.angle, this.alpha);
		}
	}

	if (testMode && TG_MainController.drawDebugInfo) {
		this.mask.drawBox(x, y, "red");
	}

	this.forceDraw = false;
};



//******************************************************
//*****    Token Resource: TG_ButtonText
//******************************************************

// ***************************************
// Definition of game token TG_ButtonText
// ***************************************

// The constructor for the TG_ButtonText game token.
function TG_ButtonText(btnType, x, y, depth, textKey, width, onClick, parent) {
	"use strict";
	var s, m, buttonColor;

	// define fonts and images
    this.buttonType = TG.settings.tg.buttonDefinitions[btnType];
    buttonColor = (TG.settings.theme.buttons !== undefined)? TG.settings.tg.buttonColorDefinitions[TG.settings.theme.buttons[btnType] || TG.settings.theme.buttons["default_color"]] : TG.settings.tg.buttonColorDefinitions[TG.settings.tg.buttons["default_color"]];
    this.font = f_default.clone();
    if(buttonColor.font) {
        this.font.setProperties(buttonColor.font);
    }
    if(this.buttonType.fontSize){
        this.font.setFontSize(this.buttonType.fontSize);
    }
    this.textKey = textKey;
	this.text = TG.dictionary.getText(this.textKey,"<"+textKey.toUpperCase()+">");
	if (width !== undefined) {
		this.width = width;
	}
	this.height = this.buttonType.sprite.height;
    this.image = {source: this.buttonType.sprite, leftWidth: this.buttonType.leftWidth, rightWidth: this.buttonType.rightWidth};

	s = this.createBtnSurfaces(this.image);
	m = new tbMaskRectangle(0, 0, s[0].width, s[0].height);
	TG_ButtonBase.call(this, x, y, depth, m, s, onClick, parent);
}

TG.functions.inherit(TG_ButtonText, TG_ButtonBase);

TG_ButtonText.prototype.redrawText = function(fontProperties){
    "use strict";
    this.text = TG.dictionary.getText(this.textKey,"<"+this.textKey.toUpperCase()+">");
    if(fontProperties) {
        this.font.setProperties(fontProperties);
    }
    this.setImages(this.createBtnSurfaces(this.image));
};

TG_ButtonText.prototype.updateText = function(textKey, fontProperties){
    "use strict";
    this.textKey = textKey;
    this.redrawText(fontProperties);
};

TG_ButtonText.prototype.updateBtnVisuals = function(image, text, fontProperties) {
	"use strict";
    if(typeof text === "string"){
        this.text = text;
    }
	if(fontProperties){
        this.font.setProperties(fontProperties);
    }
    if(image instanceof tbImage){
        this.image.source = image;
    }else if(image.leftWidth !== undefined && image.rightWidth !== undefined && image.source !== undefined){
        this.image = image;
    }
	this.setImages(this.createBtnSurfaces(this.image));
};

TG_ButtonText.prototype.createBtnSurfaces = function(image) {
	"use strict";
	var middleWidth, txtWidth, txtAlign, maxFontSize, textXOffset, textYOffset, i, surfaces, s,
		sideWidth = image.leftWidth + image.rightWidth,
		middleHeight = this.height - (this.buttonType.textPaddingY || 0),
		sprite = image.source;

	txtWidth = this.font.textWidth(this.text);

	// determine middleWidth and max font size
	if (this.width === undefined) {
		middleWidth = txtWidth;
	}
	else if (typeof this.width === "number") {
		middleWidth = this.width - sideWidth;
	}
	else if (typeof this.width === "object") {
		if (this.width.width !== undefined) {
			middleWidth = this.width.width - sideWidth;
		}
		else {
			if (this.width.minWidth !== undefined) {
				middleWidth = Math.max(this.width.minWidth - sideWidth, txtWidth);
			}
			if (this.width.maxWidth !== undefined) {
				middleWidth = Math.min(this.width.maxWidth - sideWidth, txtWidth);
			}
		}
	}
	maxFontSize = this.font.textFitSize(this.text, middleWidth, middleHeight, true);
	if(maxFontSize < this.buttonType.fontSize){
		this.font.setFontSize(maxFontSize);
	}
	else {
		this.font.setFontSize(this.buttonType.fontSize);
	}

	//align font
	textXOffset = image.leftWidth;
    txtAlign = this.font.getAlign();
	if(txtAlign === "center") {
		textXOffset += Math.round(middleWidth/2);
	}else if(txtAlign === "right"){
		textXOffset += middleWidth;
	}
	textYOffset = Math.round(this.height/2);
    if(this.buttonType.textOffsetY !== undefined){
        textYOffset += this.buttonType.textOffsetY;
    }

	// draw surfaces
	surfaces = [];
	for(i=0; i<sprite.number; i++){
		s = new tbSurface(middleWidth + sideWidth, this.height);
		s.setTarget();

		// draw images
		sprite.drawPart(i, 0, 0, image.leftWidth, this.height, 0, 0, 1);
		sprite.drawPartStretched(i, image.leftWidth, 0, sprite.width - sideWidth, this.height, image.leftWidth, 0, middleWidth, this.height, 1);
		sprite.drawPart(i, image.leftWidth + sprite.width - sideWidth, 0, image.rightWidth, this.height, image.leftWidth + middleWidth, 0, 1);

		// drawText
		this.font.drawSimple(this.text, textXOffset, textYOffset, middleWidth);

		s.resetTarget();
		surfaces.push(s);
	}
	return surfaces;
};

TG_ButtonText.prototype.handleSpecial = function(id){
    "use strict";
    if(id === TG.languageSetEventId){
        this.redrawText();
    }
};
//******************************************************
//*****    Token Resource: TG_ButtonImage
//******************************************************

// ***************************************
// Definition of game token TG_ButtonImage
// ***************************************

// The constructor for the TG_ButtonImage game token.
function TG_ButtonImage(btnType, x, y, depth, img, width, onClick, parent) {
	"use strict";
	var s, m;

	// define fonts and images
    this.buttonType = TG.settings.tg.buttonDefinitions[btnType];
    if (width !== undefined) {
		this.width = width;
	}
	this.height = this.buttonType.sprite.height;
    this.buttonImage = {source: this.buttonType.sprite, leftWidth: this.buttonType.leftWidth, rightWidth: this.buttonType.rightWidth};
    this.image = img;
    
	s = this.createBtnSurfaces();
	m = new tbMaskRectangle(0, 0, s[0].width, s[0].height);
	TG_ButtonBase.call(this, x, y, depth, m, s, onClick, parent);
}

TG.functions.inherit(TG_ButtonImage, TG_ButtonBase);

TG_ButtonImage.prototype.createBtnSurfaces = function() {
	"use strict";
	var middleWidth, i, surfaces, s, imageXOffset, imageYOffset, imageScale,
		sideWidth = this.buttonImage.leftWidth + this.buttonImage.rightWidth,
		middleHeight = this.height - (this.buttonType.textPaddingY || 0),
		sprite = this.buttonImage.source;

	// determine middleWidth and max font size
	if (this.width === undefined) {
		middleWidth = this.image.width;
	}
	else if (typeof this.width === "number") {
		middleWidth = this.width - sideWidth;
	}
	else if (typeof this.width === "object") {
		if (this.width.width !== undefined) {
			middleWidth = this.width.width - sideWidth;
		}
		else {
			if (this.width.minWidth !== undefined) {
				middleWidth = Math.max(this.width.minWidth - sideWidth, this.image.width);
			}
			if (this.width.maxWidth !== undefined) {
				middleWidth = Math.min(this.width.maxWidth - sideWidth, this.image.width);
			}
		}
	}
	imageScale = Math.min(middleWidth/this.image.width, middleHeight/this.image.height);
	imageScale = Math.min(imageScale, 1);
	
	//align image
	imageXOffset = Math.round(this.buttonImage.leftWidth + ((middleWidth - this.image.width * imageScale)/2));
	imageYOffset = Math.round((middleHeight - this.image.height * imageScale)/2);

	// draw surfaces
	surfaces = [];
	for(i=0; i<sprite.number; i++){
		s = new tbSurface(middleWidth + sideWidth, this.height);
		s.setTarget();

		// draw button images
		sprite.drawPart(i, 0, 0, this.buttonImage.leftWidth, this.height, 0, 0, 1);
		sprite.drawPartStretched(i, this.buttonImage.leftWidth, 0, sprite.width - sideWidth, this.height, this.buttonImage.leftWidth, 0, middleWidth, this.height, 1);
		sprite.drawPart(i, this.buttonImage.leftWidth + sprite.width - sideWidth, 0, this.buttonImage.rightWidth, this.height, this.buttonImage.leftWidth + middleWidth, 0, 1);

		// draw image
		try{
		    tbGraphics.context.drawImage(this.image, imageXOffset, imageYOffset, this.image.width*imageScale, this.image.height*imageScale);
		}catch(e){}

		s.resetTarget();
		surfaces.push(s);
	}
	return surfaces;
};
//******************************************************
//*****    Token Resource: TG_ButtonCustomImage
//******************************************************

// ***************************************
// Definition of game token TG_ButtonImage
// ***************************************

// The constructor for the TG_ButtonImage game token.
function TG_ButtonCustomImage(x, y, depth, img, mask, onClick, parent) {
	"use strict";
	TG_ButtonBase.call(this, x, y, depth, mask, img, onClick, parent);
}

TG.functions.inherit(TG_ButtonCustomImage, TG_ButtonBase);
//******************************************************
//*****    Token Resource: TG_ButtonToggleText
//******************************************************

// ***************************************
// Definition of game token TG_ButtonToggleText
// ***************************************

// The constructor for the TG_ButtonToggleText game token.
function TG_ButtonToggleText(btnType, x, y, depth, state, width, onClick, parent) {
	"use strict";
	// define fonts and images
    var toggleAction, self, s, m, i, buttonColor;
    this.buttonType = TG.settings.tg.buttonDefinitions[btnType];
    buttonColor = (TG.settings.theme.buttons !== undefined)? TG.settings.tg.buttonColorDefinitions[TG.settings.theme.buttons[btnType] || TG.settings.theme.buttons["default_color"]] : TG.settings.tg.buttonColorDefinitions[TG.settings.tg.buttons["default_color"]];
    this.font = f_default.clone();
    if(buttonColor.font) {
        this.font.setProperties(buttonColor.font);
    }
    if(this.buttonType.fontSize){
        this.font.setFontSize(this.buttonType.fontSize);
    }
    
	if (width !== undefined) {
		this.width = width;
	}
	this.height = this.buttonType.sprite.height;
    this.states = this.buttonType.states;
    if(!this.states.length) {
        return;
    }
    for(i=0; i<this.states.length; i++){
        if(this.states[i].id === state){
            this.currentStateIdx = i;
            break;
        }
    }
    if(this.currentStateIdx === undefined){
        this.currentStateIdx = 0;
    }

    this.text = TG.dictionary.getText(this.states[this.currentStateIdx].textKey, "<"+this.states[this.currentStateIdx].id.toUpperCase()+">");
    this.toggleImage = this.states[this.currentStateIdx].sprite;

    s = this.createBtnSurfaces();
	m = new tbMaskRectangle(0, 0, s[0].width, s[0].height);

    self = this;
    if(typeof onClick === "function"){
        toggleAction = function(){
            self.setState();
            return onClick(self.states[self.currentStateIdx].id);
        };
    }else if (typeof onClick === "object"){
        toggleAction = {};
        toggleAction.immediate = onClick.immediate;
        toggleAction.callbackObj = this;
        toggleAction.callbackFunc = function(){
            self.setState();
            return onClick.callbackFunc.call(onClick.callbackObj, self.states[self.currentStateIdx].id);
        };
    }else{
        toggleAction = function(){
            self.setState();
        };
    }

    TG_ButtonBase.call(this, x, y, depth, m, s, toggleAction, parent);
}

TG.functions.inherit(TG_ButtonToggleText, TG_ButtonBase);

TG_ButtonToggleText.prototype.setState = function(state){
    "use strict";
    var i;
    if(state === undefined){
        this.currentStateIdx = (this.currentStateIdx + 1)%this.states.length;
    }else{
        for(i=0; i<this.states.length; i++){
            if(this.states[i].id === state){
                this.currentStateIdx = i;
                break;
            }
        }
    }
    this.updateBtnVisuals(this.states[this.currentStateIdx].sprite, TG.dictionary.getText(this.states[this.currentStateIdx].textKey, "<"+this.states[this.currentStateIdx].id.toUpperCase()+">"));
};

TG_ButtonToggleText.prototype.redrawText = function(fontProperties){
    "use strict";
    if(fontProperties) {
        this.font.setProperties(fontProperties);
    }
    this.text = TG.dictionary.getText(this.states[this.currentStateIdx].textKey, "<"+this.states[this.currentStateIdx].id.toUpperCase()+">");
    this.setImages(this.createBtnSurfaces());
};

TG_ButtonToggleText.prototype.updateBtnVisuals = function(image, text, fontProperties) {
	"use strict";
    this.text = text;
    this.toggleImage = image;
    if(fontProperties){
        this.font.setProperties(fontProperties);
    }
	this.setImages(this.createBtnSurfaces());
};

TG_ButtonToggleText.prototype.createBtnSurfaces = function() {
	"use strict";
	var middleWidth, txtWidth, txtAlign, maxFontSize, textXOffset, textYOffset, i, surfaces, s,
        image = {source: this.buttonType.sprite, leftWidth: this.buttonType.leftWidth, rightWidth : this.buttonType.rightWidth},
		sideWidth = image.leftWidth + image.rightWidth,
        sideDiff = Math.abs(image.leftWidth - image.rightWidth),
        middleHeight = this.height - (this.buttonType.textPaddingY || 0),
        sprite = image.source,
        textFont = this.font.clone();

	txtWidth = textFont.textWidth(this.text);

	//determine middleWidth and max font size
	if(this.width === undefined){
		middleWidth = txtWidth;
	}else if (typeof this.width === "number") {
		middleWidth = this.width - sideWidth;
	}
	else if(typeof this.width === "object") {
		if(this.width.width !== undefined) {
			middleWidth = this.width.width - sideWidth;
		}else{
			if(this.width.minWidth !== undefined) {
				middleWidth = Math.max(this.width.minWidth - sideWidth, txtWidth);
			}
			if(this.width.maxWidth !== undefined) {
				middleWidth = Math.min(this.width.maxWidth - sideWidth, txtWidth);
			}
		}
	}
	maxFontSize = textFont.textFitSize(this.text, middleWidth, middleHeight, true);
    if(maxFontSize < textFont.getFontSize()){
		textFont.setFontSize(maxFontSize);
	}
    txtWidth = textFont.textWidth(this.text, middleWidth);

	// align font
	textXOffset = image.leftWidth;
    txtAlign = textFont.getAlign();
	if(txtAlign === "center") {
		if(middleWidth - sideDiff >= txtWidth){
		    textXOffset += Math.round((middleWidth - sideDiff)/2);
		}else{
			textXOffset += this.buttonType.textOffsetX + Math.round(txtWidth/2);
		}
	}else if(txtAlign === "left"){
	    textXOffset += this.buttonType.textOffsetX;
	}else if(txtAlign === "right"){
		textXOffset += middleWidth;
	}
	textYOffset = Math.round(this.height/2);
    if(this.buttonType.textOffsetY !== undefined){
        textYOffset += this.buttonType.textOffsetY;
    }

	// draw surfaces
	surfaces = [];
	for(i=0; i<sprite.number; i++){
		s = new tbSurface(middleWidth + sideWidth, this.height);
		s.setTarget();

		// draw images
		sprite.drawPart(i, 0, 0, image.leftWidth, this.height, 0, 0, 1);
		sprite.drawPartStretched(i, image.leftWidth, 0, sprite.width - sideWidth, this.height, image.leftWidth, 0, middleWidth, this.height, 1);
		sprite.drawPart(i, image.leftWidth + sprite.width - sideWidth, 0, image.rightWidth, this.height, image.leftWidth + middleWidth, 0, 1);

        // draw toggle image
        this.toggleImage.drawSimple(0, this.buttonType.toggleImageOffsetX, this.buttonType.toggleImageOffsetY);

		// drawText
        textFont.drawSimple(this.text, textXOffset, textYOffset, middleWidth);

		s.resetTarget();
		surfaces.push(s);
	}
	return surfaces;
};

TG_ButtonToggleText.prototype.handleSpecial = function(id){
    "use strict";
    if(id === TG.languageSetEventId){
        this.redrawText();
    }
};
//******************************************************
//*****    Token Resource: TG_ButtonToggle
//******************************************************

// ***************************************
// Definition of game token TG_ButtonToggle
// ***************************************

// The constructor for the TG_ButtonToggle game token.
function TG_ButtonToggle(buttonType, x, y, depth, state, onClick, parent) {
	"use strict";
	// define fonts and images
    var toggleAction, self, m, i;
    this.states = TG.settings.tg.buttonDefinitions[buttonType].states;
    if(!this.states.length) {
        return;
    }
    for(i=0; i<this.states.length; i++){
        if(this.states[i].id === state){
            this.currentStateIdx = i;
            break;
        }
    }
    if(this.currentStateIdx === undefined){
        this.currentStateIdx = 0;
    }
    this.toggleImage = this.states[this.currentStateIdx].sprite;
    m = new tbMaskImage(this.toggleImage);

    self = this;
    if(typeof onClick === "function"){
        toggleAction = function(){
            self.setState();
            return onClick(self.states[self.currentStateIdx].id);
        };
    }else if (typeof onClick === "object"){
        toggleAction = {};
        toggleAction.callbackObj = this;
        toggleAction.callbackFunc = function(){
            self.setState();
            return onClick.callbackFunc.call(onClick.callbackObj, self.states[self.currentStateIdx].id);
        };
    }else{
        toggleAction = function(){
            self.setState();
        };
    }

    TG_ButtonBase.call(this, x, y, depth, m,  [this.toggleImage], toggleAction, parent);
}

TG.functions.inherit(TG_ButtonToggle, TG_ButtonBase);

TG_ButtonToggle.prototype.setState = function(state){
    "use strict";
    var i;
    if(state === undefined){
        this.currentStateIdx = (this.currentStateIdx + 1)%this.states.length;
    }else{
        for(i=0; i<this.states.length; i++){
            if(this.states[i].id === state){
                this.currentStateIdx = i;
                break;
            }
        }
    }
    this.updateBtnVisuals(this.states[this.currentStateIdx].sprite);
};

TG_ButtonToggle.prototype.updateBtnVisuals = function(image) {
	"use strict";
    var array = [];
    this.toggleImage = image;
    this.setImages(array.concat(this.toggleImage));
};

//******************************************************
//*****    Token Resource: TG_LevelStartDialog
//******************************************************

// ***************************************
// Definition of game token TG_LevelStartDialog
// ***************************************

/* global
	TG_MainController
 */

// The constructor for the TG_LevelStartDialog game token.
var TG_LevelStartDialog = function(headerText, assignmentText, callbackFunc, callbackObj) {
	"use strict";
	// Properties used by the engine
	this.depth = 10;
	this.visible = false;
	this.active = true;
    TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
    var setting;
    this.settings = TG.settings.tg.levelStart;
    if(TG.orientation === "landscape" && TG.settings.tg.levelStart_landscape){
		for(setting in TG.settings.tg.levelStart_landscape){
			this.settings[setting] = TG.settings.tg.levelStart_landscape[setting];
		}
	}
    //apply theme specific setting overwrites
    for(setting in TG.settings.theme.levelStart){
        this.settings[setting] = TG.settings.theme.levelStart[setting];
    }
    this.headerText = headerText;
    this.assignmentText = assignmentText;
    this.callbackFunc = callbackFunc;
	this.callbackObj = callbackObj;
	this.phase = "entering";
    this.touchStarted = false;
    // Add it to the game engine
	tbGame.addToken(this, false);
    tbGame.addTokenTags(this, "LevelStartDialog");
};

TG_LevelStartDialog.prototype.sendUp = function(){
    "use strict";
    var callbackFunction, i, animation, callback, end,
        self = this;
    if(this.phase !== "leaving") {
        this.phase = "leaving";
        //start overlay out-animations
        this.blockingAnimsCount = 0;
        callbackFunction = function () {
            tbGame.removeToken(self);
            if(self.callbackObj) {
                self.callbackFunc.call(self.callbackObj);
            }else if(self.callbackFunc){
                self.callbackFunc();
            }
        };
        if (this.settings.overlayAnimationOut !== undefined) {
            for (i = 0; i < this.settings.overlayAnimationOut.length; i++) {
                animation = this.settings.overlayAnimationOut[i];
                callback = undefined;
                if (animation.blocking) {
                    this.blockingAnimsCount++;
                    callback = callbackFunction;
                }
                end = animation.end;
                if (animation.type === "x") {
                    end = TG.functions.computeImgCoordinatesFromSettings(end, this.canvas.width, this.overlay.image.width);
                } else if (animation.type === "y") {
                    end = TG.functions.computeImgCoordinatesFromSettings(end, this.canvas.height, this.overlay.image.height) + Math.abs(TG.canvasTopOffset);
                }
                this.overlay.addAnimator(animation.type, end, animation.duration, animation.ease, callback, animation.delay, animation.loop, animation.loopInterval, animation.activationEvent);
            }
        }
        if (this.blockingAnimsCount === 0) {
            callbackFunction();
        }
    }
};

// handleAdd is called when the token is (re-) added to the game.
TG_LevelStartDialog.prototype.handleAdd = function() {
    "use strict";
    var font, i, x, y,animation, callbackFunction, callback, end, maxFontSize,
        self = this,
        img = this.settings.overlayImage,
        width = img.width,
        height = img.height;
    this.overlay = new TG_AnimatedImage(this.depth + 10, this.layer, new tbSurface(width, height));

    //draw overlay surface
    this.overlay.image.setTarget();
    img.drawSimple(0, 0, 0);
    if (this.assignmentText !== "") {
        x = TG.functions.computeImgCoordinatesFromSettings(this.settings.assignmentOffsetX, width, 0);
        y = TG.functions.computeImgCoordinatesFromSettings(this.settings.assignmentOffsetY, height, 0);
        font = f_default.clone();
        font.setProperties(this.settings.assignmentFont);
        if(this.settings.assignmentMaxWidth !== undefined && this.settings.assignmentMaxHeight !== undefined){
            maxFontSize = font.textFitSize(this.assignmentText, this.settings.assignmentMaxWidth, this.settings.assignmentMaxHeight, this.settings.assignmentMaxWidth);
            if(font.getFontSize() > maxFontSize){
                font.setFontSize(maxFontSize);
            }
        }
        font.drawSimple(this.assignmentText, x, y, this.settings.assignmentMaxWidth);
        if (testMode) {
        	TG_MainController.drawTextRect(font, x, y, this.settings.assignmentMaxWidth, this.settings.assignmentMaxHeight);
        }
    }
    if (this.headerText !== "") {
        x = TG.functions.computeImgCoordinatesFromSettings(this.settings.headerOffsetX, width, 0);
        y = TG.functions.computeImgCoordinatesFromSettings(this.settings.headerOffsetY, height, 0);
        font = f_default.clone();
        font.setProperties(this.settings.headerFont);
        if(this.settings.headerMaxWidth !== undefined && this.settings.headerMaxHeight !== undefined){
            maxFontSize = font.textFitSize(this.headerText, this.settings.headerMaxWidth, this.settings.headerMaxHeight, this.settings.headerMaxWidth);
            if(font.getFontSize() > maxFontSize){
                font.setFontSize(maxFontSize);
            }
        }
        font.drawSimple(this.headerText, x, y, this.settings.headerMaxWidth);
        if (testMode) {
        	TG_MainController.drawTextRect(font, x, y, this.settings.headerMaxWidth, this.settings.headerMaxHeight);
        }
    }
    this.overlay.image.resetTarget();

    //setup overlay vars
    this.overlay.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageX, this.canvas.width, width);
    this.overlay.y = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageY, this.canvas.height, height) + Math.abs(TG.canvasTopOffset);

    //setup overlay in-animations
    this.blockingAnimsCount = 0;
    callbackFunction = function () {
        self.blockingAnimsCount--;
        if (self.blockingAnimsCount === 0) {
            self.phase = "paused";
        }
    };
    if (this.settings.overlayAnimationIn !== undefined) {
        for (i = 0; i < this.settings.overlayAnimationIn.length; i++) {
            animation = this.settings.overlayAnimationIn[i];
            callback = undefined;
            if (animation.blocking) {
                this.blockingAnimsCount++;
                callback = callbackFunction;
            }
            end = animation.end;
            if (animation.type === "x") {
                end = TG.functions.computeImgCoordinatesFromSettings(end, this.canvas.width, this.overlay.image.width);
            } else if (animation.type === "y") {
                end = TG.functions.computeImgCoordinatesFromSettings(end, this.canvas.height, this.overlay.image.height)+ Math.abs(TG.canvasTopOffset);
            }
            this.overlay.addAnimator(animation.type, end, animation.duration, animation.ease, callback, animation.delay, animation.loop, animation.loopInterval, animation.activationEvent);
            if (animation.sound !== undefined) {
                tbAudio.play(animation.sound);
            }
        }
    }
    if (this.blockingAnimsCount === 0) {
        this.phase = "paused";
    }
    this.timer = 0;
};

// handleRemove is called when the token is removed from the game.
TG_LevelStartDialog.prototype.handleRemove = function() {
	"use strict";
    tbGame.removeToken(this.overlay);
};

// handleBeginStep is called each step before processing other events.
TG_LevelStartDialog.prototype.handleBeginStep = function(timePassed) {
	"use strict";
    if(this.state !== "paused") {
        this.timer += timePassed;
        if(this.timer >= this.settings.pauseDuration && !(testMode && TG_MainController.drawDebugInfo)){
            this.sendUp();
        }
    }
};

// handleTouchDown is called when a touch is started or if a mouse button is pressed.
TG_LevelStartDialog.prototype.handleTouchDown = function() {
	"use strict";
    this.touchStarted = true;
    return true;
};

// handleTouchUp is called when a touch is ended or if a mouse button is released.
TG_LevelStartDialog.prototype.handleTouchUp = function() {
	"use strict";
    if( this.touchStarted && this.phase === "paused"){
		this.sendUp();
	}
    return true;
};

//******************************************************
//*****    Token Resource: TG_ChallengeStartDialog
//******************************************************

// ***************************************
// Definition of game token TG_ChallengeStartDialog
// ***************************************

// The constructor for the TG_ChallengeStartDialog game token.
var TG_ChallengeStartDialog = function(textKey, callbackFunc, callbackObj) {
	"use strict";
	// Properties used by the engine
	this.depth = 10;
	this.visible = false;
	this.active = true;
    TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
    this.settings = TG.settings.tg.challengeStart;
     //apply theme specific setting overwrites
    var setting;
    for(setting in TG.settings.theme.challengeStart){
        this.settings[setting] = TG.settings.theme.challengeStart[setting];
    }
    this.textKey = textKey;
    this.callbackFunc = callbackFunc;
	this.callbackObj = callbackObj;
	this.phase = "entering";
    this.touchStarted = false;
    this.challengeInfo = TG.controller.getChallengeInformation();
    if(this.challengeInfo.currentPlayerIdx === this.challengeInfo.challengePlayerIdx){
		this.challenger = true;
	}
    // Add it to the game engine
	tbGame.addToken(this, false);
    tbGame.addTokenTags(this, "LevelStartDialog");
};

TG_ChallengeStartDialog.prototype.sendUp = function(){
    "use strict";
    var callbackFunction, end,
        self = this;
    if(this.phase !== "leaving") {
        this.phase = "leaving";
        //start overlay out-animations
        callbackFunction = function () {
            tbGame.removeToken(self);
            if(self.callbackObj) {
                self.callbackFunc.call(self.callbackObj);
            }else if(self.callbackFunc){
                self.callbackFunc();
            }
        };
        this.overlay.addAnimator("y", -this.overlay.height, this.settings.animOutDuration, this.settings.animOutEase, callbackFunction);
    }
};

// handleAdd is called when the token is (re-) added to the game.
TG_ChallengeStartDialog.prototype.handleAdd = function() {
    "use strict";
    var self, img, width, height, drawText, t, w, f, textWidth, textHeight, textX, textY, winX, winY, end, callback, i, name;
    self = this;
    img = this.settings.overlayImage;
    width = img !== undefined? img.width : tgScale(600);
    height = img !== undefined? img.height : tgScale(700);
	drawText = function(text, fontProps, maxWidth, maxHeight, wrap, xSetting, ySetting){
		var font, maxFontSize, x, y;
		font = f_default.clone();
		if(fontProps !== undefined){
			font.setProperties(fontProps);
		}
		maxFontSize = font.textFitSize(text, maxWidth, maxHeight, wrap);
		if(font.getFontSize() > maxFontSize){
			font.setFontSize(maxFontSize);
		}
		x = TG.functions.computeTextCoordinatesFromSettings(xSetting, width, font.textWidth(text, wrap), font.getAlign());
		y = TG.functions.computeTextCoordinatesFromSettings(ySetting, height, font.textHeight(text, wrap), font.getAlign());
		font.drawSimple(text, x, y, wrap? maxWidth : undefined);

		if (testMode) {
			TG_MainController.drawTextRect(font, x, y, maxWidth, maxHeight);
		}
	};

	this.overlay = new TG_AnimatedImage(this.depth + 10, this.layer, new tbSurface(width, height));

	// draw overlay surface
	this.overlay.image.setTarget();
	if(img !== undefined){
		img.drawSimple(0, 0, 0);
	}

    // draw title
	if(this.challenger){
		if(this.challengeInfo.stranger){
			t = TG.dictionary.getText("challengeStartScreenTitle_challenger_stranger", "<CHALLENGESTARTSCREENTITLE_CHALLENGER>");
		}else{
			t = TG.dictionary.getText("challengeStartScreenTitle_challenger_friend", "<CHALLENGESTARTSCREENTITLE_CHALLENGER>");
		}
	}else{
		if(this.challengeInfo.stranger){
			t = TG.dictionary.getText("challengeStartScreenTitle_challengee_stranger", "<CHALLENGESTARTSCREENTITLE_CHALLENGEE>");
		}else{
			t = TG.dictionary.getText("challengeStartScreenTitle_challengee_friend", "<CHALLENGESTARTSCREENTITLE_CHALLENGEE>");
		}
	}
    drawText(t, this.settings.titleFont, this.settings.titleMaxWidth, this.settings.titleMaxHeight, true, this.settings.titleX, this.settings.titleY);

    //draw name
    if(this.challenger){
		t = "";
		for(i = 1; i < this.challengeInfo.playerNames.length; i++){
			name = this.challengeInfo.playerNames[i];
			if(name.length > 13){
				t += name.substr(0, 10) + "...";
			}else{
				t += name;
			}
			if(i + 1 < this.challengeInfo.playerNames.length){
				t += ", ";
			}
		}
	}else{
		name = this.challengeInfo.playerNames[this.challengeInfo.challengePlayerIdx];
		t = (name.length > 13)? name.substr(0, 10) + "..." : name;
	}
    drawText(t, this.settings.nameFont, this.settings.nameMaxWidth, this.settings.nameMaxHeight, false, this.settings.nameX, this.settings.nameY);


    // draw score header
	if(!this.challenger){
		t = TG.dictionary.getText(this.textKey, "<" + this.textKey.toUpperCase() + ">");
		name = this.challengeInfo.playerNames[this.challengeInfo.challengePlayerIdx];
		t = t.replace("<NAME>", (name.length > 13)? name.substr(0, 10) + "..." : name);
	}else{
		t = TG.dictionary.getText(this.textKey + "_challenger", "<" + this.textKey.toUpperCase() + "_CHALLENGER>");
	}
		drawText(t, this.settings.scoreHeaderFont, this.settings.scoreHeaderMaxWidth, this.settings.scoreHeaderMaxHeight, false, this.settings.scoreHeaderX,
		        this.settings.scoreHeaderY);


	// draw score
	if(!this.challenger){
		t = TG.controller.getFormattedScoreString(this.challengeInfo.playerValues[0]);
		drawText(t, this.settings.scoreFont, this.settings.scoreMaxWidth, this.settings.scoreMaxHeight, false, this.settings.scoreX, this.settings.scoreY);
	}

    // draw to win header
    t = TG.dictionary.getText("challengeStartScreenToWin", "<CHALLENGESTARTSCREENTOWIN>");
    drawText(t, this.settings.winHeaderFont, this.settings.winHeaderMaxWidth, this.settings.winHeaderMaxHeight, true, this.settings.winHeaderX, this.settings.winHeaderY);

  //draw to win header
    t = this.challengeInfo.wager +"";
    drawText(t, this.settings.winFont, this.settings.winMaxWidth, this.settings.winMaxHeight, false, this.settings.winX, this.settings.winY);

	this.overlay.image.resetTarget();

    // setup overlay vars
    this.overlay.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageX, this.canvas.width, width) + this.settings.overlayOffsetX;
    this.overlay.y = -this.overlay.height;

    // setup overlay in-animations
	callback = function(){
		self.phase = "paused";
	};
    end = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageY, this.canvas.height, this.overlay.image.height)+ Math.abs(TG.canvasTopOffset);
    this.overlay.addAnimator("y", end, this.settings.animInDuration, this.settings.animInEase, callback);
    //this.overlay.y = end;
    tbAudio.play(a_levelStart);

    this.timer = 0;
};

// handleRemove is called when the token is removed from the game.
TG_ChallengeStartDialog.prototype.handleRemove = function() {
	"use strict";
    tbGame.removeToken(this.overlay);
};

// handleBeginStep is called each step before processing other events.
TG_ChallengeStartDialog.prototype.handleBeginStep = function(timePassed) {
	"use strict";
    if(this.state !== "paused") {
        this.timer += timePassed;
        if(this.timer >= this.settings.pauseDuration && !(testMode && TG_MainController.drawDebugInfo)){
            this.sendUp();
        }
    }
};

// handleTouchDown is called when a touch is started or if a mouse button is pressed.
TG_ChallengeStartDialog.prototype.handleTouchDown = function() {
	"use strict";
    this.touchStarted = true;
    return true;
};

// handleTouchUp is called when a touch is ended or if a mouse button is released.
TG_ChallengeStartDialog.prototype.handleTouchUp = function() {
	"use strict";
    if( this.touchStarted && this.phase === "paused"){
		this.sendUp();
	}
    return true;
};

//******************************************************
//*****    Token Resource: TG_AnimatedImage
//******************************************************

// ***************************************
// Definition of game token TG_AnimatedImage
// ***************************************

// The constructor for the TG_AnimatedImage game token.
var TG_AnimatedImage = function(depth, layer, image) {
	"use strict";
	// Properties used by the engine
	this.depth = depth;
	this.visible = true;
	this.active = true;
    TG.functions.setLayerAndCanvas(this, layer);
	// Your own properties
    this.image = image;
    this.subImage = 0;
    this.width = image.width;
    this.height = image.height;
	this.x = 0;
	this.y = 0;
	this.originX = 0;
	this.originY = 0;
    this.xScale = 1;
    this.yScale = 1;
    this.angle = 0;
    this.alpha = 1;
	this.animators = [];
    this.animatorCount = 0;
    this.parent = {x: 0, y: 0};
    this.forceDraw = true;
	// Add it to the game engine
	tbGame.addToken(this, false);
};

// handleAdd is called when the token is (re-) added to the game.
TG_AnimatedImage.prototype.addAnimator = function(type, end, duration, ease, callback, delay, loop, loopInterval) {
    "use strict";
    var startValue,
        active = true,
        delayed = delay > 0;
    switch(type){
        case "x": startValue = this.x; break;
        case "y": startValue = this.y; break;
        case "xScale": startValue = this.xScale; break;
        case "yScale": startValue = this.yScale; break;
        case "scale": type = "xScale";
            startValue = this.xScale;
            this.addAnimator("yScale", end, duration, ease, undefined, delay, loop, loopInterval);
        break;
        case "angle": startValue = this.angle; break;
        case "alpha": startValue = this.alpha; break;
        case "subImage": startValue = 0; break;
    }
    this.animators.push({id: this.animatorCount, timer: 0, active: active, delayed: delayed, type: type, start: startValue, end: end, callback: callback, duration: duration, ease: ease, delay: delay, loop: loop, loopInterval: loopInterval});
    return this.animatorCount++;
};

// handleAdd is called when the token is (re-) added to the game.
TG_AnimatedImage.prototype.removeAnimator = function(id, forceToEndValue) {
    "use strict";
    var i;
    for(i=this.animators.length-1; i>=0; i--){
        if(id ==="all" || id === this.animators[i].id){
            if(forceToEndValue) {
                switch(this.animators[i].type){
                    case "x": this.x = this.animators[i].end; break;
                    case "y": this.y = this.animators[i].end; break;
                    case "xScale": this.xScale = this.animators[i].end; break;
                    case "yScale": this.yScale = this.animators[i].end; break;
                    case "angle": this.angle = this.animators[i].end; break;
                    case "alpha": this.alpha = this.animators[i].end; break;
                    case "subImage": this.subImage = this.animators[i].end; break;
                }
                if(typeof this.animators[i].callback === "function"){
                    this.animators[i].callback.call(this);
                }
            }
            if(id !== "all") {
                return this.animators.split(i, 1);
            }
        }
    }
};

// handleBeginStep is called each step before processing other events.
TG_AnimatedImage.prototype.handleBeginStep = function(timePassed) {
	"use strict";
    var i, animator, value, n;
    for(i=0; i<this.animators.length; i++){
        animator = this.animators[i];
        if(animator.active){
            animator.timer += timePassed;
            if(animator.delayed){
                if(animator.timer >= animator.delay){
                    animator.timer = animator.timer % animator.delay;
                    animator.delayed = false;
                }
            }
            if(!animator.delayed){
                if(animator.timer >= animator.duration){
                    value = animator.end;
                    if(animator.loop){
                        animator.delayed = true;
                        animator.delay = animator.loopInterval;
                        animator.timer = animator.timer % animator.duration;
                    }else{
                        if(typeof animator.callback === "function"){
                            animator.callback.call(this);
                        }
                        this.animators[i] = undefined;
                    }
                }else {
                    if(animator.type === "subImage"){
                        n = (this.image instanceof Array)? this.image.length : this.image.number;
                        value = Math.floor(animator.timer * n/animator.duration);
                    }else{
                        value = animator.ease(animator.timer, animator.start, animator.end - animator.start, animator.duration);
                    }
                }
                switch(animator.type){
                    case "x": this.x = value; break;
                    case "y": this.y = value; break;
                    case "xScale": this.xScale = value; break;
                    case "yScale": this.yScale = value; break;
                    case "angle": this.angle = value; break;
                    case "alpha": this.alpha = value; break;
                    case "subImage": this.subImage = value; break;
                }
                this.canvas.drawTokens = true;
            }
        }
    }
    for(i=this.animators.length - 1; i>=0; i--){
        if(this.animators[i] === undefined){
            this.animators.splice(i, 1);
        }
    }
};

// handleDraw is called at the end of a step to draw the token.
TG_AnimatedImage.prototype.handleDraw = function() {
	"use strict";
	var image, x, y;
	x = Math.round(this.x - this.xScale*this.originX) + this.parent.x;
	y = Math.round(this.y - this.yScale*this.originY) + this.parent.y;
    image = this.image;
	if(image instanceof Array){
        image = this.image[this.subImage%this.image.length];
    }
	if(image instanceof tbSurface) {
	    image.drawExt(x, y, this.xScale, this.yScale, this.angle, this.alpha);
    }else{
        image.drawExt(this.subImage, x, y, this.xScale, this.yScale, this.angle, this.alpha);
    }
	this.forceDraw = false;
};


//******************************************************
//*****    Token Resource: TG_Counter
//******************************************************

// ***************************************
// Definition of game token TG_Counter
// ***************************************

/* global
	TG_MainController
 */

// The constructor for the TG_Counter game token.
var TG_Counter = function(x, y, w, h, depth, value, font, marginX, marginY, parent, toString) {
	"use strict";
	// Properties used by the engine
	this.depth = depth;
	this.visible = true;
	this.active = false;
	TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
	this.x = x;
	this.y = y;
	this.marginX = marginX;
    this.marginYTop = (typeof marginY === "object")? marginY.top : marginY;
    this.marginYBottom = (typeof marginY === "object")? marginY.bottom : marginY;
	this.textWidth = w;
	this.textHeight = h;
	this.width = this.textWidth + 2*this.marginX;
	this.height = this.textHeight + this.marginYTop + this.marginYBottom;
	this.value = value || 0;
	this.parent = parent || {x: 0, y: 0};
	this.font = font;
	this.toString = (typeof toString === "function")? toString : function(value){return value + "";};

	this.alpha = 1;
	this.originX = 0;
	this.originY = 0;
	this.scaleX = 0;
	this.scaleY = 0;
	var s = new tbSurface(this.width, this.height);
	this.animatedImage = new TG_AnimatedImage(this.depth, this.layer, s);
	this.animatedImage.x = x - this.marginX;
	this.animatedImage.y = y - this.marginYTop;
	this.animatedImage.parent = parent;
	this.surface = this.animatedImage.image;
	this.redrawSurface();
	// Add it to the game engine
	tbGame.addToken(this);
};

TG_Counter.prototype.handleRemove = function(){
    "use strict";
    tbGame.removeToken(this.animatedImage);
};

TG_Counter.prototype.startCount = function(endValue, duration, ease, beginValue){
    "use strict";
    this.active = true;
    this.begin = (beginValue !== undefined)? beginValue : this.value;
    this.value = this.begin;
    this.end = endValue;
    this.duration = duration;
    this.ease = ease;
    this.timer = 0;
};

TG_Counter.prototype.stopCount = function(forceToEnd){
    "use strict";
    if(this.active && this.forceToEnd){
        this.value = this.end;
        this.redrawSurface();
    }
    this.active = false;
};

TG_Counter.prototype.currentValue = function(value){
    "use strict";
    if(value !== undefined){
        this.value = value;
        this.forceDraw = true;
    }
    return this.value;
};

TG_Counter.prototype.redrawSurface = function(){
    "use strict";
    var maxFontSize, text,
        align = this.font.getAlign(),
        baseline = this.font.getBaseline(),
        x = this.marginX,
        y = this.marginYTop;
    if(!this.backgroundImg){
		this.surface.clear();
		this.canvas.drawTokens = true;
	}
    this.surface.setTarget();
    if(this.backgroundImg){
        this.backgroundImg.drawPart(0, this.backgroundX, this.backgroundY, this.backgroundW, this.backgroundH, 0, 0, 1);
    }
    if(align === "center"){
        x += Math.round(this.textWidth/2);
    }else if(align === "right"){
        x += this.textWidth;
    }
    if(baseline === "middle"){
        y += Math.round(this.textHeight/2);
    }else if(baseline === "bottom"){
        y += this.textHeight;
    }
    text = this.toString(this.value);
    maxFontSize = this.font.textFitSize(text, this.textWidth, this.textHeight, true);
    if(maxFontSize < this.font.getFontSize()){
        this.font.setFontSize(maxFontSize);
    }
    this.font.drawSimple(text, x, y, this.textWidth);

    if (testMode) {
		TG_MainController.drawSurfaceBoundaries();
	}

    this.surface.resetTarget();
    this.animatedImage.forceDraw = true;
};

TG_Counter.prototype.setBackgroundImage = function(image, x, y, w, h){
    "use strict";
    this.backgroundImg = image;
    this.backgroundX = x - this.marginX || 0;
    this.backgroundY = y - this.marginYTop || 0;
    this.backgroundW = w + 2*this.marginX || this.width;
    this.backgroundH = h + this.marginYTop + this.marginYBottom || this.height;
    this.redrawSurface();
};

// handleBeginStep is called each step before processing other events.
TG_Counter.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	var newValue;
	newValue = Math.round(this.ease(this.timer, this.begin, this.end - this.begin, this.duration));
	if(this.timer >= this.duration){
        this.value = this.end;
        this.active = false;
        this.redrawSurface();
    }else if(newValue !== this.value){
	    this.value = newValue;
	    this.redrawSurface();
	}
	this.timer += timePassed;
};
//******************************************************
//*****    Token Resource: TG_Dialog
//******************************************************

// ***************************************
// Definition of game token TG_Dialog
// ***************************************

/* global
	TG_ButtonText,
	f_default
 */

// The constructor for the TG_Dialog game token.
var TG_Dialog = function(question, buttonDescriptions, pauseGame) {
	"use strict";
	// Properties used by the engine
	this.depth = -100;
	this.visible = false;
	this.active = true;
	this.question = question;
	TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);
	// Your own properties
	// apply theme specific setting overwrites
	this.settings = TG.settings.tg.dialog;
	this.buttonSettings = TG.settings.tg.buttonDefinitions;
	this.buttonDescriptions = buttonDescriptions;
	// apply theme specific setting overwrites
	for (var setting in TG.settings.theme.dialog) {
		this.settings[setting] = TG.settings.theme.dialog[setting];
	}
	this.pauseGame = pauseGame !== false;
	// Add it to the game engine
	tbGame.addToken(this);
};

TG_Dialog.prototype.toggleLang = function () {};

TG_Dialog.prototype.addButton = function(buttonDescription, buttonX, buttonY, buttonWidth, enableButton) {
	"use strict";

	var textKey = buttonDescription.textKey || "NO_TEXT_KEY_GIVEN";

	var newButton = new TG_ButtonText("default_text", buttonX, buttonY, this.depth - 20, textKey, buttonWidth, {
		callbackFunc: function () {
			//this.close();
			if (buttonDescription.callbackFunc) {
				if (buttonDescription.callbackObj) {
					buttonDescription.callbackFunc.call(buttonDescription.callbackObj, buttonDescription);
				}
				else {
					buttonDescription.callbackFunc(buttonDescription);
				}
			}
		},
		callbackObj: this
	}, this.overlay);

	this.buttons.push(newButton);

	if (buttonDescription.text) {
		newButton.updateBtnVisuals(newButton.image, buttonDescription.text);
	}

	this.buttons[this.buttons.length - 1].enabled = enableButton || false;
};

TG_Dialog.prototype.drawBackground = function(overlayXOffset, overlayYOffset, message) {
	"use strict";
	var image;
	this.overlay.image.setTarget();
	tbGraphics.clear();
	// draw overlay background
	image = this.settings.backgroundImage;
	image.drawSimple(0, 0, 0);

	// draw confirm text
	var text = message? message : this.question;
	var font = f_default.clone();
	if (this.settings.questionFont) {
		font.setProperties(this.settings.questionFont);
	}
	var maxFontSize = font.textFitSize(text, this.settings.questionTextWidth, this.settings.questionTextHeight, true);
	if (maxFontSize < font.getFontSize()) {
		font.setFontSize(maxFontSize);
	}
	var w = font.textWidth(text, this.settings.questionTextWidth) + 10;
	var h = font.textHeight(text, this.settings.questionTextHeight) + 10;
	var x = TG.functions.computeTextCoordinatesFromSettings(this.settings.questionTextX, this.overlay.image.width, w, font.getAlign());
	var y = TG.functions.computeTextCoordinatesFromSettings(this.settings.questionTextY, this.overlay.image.height - this.getButtonsY(), h, font.getBaseline());
	font.drawSimple(text, x, y, w);
	if (testMode) {
		TG_MainController.drawTextRect(font, x, y, this.settings.questionTextWidth, this.settings.questionTextHeight);
	}
	this.overlay.image.resetTarget();
};

TG_Dialog.prototype.getButtonsY = function() {
	"use strict";
	var buttonsToShow = this.buttonDescriptions;
	var buttonHeight = this.buttonSettings["default_text"].sprite.height;
	var totalHeight = buttonHeight * buttonsToShow.length + this.settings.buttonsOffsetInBetween * (buttonsToShow.length - 1);
	return TG.functions.computeImgCoordinatesFromSettings(this.settings.buttonsOffsetY, this.overlay.image.height, totalHeight);

};

TG_Dialog.prototype.addInitButtons = function(overlayXOffset, enableButtons) {
	"use strict";
	var i, j, buttonHeight, buttonMaxWidth, left, row, buttonX, buttonY, buttonWidth, buttonsToShow = [];

	buttonsToShow = this.buttonDescriptions;

	buttonHeight = this.buttonSettings["default_text"].sprite.height;
	buttonMaxWidth = this.settings.buttonsWidth;
	left = TG.functions.computeImgCoordinatesFromSettings(this.settings.buttonsOffsetX, this.canvas.width, buttonMaxWidth) - overlayXOffset;
	buttonY = this.getButtonsY();


	for (i = buttonsToShow.length-1; i >= 0; i--) {
		buttonX = left;
		buttonWidth = buttonMaxWidth;

		if (typeof buttonsToShow[i] === "object" && buttonsToShow[i].hasOwnProperty("length") && buttonsToShow[i].length) {
			row = buttonsToShow[i];
			buttonWidth = (buttonMaxWidth - (row.length - 1) * this.settings.buttonsOffsetInBetween) / row.length;
			for (j = 0; j < row.length; j++) {
				this.addButton(row[j], buttonX, buttonY, buttonWidth, enableButtons);
				buttonX += buttonWidth + this.settings.buttonsOffsetInBetween;
			}
		}
		else {
			this.addButton(buttonsToShow[i], buttonX, buttonY, buttonWidth, enableButtons);
		}

		buttonY -= buttonHeight + this.settings.buttonsOffsetInBetween;
	}
};

TG_Dialog.prototype.hide = function(){
	"use strict";
	var i, b;
	for(i=0; i<this.buttons.length; i++){
		b = this.buttons[i];
		b.setVisible(false);
	}
	this.overlay.visible = false;
};

TG_Dialog.prototype.show = function(){
	"use strict";
	var i, b;
	for(i=0; i<this.buttons.length; i++){
		b = this.buttons[i];
		b.setVisible(true);
	}
	this.overlay.visible = true;
};

TG_Dialog.prototype.close = function() {
	"use strict";
	tbGame.removeToken(this);
	this.canvas.drawTokens = true;
	return true;
};

TG_Dialog.prototype.showConfirmMessage = function(message) {
	"use strict";
	this.drawBackground(this.overlay.x, this.overlay.y, message);
	var i;
	for(i = 0; i < this.buttons.length; i++) {
		tbGame.removeToken(this.buttons[i]);
	}
	this.canvas.drawTokens = true;
};

TG_Dialog.prototype.showConfirmSubMessage = function(message) {
	"use strict";
	var font, maxFontSize, w, h, x, y;
	font = f_default.clone();
	if(this.settings.subQuestionFont) {
		font.setProperties(this.settings.subQuestionFont);
	}
	maxFontSize = font.textFitSize(message, this.settings.questionSubTextWidth, this.settings.questionSubTextHeight, true);
	if(maxFontSize < font.getFontSize()) {
		font.setFontSize(maxFontSize);
	}
	w = font.textWidth(message, this.settings.questionTextWidth) + 10;
	h = font.textHeight(message, this.settings.questionTextHeight) + 10;
	x = TG.functions.computeTextCoordinatesFromSettings(this.settings.questionSubTextX, this.overlay.image.width, w, font.getAlign());
	y = TG.functions.computeTextCoordinatesFromSettings(this.settings.questionSubTextY, this.overlay.image.height - this.getButtonsY(), h, font.getBaseline());
	this.overlay.image.setTarget();
	font.drawSimple(message, x, y, w);
	if (testMode) {
		TG_MainController.drawTextRect(font, x, y, this.settings.questionSubTextWidth, this.settings.questionSubTextHeight);
	}
	this.overlay.image.resetTarget();
};

// handleAdd is called when the token is (re-) added to the game.
TG_Dialog.prototype.handleAdd = function() {
	"use strict";
	var y, activateButtons, image, self;
	// pause all tokens
	if(this.pauseGame){
		TG.controller._pauseAll(this);
	}

	// create overlay surface
	image = this.settings.backgroundImage;
	this.overlay = new TG_AnimatedImage(this.depth - 10, this.layer, new tbSurface(image.width, image.height));
	this.overlay.x = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageOffsetX, this.canvas.width, image.width);

	var defaultCanvasSettings = (TG.orientation === "landscape")? TG.settings.tg.canvasses_landscape : TG.settings.tg.canvasses;

	y = TG.functions.computeImgCoordinatesFromSettings(this.settings.overlayImageOffsetY, this.canvas.height, image.height) + defaultCanvasSettings.minTop* -1;
	this.overlay.y = y;
	// draw background
	this.drawBackground(this.overlay.x, this.overlay.y);

	this.buttons = [];
	// add buttons
	this.addInitButtons(this.overlay.x);

	// start animation
	self = this;
	activateButtons = function() {
		var i;
		for (i = 0; i < self.buttons.length; i++) {
			self.buttons[i].enabled = true;
		}
	};
	// slide in from top
	this.overlay.y = -this.overlay.image.height;
	this.overlay.addAnimator("y", y, this.settings.overlayAnimInDuration, this.settings.overlayAnimInEase, activateButtons);

};

// handleRemove is called when the token is removed from the game.
TG_Dialog.prototype.handleRemove = function() {
	"use strict";
	var i;
	if(this.pauseGame){
		TG.controller._resumeAll();
	}
	for (i = 0; i < this.buttons.length; i++) {
		tbGame.removeToken(this.buttons[i]);
	}
	tbGame.removeToken(this.overlay);
	if(TG.controller.activeModelDialog === this){
		TG.controller.activeModelDialog = null;
	}
};

TG_Dialog.prototype.handleTouchUp = function(){
	"use strict";
	return true;
};

TG_Dialog.prototype.handleTouchDown = function(){
	"use strict";
	return true;
};



//******************************************************
//*****    Script Resource: TG_SiteLock
//******************************************************

/* global
	window
 */

/*jslint bitwise: true */

var TG_MD5 = {
	utf8_encode: function(argString) {
		"use strict";
		// discuss at: http://phpjs.org/functions/utf8_encode/
		// original by: Webtoolkit.info (http://www.webtoolkit.info/)
		// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
		// improved by: sowberry
		// improved by: Jack
		// improved by: Yves Sucaet
		// improved by: kirilloid
		// bugfixed by: Onno Marsman
		// bugfixed by: Onno Marsman
		// bugfixed by: Ulrich
		// bugfixed by: Rafal Kukawski
		// bugfixed by: kirilloid
		// example 1: utf8_encode('Kevin van Zonneveld');
		// returns 1: 'Kevin van Zonneveld'

		if (argString === null || typeof argString === "undefined") {
			return "";
		}

		// .replace(/\r\n/g, "\n").replace(/\r/g, "\n");
		var string = (argString + "");
		var utftext = "", start, end, stringl = 0;

		start = end = 0;
		stringl = string.length;
		for (var n = 0; n < stringl; n++) {
			var c1 = string.charCodeAt(n);
			var enc = null;

			if (c1 < 128) {
				end++;
			}
			else if (c1 > 127 && c1 < 2048) {
				enc = String.fromCharCode((c1 >> 6) | 192, (c1 & 63) | 128);
			}
			else if ((c1 & 0xF800) !== 0xD800) {
				enc = String.fromCharCode((c1 >> 12) | 224, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128);
			}
			else {
				// surrogate pairs
				if ((c1 & 0xFC00) !== 0xD800) {
					throw new RangeError("Unmatched trail surrogate at " + n);
				}
				var c2 = string.charCodeAt(++n);
				if ((c2 & 0xFC00) !== 0xDC00) {
					throw new RangeError("Unmatched lead surrogate at " + (n - 1));
				}
				c1 = ((c1 & 0x3FF) << 10) + (c2 & 0x3FF) + 0x10000;
				enc = String.fromCharCode((c1 >> 18) | 240, ((c1 >> 12) & 63) | 128, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128);
			}
			if (enc !== null) {
				if (end > start) {
					utftext += string.slice(start, end);
				}
				utftext += enc;
				start = end = n + 1;
			}
		}

		if (end > start) {
			utftext += string.slice(start, stringl);
		}

		return utftext;
	},

	createMD5Hash: function(str) {
		"use strict";
		// discuss at: http://phpjs.org/functions/md5/
		// original by: Webtoolkit.info (http://www.webtoolkit.info/)
		// improved by: Michael White (http://getsprink.com)
		// improved by: Jack
		// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
		// input by: Brett Zamir (http://brett-zamir.me)
		// bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
		// depends on: utf8_encode
		// example 1: md5('Kevin van Zonneveld');
		// returns 1: '6e658d4bfcb59cc13f96c14450ac40b9'

		var xl;

		var rotateLeft = function(lValue, iShiftBits) {
			return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
		};

		var addUnsigned = function(lX, lY) {
			var lX4, lY4, lX8, lY8, lResult;
			lX8 = (lX & 0x80000000);
			lY8 = (lY & 0x80000000);
			lX4 = (lX & 0x40000000);
			lY4 = (lY & 0x40000000);
			lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
			if (lX4 & lY4) {
				return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
			}
			if (lX4 | lY4) {
				if (lResult & 0x40000000) {
					return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
				}
				return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
						}
			return (lResult ^ lX8 ^ lY8);
		};

		var _F = function(x, y, z) {
			return (x & y) | ((~x) & z);
		};
		var _G = function(x, y, z) {
			return (x & z) | (y & (~z));
		};
		var _H = function(x, y, z) {
			return (x ^ y ^ z);
		};
		var _I = function(x, y, z) {
			return (y ^ (x | (~z)));
		};

		var _FF = function(a, b, c, d, x, s, ac) {
			a = addUnsigned(a, addUnsigned(addUnsigned(_F(b, c, d), x), ac));
			return addUnsigned(rotateLeft(a, s), b);
		};

		var _GG = function(a, b, c, d, x, s, ac) {
			a = addUnsigned(a, addUnsigned(addUnsigned(_G(b, c, d), x), ac));
			return addUnsigned(rotateLeft(a, s), b);
		};

		var _HH = function(a, b, c, d, x, s, ac) {
			a = addUnsigned(a, addUnsigned(addUnsigned(_H(b, c, d), x), ac));
			return addUnsigned(rotateLeft(a, s), b);
		};

		var _II = function(a, b, c, d, x, s, ac) {
			a = addUnsigned(a, addUnsigned(addUnsigned(_I(b, c, d), x), ac));
			return addUnsigned(rotateLeft(a, s), b);
		};

		var convertToWordArray = function(s) {
			var lWordCount;
			var lMessageLength = s.length;
			var lNumberOfWords_temp1 = lMessageLength + 8;
			var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
			var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
			var lWordArray = new Array(lNumberOfWords - 1);
			var lBytePosition = 0;
			var lByteCount = 0;
			while (lByteCount < lMessageLength) {
				lWordCount = (lByteCount - (lByteCount % 4)) / 4;
				lBytePosition = (lByteCount % 4) * 8;
				lWordArray[lWordCount] = (lWordArray[lWordCount] | (s.charCodeAt(lByteCount) << lBytePosition));
				lByteCount++;
			}
			lWordCount = (lByteCount - (lByteCount % 4)) / 4;
			lBytePosition = (lByteCount % 4) * 8;
			lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);
			lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
			lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
			return lWordArray;
		};

		var wordToHex = function(lValue) {
			var wordToHexValue = "", wordToHexValue_temp = "", lByte, lCount;
			for (lCount = 0; lCount <= 3; lCount++) {
				lByte = (lValue >>> (lCount * 8)) & 255;
				wordToHexValue_temp = "0" + lByte.toString(16);
				wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);
			}
			return wordToHexValue;
		};

		var x = [], k, AA, BB, CC, DD, a, b, c, d, S11 = 7, S12 = 12, S13 = 17, S14 = 22, S21 = 5, S22 = 9, S23 = 14, S24 = 20, S31 = 4, S32 = 11, S33 = 16, S34 = 23, S41 = 6, S42 = 10, S43 = 15, S44 = 21;

		str = TG_MD5.utf8_encode(str);
		x = convertToWordArray(str);
		a = 0x67452301;
		b = 0xEFCDAB89;
		c = 0x98BADCFE;
		d = 0x10325476;

		xl = x.length;
		for (k = 0; k < xl; k += 16) {
			AA = a;
			BB = b;
			CC = c;
			DD = d;
			a = _FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
			d = _FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
			c = _FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
			b = _FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
			a = _FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
			d = _FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
			c = _FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
			b = _FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
			a = _FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
			d = _FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
			c = _FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
			b = _FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
			a = _FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
			d = _FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
			c = _FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
			b = _FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
			a = _GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
			d = _GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
			c = _GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
			b = _GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
			a = _GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
			d = _GG(d, a, b, c, x[k + 10], S22, 0x2441453);
			c = _GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
			b = _GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
			a = _GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
			d = _GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
			c = _GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
			b = _GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
			a = _GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
			d = _GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
			c = _GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
			b = _GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
			a = _HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
			d = _HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
			c = _HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
			b = _HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
			a = _HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
			d = _HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
			c = _HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
			b = _HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
			a = _HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
			d = _HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
			c = _HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
			b = _HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
			a = _HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
			d = _HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
			c = _HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
			b = _HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
			a = _II(a, b, c, d, x[k + 0], S41, 0xF4292244);
			d = _II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
			c = _II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
			b = _II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
			a = _II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
			d = _II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
			c = _II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
			b = _II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
			a = _II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
			d = _II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
			c = _II(c, d, a, b, x[k + 6], S43, 0xA3014314);
			b = _II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
			a = _II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
			d = _II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
			c = _II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
			b = _II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
			a = addUnsigned(a, AA);
			b = addUnsigned(b, BB);
			c = addUnsigned(c, CC);
			d = addUnsigned(d, DD);
		}

		var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);

		return temp.toLowerCase();
	}
};

/* Add this setting to game_configuration:
 * 	siteLock: {
		domainMD5Hashed: "8fac1f8e1858745191f2db8612565d3d" // put the MD5 hash of your website origin here (An origin is for example: "http://www.google.nl")
	}
 *
 */
/* exported TG_SiteLock */
var TG_SiteLock = {
	checkSiteLock: function(domainMD5Hashed) {
		"use strict";
		var i, j, subStrings, begin, stringToCompare, o, origin, localString = "file://";
		origin = (window.location.origin)? window.location.origin : window.location.protocol + "//" + window.location.hostname;
		if(origin.indexOf(localString) === 0 && domainMD5Hashed === TG_MD5.createMD5Hash(localString)){
			return true;
		}
		subStrings = origin.split(".");
		begin = subStrings.shift().split("://");
		begin[0] += "://";
		subStrings = begin.concat(subStrings);
		stringToCompare = "";
		for(i=subStrings.length - 1; i >= 0; i--){
			stringToCompare = subStrings[i] + ((i > 0 && i < subStrings.length - 1)? "." : "") + stringToCompare;
			if(TG_MD5.createMD5Hash(stringToCompare) === domainMD5Hashed){
				return true;
			}
		}
		
		return false;
	}
};
//******************************************************
//*****    Script Resource: TG_HighScores
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

var TG_HighScores = {};

TG_HighScores._postJSON = function(url, paramString, callback) {
	"use strict";
	//TODO try using XDomainRequest object instead
	try { //might fail in IE9
		var request = new XMLHttpRequest();
		request.open("POST", url);
		request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
		request.onload = function() {
			if (request.getResponseHeader("Content-Type") === "application/json") {
				callback(JSON.parse(request.responseText));
			}
		};
		request.onerror = function(e) {
			console.log("error: " + e);
		};
		request.send(paramString);
	} catch (e) {
	}
};

TG_HighScores.checkActive = function(callback) {
	"use strict";
	TG_HighScores._postJSON(TG.config.highScoreSystem.url + "api", "call=api_is_valid", function(response) {
		callback(response["is_valid"]);
	});
};

TG_HighScores.checkHighScore = function(score, callback) {
	"use strict";
	TG_HighScores._postJSON(TG.config.highScoreSystem.url + "api", "call=is_highscore&score=" + score, function(response) {
		if (response["position"] >= 0) {
			TG_HighScores.highScoreId = response["code"];
			callback(TG_HighScores.highScoreId !== undefined);
		}
		else {
			callback(false);
		}
	});
};

TG_HighScores.submitHighScore = function(score) {
	"use strict";
	if (TG_HighScores.highScoreId !== undefined) {
		TG.hooks.openUrl(TG.config.highScoreSystem.url + "submit/" + TG_HighScores.highScoreId + "/" + score);
	}
	else {
		TG.hooks.openUrl(TG.config.highScoreSystem.url + "submit/");
	}
};

//******************************************************
//*****    Script Resource: TG_ScoreObject
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

TG_StatObjectFactory = {};

TG_StatObjectFactory.createTotalScoreStat = function(type){
	"use strict";
	return new TG_StatObject("totalScore", type, "levelEndScreenTotalScore_"+type, 0, 0, true, true);
};

TG_StatObjectFactory.createHighScoreStat = function(type){
	"use strict";
	return new TG_StatObject("highScore", type, "levelEndScreenHighScore_"+type, TG.controller.getLevelHighScore(), TG.controller.getLevelHighScore(), true);
};

TG_StatObjectFactory.createBonusStat = function(id, type, key, value, visible){
	"use strict";
	var updateFunction;
	if(TG.gameFlowSettings.computeHighScore === "max"){
		updateFunction = function(score){return score + value;};
	}else {
		updateFunction = function(score){return score - value;};
	}
	return new TG_StatObject(id, type, key, 0, value, visible, true, updateFunction);
};

TG_StatObjectFactory.createPenaltyStat = function(id, type, key, value, visible){
	"use strict";
	var updateFunction;
	if(TG.gameFlowSettings.computeHighScore === "max"){
		updateFunction = function(score){return score - value;};
	}else {
		updateFunction = function(score){return score + value;};
	}
	return new TG_StatObject(id, type, key, 0, value, visible, true, updateFunction);
};


TG_StatObject = function(id, type, key, endValue, startValue, visible, animate, updateFunction, statToUpdate){
	"use strict";
	this.id = id;
	this.type = type;
	this.key = key;
	this.endValue = endValue;
	this.startValue = (startValue !== undefined)? startValue : this.endValue;
	this.visible = (visible !== undefined)? visible : true;
	this.animate = (animate !== undefined)? animate : this.endValue !== this.startValue;
	this.updateFunction = updateFunction;
	this.statToUpdate = (statToUpdate !== undefined)? statToUpdate : "totalScore";
	switch(this.type){
		case "text": this.toString = function(value){return value;}; break;
		case "number": this.toString = function(value){return value +"";}; break;
		case "time": this.toString = function(value){return TG.functions.timeToStr(value*1000);};
	}
};

TG_StatObject.prototype.clone = function(){
	"use strict";
	return new TG_StatObject(this.id, this.type, this.key, this.endValue, this.startValue, this.visible, this.animate, this.updateFunction, this.statToUpdate);
};

//******************************************************
//*****    Script Resource: TG_version
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

TG.version = TG.version || {};
TG.version["tg"] = "2.13.0";







//******************************************************
//*****    Script Resource: Behaviors
//******************************************************

var Behaviors = {};

Behaviors._methodDispatchers = {};

Behaviors._createMethodDispatcher = function(func){
	"use strict";

	if (Behaviors._methodDispatchers[func]) {
		return Behaviors._methodDispatchers[func];
	}

	var result = function() {

		var i;
		for (i = this.behaviors.length - 1; i >= 0; --i) {
			if (this.behaviors[i].replace && this.behaviors[i].replace[func]) {
				return this.behaviors[i].replace[func].apply(this, arguments);
			}
		}

		var result = undefined;

		for (i = 0; i < this.behaviors.length; ++i) {
			if (this.behaviors[i].prototype[func]) {
				result = this.behaviors[i].prototype[func].apply(this, arguments);
			}
		}
		return result;
	};

	Behaviors._methodDispatchers[func] = result;

	return result;
};

Behaviors.addBehavior = function(obj, behaviorType) {
	"use strict";

	if (typeof obj.behaviors === "undefined") {
		obj.behaviors = [];
	}

	for (var i = 0; i < obj.behaviors.length; ++i) {
		if (obj.behaviors[i] === behaviorType) {
			if (behaviorType.prototype.onAdd) {
				behaviorType.prototype.onAdd.apply(this);
			}
			return;
		}
	}

	obj.behaviors.push(behaviorType);

	for ( var func in behaviorType.prototype) {
		if (!obj[func]) {
			obj[func] = Behaviors._createMethodDispatcher(func);
		}
	}

	behaviorType.call(obj);

};

Behaviors.removeBehaviorsWithTag = function(obj, tagsQuery) {
	"use strict";

	if (typeof tagsQuery !== "object" || tagsQuery.length === undefined) {
		tagsQuery = [tagsQuery];
	}

	for (var i = 0; i < obj.behaviors.length; ++i) {
		if (obj.behaviors[i].tags) {
			var tags = obj.behaviors[i].tags;
			var foundTag = false;
			for (var j=0;j<tags.length;++j) {
				for (var k=0;k<tagsQuery.length;++k) {
					if (tags[j] === tagsQuery[k]) {
						obj.behaviors.splice(i, 1);
						--i;
						foundTag = true;
						break;
					}
				}
				if (foundTag) {
					break;
				}
			}
		}
	}
	return false;
};


Behaviors.hasBehavior = function(obj, behaviorType) {
	"use strict";
	for (var i = 0; i < obj.behaviors.length; ++i) {
		if (obj.behaviors[i] === behaviorType) {
			return true;
		}
	}
	return false;
};

Behaviors.hasBehaviorTag = function(obj, tagsQuery) {
	"use strict";

	if (typeof tagsQuery !== "object" || tagsQuery.length === undefined) {
		tagsQuery = [tagsQuery];
	}

	for (var i = 0; i < obj.behaviors.length; ++i) {
		if (obj.behaviors[i].tags) {
			var tags = obj.behaviors[i].tags;
			for (var j=0;j<tags.length;++j) {
				for (var k=0;k<tagsQuery.length;++k) {
					if (tags[j] === tagsQuery[k]) {
						return true;
					}
				}
			}
		}
	}
	return false;
};

Behaviors.removeBehavior = function(obj, behaviorType) {
	"use strict";
	for (var i = 0; i < obj.behaviors.length; ++i) {
		if (obj.behaviors[i] === behaviorType) {
			obj.behaviors.splice(i, 1);
			return;
		}
	}
};

Behaviors.removeAllBehaviors = function(obj, exceptType) {
	"use strict";

	if (!obj.behaviors) {
		return;
	}

	var i = 0;

	while (i < obj.behaviors.length) {
		if (obj.behaviors[i] !== exceptType) {
			obj.behaviors.splice(i, 1);
		}
		else {
			++i;
		}
	}

};
//******************************************************
//*****    Script Resource: Distribution
//******************************************************


/**
 * @param {number|Array} eventsToChance
 * Array of chances, or a single number with which a uniform distribution will be created with n event types
 *
 * @param {boolean} perfectDistribution
 * Should the events be perfectly distributed as described by the chances at each moment?
 *
 * @param {boolean} preventRepeats
 * Can an event happen twice in a row
 *
 */
var Distribution = function(eventsToChance, perfectDistribution, preventRepeats) {
	"use strict";

	this.chances = [];
	this.eventsGenerated = [];
	this.perfectDistribution = false;
	this.preventRepeats = false || preventRepeats;
	this.randomNoGenerator = new tbRandom();

	this.oneTolastEvent = -1;
	this.lastEvent = -1;

	this.updateChances(eventsToChance);

	if (perfectDistribution) {
		this.perfectDistribution = true;
	}

	this.resetHistory();
};

Distribution.prototype.setRandomNoGenerator = function(randomNoGenerator) {
	"use strict";
	this.randomNoGenerator = randomNoGenerator;
};

Distribution.prototype.updateChances = function(eventsToChance) {
	"use strict";
	var totalChance = 0;
	var i;

	if (typeof eventsToChance === "number") {
		for (i = 0; i < eventsToChance; ++i) {
			this.chances[i] = 1 / eventsToChance;
		}
		return;
	}

	for (i = 0; i < eventsToChance.length; ++i) {
		totalChance += eventsToChance[i];
		if (eventsToChance[i] < 0) {
			throw "Invalid distribution, chance < 0";
		}
	}

	if (totalChance === 0) {
		for (i = 0; i < eventsToChance.length; ++i) {
			this.chances[i] = 0;
		}
	}
	else {
		// normalize chances
		for (i = 0; i < eventsToChance.length; ++i) {
			this.chances[i] = eventsToChance[i] / totalChance;
		}
	}
};

Distribution.prototype.combine = function(otherDistribution) {
	"use strict";

	var totalChance = 0;

	for (var i = 0; i < this.chances.length; ++i) {
		this.chances[i] *= otherDistribution.chances[i];
		totalChance += this.chances[i];
	}

	if (totalChance === 0) {
		for (i = 0; i < this.chances.length; ++i) {
			this.chances[i] = 0;
		}
	}
	else {
		// normalize chances
		for (i = 0; i < this.chances.length; ++i) {
			this.chances[i] = this.chances[i] / totalChance;
		}
	}
};

Distribution.prototype.resetHistory = function() {
	"use strict";
	this.totalEventsGenerated = 0;
	this.oneTolastEvent = -1;
	this.lastEvent = -1;

	if (this.perfectDistribution) {
		for (var i = 0; i < this.chances.length; ++i) {
			this.eventsGenerated[i] = 0;
		}
	}
};

Distribution.prototype.generateEvent = function(exceptFor, onlyFor) {
	"use strict";
	var subsetTotalEventsGenerated, subsetTotalChanceSum, i;
	//check if subsets are requested
	if(!(exceptFor instanceof Array)){
		exceptFor = [exceptFor];
	}
	if(onlyFor && !(onlyFor instanceof Array)){
		onlyFor = [onlyFor];
	}
	//normalize chance sum and total events generated to subset
	subsetTotalEventsGenerated = 0;
	subsetTotalChanceSum = 0;
	for(i=0; i<this.chances.length; i++){
		if(exceptFor.indexOf(i) < 0 && (!onlyFor || onlyFor.indexOf(i) >= 0)){
			if (this.perfectDistribution) {
				subsetTotalEventsGenerated += this.eventsGenerated[i];
			}
			subsetTotalChanceSum += this.chances[i];
		}
	}

	if(subsetTotalChanceSum === 0){
		this.oneTolastEvent = this.lastEvent;
		this.lastEvent = -1;
		return null;
	}

	while (true) {
		var diceRoll = this.randomNoGenerator.random(1);
		var chanceSum = 0;
		var skippedEventsForPerfectDist = false;
		for (i = 0; i < this.chances.length; ++i) {

			if(exceptFor.indexOf(i) >= 0) {
				continue;
			}

			if (onlyFor && onlyFor.indexOf(i) < 0) {
				continue;
			}

			if (this.preventRepeats && this.lastEvent === i) {
				continue;
			}

			var distChance = this.chances[i]/subsetTotalChanceSum;
			if (this.perfectDistribution){ //&& exceptFor === undefined && onlyFor === undefined) {
				var chanceBasedOnPreviousEvents = this.eventsGenerated[i] / subsetTotalEventsGenerated;//this.totalEventsGenerated;
				if (distChance < chanceBasedOnPreviousEvents) {
					skippedEventsForPerfectDist = true;
					continue;
				}
			}
			chanceSum += distChance;
			if (chanceSum > diceRoll) {

				if (this.perfectDistribution) {
					++this.totalEventsGenerated;
					++this.eventsGenerated[i];
				}

				this.oneTolastEvent = this.lastEvent;
				this.lastEvent = i;
				return i;
			}
		}

		if (chanceSum === 0) {
			if (skippedEventsForPerfectDist) {
				subsetTotalEventsGenerated++;
			}
			else {
				this.oneTolastEvent = this.lastEvent;
				this.lastEvent = -1;
				return null;
			}
		}
	}
};

Distribution.prototype.cancelEvent = function(eventIndex) {
	"use strict";
	this.lastEvent = this.oneTolastEvent;
	this.oneTolastEvent = -1;

	if (this.perfectDistribution) {
		--this.totalEventsGenerated;
		--this.eventsGenerated[eventIndex];
	}
};

//******************************************************
//*****    Script Resource: Collections
//******************************************************




function ArrayList() {
	"use strict";
	this.data = [];
	this.count = 0;
}

ArrayList.prototype.push = function(item) {
	"use strict";
	this.data[this.count] = item;
	this.data[this.count + 1] = undefined;
	++this.count;
};

ArrayList.prototype.pop = function() {
	"use strict";
	var result = this.data[this.count - 1];
	--this.count;
	this.data[this.count] = undefined;
	return result;
};

ArrayList.prototype.clear = function() {
	"use strict";
	this.data[0] = undefined;
	this.count = 0;
};

function Queue() {
	"use strict";

	this.inbox = new ArrayList();
	this.outbox = new ArrayList();

	this.count = 0;
}

Queue.prototype.clear = function() {
	"use strict";
	this.inbox.clear();
	this.outbox.clear();
	this.count = 0;
};

Queue.prototype.queue = function(item) {
	"use strict";
	this.inbox.push(item);
	++this.count;
};

Queue.prototype.dequeue = function() {
	"use strict";
	if (this.outbox.count === 0) {
		while (this.inbox.count !== 0) {
			this.outbox.push(this.inbox.pop());
		}
	}
	--this.count;
	return this.outbox.pop();
};
//******************************************************
//*****    Script Resource: RandomSounds
//******************************************************

/* global
	Distribution
 */

/**
 * Arguments should be a list of sounds
 */
function RandomSounds() {
	"use strict";

	this.sounds = [];

	for (var i = 0; i < arguments.length; ++i) {
		this.sounds.push(arguments[i]);
	}

	this.distribution = new Distribution(this.sounds.length, true, true);

}

RandomSounds.maxInstances = {};

RandomSounds.prototype.setMaxInstances = function(tag, count) {
	"use strict";
	RandomSounds.maxInstances[tag] = count;
	this.tag = tag;

	for (var i = 0; i < this.sounds.length; ++i) {
		this.sounds[i].addTags(tag);
	}
};

RandomSounds.prototype.play = function() {
	"use strict";

	if (this.tag !== undefined) {
		if (tbAudio.getInstances(this.tag).length >= RandomSounds.maxInstances[this.tag]) {
			return;
		}
	}

	var sound = this.sounds[this.distribution.generateEvent()];

	if (sound) {
		return tbAudio.play(sound);
	}

	return undefined;
};
//******************************************************
//*****    Script Resource: DictUtils
//******************************************************

/* globals
	tbBrowser
 */

function DictUtils() {
	"use strict";
}

DictUtils.touchRegex = /#touch{([^}]*)}{([^}]*)}/gim;

DictUtils.lookup = function(word) {
	"use strict";
	/** @type String */
	var result = TG.dictionary.getText(word, word);

	if (tbBrowser.features.tablet || tbBrowser.features.mobile) {
		result = result.replace(DictUtils.touchRegex, "$2");
	}
	else {
		result = result.replace(DictUtils.touchRegex, "$1");
	}

	return result;
};
//******************************************************
//*****    Script Resource: tbFloaters
//******************************************************

/////////////////////////////////////////////////////////////
// tbFloaters
//
// tbFloaters object contains the functionality for floaters
//
// Copyright 2014 Tingly Games
// Last Changed: 21-05-2014
/////////////////////////////////////////////////////////////

var tbFloaters = {


/////////////////////////////////////////////////////////////
// Floater kinds
/////////////////////////////////////////////////////////////

	textFloater1 : { },
	textFloater2 : { },
	textFloater3 : { },
	textFloater4 : { },
	numberFloater : { },
	numberSignFloater : { },
	surfaceFloater : { },
	imageFloater : { },

	// Initialize all the default floater kinds
	_initDefaultFloaters : function () {
		"use strict";
		tbFloaters.textFloater1 = {
			init : tbFloaters.defaultTextInit,
			update : tbFloaters.defaultUpdate,
			draw : tbFloaters.defaultDraw,
			end : tbFloaters.defaultEnd,
			font : floaterFontText1,
			margin : 20,
			easeX : tbEase.easeLinear,
			easeY : tbEase.easeLinear,
			easeAlpha : tbEase.easeCreateCombined([tbEase.easeOutCubic, tbEase.easeConstant, tbEase.easeOutCubic], [false, false, true], [0.1, 0.8, 0.1])
		};
		tbFloaters.textFloater2 = {
			init : tbFloaters.defaultTextInit,
			update : tbFloaters.defaultUpdate,
			draw : tbFloaters.defaultDraw,
			end : tbFloaters.defaultEnd,
			font : floaterFontText2,
			margin : 20,
			easeX : tbEase.easeLinear,
			easeY : tbEase.easeLinear,
			easeAlpha : tbEase.easeCreateCombined([tbEase.easeOutCubic, tbEase.easeConstant, tbEase.easeOutCubic], [false, false, true], [0.1, 0.8, 0.1])
		};
		tbFloaters.textFloater3 = {
			init : tbFloaters.defaultTextInit,
			update : tbFloaters.defaultUpdate,
			draw : tbFloaters.defaultDraw,
			end : tbFloaters.defaultEnd,
			font : floaterFontText3,
			margin : 20,
			easeX : tbEase.easeLinear,
			easeY : tbEase.easeLinear,
			easeAlpha : tbEase.easeCreateCombined([tbEase.easeOutCubic, tbEase.easeConstant, tbEase.easeOutCubic], [false, false, true], [0.1, 0.8, 0.1])
		};
		tbFloaters.textFloater4 = {
			init : tbFloaters.defaultTextInit,
			update : tbFloaters.defaultUpdate,
			draw : tbFloaters.defaultDraw,
			end : tbFloaters.defaultEnd,
			font : floaterFontText4,
			margin : 20,
			easeX : tbEase.easeLinear,
			easeY : tbEase.easeLinear,
			easeAlpha : tbEase.easeCreateCombined([tbEase.easeOutCubic, tbEase.easeConstant, tbEase.easeOutCubic], [false, false, true], [0.1, 0.8, 0.1])
		};
		tbFloaters.numberFloater = {
			init : tbFloaters.defaultNumberInit,
			update : tbFloaters.defaultUpdate,
			draw : tbFloaters.defaultDraw,
			end : tbFloaters.defaultEnd,
			fontPositive : floaterFontNumberPositive,
			fontNegative : floaterFontNumberNegative,
			margin : 20,
			easeX : tbEase.easeLinear,
			easeY : tbEase.easeLinear,
			easeAlpha : tbEase.easeCreateCombined([tbEase.easeOutCubic, tbEase.easeConstant, tbEase.easeOutCubic], [false, false, true], [0.1, 0.8, 0.1])
		};
		tbFloaters.numberSignFloater = {
			init : tbFloaters.defaultNumberSignInit,
			update : tbFloaters.defaultUpdate,
			draw : tbFloaters.defaultDraw,
			end : tbFloaters.defaultEnd,
			fontPositive : floaterFontNumberPositive,
			fontNegative : floaterFontNumberNegative,
			margin : 20,
			easeX : tbEase.easeLinear,
			easeY : tbEase.easeLinear,
			easeAlpha : tbEase.easeCreateCombined([tbEase.easeOutCubic, tbEase.easeConstant, tbEase.easeOutCubic], [false, false, true], [0.1, 0.8, 0.1])
		};
		tbFloaters.surfaceFloater = {
			init : tbFloaters.defaultSurfaceInit,
			update : tbFloaters.defaultUpdate,
			draw : tbFloaters.defaultDraw,
			end : tbFloaters.defaultEnd,
			easeX : tbEase.easeLinear,
			easeY : tbEase.easeLinear,
			easeAlpha : tbEase.easeCreateCombined([tbEase.easeOutCubic, tbEase.easeConstant, tbEase.easeOutCubic], [false, false, true], [0.1, 0.8, 0.1])
		};
		tbFloaters.imageFloater = {
			init : tbFloaters.defaultImageInit,
			update : tbFloaters.defaultUpdate,
			draw : tbFloaters.defaultDraw,
			end : tbFloaters.defaultEnd,
			easeX : tbEase.easeLinear,
			easeY : tbEase.easeLinear,
			easeAlpha : tbEase.easeCreateCombined([tbEase.easeOutCubic, tbEase.easeConstant, tbEase.easeOutCubic], [false, false, true], [0.1, 0.8, 0.1])
		};
	},

	// Create a clone of a kind of floater
	cloneFloaterKind : function (kind) {
		"use strict";
		var	clone = function(source){
			var attr, target = {};
			for (attr in source) {
				if(typeof source[attr] === "object" && source[attr] !== null){
						target[attr] = clone(source[attr]);
				}else{
					target[attr] = source[attr]; 
				}
			}
			return target;
		};
		return clone(kind);
	},

	// Set the font face for all text floaters
	setTextFontFace : function (fontFace) {
		"use strict";
		tbFloaters.textFloater1.font.setFontFace(fontFace);
		tbFloaters.textFloater2.font.setFontFace(fontFace);
		tbFloaters.textFloater3.font.setFontFace(fontFace);
		tbFloaters.textFloater4.font.setFontFace(fontFace);
	},

	// Set the font face for all number floaters
	setNumberFontFace : function (fontFace) {
		"use strict";
		tbFloaters.numberFloater.fontPositive.setFontFace(fontFace);
		tbFloaters.numberFloater.fontNegative.setFontFace(fontFace);
		tbFloaters.numberSignFloater.fontPositive.setFontFace(fontFace);
		tbFloaters.numberSignFloater.fontNegative.setFontFace(fontFace);
	},


/////////////////////////////////////////////////////////////
// Surface functions
/////////////////////////////////////////////////////////////

	_bufferSurfaces : false,				// Whether to buffer surfaces
	_buffers : [],						// The buffered surfaces

	// Indicate whether to default buffer surfaces
	setBuffering : function(buffer) {
		"use strict";
		tbFloaters._bufferSurfaces = buffer;
	},

	// Returns whether to default buffer surfaces
	getBuffering : function() {
		"use strict";
		return tbFloaters._bufferSurfaces;
	},

	// Remove all buffers of the given kind if no floater with it exists
	removeBuffers : function(kind) {
		"use strict";
		var ind, buffer;
		for (ind = 0; ind < tbFloaters._buffers.length; ind += 1) {
			buffer = tbFloaters._buffers[ind];
			if (buffer === undefined) { continue; }
			if (kind !== undefined && buffer.kind !== kind) { continue; }
			if (buffer.refCount > 0) { continue; }
			tbFloaters._buffers[ind] = undefined;
		}
	},

	// Initialize the buffers
	_initBuffers : function() {
		"use strict";
		tbFloaters._bufferSurfaces = false;
		tbFloaters._buffers = [];
	},

	// Create a buffer or return an existing one if it already exists
	_createBuffer : function(kind, font, text, keepIt) {
		"use strict";
		var buffer, w, h, ind, oldAlign, oldBaseline;
		if (keepIt === undefined) { keepIt = tbFloaters._bufferSurfaces; }
		// Check whether it exists
		if (keepIt) {
			for (ind = 0; ind < tbFloaters._buffers.length; ind += 1) {
				buffer = tbFloaters._buffers[ind];
				if (buffer !== undefined && buffer.keepIt && buffer.kind === kind &&
					buffer.font === font && buffer.text === text) {
					buffer.refCount += 1;
					return ind;
				}
			}
		}
		// Create the surface buffer
		buffer = { kind: kind, font: font, text: text, refCount: 1, keepIt: keepIt };
		oldAlign = font.getAlign();
		oldBaseline = font.getBaseline();
		font.setAlign("center");
		font.setBaseline("middle");
		w = font.textWidth(text) + 2 * kind.margin;
		h = font.textHeight(text) + 2 * kind.margin;
		buffer.surface = new tbSurface(w, h);
		buffer.surface.setTarget();
		font.drawSimple(text, w/2, h/2);
		buffer.surface.resetTarget();
		font.setAlign(oldAlign);
		font.setBaseline(oldBaseline);
		// Find an empty spot
		for (ind = 0; ind < tbFloaters._buffers.length; ind += 1) {
			if (tbFloaters._buffers[ind] === undefined) {
				tbFloaters._buffers[ind] = buffer;
				return ind;
			}
		}
		tbFloaters._buffers.push(buffer);
		return tbFloaters._buffers.length-1;
	},

	// End a buffer when it no longer needs drawing for a floater
	_endBuffer : function(ind) {
		"use strict";
		var buffer = tbFloaters._buffers[ind];
		buffer.refCount -= 1;
		if (buffer.refCount <= 0 && !buffer.keepIt) {
			tbFloaters._buffers[ind] = undefined;
		}
	},


/////////////////////////////////////////////////////////////
// Floater functions
/////////////////////////////////////////////////////////////

	// Default text floater init method
	defaultTextInit : function(floater) {
		"use strict";
		floater.buffer = tbFloaters._createBuffer(floater.kind, floater.kind.font, floater.value, floater.keepIt);
	},

	// Default number floater init method
	defaultNumberInit : function(floater) {
		"use strict";
		var text = floater.value.toString();
		if (floater.value >= 0) {
			floater.buffer = tbFloaters._createBuffer(floater.kind, floater.kind.fontPositive, text, floater.keepIt);
		} else {
			floater.buffer = tbFloaters._createBuffer(floater.kind, floater.kind.fontNegative, text, floater.keepIt);
		}
	},

	// Default signed number floater init method
	defaultNumberSignInit : function(floater) {
		"use strict";
		var text = floater.value.toString();
		if (floater.value > 0) { text = "+" + text; }
		if (floater.value >= 0) {
			floater.buffer = tbFloaters._createBuffer(floater.kind, floater.kind.fontPositive, text, floater.keepIt);
		} else {
			floater.buffer = tbFloaters._createBuffer(floater.kind, floater.kind.fontNegative, text, floater.keepIt);
		}
	},

	// Default surface floater init method
	defaultSurfaceInit : function(floater) {
		"use strict";
		floater.surface = floater.value;
	},

	// Default image floater init method
	defaultImageInit : function(floater) {
		"use strict";
		floater.image = floater.value;
		floater.subImage = 0;
	},

	// Default floater update method
	defaultUpdate : function(floater) {
		"use strict";
		if (floater.kind.easeX !== undefined) {
			floater.x = floater.kind.easeX(floater.time, floater.startX, floater.endX-floater.startX, floater.duration);
		} else {
			floater.x = tbEase.easeLinear(floater.time, floater.startX, floater.endX-floater.startX, floater.duration);
		}
		if (floater.kind.easeY !== undefined) {
			floater.y = floater.kind.easeY(floater.time, floater.startY, floater.endY-floater.startY, floater.duration);
		} else {
			floater.y = tbEase.easeLinear(floater.time, floater.startY, floater.endY-floater.startY, floater.duration);
		}
		if (floater.kind.easeScaleX !== undefined) {
			floater.scaleX = floater.kind.easeScaleX(floater.time, 0, 1, floater.duration);
		}
		if (floater.kind.easeScaleY !== undefined) {
			floater.scaleY = floater.kind.easeScaleY(floater.time, 0, 1, floater.duration);
		}
		if (floater.kind.easeAlpha !== undefined) {
			floater.alpha = floater.kind.easeAlpha(floater.time, 0, 1, floater.duration);
		}
		if (floater.kind.easeAngle !== undefined) {
			floater.angle = floater.kind.easeAngle(floater.time, 0, 360, floater.duration) % 360;
		}
		// Special processing for the image floater
		if (floater.image !== undefined) {
			floater.subImage = floater.time * floater.image.number / floater.duration;
		}
	},

	// Default floater draw method
	defaultDraw : function(floater) {
		"use strict";
		var context = tbGraphics.context, surface;
		if (floater.image !== undefined && floater.images !== null) {
			if (floater.scaleX === 1 && floater.scaleY === 1 && floater.angle === 0) {
				floater.image.drawAlpha(Math.floor(floater.subImage), floater.x, floater.y, floater.alpha);
			} else {
				floater.image.drawExt(Math.floor(floater.subImage), floater.x, floater.y,
					floater.scaleX, floater.scaleY, floater.angle, floater.alpha);
			}
		} else {
			if (floater.surface !== undefined && floater.surface !== null) {
				surface = floater.surface;
			} else {
				surface = tbFloaters._buffers[floater.buffer].surface;
			}
			if (floater.scaleX === 1 && floater.scaleY === 1 && floater.angle === 0) {
				surface.drawAlpha(floater.x - surface.width/2, floater.y - surface.height/2, floater.alpha);
			} else {
				if (Math.abs(floater.scaleX) < 0.0001 || Math.abs(floater.scaleY) < 0.0001) { return; }
				context.save();
				context.translate(floater.x, floater.y);
				context.rotate(-floater.angle * Math.PI/180);
				context.scale(floater.scaleX, floater.scaleY);
				surface.drawAlpha(-surface.width/2, -surface.height/2, floater.alpha);
				context.restore();
			}
		}
	},

	// Default end floater method
	defaultEnd : function(floater) {
		"use strict";
		// Special processing for text and number floaters
		if (floater.buffer !== undefined) {
			tbFloaters._endBuffer(floater.buffer);
		}
	},


/////////////////////////////////////////////////////////////
// The token callback methods
/////////////////////////////////////////////////////////////

	// Handles the step event for the floaters token
	handleEndStep : function(timePassed) {
		"use strict";
		var ind, floater, mustDraw = false;
		for (ind = 0; ind < tbFloaters._floaters.length; ind += 1) {
			floater = tbFloaters._floaters[ind];
			if (floater === undefined) { continue; }
			// Adapt the time
			if (floater.delay > 0) {
				floater.delay -= timePassed;
				if (floater.delay < 0) {
					floater.time += -floater.delay;
					floater.delay = 0;
				}
			} else {
				floater.time += timePassed;
			}
			if (floater.delay > 0) { continue; }
			// Remove if the time is up
			if (floater.time >= floater.duration) {
				floater.kind.end(floater);
				tbFloaters._floaters[ind] = undefined;
				mustDraw = true;		// To erase it
				continue;
			}
			// Update it
			floater.kind.update(floater);
			mustDraw = true;
		}
		if (mustDraw) { tbFloaters.canvas.drawTokens = true; }
	},

	// Handles the draw event for the floaters token
	handleDraw : function() {
		"use strict";
		var ind, floater;
		for (ind = 0; ind < tbFloaters._floaters.length; ind += 1) {
			floater = tbFloaters._floaters[ind];
			if (floater === undefined) { continue; }
			if (floater.delay > 0) { continue; }
			floater.kind.draw(floater);
		}
	},


/////////////////////////////////////////////////////////////
// Global maintenance
/////////////////////////////////////////////////////////////

	_floaters : [],					// The array of floaters

	// Initialize the floaters
	initFloaters : function (layer, depth, tags) {
		"use strict";
		tbFloaters.endFloaters();
		// Token related aspects
		if (layer === undefined) { layer = TG.gameEffectsLayer; }
		if (depth === undefined) { depth = -1000000; }
		if (tags === undefined) { tags = ["game"]; }
		tbFloaters.visible = true;
		tbFloaters.active = true;
		TG.functions.setLayerAndCanvas(tbFloaters, layer);
		tbFloaters.depth = depth;
		tbGame.addToken(tbFloaters);
		tbGame.addTokenTags(tbFloaters, tags);
		// Initialize with the default floater types
		tbFloaters._initBuffers();
		tbFloaters._initDefaultFloaters();
	},

	// Add a floater; returns the id
	addFloater : function (kind, value, startX, startY, endX, endY, duration, delay, keepIt) {
		"use strict";
		var floater, ind;
		if (delay === undefined) { if(kind.delay !== undefined){delay = kind.delay;}else{delay = 0;}}
		if (keepIt === undefined) { keepIt = tbFloaters._bufferSurfaces; }
		if(endX === undefined && kind.movementX !== undefined) { endX = startX + kind.movementX; }
		if(endY === undefined && kind.movementY !== undefined) { endY = startY + kind.movementY; }
		if(duration === undefined && kind.duration !== undefined) { duration = kind.duration; }
		// Create the floater object
		floater = {
				kind : kind,
				value: value,
				startX : startX,
				startY : startY,
				endX : endX,
				endY : endY,
				x : startX,
				y : startY,
				scaleX : 1,
				scaleY : 1,
				alpha : 1,
				angle : 0,
				time : 0,
				duration : duration,
				delay : delay,
				keepIt : keepIt
			};
		// Initialize it
		floater.kind.init(floater);
		// Put it in the list
		for (ind = 0; ind < tbFloaters._floaters.length; ind += 1) {
			if (tbFloaters._floaters[ind] === undefined) {
				tbFloaters._floaters[ind] = floater;
				return ind;
			}
		}
		tbFloaters._floaters.push(floater);
		return tbFloaters._floaters.length-1;
	},

	// Remove a floater
	removeFloater : function (ind) {
		"use strict";
		var floater;
		if (ind < 0 || ind >= tbFloaters._floaters.length) { return; }
		floater = tbFloaters._floaters[ind];
		if (floater === undefined) { return; }
		floater.kind.end(floater);
		tbFloaters._floaters[ind] = undefined;
	},

	// Remove a floater
	removeAllFloaters : function () {
		"use strict";
		var ind, floater;
		for (ind = 0; ind < tbFloaters._floaters.length; ind += 1) {
			floater = tbFloaters._floaters[ind];
			if (floater === undefined) { continue; }
			floater.kind.end(floater);
			tbFloaters._floaters[ind] = undefined;
		}
		tbFloaters._floaters = [];
	},

	// End the floaters
	endFloaters : function () {
		"use strict";
		tbFloaters.removeAllFloaters();
		tbFloaters.removeBuffers();
		tbGame.removeToken(tbFloaters);
	}


};
//******************************************************
//*****    Script Resource: GameUIControllerBase
//******************************************************

// ***************************************
// Definition of game token GameUIControllerBase
// ***************************************

/* global
	 tbGame,
	 GameUIImage,
	 GameUIText,
	 GameUISettingsOffsets
 */

function GameUIBounds(top, left, bottom, right) {
	"use strict";
	this.top = top;
	this.left = left;
	this.bottom = bottom;
	this.right = right;
}

GameUIBounds.prototype.getWidth = function() {
	"use strict";
	return this.right - this.left;
};

GameUIBounds.prototype.getHeight = function() {
	"use strict";
	return this.bottom - this.top;
};

function GameUIInputProxy(controller) {
	"use strict";
	this.depth = -99;
	TG.functions.setLayerAndCanvas(this, TG.frameworkUILayer);

	this.active = true;
	this.visible = false;

	this.controller = controller;

	tbGame.addToken(this);
}

GameUIInputProxy.prototype.handleKeyDown = function(keycode) {
	"use strict";
	return this.controller.handleKeyDownProxy(keycode);
};

GameUIInputProxy.prototype.handleKeyUp = function(keycode) {
	"use strict";
	return this.controller.handleKeyUpProxy(keycode);
};


GameUIInputProxy.prototype.handleTouchDown = function(finger, x, y) {
	"use strict";
	return this.controller.handleTouchDownProxy(finger, x, y);
};

GameUIInputProxy.prototype.handleTouchUp = function(finger, x, y) {
	"use strict";
	return this.controller.handleTouchUpProxy(finger, x, y);
};


function GameUIControllerBase() {
	"use strict";
	// Properties used by the engine
	this.depth = 0;
	this.layer = 0;
	this.visible = false;
	this.active = false;
	this.redraw = false;

	this.drawDebugInfo = false;

	this._components = [];

	this.entrance = {};
	this.entrance.running = false;
	this.exit = {};
	this.exit.running = false;

	this.paused = false;
	/** @type tbSurface */
	this.staticSurface = new tbSurface(0, 0);

	this.staticSurfaceOffset_x = 0;
	this.staticSurfaceOffset_y = 0;

	this.keyCtrlDown = false;
	this.keyAltDown = false;

	this.userComponentMove = null;
	this.userComponentMove_touchstart_x = -1;
	this.userComponentMove_touchstart_y = -1;
	this.userComponentMove_touchfinger = -1;
	this.userComponentMove_touching = false;

	this.offset_x = 0;
	this.offset_y = 0;

	this.inputProxy = null;
}

GameUIControllerBase.prototype.handleAdd = function() {
	"use strict";
	this.inputProxy = new GameUIInputProxy(this);
};

GameUIControllerBase.prototype.handleRemove = function() {
	"use strict";

	if (this.inputProxy) {
		tbGame.removeToken(this.inputProxy);
		this.inputProxy = null;
	}
};

GameUIControllerBase.prototype.readComponents = function(componentDefinitions, result) {
	"use strict";

	for ( var key in componentDefinitions) {
		var item = componentDefinitions[key];

		if (item.image) {
			result[key] = new GameUIImage(this, item);
		}
		else if (item.text_key) {
			result[key] = new GameUIText(this, TG.dictionary.getText(item.text_key, "<" + item.text_key + ">"), item);
		}
		else if (item.textKey) {
			result[key] = new GameUIText(this, TG.dictionary.getText(item.textKey, "<" + item.textKey + ">"), item);
		}
		else if (item.text) {
			result[key] = new GameUIText(this, item.text, item);
		}
	}

};

GameUIControllerBase.prototype.addComponent = function(component) {
	"use strict";
	this._components.push(component);
};

GameUIControllerBase.prototype.startEntranceAnimation = function(callback) {
	"use strict";
	this.entrance.running = true;
	this.entrance.timer = 0;
	this.entrance.duration = 0;
	this.entrance.callback = callback;
	for (var j = 0; j < this._components.length; ++j) {
		this._components[j].startEntranceAnimation();
		this.entrance.duration = Math.max(this.entrance.duration, this._components[j].getEntranceDuration());
	}
};

GameUIControllerBase.prototype.setLayer = function(layerId) {
	"use strict";
	this.canvas.drawTokens = true;
	TG.functions.setLayerAndCanvas(this, layerId);
};

GameUIControllerBase.prototype.setOffset = function(x, y) {
	"use strict";
	this.offset_x = x;
	this.offset_y = y;
};

GameUIControllerBase.prototype.startExitAnimation = function(callback, canUseEntranceAnimation) {
	"use strict";
	this.exit.running = true;
	this.exit.timer = 0;
	this.exit.duration = 0;
	this.exit.callback = callback;
	for (var j = 0; j < this._components.length; ++j) {
		this._components[j].startExitAnimation(canUseEntranceAnimation);
		this.exit.duration = Math.max(this.exit.duration, this._components[j].getExitDuration());
	}
};

GameUIControllerBase.prototype.calculateBounds = function(result) {
	"use strict";

	if (!result) {
		result = new GameUIBounds(Number.MAX_VALUE,Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);
	}

	result.left = Number.MAX_VALUE;
	result.top = Number.MAX_VALUE;
	result.right = -Number.MAX_VALUE;
	result.bottom = -Number.MAX_VALUE;

	for (var j = 0; j < this._components.length; ++j) {
		var component = this._components[j];

		if (component.x < result.left) {
			result.left = component.x;
		}
		if (component.y < result.top) {
			result.top = component.y;
		}
		var right = component.x + component.width;
		var bottom = component.y + component.height;

		if (right > result.right) {
			result.right = right;
		}
		if (bottom > result.bottom) {
			result.bottom = bottom;
		}
	}
	return result;
};

GameUIControllerBase.prototype.setPaused = function(paused) {
	"use strict";

	if (this.paused === paused) {
		return;
	}

	this.paused = paused;

	if (this.paused) {
		var bounds = this.calculateBounds();

		var width = bounds.getWidth();
		var height = bounds.getHeight();

		if (this.staticSurface) {

			if (this.staticSurface.width === width && this.staticSurface.height === height) {
				// keep the surface, it is big enough
			}
			else {
				this.staticSurface = null;
			}
		}

		if (!this.staticSurface) {
			this.staticSurface = new tbSurface(width, height);
		}
		this.staticSurface.setTarget();
		this.staticSurface.clear();

		this.drawWithOffset(-bounds.left, -bounds.top);

		this.staticSurface.resetTarget();

		this.staticSurfaceOffset_x = bounds.left;
		this.staticSurfaceOffset_y = bounds.top;
	}

};

GameUIControllerBase.prototype._updateAnimation = function(animData, timePassed) {
	"use strict";

	if (animData.running) {
		animData.timer += timePassed;
		if (animData.timer >= animData.duration) {
			animData.running = false;
			if (animData.callback) {
				animData.callback();
			}
		}
	}
};

// handleBeginStep is called each step before processing other events.
GameUIControllerBase.prototype.handleBeginStep = function(timePassed) {
	"use strict";

	this._updateAnimation(this.entrance, timePassed);
	this._updateAnimation(this.exit, timePassed);

	for (var j = 0; j < this._components.length; ++j) {
		this._components[j].handleBeginStep(timePassed);
	}

	if (this.userComponentMove && this.userComponentMove_touching) {

		var touch_x = tbGame.touchX(this.userComponentMove_touchfinger);
		var touch_y = tbGame.touchY(this.userComponentMove_touchfinger);

		var backgroundCanvas = TG.functions.getCanvas(TG.gameBackgroundLayer);
		if (this.canvas === backgroundCanvas) {
			this.userComponentMove.handleDrawGameBackground(this.offset_x + TG.gameUIOffsetX, this.offset_y + TG.gameUIOffsetY);
		}

		var distance_x = touch_x - this.userComponentMove_touchstart_x;
		var distance_y = touch_y - this.userComponentMove_touchstart_y;
		this.userComponentMove.x += distance_x;
		this.userComponentMove.y += distance_y;

		this.userComponentMove.userComponentMoveDistance.x += distance_x;
		this.userComponentMove.userComponentMoveDistance.y += distance_y;

		this.userComponentMove_touchstart_x = touch_x;
		this.userComponentMove_touchstart_y = touch_y;

		this.redraw = true;
	}
};


GameUIControllerBase.prototype.handleTouchDownProxy = function(finger, x, y) {
	"use strict";
	var j;
	if (testMode && this.keyAltDown && this.keyCtrlDown) {
		for (j = this._components.length - 1; j >= 0; --j) {
			if (this._components[j].visible) {
				if (this._components[j].isPointInside(x - TG.gameUIOffsetX, y - TG.gameUIOffsetY)) {
					this.userComponentMove = this._components[j];
					this.userComponentMove_touchstart_x = x;
					this.userComponentMove_touchstart_y = y;
					this.userComponentMove_touchfinger = finger;
					this.userComponentMove_touching = true;

					if (!this.userComponentMove.userComponentMoveDistance) {
						this.userComponentMove.userComponentMoveDistance = new tbVector(0, 0);
					}
					return true;
				}
			}
		}
		this.userComponentMove = null;
	}
	for (j = 0; j < this._components.length; ++j) {
		if (this._components[j].handleTouchDown) {
			if (this._components[j].handleTouchDown(finger, x, y)) {
				return true;
			}
		}
	}
	return false;
};

GameUIControllerBase.prototype.handleTouchUpProxy = function(finger, x, y) {
	"use strict";

	if (this.userComponentMove && finger === this.userComponentMove_touchfinger) {

		var originalX = this.userComponentMove.settings.x;
		var originalY = this.userComponentMove.settings.y;

		if (this.userComponentMove.originalSettings) {
			originalX = this.userComponentMove.originalSettings.x;
			originalY = this.userComponentMove.originalSettings.y;
		}

		if (GameUISettingsOffsets) {
			console.log("Component:\n"+
					" x: tgScale(" + (originalX + this.userComponentMove.userComponentMoveDistance.x - GameUISettingsOffsets.X) + ") + GameUISettingsOffsets.X,\n"+
					" y: tgScale(" + (originalY + this.userComponentMove.userComponentMoveDistance.y - GameUISettingsOffsets.Y) + ") + GameUISettingsOffsets.Y,");
		}
		else {
			console.log("Component:\n"+
					" x: tgScale(" + (originalX + this.userComponentMove.userComponentMoveDistance.x) + "),\n"+
					" y: tgScale(" + (originalY + this.userComponentMove.userComponentMoveDistance.y) + "),");
		}

		this.userComponentMove_touching = false;
		return true;
	}
	else {
		for (var j = 0; j < this._components.length; ++j) {
			if (this._components[j].handleTouchUp) {
				if (this._components[j].handleTouchUp(finger, x, y)) {
					return true;
				}
			}
		}
	}
	return false;
};

GameUIControllerBase.prototype.handleKeyDownProxy = function(keycode) {
	"use strict";

	if (testMode) {

		var j, component;

		if (keycode === tbKeyCodes.vkD) {
			this.drawDebugInfo = !this.drawDebugInfo;

			for (j = 0; j < this._components.length; ++j) {
				component = this._components[j];

				if (component.redrawSurface) {
					component.redrawSurface();
				}
			}
		}

		if (keycode === tbKeyCodes.vkE) {
			for (j = 0; j < this._components.length; ++j) {
				component = this._components[j];

				if (component.showAttentionEffect) {
					component.showAttentionEffect();
				}
			}
		}
	}

	if (keycode === tbKeyCodes.vkControl) {
		this.keyCtrlDown = true;
	}
	if (keycode === tbKeyCodes.vkAlt) {
		this.keyAltDown = true;
	}
};

GameUIControllerBase.prototype.handleKeyUpProxy = function(keycode) {
	"use strict";

	if (keycode === tbKeyCodes.vkControl) {
		this.keyCtrlDown = false;
	}
	if (keycode === tbKeyCodes.vkAlt) {
		this.keyAltDown = false;
	}
};


// handleEndStep is called each step after processing other events (before
// draw).
GameUIControllerBase.prototype.handleEndStep = function(timePassed) {
	"use strict";
	if (this.redraw) {
		var backgroundCanvas = TG.functions.getCanvas(TG.gameBackgroundLayer);
		if (this.canvas !== backgroundCanvas) {
			this.canvas.drawTokens = this.redraw;
		}
		else {
			tbGraphics.setCanvas(backgroundCanvas);
			this.handleDraw();
		}
	}
};

GameUIControllerBase.prototype.drawWithOffset = function(offset_x, offset_y) {
	"use strict";
	var backgroundCanvas = TG.functions.getCanvas(TG.gameBackgroundLayer);
	var isDrawnOnBackgroundCanvas = backgroundCanvas === this.canvas;

	for (var j = 0; j < this._components.length; ++j) {
		var component = this._components[j];
		if (component.visible) {
			if (isDrawnOnBackgroundCanvas) {
				component.handleDrawGameBackground(offset_x, offset_y);
			}

			component.handleDraw(offset_x, offset_y);
		}
	}
};

// handleDraw is called at the end of a step to draw the token.
GameUIControllerBase.prototype.handleDraw = function() {
	"use strict";
	var gameUiCanvas = TG.functions.getCanvas(TG.gameUILayer);
	var isDrawnOnGameUiCanvas = gameUiCanvas === this.canvas;

	var gameUiOffset_x = 0;
	var gameUiOffset_y = 0;

	if (!isDrawnOnGameUiCanvas) {
		gameUiOffset_x = TG.gameUIOffsetX;
		gameUiOffset_y = TG.gameUIOffsetY;
	}

	if (this.paused) {
		this.staticSurface.drawSimple(this.staticSurfaceOffset_x + this.offset_x + gameUiOffset_x, this.staticSurfaceOffset_y + this.offset_y + gameUiOffset_y);
	}
	else {
		this.drawWithOffset(this.offset_x + gameUiOffset_x, this.offset_y + gameUiOffset_y);
	}
	this.redraw = false;

};

//******************************************************
//*****    Token Resource: GameUIController
//******************************************************

// ***************************************
// Definition of game token GameUIController
// ***************************************

/* global
	 TG,
	 tbGame,
	 gameUISettingsVar,
	 tbGraphics,
	 GameUIValue,
	 GameUIProgress,
	 GameUIRoundProgress,
	 GameUIImage,
	 GameUIDummy,
	 GameUIText,
	 GameUIButton,
	 s_ui_smiley_easy,
	 s_ui_smiley_medium,
	 s_ui_smiley_hard,
	 a_gameui_timewarning_second,
	 GameUIControllerBase,
	 Inheritance,
	 a_gameui_timewarning_second,
	 GameUIBounds
 */

/**
 * @enum GameUIAutoTime
 */
var GameUITimeMode = {
	NONE: 0,
	AUTO_INCREMENT: 1,
	AUTO_DECREMENT: 2
};

function GameUIRuntimeOptions() {
	"use strict";

	this.hiddenComponents = [];
	this.extraComponents = [];

	this.settingsObject = null;

	this.autoUpdateHighScore = undefined;

	this.gameCanBePaused = true;
}

// The constructor for the GameUIController game token.
/**
 * @constructor
 * @extends GameUIControllerBase
 */
function GameUIController(argument) {
	"use strict";

	/** @type GameUIRuntimeOptions */
	var runtimeOptions;

	// Check if the function is called correctly
	if (argument instanceof GameUIRuntimeOptions) {

		if (arguments.length !== 1) {
			throw "When using GameUIOptions as argument to GameUIController constructor you should not use extraComponents of gameUiSettings as parameters anymore.";
		}
		runtimeOptions = argument;
	}
	else {
		runtimeOptions = new GameUIRuntimeOptions();

		if (testMode) {
			console.warn("Please use the new GameUIRuntimeOptions object instead of the old calling convention. It will be deprecated. See wiki for documentation.");
		}

		runtimeOptions.hiddenComponents = arguments[0];
		runtimeOptions.extraComponents = arguments[1];
		runtimeOptions.settingsObject = arguments[2];
	}

	var hiddenComponents = null;
	var extraComponents = null;
	var gameUiSettings = null;

	hiddenComponents = runtimeOptions.hiddenComponents;
	extraComponents = runtimeOptions.extraComponents;

	gameUiSettings = runtimeOptions.settingsObject;

	this.runtimeOptions = runtimeOptions;

	if (this.runtimeOptions.autoUpdateHighScore === undefined) {
		this.runtimeOptions.autoUpdateHighScore = !TG.controller.getChallengeInformation();
	}

	GameUIControllerBase.apply(this, arguments);

	// Add it to the game engine
	tbGame.addToken(this);

	this.visible = true;
	this.active = true;

	extraComponents = extraComponents || [];
	hiddenComponents = hiddenComponents || [];

	var hasHiddenComponent = function (name) {
		for (var option in hiddenComponents) {
			if (option === name) {
				return true;
			}
			if (hiddenComponents[option] === name) {
				return true;
			}
		}
		return false;
	};

	var hasExtraComponent = function (name) {
		for (var option in extraComponents) {
			if (option === name) {
				return true;
			}
			if (extraComponents[option] === name) {
				return true;
			}
		}
		return false;
	};

	var shouldBeAdded = function(names, setting) {

		if (!setting) {
			return false;
		}

		var i = 0;

		if (typeof names === "string") {
			if (hasHiddenComponent(names)) {
				return false;
			}
		}
		else {
			for (i = 0; i < names.length; ++i) {
				if (hasHiddenComponent(names[i])) {
					return false;
				}
			}
		}

		if (setting.defaultHide) {
			if (typeof names === "string") {
				if (hasExtraComponent(names)) {
					return true;
				}
			}
			else {
				for (i = 0; i < names.length; ++i) {
					if (hasExtraComponent(names[i])) {
						return true;
					}
				}
			}
			return false;
		}

		return true;
	};

	// public properties
	/** @deprecated Use hiddenComponents in GameUIRuntimeOptions */
	this.forceHideScore = null;
	/** @deprecated Use hiddenComponents in GameUIRuntimeOptions */
	this.forceHideLives = null;
	/** @deprecated Use hiddenComponents in GameUIRuntimeOptions */
	this.forceHideProgress = null;
	/** @deprecated Use hiddenComponents in GameUIRuntimeOptions */
	this.forceHideStars = null;
	/** @deprecated Use hiddenComponents in GameUIRuntimeOptions */
	this.forceHideStage = null;
	/** @deprecated Use hiddenComponents in GameUIRuntimeOptions */
	this.forceHideTime = null;
	/** @deprecated Use hiddenComponents in GameUIRuntimeOptions */
	this.forceHideHighscore = null;

	this.timeMode = GameUITimeMode.AUTO_DECREMENT;

	// private fields

	this.bonusActive = false;

	this._settings = gameUiSettings || gameUISettingsVar;

	this.defaultLayer = TG.gameUILayer;

	if (this._settings.layer !== undefined) {
		this.defaultLayer = this._settings.layer;
	}

	TG.functions.setLayerAndCanvas(this, this.defaultLayer);

	this._background_image_x = 0;
	this._background_image_y = 0;

	if (this._settings.background.image_x) {
		this._background_image_x = this._settings.background.image_x;
	}
	if (this._settings.background.image_y) {
		this._background_image_y = this._settings.background.image_y;
	}

	if (!this._settings.background.elements) {
		/**
		 * @type tbImage
		 */
		this._background_image = this._settings.background.image;
	}
	if (this._settings.background.backgroundElementsAsComponents) {
		this.readComponents(this._settings.background.elements, {});
		this._background_image = this._settings.background.image;
	}
	else {

		var backgroundImage = this._settings.background.image;

		var components = [];
		var virtualGameController = new GameUIControllerBase();

		virtualGameController.readComponents(this._settings.background.elements, components);


		if (!backgroundImage && this.layer === TG.gameBackgroundLayer) {
			tbGraphics.setCanvas(TG.functions.getCanvas(this.layer));

			virtualGameController.handleDraw();
		}
		else {
			this._background_image = new tbSurface(backgroundImage.width, backgroundImage.height);
			this._background_image.setTarget();

			backgroundImage.drawSimple(0, 0, 0);

			virtualGameController.drawWithOffset(-this._background_image_x, -this._background_image_y);

			this._background_image.resetTarget();
		}

	}

	this._mode = this._settings.mode;

	this.initialHighScore = 0;

	if (shouldBeAdded("score", this._settings.score)) {
		this.scoreComponent = new GameUIValue(this, this._settings.score, "SCORE", 0, true);
		if (this._settings.scoreImage) {
			this.scoreImageComponent = new GameUIImage(this, this._settings.scoreImage);
		}
	}
	else {
		this.scoreComponent = new GameUIDummy(this, 0);
	}

	if (shouldBeAdded("highScore", this._settings.highScore)) {
		this.highScoreComponent = new GameUIValue(this, this._settings.highScore, "HIGHSCORE", 0, false);
	}
	else {
		this.highScoreComponent = new GameUIDummy(this, 0);
	}

	if (shouldBeAdded("highScore", this._settings.highScoreImage)) {
		this.highScoreImageComponent = new GameUIImage(this, this._settings.highScoreImage);
	}

	if (shouldBeAdded(["stage", "level"], this._settings.stage)) {
		this.stageComponent = new GameUIValue(this, this._settings.stage, "STAGE", 0, false);
	}
	else {
		this.stageComponent = new GameUIDummy(this, 0);
	}

	if (shouldBeAdded("lives", this._settings.lives)) {
		this.livesComponent = new GameUIValue(this, this._settings.lives, "LIVES", 0, false);
	}
	else {
		this.livesComponent = new GameUIDummy(this, 0);
	}

	if (shouldBeAdded("time", this._settings.time)) {
		this.timeComponent = new GameUIValue(this, this._settings.time, "TIME", 0, false, function(value) {
			return GameUIController.timeToStr(value);
		});
	}
	else {
		this.timeComponent = new GameUIDummy(this, 0);
	}

	this.timeComponent.setValue(1000*6*60);

	if (this._settings.progress && this._settings.progressFill) {
		throw "Don't define both progress and progressFill in your game_ui settings";
	}

	if (shouldBeAdded("progress", this._settings.progress)) {
		if (this._settings.progress.round) {
			this.progressComponent = new GameUIRoundProgress(this, this._settings.progress);
		}
		else {
			this.progressComponent = new GameUIProgress(this, this._settings.progress);
		}
	}
	else {
		if (shouldBeAdded("progress", this._settings.progressFill)) {
			this.progressComponent = new GameUIProgress(this, this._settings.progressFill);
		}
		else {
			this.progressComponent = new GameUIDummy(this, 0);
		}
	}


	if (shouldBeAdded("lives", this._settings.heart)) {
		this.heartComponent = new GameUIImage(this, this._settings.heart);
	}

	if (shouldBeAdded("difficulty", this._settings.difficulty)) {
		this.difficultyComponent = new GameUIText(this, TG.controller.getDifficultyText().toUpperCase(), this._settings.difficulty);
	}
	else {
		this.difficultyComponent = new GameUIDummy(this, TG.controller.getDifficultyText().toUpperCase());
	}
	if (shouldBeAdded("difficulty", this._settings.difficultyImage)) {
		var difficultyImage = s_ui_smiley_medium;
		var difficultyImages;
		if (this._settings.difficultyImage.images) {
			difficultyImages = this._settings.difficultyImage.images;
		}
		else {
			difficultyImages = [s_ui_smiley_easy, s_ui_smiley_medium, s_ui_smiley_hard];
		}

		difficultyImage = difficultyImages[TG.controller.getDifficulty()];

		if (!this._settings.difficultyImage.image) {
			this._settings.difficultyImage.image = difficultyImage;
		}

		this.difficultyImageComponent = new GameUIImage(this, this._settings.difficultyImage);
		this.difficultyImageComponent.setImage(difficultyImage);
	}

	// translate old object definitions to arrays
	if (this._settings.itemImage && !this._settings.itemImage.length) {
		this._settings.itemImage = [this._settings.itemImage];
	}
	if (this._settings.itemText && !this._settings.itemText.length) {
		this._settings.itemText = [this._settings.itemText];
	}

	this.itemImageComponent = [];
	this.itemTextComponent = [];

	if (shouldBeAdded(["item", "item0"], this._settings.itemImage)) {
		this.itemImageComponent[0] = new GameUIImage(this, this._settings.itemImage[0]);
	} else {
		this.itemImageComponent[0] = new GameUIDummy(this, "");
	}

	if (shouldBeAdded(["item", "item0"], this._settings.itemText)) {
		this.itemTextComponent[0] = new GameUIText(this, "", this._settings.itemText[0]);
	}
	else {
		this.itemTextComponent[0] = new GameUIDummy(this, "");
	}

	if (this._settings.itemImage && this._settings.itemText) {

		for (var index = 1; index < this._settings.itemText.length; ++index) {
			if (shouldBeAdded("item" + index, this._settings.itemText[index])) {
				this.itemTextComponent[index] = new GameUIText(this, "0 / 0", this._settings.itemText[index]);
				this.itemImageComponent[index] = new GameUIImage(this, this._settings.itemImage[index]);
			}
		}

	}

	for (var key in this._settings) {
		var item = this._settings[key];

		if (item.textKey) {
			new GameUIText(this, TG.dictionary.getText(item.textKey, "<"+ item.textKey+">") + (item.separator?item.separator:"") , item);
		}
	}

	this.timeWarningSeconds = 0;


	this.lifeTime = 0;

	this.buttons = {};
	var button;

	for (key in this._settings.buttons) {
		button = this._createButton(key, this._settings.buttons[key]);
		this.buttons[key] = button;
	}

	if (this._settings.pauseButton) {
		button = this._createButton("pauseButton", this._settings.pauseButton);
		this.buttons["pauseButton"] = button;
	}

	this.customComponents = {};

	for (key in this._settings.customComponents) {
		var customComponentSettings = this._settings.customComponents[key];
		var componentType = GameUIController._customComponentRegistry[customComponentSettings.componentType];
		var customComponent = new componentType(this, customComponentSettings);
		this.customComponents[key] = customComponent;
	}

	this.setOffset(0, 0);
}

Inheritance.copyPrototype(GameUIControllerBase, GameUIController);

GameUIController._customComponentRegistry = {};

GameUIController.registerComponent = function(name, customComponentType) {
	"use strict";
	GameUIController._customComponentRegistry[name] = customComponentType;
};

GameUIController.prototype.getCustomComponent = function(componentName) {
	"use strict";
	return this.customComponents[componentName];
};

GameUIController.prototype.setLayer = function(layerId) {
	"use strict";
	GameUIControllerBase.prototype.setLayer.apply(this, arguments);
	for (var key in this.buttons) {
		TG.functions.setLayerAndCanvas(this.buttons[key], layerId);
	}
};

GameUIController.prototype._createButton = function(buttonName, settings) {
	"use strict";

	var result = new GameUIButton(this, settings, settings.buttonType, buttonName);
	this._components.push(result);
	result.gameui_buttonSettings = settings;

	return result;
};

GameUIController.prototype.setButtonType = function(buttonType, buttonKey) {
	"use strict";
	buttonKey = buttonKey || "pauseButton";
	var button = this.buttons[buttonKey];
	button.setButtonType(buttonType);
};

GameUIController.prototype.setButtonCallback = function(callback, buttonKey) {
	"use strict";
	buttonKey = buttonKey || "pauseButton";

	var oldButton = this.buttons[buttonKey];

	oldButton.setCallback(callback);
};

GameUIController.prototype.setItemText = function(value, index) {
	"use strict";
	index = index || 0;
	this.itemTextComponent[index].setText(value);
};

GameUIController.prototype.setItemImage = function(image, index) {
	"use strict";
	index = index || 0;
	this.itemImageComponent[index].setImage(image);
};

GameUIController.prototype.setItemImageNumber = function(number, index) {
	"use strict";
	index = index || 0;
	this.itemImageComponent[index].setNumber(number);
};

GameUIController.prototype._createItemImageOverlay = function(index) {
	"use strict";
	index = index || 0;

	var gameUiImage;

	if (!this.itemImageComponent[index].overlay) {

		var fromSettings = this.itemImageComponent[index].settings;
		var settings = {};

		for (var key in fromSettings) {
			if (fromSettings.hasOwnProperty(key)) {
				settings[key] = fromSettings[key];
			}
		}

		gameUiImage = new GameUIImage(this, settings);
		gameUiImage.center = false;
		this.itemImageComponent[index].overlay = gameUiImage;
	}
	else {
		gameUiImage = this.itemImageComponent[index].overlay;
	}

	return gameUiImage;
};

GameUIController.prototype.setItemImageOverlay = function(overlayImage, offsetx, offsety, index) {
	"use strict";
	index = index || 0;
	var gameUiImage = this._createItemImageOverlay(index);

	gameUiImage.x = gameUiImage.settings.x + (offsetx || 0);
	gameUiImage.y = gameUiImage.settings.y + (offsety || 0);

	gameUiImage.setImage(overlayImage);

};

GameUIController.prototype.getItemImageOverlay = function(index) {
	"use strict";
	index = index || 0;
	var gameUiImage = this.itemImageComponent[index].overlay;
	if (!gameUiImage) {
		return null;
	}
	return gameUiImage.getImage();
};

GameUIController.prototype.setItemImageOverlayEntrance = function(entranceSettings, index) {
	"use strict";
	var gameUiImage = this._createItemImageOverlay(index);

	gameUiImage.settings.entrance = entranceSettings;
	gameUiImage.startEntranceAnimation();

};
GameUIController.prototype.getItemImagePosition = function(index) {
	"use strict";
	index = index || 0;
	return this.itemImageComponent[index].getPosition();
};

GameUIController.prototype.setTimeWarningSeconds = function(seconds) {
	"use strict";
	this.timeWarningSeconds = seconds;
};

GameUIController.timeToStr = function(value) {
	"use strict";
	var minutes = Math.floor(value / 60000);
	var seconds = Math.floor((value % 60000) / 1000);
	return minutes + (seconds < 10 ? ":0" : ":") + seconds;
};

GameUIController.prototype.setProgress = function(percentage) {
	"use strict";
	this.progressComponent.setProgress(percentage);
	return this;
};

GameUIController.prototype.getProgress = function() {
	"use strict";
	return this.progressComponent.getProgress();
};

GameUIController.prototype.setBonusActive = function(active) {
	"use strict";
	this.progressComponent.setBonusActive(active);
};

GameUIController.prototype.setTime = function(time) {
	"use strict";
	this.timeComponent.setValue(time);
	return this;
};

GameUIController.prototype.setTimeMmSs = function(minutes, seconds) {
	"use strict";
	this.timeComponent.setValue((minutes * 60 + seconds) * 1000);
	return this;
};

GameUIController.prototype.getTime = function() {
	"use strict";
	return this.timeComponent.getValue();
};

GameUIController.prototype.setLives = function(lives) {
	"use strict";
	this.livesComponent.setValue(lives);
	return this;
};

GameUIController.prototype.getLives = function() {
	"use strict";
	return this.livesComponent.getValue();
};

GameUIController.prototype.setScore = function(score) {
	"use strict";

	this.scoreComponent.setValue(score);

	if (this.runtimeOptions.autoUpdateHighScore) {
		if (this.highScoreComponent.getValue() < score) {
			this.highScoreComponent.setValue(score);
		}
		else {
			if (score < this.highScoreComponent.getValue()) {
				this.highScoreComponent.setValue(Math.max(score, this.initialHighScore));
			}
		}
	}

	return this;
};

/** @deprecated Use GameUIController.setHighScore */
GameUIController.prototype.setHighscore = function(highScore) {
	"use strict";
	return this.setHighScore(highScore);
};

GameUIController.prototype.setHighScore = function(highScore) {
	"use strict";
	this.highScoreComponent.setValue(highScore);
	this.initialHighScore = highScore;
	return this;
};

GameUIController.prototype.setHighScoreFormatter = function(formatter) {
	"use strict";
	this.highScoreComponent.setFormatter(formatter);
};

GameUIController.prototype.setHighScoreDictionaryKey = function(dictionaryKey) {
	"use strict";
	this.highScoreComponent.setDictionaryKey(dictionaryKey);
};

GameUIController.prototype.getScore = function() {
	"use strict";
	return this.scoreComponent.getValue();
};

/** @deprecated Use GameUIController.getHighScore */
GameUIController.prototype.getHighscore = function() {
	"use strict";
	return this.getHighScore();
};


GameUIController.prototype.getHighScore = function() {
	"use strict";
	return this.highScoreComponent.getValue();
};

GameUIController.prototype.setStage = function(stage) {
	"use strict";
	this.stageComponent.setValue(stage);
	if (stage > 1) {
		if (this.progressComponent) {
			if (this.progressComponent.handleNextStage) {
				this.progressComponent.handleNextStage(stage);
			}
		}
	}
	return this;
};

GameUIController.prototype.getStage = function() {
	"use strict";
	return this.stageComponent.getValue();
};

GameUIController.prototype.setLevel = function(level) {
	"use strict";
	this.stageComponent.setValue(level);
	return this;
};

GameUIController.prototype.getLevel = function() {
	"use strict";
	return this.stageComponent.getValue();
};

GameUIController.prototype.incStage = function(stagesToAdd) {
	"use strict";
	if (typeof stagesToAdd === "undefined") {
		stagesToAdd = 1;
	}
	this.setStage(this.getStage() + stagesToAdd);
	return this;
};

GameUIController.prototype.getTimeAsString = function() {
	"use strict";
	return GameUIController.timeToStr(this.timeComponent.getValue());
};

GameUIController.prototype.addScore = function(points) {
	"use strict";
	this.setScore(this.getScore() + points);
	return this;
};

GameUIController.prototype.addStar = function(percentage) {
	"use strict";
	return this.progressComponent.addStar(percentage);
};

GameUIController.prototype.setStarComplete = function(starIndex, isComplete) {
	"use strict";
	this.progressComponent.setStarComplete(starIndex, isComplete);
	return this;
};

GameUIController.prototype.getStarComplete = function(starIndex) {
	"use strict";
	return this.progressComponent.getStarComplete(starIndex);
};

GameUIController.prototype.calculateBounds = function(result) {
	"use strict";

	if (!result) {
		result = new GameUIBounds(0,0,0,0);
	}

	result.left = 0;
	result.top = 0;
	result.right = this._background_image.width;
	result.bottom = this._background_image.height;

	return result;
};

// handleRemove is called when the token is removed from the game.
GameUIController.prototype.handleRemove = function() {
	"use strict";

	GameUIControllerBase.prototype.handleRemove.apply(this, arguments);

	tbGraphics.setCanvas(this.canvas);
	tbGraphics.clear();

	for (var key in this.buttons) {
		tbGame.removeToken(this.buttons[key]);
	}
};

// handleBeginStep is called each step before processing other events.
GameUIController.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	if (this.timeMode === GameUITimeMode.AUTO_INCREMENT) {
		this.setTime(this.getTime() + timePassed);
	}
	if (this.timeMode === GameUITimeMode.AUTO_DECREMENT) {


		if (this.timeWarningSeconds && this.timeWarningSeconds*1000 >= this.getTime()) {
			var lastSeconds = Math.floor(this.getTime() / 1000);
			var currSeconds = Math.floor(Math.max(this.getTime() - timePassed, 0) / 1000);

			if (lastSeconds !== currSeconds) {
				this.timeComponent.startHighlight();

				if (typeof a_gameui_timewarning_second !== "undefined") {
					tbAudio.play(a_gameui_timewarning_second);
				}
			}
		}
		this.setTime(Math.max(this.getTime() - timePassed, 0));
	}

	GameUIControllerBase.prototype.handleBeginStep.apply(this, arguments);

	this.lifeTime += timePassed;

};

/**
 * @deprecated This function cannot be used anymore
 */
GameUIController.prototype.setBackgroundAlpha = function() {
};

// handleDraw is called at the end of a step to draw the token.
GameUIController.prototype.drawWithOffset = function(offset_x, offset_y) {
	"use strict";

	if (this._background_image) {
		if (this._background_image instanceof tbImage) {
			this._background_image.drawAlpha(0, offset_x + this._background_image_x, offset_y + this._background_image_y, 1);
		}
		else {
			this._background_image.drawAlpha(offset_x + this._background_image_x, offset_y + this._background_image_y, 1);
		}
	}
	GameUIControllerBase.prototype.drawWithOffset.apply(this, arguments);

	if (this.drawDebugInfo && this._background_image) {
		tbGraphics.drawRectangle(offset_x, offset_y, this._background_image.width, this._background_image.height, "blue", true);
	}
};

//******************************************************
//*****    Script Resource: GameUIStar
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

/* exported GameUIStar
 */
var GameUIStar = function(position) {
	"use strict";
	this.complete = false;
	this.position = position;

};
//******************************************************
//*****    Script Resource: GameUIComponent
//******************************************************

/* global
	tbSurface
 */

/**
 * @constructor GameUIComponent
 */
function GameUIComponent(controller, settings, x, y, width, height) {
	"use strict";
	/**
	 * @type GameUIController
	 */
	this.controller = controller;

	this.width = width;
	this.height = height;

	this.surface = null;

	this.x = x;
	this.y = y;

	this.visible = true;

	this.settings = settings;
	this.alpha = settings.alpha !== undefined ? settings.alpha : 1;

	this.scale = settings.scale !== undefined ? settings.scale: 1;

	this.drawing = {};
	this.drawing.offset_x = 0;
	this.drawing.offset_y = 0;
	this.drawing.scale = this.scale;
	this.drawing.alpha = this.alpha;
	this.drawing.angle = 0;

	this.animation = {};
	this.animation.running = false;

	this.animation.origin = {};
	this.animation.target = {};

	this.animation.timer = 0;

	if (this.settings.entrance) {
		this.startAnimationFrom(this.settings.entrance);
		this.animation.running = false;
	}

	this.controller._components.push(this);


	if (!GameUIComponent.attentionEffectFloaterKind) {
		GameUIComponent.attentionEffectFloaterKind = {
			init: function(floater) {
				if (floater.value instanceof tbSurface) {
					floater.surface = floater.value;
				}
				else {
					floater.image = floater.value;
					floater.subImage = 0;
				}
			},
			update: tbFloaters.defaultUpdate,
			draw: tbFloaters.defaultDraw,
			end: tbFloaters.defaultEnd,
			easeX: tbEase.easeLinear,
			easeY: tbEase.easeLinear,
			easeAlpha: function(time, begin, change, duration) {
				return 1 - tbEase.easeOutCubic(time, begin, change, duration);
			},
			easeScaleX: function(a, b, c, d) {
				return tbEase.easeOutCubic(a, b, c, d) * 1 + 1;
			},
			easeScaleY: function(a, b, c, d) {
				return tbEase.easeOutCubic(a, b, c, d) * 1 + 1;
			}
		};
	}

}


GameUIComponent.prototype._getAnimationDuration = function(settings) {
	"use strict";
	if (settings) {
		var duration = settings.duration;
		if (settings.delay) {
			duration += settings.delay;
		}
		return duration;
	}
	else {
		return 0;
	}
};


GameUIComponent.prototype.getEntranceDuration = function() {
	"use strict";
	return this._getAnimationDuration(this.settings.entrance);
};

GameUIComponent.prototype.getExitDuration = function() {
	"use strict";
	return this._getAnimationDuration(this.settings.exit);
};


GameUIComponent.prototype.startExitAnimation = function(canUseEntranceAnimation) {
	"use strict";
	if (this.settings.exit) {
		this.startAnimationTo(this.settings.exit);
	}
	else if (canUseEntranceAnimation && this.settings.entrance) {
		this.startAnimationTo(this.settings.entrance);
	}
};

GameUIComponent.prototype.startEntranceAnimation = function() {
	"use strict";
	if (this.settings.entrance) {
		this.startAnimationFrom(this.settings.entrance);
	}
};

GameUIComponent.prototype._setGenericAnimationParameters = function(settings) {
	"use strict";
	this.animation.duration = settings.duration;
	this.animation.running = true;
	this.animation.easeFunction = settings.easeFunction || tbEase.easeOutCubic;
	this.animation.timer = 0;
	this.animation.delay = settings.delay || 0;

	this.updateAnimation();
};

GameUIComponent.prototype.startAnimationFrom = function(settings) {
	"use strict";

	this.animation.origin.x = settings.x === undefined ? this.x : settings.x;
	this.animation.origin.y = settings.y === undefined ? this.y : settings.y;
	this.animation.origin.alpha = settings.alpha !== undefined ? settings.alpha : 1;
	this.animation.origin.scale = settings.scale !== undefined ? settings.scale : 1;

	this.animation.target.x = this.x;
	this.animation.target.y = this.y;
	this.animation.target.alpha = this.alpha;
	this.animation.target.scale = this.scale;

	this._setGenericAnimationParameters(settings);
};

GameUIComponent.prototype.startAnimationTo = function(settings) {
	"use strict";

	this.animation.target.x = settings.x === undefined ? this.x : settings.x;
	this.animation.target.y = settings.y === undefined ? this.y : settings.y;
	this.animation.target.alpha = settings.alpha !== undefined ? settings.alpha : 1;
	this.animation.target.scale = settings.scale !== undefined ? settings.scale : 1;

	this.animation.origin.x = this.x;
	this.animation.origin.y = this.y;
	this.animation.origin.alpha = this.alpha;
	this.animation.origin.scale = this.scale;

	this._setGenericAnimationParameters(settings);
};

GameUIComponent.prototype.updateAnimation = function() {
	"use strict";

	if (this.animation.timer >= this.animation.duration) {
		this.animation.timer = this.animation.duration;
		this.animation.running = false;
	}

	var virtual_x = this.animation.easeFunction(this.animation.timer, this.animation.origin.x, this.animation.target.x - this.animation.origin.x, this.animation.duration);
	var virtual_y = this.animation.easeFunction(this.animation.timer, this.animation.origin.y, this.animation.target.y - this.animation.origin.y, this.animation.duration);

	this.drawing.offset_x = virtual_x - this.x;
	this.drawing.offset_y = virtual_y - this.y;

	this.drawing.alpha = this.animation.easeFunction(this.animation.timer, this.animation.origin.alpha, this.animation.target.alpha - this.animation.origin.alpha, this.animation.duration);
	this.drawing.scale = this.animation.easeFunction(this.animation.timer, this.animation.origin.scale, this.animation.target.scale - this.animation.origin.scale, this.animation.duration);

	this.controller.redraw = true;

};

GameUIComponent.prototype.createSurface = function() {
	"use strict";
	this.surface = new tbSurface(this.width, this.height);
};

GameUIComponent.prototype.handleDraw = function(offset_x, offset_y) {
	"use strict";
	if (this.surface) {
		this.surface.drawExt(this.x + this.drawing.offset_x + offset_x, this.y + this.drawing.offset_y + offset_y, this.drawing.scale, this.drawing.scale, 0, this.drawing.alpha);
	}
};


GameUIComponent.prototype.handleDrawGameBackground = function(offset_x, offset_y) {
	"use strict";
	TG.controller.drawInGameBackground(this.x + this.drawing.offset_x + offset_x, this.y + this.drawing.offset_y + offset_y, this.width * this.drawing.scale,
			this.height * this.drawing.scale);
};

GameUIComponent.prototype.isPointInside = function(x, y) {
	"use strict";
	return x > this.x + this.drawing.offset_x && x < this.x + this.drawing.offset_x + this.width * this.drawing.scale && y > this.y + this.drawing.offset_y
			&& y < this.y + this.drawing.offset_y + this.height * this.drawing.scale;
};


GameUIComponent.prototype.showAttentionEffect = function() {
	"use strict";

	if (this.surface) {
		if (!tbFloaters.visible) {
			tbFloaters.initFloaters();
		}

		var offset_x = this.controller.offset_x + TG.gameUIOffsetX + this.surface.width / 2;
		var offset_y = this.controller.offset_y + TG.gameUIOffsetY + this.surface.height / 2;

		tbFloaters.addFloater(GameUIComponent.attentionEffectFloaterKind, this.surface, this.x + offset_x, this.y + offset_y, this.x + offset_x, this.y + offset_y, 900, 0, false);
	}
};


GameUIComponent.prototype.setVisible = function(visible) {
	"use strict";
	if (this.visible === visible) {
		return;
	}
	this.visible = visible;
	this.controller.redraw = true;
};

GameUIComponent.prototype.handleBeginStep = function(timePassed) {
	"use strict";

	if (this.animation.running) {

		if (this.animation.delay > 0) {
			this.animation.delay -= timePassed;
		}
		else {
			this.animation.timer += -this.animation.delay;
			this.animation.delay = 0;
			this.animation.timer += timePassed;
			this.updateAnimation();
		}

	}
};


//******************************************************
//*****    Script Resource: GameUIDummy
//******************************************************

var GameUIDummy = function(controller, initialValue) {
	"use strict";
	this.initialValue = initialValue;
	this.value = initialValue;
	this.progress = initialValue;
};

GameUIDummy.prototype.setValue = function(value) {
	"use strict";
	this.value = value;
};

GameUIDummy.prototype.getValue = function() {
	"use strict";
	return this.value;
};

GameUIDummy.prototype.setProgress = function(percentage) {
	"use strict";

	if (percentage < 0) {
		percentage = 0;
	}
	if (percentage > 100) {
		percentage = 100;
	}

	this.progress = percentage;
};

GameUIDummy.prototype.getProgress = function() {
	"use strict";
	return this.progress;
};

GameUIDummy.prototype.addStar = function() {
	"use strict";
};

GameUIDummy.prototype.setBonusActive = function() {
	"use strict";
};

GameUIDummy.prototype.setText = function() {
	"use strict";
};

GameUIDummy.prototype.setImage = function() {
	"use strict";
};

GameUIDummy.prototype.setFormatter = function() {
	"use strict";
};

GameUIDummy.prototype.setDictionaryKey = function() {
	"use strict";
};

//******************************************************
//*****    Script Resource: GameUIImage
//******************************************************

/* global
	Inheritance,
	GameUIComponent,
	tbImage
 */

/**
 * @constructor GameUIImage
 * @base GameUIComponent
 */
function GameUIImage(controller, settings) {
	"use strict";

	this.originalSettings = settings;
	this.settings = {};

	for (var key in settings) {
		this.settings[key] = settings[key];
	}

	this.image = this.settings.image;
	this.number = 0;

	this.center = false || this.settings.center;

	if (this.settings.subtractOrigin) {

		this.settings.x += this.image.xOrigin;
		this.settings.y += this.image.yOrigin;
	}

	GameUIComponent.call(this, controller, this.settings, this.settings.x, this.settings.y, this.image?this.image.width:1, this.image?this.image.height:1);

}

Inheritance.copyPrototype(GameUIComponent, GameUIImage);
GameUIController.registerComponent("GameUIImage", GameUIImage);

GameUIImage.prototype.setNumber = function(number) {
	"use strict";
	if (this.number !== number) {
		this.number = number;
		this.controller.redraw = true;
	}
};

GameUIImage.prototype.showAttentionEffect = function() {
	"use strict";
	if (!tbFloaters.visible) {
		tbFloaters.initFloaters();
	}

	var offset_x = this.controller.offset_x + TG.gameUIOffsetX;
	var offset_y = this.controller.offset_y + TG.gameUIOffsetY;

	if (this.center) {
		offset_x += -Math.floor(this.image.width / 2);
		offset_y += -Math.floor(this.image.height / 2);
	}

	tbFloaters.addFloater(GameUIComponent.attentionEffectFloaterKind, this.image, this.x + offset_x, this.y + offset_y, this.x + offset_x, this.y + offset_y, 900, 0, false);
};

GameUIImage.prototype.handleDraw = function(offset_x, offset_y) {
	"use strict";

	if (this.image) {

		if (this.center) {
			offset_x += -Math.floor(this.image.width / 2);
			offset_y += -Math.floor(this.image.height / 2);
		}

		if (this.image instanceof tbImage) {
			this.image.drawExt(this.number, this.x + offset_x + this.drawing.offset_x, this.y + offset_y + this.drawing.offset_y, this.drawing.scale, this.drawing.scale, 0, this.drawing.alpha);
		}
		else {
			this.image.drawExt(this.x + offset_x + this.drawing.offset_x, this.y + offset_y + this.drawing.offset_y, this.drawing.scale, this.drawing.scale, 0, this.drawing.alpha);
		}

		if (this.controller.drawDebugInfo) {
			tbGraphics.drawRectangle(this.x + offset_x - this.image.xOrigin + 1, this.y + offset_y - this.image.yOrigin + 1, this.image.width - 2, this.image.height - 2,
					"black", true);
		}
	}
};


GameUIImage.prototype.isPointInside = function(x, y) {
	"use strict";
	if (!this.image) {
		return false;
	}

	var offset_x = 0;
	var offset_y = 0;
	if (this.center) {
		offset_x += -Math.floor(this.image.width / 2);
		offset_y += -Math.floor(this.image.height / 2);
	}
	offset_x -= this.image.xOrigin;
	offset_y -= this.image.yOrigin;

	return x > offset_x + this.x + this.drawing.offset_x && x < offset_x + this.x + this.drawing.offset_x + this.width * this.drawing.scale && y > offset_y + this.y + this.drawing.offset_y
			&& y < offset_y + this.y + this.drawing.offset_y + this.height * this.drawing.scale;
};


GameUIImage.prototype.handleDrawGameBackground = function(offset_x, offset_y) {
	"use strict";
	if (this.image) {
		if (this.center) {
			offset_x += -Math.floor(this.image.width / 2);
			offset_y += -Math.floor(this.image.height / 2);
		}
		offset_x -= this.image.xOrigin;
		offset_y -= this.image.yOrigin;

		TG.controller.drawInGameBackground(this.x + this.drawing.offset_x + offset_x, this.y + this.drawing.offset_y + offset_y, this.width * this.drawing.scale,
				this.height * this.drawing.scale);
	}
};


GameUIImage.prototype.getPosition = function(result) {
	"use strict";

	if (!result) {
		result = new tbVector(0, 0);
	}

	result.x = this.x + TG.gameUIOffsetX + this.controller.offset_x;
	result.y = this.y + TG.gameUIOffsetY + this.controller.offset_y;

	return result;
};

GameUIImage.prototype.setImage = function(image) {
	"use strict";

	if (image !== this.image) {
		this.image = image;
		this.controller.redraw = true;
		if (this.image) {
			this.width = this.image.width;
			this.height = this.image.height;
		}
	}

};

GameUIImage.prototype.getImage = function() {
	"use strict";
	return this.image;
};

//******************************************************
//*****    Script Resource: GameUIText
//******************************************************

/* global
	Inheritance,
	GameUIComponent,
	tbGraphics
 */

/**
 * @constructor GameUIText
 * @extends GameUIComponent
 * @param {String} text
 * @param {tbVectorFont} font
 */
var GameUIText = function(controller, text, settings) {
	"use strict";

	if (typeof text === "object") {
		settings = text;
		if (settings.textKey) {
			text = TG.dictionary.getText(settings.textKey, "<" + settings.textKey + ">");
		}
		else {
			text = settings.text || "";
		}
	}

	this.text = text;

	/**
	 * @type tbVectorFont
	 */
	this.font = settings.font.clone();
	if (settings.font_properties) {
		this.font.setProperties(settings.font_properties);
	}

	this.originalX = settings.x;
	this.originalY = settings.y;

	this.originalW = settings.w;
	this.originalH = settings.h;

	this.originalColor = this.font.getFillColor();

	this.textYOffsetFactor = settings.textYOffsetFactor === undefined ? 0.2 : settings.textYOffsetFactor;

	GameUIComponent.call(this, controller, settings, Math.floor(settings.x - settings.w * 0.1), Math.floor(settings.y - settings.h * 0.1), Math.floor(settings.w * 1.2), Math.floor(settings.h * 1.2));

	this.createSurface();

	switch (this.font.getAlign()) {
	case "left":
		this.text_x = Math.floor(settings.w * 0.1);
		break;
	case "right":
		this.text_x = Math.floor(settings.w * 1.1);
		break;
	case "center":
		this.text_x = Math.floor(settings.w * 0.6);
		break;
	default:
		throw "Unknown alignment: "+this.font.getAlign();
	}

	// this.textYOffsetFactor = tgSelect({big: 0.2;)

	var textYOffset = Math.floor(this.textYOffsetFactor * this.font.getFontSize());

	switch (this.font.getBaseline()) {
	case "top":
		this.text_y = Math.floor(settings.h * 0.1);
		break;
	case "bottom":
		this.text_y = Math.floor(settings.h * 1.1) + textYOffset;
		break;
	case "middle":
		this.text_y = Math.floor(settings.h * 0.6) + textYOffset;
		break;
	default:
		throw "Unknown baseline: "+this.font.getBaseline();
	}

	this.highlight = {};
	this.highlight.color = "red";
	this.highlight.duration = 200;
	this.highlight.timer = 0;
	this.highlight.started = false;

	this.redrawSurface();
};

Inheritance.copyPrototype(GameUIComponent, GameUIText);
GameUIController.registerComponent("GameUIText", GameUIText);

GameUIText.prototype.startHighlight = function(color, duration) {
	"use strict";

	this.highlight.timer = 0;
	this.highlight.started = true;

	if (color) {
		this.highlight.color = color;
	}

	if (duration) {
		this.highlight.duration = duration;
	}
	this.font.setFillColor(this.highlight.color);
	this.redrawSurface();
};


GameUIText.prototype.handleBeginStep = function(timePassed) {
	"use strict";

	GameUIComponent.prototype.handleBeginStep.apply(this, arguments);

	if (this.highlight.started) {
		this.highlight.timer += timePassed;

		if (this.highlight.duration <= this.highlight.timer)	{
			this.highlight.started = false;
			this.font.setFillColor(this.originalColor);
			this.redrawSurface();
		}
	}
};

GameUIText.prototype.redrawSurface = function() {
	"use strict";
	this.surface.clear();
	this.surface.setTarget();

	var textWidth = this.font.textWidth(this.text);

	var scale = 1;

	if (textWidth > this.originalW) {
		scale = this.originalW / textWidth;
	}

	this.font.drawExt(this.text, this.text_x, this.text_y, scale, scale, 0, 1);

	if (this.controller.drawDebugInfo) {
		tbGraphics.drawRectangle(0, 0, this.surface.width, this.surface.height, "black", true);
		tbGraphics.drawRectangle(this.originalX - this.x, this.originalY - this.y, this.surface.width - (this.originalX - this.x)*2, this.surface.height - (this.originalY - this.y)*2, "red", true);

		tbGraphics.drawLine(this.text_x - 5, this.text_y, this.text_x + 5, this.text_y, "green", 1);
		tbGraphics.drawLine(this.text_x, this.text_y - 5, this.text_x, this.text_y + 5, "green", 1);
	}
	this.controller.redraw = true;

	this.surface.resetTarget();
};

GameUIText.prototype.setText = function(newText) {
	"use strict";
	if (this.text !== newText) {
		this.text = newText;
		this.redrawSurface();
	}
};

//******************************************************
//*****    Script Resource: GameUIValue
//******************************************************

/* global
	Inheritance,
	GameUIText,
	tbEase,
	Easer,
	TG,
	tbGame
 */


var GameUIValueFormatters = {};

GameUIValueFormatters.defaultFormatter = function(value) {
	"use strict";
	return ""+value;
};

GameUIValueFormatters.decimalUsingLocale = function(value) {
	"use strict";
	return value.toLocaleString(TG.dictionary.getLanguage());
};

GameUIValueFormatters.timeFormatter = function(value) {
	"use strict";
	var minutes = Math.floor(value / 60000);
	var seconds = Math.floor((value % 60000) / 1000);
	return minutes + (seconds < 10 ? ":0" : ":") + seconds;
};

var easeFunctionConstantHigh = function(time, begin, change, duration) {
	"use strict";
	return begin + change;
};


var GameUIValue = function(controller, settings, valueName, initialValue, useEasing, formatter) {
	"use strict";
	this.initialValue = initialValue || 0;
	this.value = this.initialValue;
	this.valueLastDraw = -1;
	this.valueName = valueName;
	this.settings = settings;
	this.valueLastDrawnTime = -99999;
	this.timeBetweenValueUpdates = settings.timeBetweenValueUpdates || 0;

	if (settings.formatter) {
		this.formatter = settings.formatter;
	}
	else {
		this.formatter = formatter || GameUIValueFormatters.defaultFormatter;
	}

	var easeFunction = easeFunctionConstantHigh;

	if (useEasing && !(this.settings.easeDuration === 0)) {
		easeFunction = tbEase.easeInOutCubic;
	}

	this.easer = new Easer(this.initialValue, this.settings.easeDuration === undefined ? 500 : this.settings.easeDuration, easeFunction);
	if(settings.dictionaryKey){
		this.dictionaryKey = "game_ui_"+ settings.dictionaryKey;
	}
	this.text = this._getCaptionText() + this.formatter(this.initialValue);


	GameUIText.call(this, controller, this.text, settings);
};

Inheritance.copyPrototype(GameUIText, GameUIValue);
GameUIController.registerComponent("GameUIValue", GameUIValue);

GameUIValue.prototype.setValue = function(value) {
	"use strict";
	this.value = value;
	this.easer.easeTo(this.value);
};


GameUIValue.prototype.setFormatter = function(formatter) {
	"use strict";
	if (!formatter) {
		formatter = GameUIValueFormatters.defaultFormatter;
	}
	this.formatter = formatter;
	this.updateText(true);
};


GameUIValue.prototype.setDictionaryKey = function(dictionaryKey) {
	"use strict";
	this.dictionaryKey = dictionaryKey;
	this.updateText(true);
};


GameUIValue.prototype.getValue = function() {
	"use strict";
	return this.value;
};

GameUIValue.prototype.updateText = function(force) {
	"use strict";

	var valueToDraw = this.valueLastDraw;
	if (force || (tbGame.gameTime - this.valueLastDrawnTime > this.timeBetweenValueUpdates)) {
		valueToDraw = this.formatter(Math.floor(this.easer.getValue()));
	}

	if (this.valueLastDraw !== valueToDraw) {
		this.valueLastDrawnTime = tbGame.gameTime;
		this.valueLastDraw = valueToDraw;
		this.text = this._getCaptionText() + valueToDraw;
		this.redrawSurface();
	}
};

GameUIValue.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	GameUIText.prototype.handleBeginStep.apply(this, arguments);

	this.easer.addTime(timePassed);
	var newValue = Math.floor(this.easer.getValue());

	if (newValue !== this.valueLastDraw) {
		this.updateText();
	}
};

GameUIValue.prototype._getCaptionText = function() {
	"use strict";
	var t = "";
	if(this.settings.useCaption){
		t = this.dictionaryKey? TG.dictionary.getText(this.dictionaryKey, "<"+ this.dictionaryKey.toUpperCase()+">") : TG.dictionary.getText("game_ui_"+this.valueName, "<"+this.valueName+">");
	}
	return t + (this.settings.separator?this.settings.separator:"");
};

//******************************************************
//*****    Script Resource: GameUIProgress
//******************************************************

/* global
	Inheritance,
	GameUIComponent,
	tbEase,
	Easer,
	s_ui_level_star_fill,
	s_ui_level_star_empty,
	GameUIStar
 */
/**
 * @enum GameUIProgressDirection
 */
var GameUIProgressDirection = {
	LEFT_TO_RIGHT: 0,
	BOTTOM_TO_TOP: 1,
	TOP_TO_BOTTOM: 2
};

var GameUIProgress = function(controller, settings) {
	"use strict";
	this.progress = 0;
	this.bonusProgress = 0;

	this.settings = settings;
	this.previousValue = 0;
	this.previousBonusValue = 0;

	this.image = settings.image;
	this.bonusImage = settings.bonusImage || settings.image;
	this.imageOverlay = settings.imageOverlay || null;
	this.settings.overlayOffsetX = this.settings.overlayOffsetX || 0;
	this.settings.overlayOffsetY = this.settings.overlayOffsetY || 0;

	this.autoCompleteStars = true;
	this.progressDirection = settings.progressDirection || GameUIProgressDirection.LEFT_TO_RIGHT;
	this.stars = [];

	this.bonusActive = false;

	this.easer = new Easer(0, 200, tbEase.easeOutOvershoot);
	this.bonusEaser = new Easer(0, 200, tbEase.easeOutOvershoot);

	GameUIComponent.call(this, controller, settings, settings.x, settings.y, this.image.width, this.image.height);
};

Inheritance.copyPrototype(GameUIComponent, GameUIProgress);
GameUIController.registerComponent("GameUIProgress", GameUIProgress);

GameUIProgress.prototype.setProgress = function(percentage) {
	"use strict";

	if (percentage < 0) {
		percentage = 0;
	}
	if (percentage > 100) {
		percentage = 100;
	}

	if (this.bonusActive) {
		this.bonusProgress = percentage - this.progress;
		this.bonusEaser.easeTo(this.bonusProgress);
	}
	else {
		this.easer.easeTo(percentage);
		this.progress = percentage;
	}
};

GameUIProgress.prototype.getProgress = function() {
	"use strict";
	return this.progress;
};

GameUIProgress.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	this.easer.addTime(timePassed);
	var newValue = this.easer.getValue();

	if (newValue !== this.previousValue) {
		this.controller.redraw = true;
		this.previousValue = newValue;
	}

	this.bonusEaser.addTime(timePassed);
	var newBonusValue = this.bonusEaser.getValue();

	if (newBonusValue !== this.previousBonusValue) {
		this.controller.redraw = true;
		this.previousBonusValue = newBonusValue;
	}

	newValue += newBonusValue;

	if (this.autoCompleteStars) {
		for (var i=0;i<this.stars.length;++i) {

			var isComplete = (newValue >= this.stars[i].position) && (this.progress + this.bonusProgress >= this.stars[i].position);

			if (this.stars[i].complete !== isComplete) {
				if (this.settings.stars) {
					this.controller.redraw = true;
					this.previousValue = newValue;
				}
				this.stars[i].complete = isComplete;
			}
		}
	}
};

GameUIProgress.prototype.setBonusActive = function(active) {
	"use strict";

	if (!active && this.bonusActive) {
		var bonusProgress = this.bonusProgress;
		this.progress += this.bonusProgress;
		this.easer.easeTo(this.progress, bonusProgress * 50);
		this.bonusProgress = 0;
		this.bonusEaser.easeTo(this.bonusProgress, bonusProgress * 50);
	}
	this.bonusActive = active;
};

GameUIProgress.prototype.handleDraw = function(offset_x, offset_y) {
	"use strict";
	var i, star, image;
	
	if(this.progressDirection === GameUIProgressDirection.LEFT_TO_RIGHT){
		if (this.bonusEaser.getValue() > 0) {

			this.bonusImage.drawPart(0, this.width * this.easer.getValue() / 100, 0, this.bonusImage.width * this.bonusEaser.getValue() / 100,
					this.bonusImage.height, offset_x + this.x + this.width * this.easer.getValue() / 100, offset_y + this.y);
		}

		this.image.drawPart(0, 0, 0, this.width * this.easer.getValue() / 100, this.height, offset_x + this.x, offset_y + this.y);

		if (this.settings.stars) {
			for (i = 0; i < this.stars.length; ++i) {
				/**
				 * @type GameUIStar
				 */
				star = this.stars[i];
				if (star.complete) {
					image = s_ui_level_star_fill;
				}
				else {
					image = s_ui_level_star_empty;
				}
				image.drawSimple(0, offset_x + this.x + this.width / 100 * star.position, offset_y + this.y + this.settings.stars.y);
			}
		}
	}
	
	if(this.progressDirection === GameUIProgressDirection.BOTTOM_TO_TOP){
		if (this.bonusEaser.getValue() > 0) {
			this.bonusImage.drawPart(0, 0, this.height - this.height *this.easer.getValue()/100, this.width, this.height, offset_x + this.x, offset_y + this.y + (this.height - this.height * this.easer.getValue()/100));
		}

		this.image.drawPart(0, 0, this.height - this.height *this.easer.getValue()/100, this.width, this.height, offset_x + this.x, offset_y + this.y + (this.height - this.height * this.easer.getValue()/100));
		
		if (this.settings.stars) {
			for (i = 0; i < this.stars.length; ++i) {
				/**
				 * @type GameUIStar
				 */
				star = this.stars[i];
				if (star.complete) {
					image = s_ui_level_star_fill;
				}
				else {
					image = s_ui_level_star_empty;
				}
				image.drawSimple(0, offset_x + this.x + this.settings.stars.x, offset_y + this.y + this.height - this.height/ 100 * star.position);
			}
		}
	}
	
	if(this.progressDirection === GameUIProgressDirection.TOP_TO_BOTTOM){
		if (this.bonusEaser.getValue() > 0) {

			this.bonusImage.drawPart(0, 0, this.height * this.easer.getValue() / 100, this.bonusImage.width,
					this.bonusImage.height * this.bonusEaser.getValue() / 100, offset_x + this.x + this.width * this.easer.getValue() / 100, offset_y + this.y);
		}

		this.image.drawPart(0, 0, 0, this.width, this.height * this.easer.getValue()/100, offset_x + this.x, offset_y + this.y);

		if (this.settings.stars) {
			for (i = 0; i < this.stars.length; ++i) {
				star = this.stars[i];
				if (star.complete) {
					image = s_ui_level_star_fill;
				}
				else {
					image = s_ui_level_star_empty;
				}
				image.drawSimple(0, offset_x + this.x + this.settings.stars.x, offset_y + this.y + this.height/ 100 * star.position);
			}
		}
	}
	
	if(this.imageOverlay){
		this.imageOverlay.drawSimple(0, offset_x + this.x + this.settings.overlayOffsetX, offset_y + this.y + this.settings.overlayOffsetY);
	}
};

GameUIProgress.prototype.addStar = function(percentage) {
	"use strict";
	this.stars.push(new GameUIStar(percentage));
	return this.stars.length-1;
};

GameUIProgress.prototype.setStarComplete = function(starIndex, isComplete) {
	"use strict";
	this.stars[starIndex].complete = isComplete;
	return this;
};

GameUIProgress.prototype.getStarComplete = function(starIndex) {
	"use strict";
	return this.stars[starIndex].complete;
};

//******************************************************
//*****    Script Resource: GameUIButton
//******************************************************

/* global
	Inheritance,
	GameUIImage,
	s_btn_small_pause,
	s_btn_small_options,
	s_btn_small_retry,
	s_btn_small_quit
 */


/**
 * @enum GameUIButtonType
 */
var GameUIButtonType = {
	PAUSE: 0,
	RESTART: 1,
	RESIGN: 2,
	CUSTOM: 3
};

/**
 * @constructor GameUIButton
 * @base GameUIImage
 */
function GameUIButton(controller, settings, buttonType, buttonName) {
	"use strict";

	this.touch_touching = false;
	this.touch_finger = -1;

	this.buttonName = buttonName;

	this.controller = controller;
	this.settings = settings;

	this.setButtonType(buttonType);

	GameUIImage.call(this, controller, settings);

}

Inheritance.copyPrototype(GameUIImage, GameUIButton);
GameUIController.registerComponent("GameUIButton", GameUIButton);

GameUIButton.prototype.setButtonType = function(buttonType) {
	"use strict";
	var buttonImage = null;
	var callBack = null;
	var controller = this.controller;
	var settings = this.settings;

	if (buttonType === undefined) {
		if (!settings.buttonType) {
			buttonType = GameUIButtonType.PAUSE;
		}
		else {
			buttonType = settings.buttonType;
		}
	}

	var self = this;

	switch (buttonType) {
	case GameUIButtonType.PAUSE:

		if (controller.runtimeOptions.gameCanBePaused) {
			buttonImage = s_btn_small_pause;
		}
		else {
			buttonImage = s_btn_small_options;
		}
		callBack = function() {

			if (TG.controller.getChallengeInformation()) {
				TG.controller.showOptionsDuringChallenge(controller.runtimeOptions.gameCanBePaused);
			}
			else {
				TG.controller.showOptions();
			}

			return true;
		};
		break;
	case GameUIButtonType.RESTART:
		buttonImage = s_btn_small_retry;
		callBack = function() {
			TG.controller.showOptions();
			return true;
		};
		break;
	case GameUIButtonType.RESIGN:
		buttonImage = s_btn_small_quit;
		callBack = function() {
			TG.controller.showForfeitDialog(controller.runtimeOptions.gameCanBePaused);
			return true;
		};
		break;
	case GameUIButtonType.CUSTOM:
		buttonImage = settings.image;
		break;
	}

	this.callback = callBack;
	this.settings.image = buttonImage;

};


GameUIButton.prototype.setCallback = function(callback) {
	"use strict";
	this.callback = callback;
};

GameUIButton.prototype.handleTouchDown = function(finger, x, y) {
	"use strict";
	if (this.isPointInside(x - TG.gameUIOffsetX, y - TG.gameUIOffsetY)) {
		this.touch_touching = true;
		this.touch_finger = finger;
		this.setNumber(1);
		return true;
	}
	return false;
};

GameUIButton.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	GameUIImage.prototype.handleBeginStep.apply(this, arguments);

	if (this.touch_touching) {
		var x = tbGame.touchX(this.touch_finger);
		var y = tbGame.touchY(this.touch_finger);
		if (this.isPointInside(x - TG.gameUIOffsetX, y - TG.gameUIOffsetY)) {
			this.setNumber(1);
		}
		else {
			this.setNumber(0);
		}
	}
};

GameUIButton.prototype.handleTouchUp = function(finger, x, y) {
	"use strict";
	if (this.touch_touching && finger === this.touch_finger) {
		this.setNumber(0);
		if (this.isPointInside(x - TG.gameUIOffsetX, y - TG.gameUIOffsetY)) {
			if (this.callback) {
				this.callback();
			}
		}
		this.touch_touching = false;
		this.touch_finger = -1;
		return true;
	}
	return false;

};
//******************************************************
//*****    Script Resource: GameUIRoundProgress
//******************************************************

/* global
	Inheritance,
	GameUIComponent,
	tbEase,
	Easer,
	s_star_filled,
	s_star_empty,
	GameUIStar
 */

var GameUIRoundProgress = function(controller, settings) {
	"use strict";
	this.progress = 0;
	this.bonusProgress = 0;

	this.settings = settings;
	this.previousValue = 0;
	this.previousBonusValue = 0;

	this.autoCompleteStars = true;

	this.stars = [];

	this.color = settings.color || "#00AEEF";
	this.bonusColor = settings.bonusColor || "#FF0F64";
	this.blinkColor = settings.blinkColor || "#FFED93";

	this.blinkEnabled = (settings.blink === undefined) || settings.blink;

	this.overlayImage = settings.overlayImage;

	this.bonusActive = false;

	this.blinkAnimationRunning = false;
	this.blinkAnimationTimer = 0;
	this.blinkAnimationDuration = 1000;
	this.blinkIntensity = 0;
	this.blinkProgress = 0;

	this.easer = new Easer(0, 200, tbEase.easeOutOvershoot);
	this.bonusEaser = new Easer(0, 200, tbEase.easeOutOvershoot);

	GameUIComponent.call(this, controller, settings, settings.x, settings.y, 1, 1);
};

Inheritance.copyPrototype(GameUIComponent, GameUIRoundProgress);
GameUIController.registerComponent("GameUIRoundProgress", GameUIRoundProgress);

GameUIRoundProgress.prototype.startBlinkAnimation = function() {
	"use strict";

	if (!this.blinkEnabled) {
		return;
	}

	if (this.blinkAnimationRunning) {
		this.blinkAnimationTimer -= this.blinkAnimationDuration;
	}
	else {
		this.blinkAnimationRunning = true;
		this.blinkAnimationTimer = 0;
		this.blinkIntensity = 0;
		this.easer.easeTo(100);
	}
};

GameUIRoundProgress.prototype.addStar = function(percentage) {
	"use strict";
	this.stars.push(new GameUIStar(percentage));
	return this.stars.length - 1;
};


GameUIRoundProgress.prototype.setProgress = function(percentage) {
	"use strict";

	if (percentage < 0) {
		percentage = 0;
	}
	if (percentage > 100) {
		percentage = 100;
	}

	if (this.bonusActive) {
		this.bonusProgress = percentage - this.progress;
		this.bonusEaser.easeTo(this.bonusProgress);
	}
	else {

		if (!this.blinkAnimationRunning) {
			if (percentage === 100 && this.blinkEnabled) {
				this.startBlinkAnimation();
			}
			else {
				this.easer.easeTo(percentage);
			}
		}
		this.progress = percentage;
	}
};

GameUIRoundProgress.prototype.getProgress = function() {
	"use strict";
	return this.progress;
};

GameUIRoundProgress.prototype.handleNextStage = function() {
	"use strict";
	this.startBlinkAnimation();
};

GameUIRoundProgress.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	this.easer.addTime(timePassed);
	var newValue = this.easer.getValue();

	if (newValue !== this.previousValue) {
		this.controller.redraw = true;
		this.previousValue = newValue;
	}

	this.bonusEaser.addTime(timePassed);
	var newBonusValue = this.bonusEaser.getValue();

	if (newBonusValue !== this.previousBonusValue) {
		this.controller.redraw = true;
		this.previousBonusValue = newBonusValue;
	}

	if (this.blinkAnimationRunning) {
		this.blinkAnimationTimer += timePassed;

		if (this.blinkAnimationTimer >= this.blinkAnimationDuration) {

			if (this.progress === 100) {
				this.blinkAnimationRunning = false;
				this.startBlinkAnimation();
			}
			else {
				this.blinkAnimationRunning = false;
				this.blinkIntensity = 0;
				this.easer.from = 0;
				this.easer.to = 0;
				this.easer.easeTo(this.progress);
			}
		}
		else {
			this.blinkIntensity = (-Math.cos(this.blinkAnimationTimer / this.blinkAnimationDuration * 5 * Math.PI * 2) + 1) / 2;
		}
		this.controller.redraw = true;
	}

	newValue += newBonusValue;

	if (this.autoCompleteStars) {
		for (var i=0;i<this.stars.length;++i) {

			var isComplete = (newValue >= this.stars[i].position) && (this.progress + this.bonusProgress >= this.stars[i].position);

			if (this.stars[i].complete !== isComplete) {
				if (this.settings.stars) {
					this.controller.redraw = true;
					this.previousValue = newValue;
				}
				this.stars[i].complete = isComplete;
			}
		}
	}

};


GameUIRoundProgress.prototype.handleDrawGameBackground = function(offset_x, offset_y) {
	"use strict";
	if (this.overlayImage) {
		TG.controller.drawInGameBackground(this.x + this.drawing.offset_x + offset_x - this.overlayImage.xOrigin, this.y + this.drawing.offset_y + offset_y
				- this.overlayImage.yOrigin, this.overlayImage.width * this.drawing.scale, this.overlayImage.height * this.drawing.scale);
	}
};

GameUIRoundProgress.prototype.setBonusActive = function(active) {
	"use strict";
	if (!active && this.bonusActive) {
		this.progress += this.bonusProgress;
		this.easer.easeTo(this.progress);
		this.bonusProgress = 0;
		this.bonusEaser.easeTo(this.bonusProgress);
	}
	this.bonusActive = active;
};

GameUIRoundProgress.prototype.handleDraw = function(offset_x, offset_y) {
	"use strict";

	/**
	 * @type GameUIStar
	 */
	var star;
	var i;
	var angle;

	if (this.overlayImage) {

		var percentage = this.easer.getValue() / 100;

		percentage = Math.max(percentage, 0);
		percentage = Math.min(percentage, 1);

		var context = tbGraphics.context;
		var radius = this.overlayImage.width / 2 - tgScale(4);
		var oldFillStyle = context.fillStyle;

		if (this.bonusEaser.getValue() > 0) {

			var bonusPercentage = this.bonusEaser.getValue() / 100;

			context.beginPath();
			context.arc(this.x + offset_x, this.y + offset_y, radius, -Math.PI * 0.5 + 2 * percentage * Math.PI, 2 * (percentage + bonusPercentage) * Math.PI - Math.PI * 0.5, false);
			context.lineTo(this.x + offset_x, this.y + offset_y);
			context.fillStyle = this.bonusColor;
			context.fill();
		}

		context.beginPath();
		context.arc(this.x + offset_x, this.y + offset_y, radius, -Math.PI * 0.5, 2 * percentage * Math.PI - Math.PI * 0.5, false);
		context.lineTo(this.x + offset_x, this.y + offset_y);
		context.fillStyle = this.color;
		context.fill();

		if (this.blinkAnimationDuration) {
			var globalAlpha = context.globalAlpha;
			context.globalAlpha *= this.blinkIntensity;
			context.beginPath();
			context.arc(this.x + offset_x, this.y + offset_y, radius, -Math.PI * 0.5, 2 * percentage * Math.PI - Math.PI * 0.5, false);
			context.lineTo(this.x + offset_x, this.y + offset_y);
			context.fillStyle = this.blinkColor;
			context.fill();
			context.globalAlpha = globalAlpha;
		}

		if (this.settings.stars) {
			var oldStrokeStyle = context.strokeStyle;
			var oldLineWidth = context.lineWidth;

			context.strokeStyle = "white";
			context.lineWidth = tgScale(2);

			for (i = 0; i < this.stars.length; ++i) {

				star = this.stars[i];
				angle = star.position / 100 * Math.PI * 2;

				var line_x = Math.cos(Math.PI * -0.5 + angle) * radius;
				var line_y = Math.sin(Math.PI * -0.5 + angle) * radius;

				context.beginPath();
				context.moveTo(Math.round(offset_x + this.x), Math.round(offset_y + this.y));
				context.lineTo(Math.round(offset_x + this.x + line_x), Math.round(offset_y + this.y + line_y));
				context.stroke();
			}

			context.strokeStyle = oldStrokeStyle;
			context.lineWidth = oldLineWidth;
		}


		this.overlayImage.drawSimple(0, offset_x + this.x, offset_y + this.y);

		if (this.settings.stars) {

			for (i = 0; i < this.stars.length; ++i) {

				star = this.stars[i];
				/**
				 * @type tbImage
				 */
				var image;
				if (star.complete) {
					image = s_star_filled;
				}
				else {
					image = s_star_empty;
				}

				angle = star.position / 100 * Math.PI * 2;

				var star_x = Math.cos(Math.PI * -0.5 + angle) * this.settings.stars.radius * 0.5;
				var star_y = Math.sin(Math.PI * -0.5 + angle) * this.settings.stars.radius * 0.5;

				image.drawSimple(0, Math.round(offset_x + this.x + star_x), Math.round(offset_y + this.y + star_y));
			}
		}
		context.fillStyle = oldFillStyle;

	}

};

//******************************************************
//*****    Script Resource: game_ui_version
//******************************************************


TG.version = TG.version || {};
TG.version["game_ui"] = "2.1.0";




//******************************************************
//*****    Script Resource: game_ui_settings_difficulty
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

/* global
	tgScale,
	f_game_ui,
	s_ui_background_blank,
	f_game_ui_tiny,
	s_ui_heart,
	s_ui_smiley_medium,
	s_ui_timeleft,
	s_ui_highscore,
	s_ui_divider */

/* exported GameUISettings */
var GameUISettings = GameUISettings || {};

var GameUISettingsOffsets = {
	X: tgScale(14),
	Y: tgScale(40)
};

GameUISettings.Difficulty = {
	background: {
		image: s_ui_background_blank,
		image_x: tgScale(0),
		image_y: tgScale(34),
		elements: [{
			image: s_ui_timeleft,
			x: tgScale(46) + GameUISettingsOffsets.X,
			y: tgScale(16) + GameUISettingsOffsets.Y
		}, {
			textKey: "game_ui_time_left",
			x: tgScale(6) + GameUISettingsOffsets.X,
			y: tgScale(52) + GameUISettingsOffsets.Y,
			w: tgScale(100),
			h: tgScale(20),
			textYOffsetFactor: 0.2,
			font: f_game_ui,
			font_properties: {
				fillColor: "#9fa9bf",
				fontSize: tgScale(20),
				fontCase: "lower",
				align: "center",
				baseline: "top"
			}
		}, {
			image: s_ui_divider,
			x: tgScale(9, "round") + GameUISettingsOffsets.X,
			y: tgScale(124) + GameUISettingsOffsets.Y
		}, {
			textKey: "game_ui_SCORE",
			x: tgScale(6) + GameUISettingsOffsets.X,
			y: tgScale(140) + GameUISettingsOffsets.Y,
			w: tgScale(100),
			h: tgScale(20),
			textYOffsetFactor: 0.2,
			font: f_game_ui,
			font_properties: {
				fillColor: "#9fa9bf",
				fontSize: tgScale(20),
				fontCase: "lower",
				align: "center",
				baseline: "top"
			}
		}, {
			image: s_ui_divider,
			x: tgScale(9, "round") + GameUISettingsOffsets.X,
			y: tgScale(200) + GameUISettingsOffsets.Y
		}, {
			textKey: "game_ui_HIGHSCORE",
			x: tgScale(6) + GameUISettingsOffsets.X,
			y: tgScale(258) + GameUISettingsOffsets.Y,
			w: tgScale(100),
			h: tgScale(20),
			textYOffsetFactor: 0.2,
			font: f_game_ui,
			font_properties: {
				fillColor: "#9fa9bf",
				fontSize: tgScale(20),
				fontCase: "lower",
				align: "center",
				baseline: "top"
			}
		}, {
			image: s_ui_divider,
			x: tgScale(9, "round") + GameUISettingsOffsets.X,
			y: tgScale(318) + GameUISettingsOffsets.Y
		}]
	},
	pauseButton: {
		x: tgScale(6) + GameUISettingsOffsets.X,
		y: tgScale(538) - tgScale(86) + GameUISettingsOffsets.Y
	},
	time: {
		x: tgScale(6) + GameUISettingsOffsets.X,
		y: tgScale(80) + GameUISettingsOffsets.Y,
		w: tgScale(100),
		h: tgScale(38),
		textYOffsetFactor: 0.2,
		useCaption: false,
		separator: "",
		/**
		 * @type tbVectorFont
		 */
		font: f_game_ui,
		font_properties: {
			fontSize: tgScale(38),
			fillColor: "#172348",
			align: "center",
			baseline: "top"
		}
	},
	score: {
		x: tgScale(6) + GameUISettingsOffsets.X,
		y: tgScale(166) + GameUISettingsOffsets.Y,
		w: tgScale(100),
		h: tgScale(24),
		timeBetweenValueUpdates: 50, // ms
		textYOffsetFactor: 0.2,
		useCaption: false,
		separator: "",
		/**
		 * @type tbVectorFont
		 */
		font: f_game_ui,
		font_properties: {
			fontSize: tgScale(24),
			fillColor: "#172348",
			align: "center",
			baseline: "top"
		}
	},
	highScoreImage: {
		x: tgScale(43, "round") + GameUISettingsOffsets.X,
		y: tgScale(212) + GameUISettingsOffsets.Y,
		image: s_ui_highscore,
		center: false,
		subtractOrigin: true
	},
	highScore: {
		x: tgScale(6) + GameUISettingsOffsets.X,
		y: tgScale(284) + GameUISettingsOffsets.Y,
		w: tgScale(100),
		h: tgScale(20),
		textYOffsetFactor: 0.2,
		useCaption: false,
		separator: "",
		font: f_game_ui,
		font_properties: {
			fillColor: "#59668e",
			fontSize: tgScale(20),
			align: "center",
			baseline: "top"
		}
	},
	difficulty: {
		x: tgScale(6) + GameUISettingsOffsets.X,
		y: tgScale(362) + GameUISettingsOffsets.Y,
		w: tgScale(100),
		h: tgScale(40),
		textYOffsetFactor: 0.2,
		useCaption: false,
		separator: "",
		font: f_game_ui,
		font_properties: {
			fillColor: "#9fa9bf",
			fontSize: tgScale(20),
			align: "center",
			baseline: "top",
			fontCase: "lower"
		}
	},
	difficultyImage: {
		x: tgScale(56) + GameUISettingsOffsets.X,
		y: tgScale(340) + GameUISettingsOffsets.Y,
		image: s_ui_smiley_medium,
		center: false,
		subtractOrigin: false
	}
};

/* exported gameUISettingsVar */
var gameUISettingsVar = GameUISettings.Difficulty;

//******************************************************
//*****    Token Resource: GameController
//******************************************************

/* global
 s_car_00, s_car_01, s_car_02, s_car_03
 */
/////////////////////////////////////////////////////////////
// GameController
//
// This token globally controls the game
//
// Copyright 2014 Tingly Games
// Last Changed: 27-04-2014
/////////////////////////////////////////////////////////////


// The constructor for the GameController game token
var GameController = function() {
	"use strict";
	// Properties used by the engine
	this.depth = 10;
	this.visible = false;
	this.active = false;
	// Your own properties
	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game"]);
};

GameController.prototype.getTutorialData = function(level, difficulty) {
	"use strict";
	var data, images, i;
	data = [];
	images = [s_tutorial_00, s_tutorial_01, s_tutorial_02, s_tutorial_03, s_tutorial_04];

	for (i = 0; i < images.length; i += 1) {
		data.push({
			image : images[i],
			text : TG.dictionary.getText("TutorialText_"+i, "<TUTORIAL_TEXT_"+i+">"),
			title : TG.dictionary.getText("TutorialTitle_"+i, "<TUTORIAL_TITLE_"+i+">")
		});
	}
	return data;
};

//******************************************************
//*****    Token Resource: LevelController
//******************************************************

/* globals
    CarController,
    RaceController,
    ScrollingCamera,
    Particles,
    TG_StatObject,
    tbPhysicsDebugDraw,
    Track,
    s_car_00,
    s_car_01,
    s_car_02,
    s_car_03,
    s_background,
    GameUIButtonType,
    gameUISettingsVar,
    s_debug_button_particles,
    s_debug_button_skidmarks,
    SpriteAnimations,
    Difficulties

 */
/////////////////////////////////////////////////////////////
// LevelController
//
// This token globally controls a level (run of the game)
//
// Copyright 2014 Tingly Games
// Last Changed: 22-05-2014
/////////////////////////////////////////////////////////////

// The constructor for the LevelController game token
var LevelController = function(levelIdx){
	"use strict";
	// Properties used by the engine
	this.depth = 0;
	this.active = false;
	this.visible = true;

	this.levelIdx = levelIdx;

	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game"]);
	TG.functions.setLayerAndCanvas(this, TG.gameBackgroundLayer);

	this.canvas.drawTokens = true;
};

// Start the level when the level start overlay is gone
LevelController.prototype._startLevel = function(){
	"use strict";
	this.active = true;

	this.raceController.startCountdown();

	audioController.playSfx(a_engine_start, 1700);
	audioController.playSfx(a_NPC_engine_start, 600);
};


var DONT_DRAW_PARTICLES = false,
	DONT_DRAW_SKIDMARS = false;

LevelController.prototype.handleDraw = function() {
	"use strict";

	if (!ScrollingCamera.fullscreen) {
		s_background.drawCombinedSimple(0, 0);
	}
};

LevelController.prototype.handleKeyUp = function(key) {
	"use strict";

    if (testMode && key === tbKeyCodes.vkSpace) {
        this.carControllers[0].aiControlled = !this.carControllers[0].aiControlled;
    }
};

// End the level when the game is over
LevelController.prototype._endLevel = function(){
	"use strict";
	if(!this.active) {
		return;
	}
	// Get the place
	var place = this.raceController.finalPlace;

	// Create stats
	var stats = {};
	stats["failed"] = place > 3;
	stats["stars"] = 3 - (place - 1);
	if (!stats["failed"]) {
		stats.emphasizedStatsObject = new TG_StatObject("place", "number", "race_place", place, place, true, true);
	}

	audioController.stopCrowd();

	// End the level
	this.active = false;
	TG.controller.levelEnded(stats);
};

LevelController.prototype.handleAdd = function(){
	"use strict";

	//Create physics
	this.physics = new tbPhysics(0.01 / tgScale(1), 0);
	this.physics.stepEachFrame = false;

	// Get current level
	this.info = TG.settings.game.levels[this.levelIdx];

	// Create particle system
	this.particles = new Particles();

	// Create Sprite Animations
	this.spriteAnimations = new SpriteAnimations();

	// Create track
	var trackDefinition = this.info.track[0];
	var trackName = this.info.name;
	this.track = new Track(this.physics, trackName, trackDefinition);


	//generate some difficulties and driver names for the drivers
	var difficulties = [0,1,2];
	var shuffledDifficulties = [];

	while(difficulties.length > 0) {
		var idx = Math.floor(defaultRandom.random()*difficulties.length);
		shuffledDifficulties.push(difficulties[idx]);
		difficulties.splice(idx, 1);
	}

	var driverNames = [];
	var driverNamePool = [1,2,3,4,5,6];

	while(driverNames.length < 6) {
		var idx = Math.floor(defaultRandom.random()*driverNamePool.length);
		var name = TG.dictionary.getText("driverNameOpponent_"+driverNamePool[idx], "<driverNameOpponent_"+driverNamePool[idx]+">");
		driverNames.push(name);
		driverNamePool.splice(idx, 1);
	}

	// Drivers
	var drivers = [
		{image: s_car_00, difficulty: -1, name: TG.dictionary.getText("driverNameYou", "<driverNameYou>")},
		{image: s_car_01, difficulty: shuffledDifficulties[0], name: driverNames[0]},
		{image: s_car_02, difficulty: shuffledDifficulties[1], name: driverNames[1]},
		{image: s_car_03, difficulty: shuffledDifficulties[2], name: driverNames[2]},
		{image: s_car_01, difficulty: shuffledDifficulties[1], name: driverNames[3]},
		{image: s_car_02, difficulty: shuffledDifficulties[2], name: driverNames[4]},
		{image: s_car_03, difficulty: shuffledDifficulties[0], name: driverNames[5]}
	];

	// Create car controllers
	this.carControllers = [];
	for (var i = 0; i < this.track.startPositions.length; i += 1) {
		var driver = drivers[i % drivers.length];
		// Create the car controller
		var carDefinition = {
				carIndex: i,
				image: driver.image,
				name: driver.name,
				difficulty: Difficulties.getDifficultyString(driver.difficulty)
		};
		var carController = new CarController(this.track, carDefinition);

		// Add the car controller to the car controllers
		this.carControllers.push(carController);
	}

	// Create a race controller
	this.raceController = new RaceController(this.info.raceController, this.carControllers);

	// Create UI controller
	/*
	var DEBUG_SHOW_BUTTONS = false;
	if (testMode && DEBUG_SHOW_BUTTONS) {
		var x = 30;
		var y = 250, yo = 30;
		gameUISettingsVar.buttons = gameUISettingsVar.buttons || {};
		gameUISettingsVar.buttons["debug_button_particles"] = {
				x: tgScale(x),
				y: tgScale(y + 0 * yo),
		        buttonType: GameUIButtonType.CUSTOM,
				image: s_debug_button_particles
			};
		gameUISettingsVar.buttons["debug_button_skidmarks"] = {
				x: tgScale(x),
				y: tgScale(y + 1 * yo),
		        buttonType: GameUIButtonType.CUSTOM,
				image: s_debug_button_skidmarks
			};
	}
	*/
	this.gameUIController = new GameUIController();
	/*
	if (testMode && DEBUG_SHOW_BUTTONS) {
		this.gameUIController.setButtonCallback(function() { DONT_DRAW_PARTICLES = !DONT_DRAW_PARTICLES; }, "debug_button_particles");
		this.gameUIController.setButtonCallback(function() { DONT_DRAW_SKIDMARS = !DONT_DRAW_SKIDMARS; }, "debug_button_skidmarks");
	}
	*/

	// Create camera
	this.camera = new ScrollingCamera(this.carControllers[0].car);

	// Create debug draw
	if (testMode) {
		this.debugDraw = new tbPhysicsDebugDraw(this.physics, ScrollingCamera.fullscreenScroll, false);
	}

	// Show start level screen
	TG.controller.showStartLevelScreen(
			TG.dictionary.getText("levelStartHeader", "<levelStartHeader>"),
			TG.dictionary.getText("levelStartText", "<levelStartText>"),
			this._startLevel, this);
	audioController.startCrowd();
};

LevelController.prototype.handleRemove = function(){
	"use strict";

	// TODO
	// not sure why I needed to do this here...
	TG.gameCanvas.getContext("2d").clearRect(0, 0, TG.gameCanvas.width, TG.gameCanvas.height);

	tbGame.removeTokens("item");
	tbGame.removeToken(this.physics);
	tbGame.removeToken(this.gameUIController);

	audioController.stopCrowd();
	audioController.stopMusic();

	tbFloaters.endFloaters();
};

//******************************************************
//*****    Token Resource: ScrollingCamera
//******************************************************

// ***************************************
// Definition of game token ScrollingCamera
// ***************************************

// The constructor for the ScrollingCamera game token. 
/**
 * @constructor
 */
function ScrollingCamera(target) {
	"use strict";
	// Properties used by the engine
	this.depth = -100;	
	this.layer = 0;
	this.visible = true;
	this.active = true;
	
	// Properties
	this.target = target;
	
	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, ScrollingCamera.fullscreen ? TG.gameBackgroundLayer : TG.gameLayer);
	
	// Set starting position
	var start = target.getTargetPosition();
	ScrollingCamera.scroll.x = start.x - this.canvas.width / 2;
	ScrollingCamera.scroll.y = start.y - this.canvas.height / 2;
	
	this.screenRectCutoffSize = testMode ? 0 : 0;
	this.setScreenRect();
	this.setFullscreenScroll();
}

ScrollingCamera.fullscreen = true;
ScrollingCamera.scroll = new tbVector(0, 0);
ScrollingCamera.fullscreenScroll = new tbVector(0, 0);
ScrollingCamera.screenRect = { x:0, y:0, width:1, height:1};

ScrollingCamera.isOverlappingScreen = function(sourceRect_or_Circle) {
	"use strict";

	var sourceRect,
		screenRect = ScrollingCamera.screenRect;
	
	if (sourceRect_or_Circle.radius !== undefined) {
		var radius = sourceRect_or_Circle.radius;
		sourceRect = {};
		sourceRect.x -= radius;
		sourceRect.y -= radius;
		sourceRect.width = radius * 2;
		sourceRect.height = radius * 2;
	} else {
		sourceRect = sourceRect_or_Circle;
	}
	
	return !(sourceRect.x + sourceRect.width  < screenRect.x || sourceRect.x > screenRect.x + screenRect.width ||
			 sourceRect.y + sourceRect.height < screenRect.y || sourceRect.y > screenRect.y + screenRect.height);	
};

ScrollingCamera.getScreenPartRect = function(sourceRect, out) {
	"use strict";
	
	var screenRect = ScrollingCamera.screenRect;
	
	// Calc overlap
	var sx = Math.max(screenRect.x - sourceRect.x, 0);
	var sy = Math.max(screenRect.y - sourceRect.y, 0);
	var sx2 = sx + Math.max((sourceRect.x + sourceRect.width) - (screenRect.x + screenRect.width), 0);
	var sy2 = sy + Math.max((sourceRect.y + sourceRect.height) - (screenRect.y + screenRect.height), 0);
	var sw = sourceRect.width - sx2;
	var sh = sourceRect.height - sy2;
	
	// Return clipped rect
	out = out || {};
	out.dx = sourceRect.x + sx;
	out.dy = sourceRect.y + sy;
	out.sx = sx;
	out.sy = sy;
	out.sw = sw;
	out.sh = sh;
	return out;
};

// handleBeginStep is called each step before processing other events.
ScrollingCamera.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	
	// Copy from scroll object
	var scroll = ScrollingCamera.scroll;
	scroll.x += this.canvas.width / 2;
	scroll.y += this.canvas.height / 2;
	
	// Calculate scroll
	var timeToGetToNewPosition = 0.3; //seconds
	var lerp = tbMath.clamp01((timePassed / 1000) / timeToGetToNewPosition);
	scroll = scroll.scale(1 - lerp).add(this.target.getTargetPosition().scale(lerp));
	
	// Copy to scroll object
	ScrollingCamera.scroll.x = scroll.x - this.canvas.width / 2;
	ScrollingCamera.scroll.y = scroll.y - this.canvas.height / 2;
	this.setScreenRect();
	this.setFullscreenScroll();
};

ScrollingCamera.prototype.setFullscreenScroll = function() {
	"use strict";
	
	ScrollingCamera.fullscreenScroll.x = ScrollingCamera.scroll.x + (ScrollingCamera.fullscreen ? 0 : -TG.gameOffsetX);
	ScrollingCamera.fullscreenScroll.y = ScrollingCamera.scroll.y + (ScrollingCamera.fullscreen ? 0 : -TG.gameOffsetY);
};

ScrollingCamera.prototype.handleDraw = function() {
	"use strict";
	
	if (!ScrollingCamera.fullscreen) {
		// Draw a border around the camera area when not in fullscreen mode
		var context = tbGraphics.context;
		context.save();
		context.translate(-ScrollingCamera.scroll.x, -ScrollingCamera.scroll.y);
		
		tbGraphics.drawRectangle(
				ScrollingCamera.screenRect.x, ScrollingCamera.screenRect.y, 
				ScrollingCamera.screenRect.width, ScrollingCamera.screenRect.height, 
				undefined, "black", 6);
		
		context.restore();
	}
};

ScrollingCamera.prototype.setScreenRect = function() {
	"use strict";
	
	ScrollingCamera.screenRect.x = ScrollingCamera.scroll.x + this.screenRectCutoffSize;
	ScrollingCamera.screenRect.y = ScrollingCamera.scroll.y + this.screenRectCutoffSize;
	ScrollingCamera.screenRect.width = this.canvas.width - (this.screenRectCutoffSize * 2);
	ScrollingCamera.screenRect.height = this.canvas.height - (this.screenRectCutoffSize * 2);
};


//******************************************************
//*****    Token Resource: Track
//******************************************************

/* globals
 	AIPath,
 	ScrollingCamera,
 	TrackPiece,
 	Box2D,
 	s_start_positions,
 	s_texture_grass,
 	s_spark
 */
// ***************************************
// Definition of game token Track
// ***************************************
// The constructor for the Track game token.
var Track = function(physics, trackName, trackDefinition) {
	"use strict";
	// Properties used by the engine
	this.depth = 0;
	this.layer = 0;
	this.visible = true;
	this.active = true;

	// Set variables
	this.physics = physics;
	this.trackName = trackName;
	this.definition = trackDefinition;
	this.greenBackgroundColor = "rgba(145, 165, 45, 1)";

	// Create the track
	this._constructTrack();
	this._drawToSurfaces();

	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, ScrollingCamera.fullscreen ? TG.gameBackgroundLayer : TG.gameLayer);
};

Track.prototype._constructTrack = function() {
	"use strict";

	// Get maximal placement error distances
	var errorDistance = 10;
	var errorDistanceSqr = errorDistance * errorDistance;

	// Define a sort function on index
	var indexSortFunction = function(a, b) {
		if ((a.index === b.index) && (a.lane !== undefined) && (b.lane !== undefined)) {
			return a.lane - b.lane;
		}
		return a.index - b.index;
	};

	// 1) Gather different items
	var trackPieceItems = [], checkpointItems = [], aiPathPointItems = [], decalItems = [], startPositionItems = [];
	var i, j;
	for (i = 0; i < this.definition.items.length; i += 1) {
		var item = this.definition.items[i];

		// Checkpoints
		if (item.id === "checkpoint") {
			checkpointItems.push(item);

		// AI Path Points
		} else if (item.id === "ai_path_point") {
			aiPathPointItems.push(item);

		// Track Pieces
		} else if (item.id.startsWith("tp_")) {
			trackPieceItems.push(item);

		// Decals
		} else if (item.id.startsWith("decal_")) {
			decalItems.push(item);

		// Start positions
		} else if (item.id === "start_position") {
			startPositionItems.push(item);

		// Unknown
		} else {
			throw ("Track '" + this.trackName + "' cannot contain an unknown item '" + item.id + "'");
		}
	}

	// Sort the some of the item groups
	checkpointItems.sort(indexSortFunction);
	startPositionItems.sort(indexSortFunction);
	aiPathPointItems.sort(indexSortFunction);

	// 2) Validation
	if (checkpointItems.length < 2) {
		throw ("Track '" + this.trackName + "' must contains at least 2 checkpoints");
	}
	for (i = 0; i < checkpointItems.length; i += 1) {
		if (checkpointItems[i].index !== i) {
			throw ("Track '" + this.trackName + "' must have checkpoints with consecutive indices (saw " + checkpointItems[i].index + " instead of " + i + ")");
		}
	}
	if (startPositionItems.length === 0) {
		throw ("Track '" + this.trackName + "' must contain at least one start position for a car");
	}
	for (i = 0; i < startPositionItems.length; i += 1) {
		if (startPositionItems[i].index !== i) {
			throw ("Track '" + this.trackName + "' must have start positions with consecutive indices (saw " + startPositionItems[i].index + " instead of " + i + ")");
		}
	}

	// 3) Add Track Pieces
	this.trackPieces = [];
	for (i = 0; i < trackPieceItems.length; i += 1) {
		var trackPieceItem = trackPieceItems[i];
		var trackPiece = new TrackPiece(trackPieceItem.id, trackPieceItem.x, trackPieceItem.y);
		this.trackPieces.push(trackPiece);
	}

	// 4) Find for each connector of each track piece to which connector of another track piece it is connected
	for (i = 0; i < this.trackPieces.length; i += 1) {
		var currentTrackPiece = this.trackPieces[i];
		for (j = 0; j < currentTrackPiece.connectors.length; j += 1) {
			var connector = currentTrackPiece.connectors[j];
			var foundConnector = null;

			// Skip connectors that already have a connection
			if (connector.connectedTo !== null) {
				continue;
			}

			// Loop over all other connectors to see if it is close by enough to connect
			var m;
			var debug_smallestErrorDistanceSqr = Number.POSITIVE_INFINITY;
			for (m = 0; m < this.trackPieces.length; m += 1) {
				// Skip the currentTrackPice
				if (m === i) {
					continue;
				}

				var otherTrackPiece = this.trackPieces[m];
				var n;
				for (n = 0; n < otherTrackPiece.connectors.length; n += 1) {
					var otherConnector = otherTrackPiece.connectors[n];

					var sqrDistance = otherConnector.position.distanceSquared(connector.position);
					if (sqrDistance < debug_smallestErrorDistanceSqr) {
						debug_smallestErrorDistanceSqr = sqrDistance;
					}
					if (sqrDistance < errorDistanceSqr) {
						foundConnector = otherConnector;
						break;
					}
				}

				if (foundConnector !== null) {
					break;
				}
			}

			// Exit if no connector was found or the found connector is already connected to something else
			if (foundConnector === null || foundConnector.connectedTo !== null) {
				throw ("Track '" + this.trackName + "' cannot be connected at position (" + connector.position.x + ", " + connector.position.y + ") smallest distance is " + Math.sqrt(debug_smallestErrorDistanceSqr) + " while maximum allowed error is only " + errorDistance);
			}

			// Apply the found connector to the connector and vice versa
			connector.connectedTo = foundConnector;
			foundConnector.connectedTo = connector;
		}
	}

	// 5) Create combined chains from the edges of all track pieces
	// Gather all chains so we can loop over the once that are not yet processed
	var allChains = [], count = 0;
	for (i = 0; i < this.trackPieces.length; i += 1) {
		for (j = 0; j < this.trackPieces[i].chains.length; j += 1) {
			var chain = this.trackPieces[i].chains[j];

			// Save some information in the chain object
			chain.processed = false;
			chain.index = count;
			count += 1;

			allChains.push(chain);
		}
	}

	// Loop over all non processed chains (which are processed on the way)
	for (i = 0; i < allChains.length; i += 1) {
		if (allChains[i].processed) {
			continue;
		}

		// Keep track of all points in the combined chain
		var combinedPoints = []; // array of points

		// Find starting values for the combining
		var currentChain = allChains[i],
			currentOrder = true; // true for normal order, false for reverse order

		// Combine the chain points
		do {
			// 1) Add the points from the chain (in normal or reverse order) to the combined points
			for (j = 0; j < currentChain.positions.length - 1; j += 1) { // Skip last one because it is (should be) the same as the next one in the next chain
				var jj = currentOrder ? j : currentChain.positions.length - 1 - j;
				combinedPoints.push(currentChain.positions[jj]);
			}

			// 2) Since the positions of the chains are now added to the combined chain, it can be considered processed
			currentChain.processed = true;

			// 3) Find the connector at the correct end of the chain
			var currentOrderEndIndex = currentOrder ? currentChain.positions.length - 1 : 0,
				endConnector = null;
			for (j = 0; j < currentChain.ends.length; j += 1) {
				var chainEnd = currentChain.ends[j];
				if (chainEnd.positionIndex === currentOrderEndIndex) {
					endConnector = currentChain.trackPiece.connectors[chainEnd.connectorIndex];
				}
			}

			// 4) Find the start connector at the next track piece
			var startConnector = endConnector.connectedTo;

			// 5) Find the corresponding chain of the new connector (which is the closest to the last chain)
			var closestDistSqr = Number.POSITIVE_INFINITY,
				closestChain,
				closestChainOrder;
			for (j = 0; j < startConnector.correspondingChains.length; j += 1) {
				var correspondingChain = startConnector.correspondingChains[j],
					otherChain = startConnector.trackPiece.chains[correspondingChain.chainIndex],
					position = otherChain.positions[correspondingChain.positionIndex];

				var distSqr = position.distanceSquared(combinedPoints[combinedPoints.length - 1]);
				if (distSqr < closestDistSqr) {
					closestDistSqr = distSqr;
					closestChain = otherChain;
					closestChainOrder = correspondingChain.positionIndex === 0;
				}
			}

			// 6) Make the closest chain the current chain
			currentChain = closestChain;
			currentOrder = closestChainOrder;

		} while ( currentChain.index !== i ); // Keep adding more chains to the combinedPoints as long as we are not back at the chain we started with

		// Create a chain shape out of the combined points
		var chainShape = this.physics.createChainShape(combinedPoints, true);
		this.physics.createBody(0, 0, 0, chainShape, Box2D.b2_staticBody);
		Box2D.destroy(chainShape);
	}

	// 6) Add Checkpoints
	var CHECKPOINT_WIDTH = 400, CHECKPOINT_HEIGHT = 400;
	this.checkpoints = [];
	for (i = 0; i < checkpointItems.length; i += 1) {
		var checkpointItem = checkpointItems[i];
		var checkpoint = this.addCheckpoint(checkpointItem.index, checkpointItem.x, checkpointItem.y, CHECKPOINT_WIDTH, CHECKPOINT_HEIGHT);
		this.checkpoints.push(checkpoint);
	}

	// 7) Add contact listener
	var listener = new Box2D.JSContactListener();
	listener['BeginContact'] = function (contactPtr) {
	    var contact = Box2D.wrapPointer( contactPtr, Box2D.b2Contact );
	    var bodyA = contact.GetFixtureA().GetBody();
	    var bodyB = contact.GetFixtureB().GetBody();

	    // 1) Determine Car-Checkpoint contacts
	    var car = null, checkpoint = null;

	    // Find objects
	    if (bodyA.isCar && bodyB.isCheckpoint) {
	    	car = bodyA.car;
	    	checkpoint = bodyB.checkpoint;
	    } else if (bodyA.isCheckpoint && bodyB.isCar) {
	    	car = bodyB.car;
	    	checkpoint = bodyA.checkpoint;
	    } else if (bodyA.isCar && bodyB.isCar) {

	    	var manifold = contact.GetManifold();

	    	if (manifold.get_pointCount() === 0) {
	    		return;
	    	}

	    	var contactPoint;

	    	if (manifold.get_type() === Box2D.b2Manifold.e_faceA) {
	    		contactPoint = bodyA.GetWorldPoint(manifold.get_localPoint());
	    	}
	    	if (manifold.get_type() === Box2D.b2Manifold.e_faceB) {
	    		contactPoint = bodyB.GetWorldPoint(manifold.get_localPoint());
	    	}

	    	var x = contactPoint.get_x() / TG.level.physics.scale;
	    	var y = contactPoint.get_y() / TG.level.physics.scale;

	    	TG.level.spriteAnimations.addSpriteAnimation(s_spark, 20, x, y);
			audioController.playCarHit();

	    	Box2D.destroy(manifold);
	    }

	    // Send the event
	    if (car !== null && checkpoint !== null) {
	    	car.carController.onHitCheckpoint(checkpoint.index);
	    }
	};

	// Empty implementations for unused methods.
	listener['EndContact'] = function() {};
	listener['PreSolve'] = function() {};
	listener['PostSolve'] = function() {};

	this.physics.world.SetContactListener( listener );

	// 8) Create the ai path
	this.aiPath = new AIPath(this);
	for (i = 0; i < aiPathPointItems.length; i += 1) {
		var aiPathPointItem = aiPathPointItems[i];
		this.aiPath.addWayPoint(aiPathPointItem.index, aiPathPointItem.lane, aiPathPointItem.x, aiPathPointItem.y, aiPathPointItem.speed);
	}
	this.aiPath.finalize();

	// 9) Add the start positions
	this.startPositions = [];
	for (i = 0; i < startPositionItems.length; i += 1) {
		var startPositionItem = startPositionItems[i];
		var startPosition = {
			x: startPositionItem.x,
			y: startPositionItem.y,
			angle: startPositionItem.angle,
			visual: {
				image: s_start_positions,
				subimage: Math.round(startPositionItem.angle / 45)
			}
		};
		this.startPositions.push(startPosition);
	}

	// 10) Add the decals
	this.decals = [];
	for (i = 0; i < decalItems.length; i += 1) {
		var decalItem = decalItems[i];

		// Create the decal
		var decal = {};
		decal.x = decalItem.x;
		decal.y = decalItem.y;
		decal.image = decalItem.image;
		decal.subimage = decalItem.subimage;
		decal.useFourSubimagesPerSubimage = decalItem.useFourSubimagesPerSubimage;

		// Add the decal
		this.decals.push(decal);
	}

	// 11) Determine track size
	var trackSize = {
		x: 0,
		y: 0,
		width: this.definition.width,
		height: this.definition.height
	};
	this.trackSize = trackSize;

	// 13) Create the surface containers
	this.surfaceContainers = [];
	var SURFACE_SIZE = 1024,//512,
		xn = Math.ceil(trackSize.width / SURFACE_SIZE), yn = Math.ceil( trackSize.height / SURFACE_SIZE ),
		xi, yi;

	for (xi = 0; xi < xn; xi += 1) {
		for (yi = 0; yi < yn; yi += 1) {

			var surfaceWidth  = (xi === xn - 1) ? (trackSize.width  % SURFACE_SIZE) : SURFACE_SIZE;
			var surfaceHeight = (yi === yn - 1) ? (trackSize.height % SURFACE_SIZE) : SURFACE_SIZE;

			var surfaceContainer = {
				surface: new tbSurface(surfaceWidth, surfaceHeight),
				rect: {
					x: xi * SURFACE_SIZE,
					y: yi * SURFACE_SIZE,
					width:  surfaceWidth,
					height: surfaceHeight
				},
				alpha: 1
			};

			// Set the surface as the target to draw to
			surfaceContainer.surface.setTarget();

			// Clear the background of each surface with the green of the grass
			surfaceContainer.surface.clearColor(this.greenBackgroundColor);

			// Translate the surface to it's position
			tbGraphics.context.save();
			tbGraphics.context.translate(-surfaceContainer.rect.x, -surfaceContainer.rect.y);

			// Draw the grass texture to each surface
			s_texture_grass.drawTiled(0, surfaceContainer.rect.x, surfaceContainer.rect.y, surfaceWidth, surfaceHeight, 1);

			// Reset the target
			tbGraphics.context.restore();
			surfaceContainer.surface.resetTarget();

			// Add this surfaceContainer to the surfaceContainers
			this.surfaceContainers.push(surfaceContainer);
		}
	}
};

Track.prototype._drawToSurfaces = function() {
	"use strict";

	var testRect = {}, i, j, k, surfaceContainer;
	var rectsOverlap = function(ra, rb) {
		return !(ra.x + ra.width  < rb.x || ra.x > rb.x + rb.width ||
				 ra.y + ra.height < rb.y || ra.y > rb.y + rb.height);
	};

	// Translate the surfaces to their positions
	for (i = 0; i < this.surfaceContainers.length; i += 1) {
		surfaceContainer = this.surfaceContainers[i];

		surfaceContainer.surface.context.save();
		surfaceContainer.surface.context.translate(-surfaceContainer.rect.x, -surfaceContainer.rect.y);
	}

	// Draw the track pieces to each surface
	for (j = 0; j < this.trackPieces.length; j += 1) {
		for (i = 0; i < this.surfaceContainers.length; i += 1) {
			surfaceContainer = this.surfaceContainers[i];
			if (rectsOverlap(surfaceContainer.rect, this.trackPieces[j].rectangle)) {

				// Set target
				surfaceContainer.surface.setTarget();

				// Draw the track piece
				this.trackPieces[j].definition.visual.image.drawSimple(0, this.trackPieces[j].x, this.trackPieces[j].y);

				// Reset the target
				surfaceContainer.surface.resetTarget();
			}
		}
	}

	// Draw the start positions to each surface
	for (j = 0; j < this.startPositions.length; j += 1) {
		var sp = this.startPositions[j];
		testRect.x = sp.x - sp.visual.image.width / 2;
		testRect.y = sp.y - sp.visual.image.height / 2;
		testRect.width = sp.visual.image.width;
		testRect.height = sp.visual.image.height;

		for (i = 0; i < this.surfaceContainers.length; i += 1) {
			surfaceContainer = this.surfaceContainers[i];
			if (rectsOverlap(surfaceContainer.rect, testRect)) {

				// Set target
				surfaceContainer.surface.setTarget();

				// Draw the start position
				sp.visual.image.drawSimple(sp.visual.subimage, sp.x, sp.y);

				// Reset the target
				surfaceContainer.surface.resetTarget();
			}
		}
	}

	// Draw the decals to each surface
	for (j = 0; j < this.decals.length; j += 1) {
		var decal = this.decals[j];
		testRect.x = decal.x;
		testRect.y = decal.y;
		testRect.width = decal.image.width;
		testRect.height = decal.image.height;
		if (decal.useFourSubimagesPerSubimage) {
			testRect.width *= 2;
			testRect.height *= 2;
		}

		for (i = 0; i < this.surfaceContainers.length; i += 1) {
			surfaceContainer = this.surfaceContainers[i];
			if (rectsOverlap(surfaceContainer.rect, testRect)) {

				// Set target
				surfaceContainer.surface.setTarget();

				// Draw the decals
				if (decal.useFourSubimagesPerSubimage) {
					var n = decal.image.number / 4;
					var w = decal.image.width, h = decal.image.height;
					var subImages = [];
					subImages.push({ s: (decal.subimage + 0) * 2 + 0, x: decal.x + 0, y: decal.y + 0 });
					subImages.push({ s: (decal.subimage + 0) * 2 + 1, x: decal.x + w, y: decal.y + 0 });
					subImages.push({ s: (decal.subimage + n) * 2 + 0, x: decal.x + 0, y: decal.y + h });
					subImages.push({ s: (decal.subimage + n) * 2 + 1, x: decal.x + w, y: decal.y + h });

					for (k = 0; k < subImages.length; k += 1) {
						decal.image.drawSimple(subImages[k].s, subImages[k].x, subImages[k].y);
					}
				} else {
					decal.image.drawSimple(decal.subimage === undefined ? 0 : decal.subimage, decal.x, decal.y);
				}

				// Reset the target
				surfaceContainer.surface.resetTarget();
			}
		}
	}

	// Draw a random color overlay to each surface
	for (i = 0; i < this.surfaceContainers.length; i += 1) {
		// Set target
		surfaceContainer.surface.setTarget();

		// Draw a random color overlay
		var alpha = 0.3,
			r = Math.floor(Math.random() * 255),
			g = Math.floor(Math.random() * 255),
			b = Math.floor(Math.random() * 255),
			color = "rgba(" + r + "," + g + "," + b + "," + alpha + ")";
		tbGraphics.drawRectangle(0, 0, surfaceContainer.surface.width, surfaceContainer.surface.height, color);

		// Reset the target
		surfaceContainer.surface.resetTarget();
	}

	// Restore the surfaces
	for (i = 0; i < this.surfaceContainers.length; i += 1) {
		surfaceContainer = this.surfaceContainers[i];
		surfaceContainer.surface.context.restore();
	}

	// Draw all the surfaces once to get them into the video memory
	for (i = 0; i < this.surfaceContainers.length; i += 1) {
		this.surfaceContainers[i].surface.drawSimple(0, 0);
	}
};

Track.prototype.addCheckpoint = function(index, x, y, width, height){
	"use strict";
	var scale = this.physics.scale;

    //Create the body definition
	var bodyDef = new Box2D.b2BodyDef();
	bodyDef.set_type(Box2D.b2_staticBody);
	var b2X = x * scale;
	var b2Y = y * scale;
	bodyDef.set_position(new Box2D.b2Vec2(b2X, b2Y));
	bodyDef.set_angularDamping(1);
	bodyDef.set_linearDamping(1);

	//Create shape
	var shape = new Box2D.b2PolygonShape();
	shape.SetAsBox((width / 2) * scale, (height / 2) * scale);

    //Create the fixture definition
	var fixtureDef = new Box2D.b2FixtureDef();
	fixtureDef.set_shape(shape);
	fixtureDef.set_density(10);
	fixtureDef.set_friction(1);
	fixtureDef.set_restitution(0);
	fixtureDef.set_isSensor(1);

	//Create the body
	var body = this.physics.world.CreateBody(bodyDef);
	body.CreateFixture(fixtureDef);
	body.SetSleepingAllowed(1);
	body.SetAwake(1);
	body.SetActive(1);

	//Destroy used objects
	Box2D.destroy(bodyDef);
	Box2D.destroy(shape);
	Box2D.destroy(fixtureDef);

	//Create a checkpoint object containing information about the checkpoint
	var checkpoint = {
		body: body,
		x: x,
		y: y,
		width: width,
		height: height,
		index: index
	};

	//Set some data on the body for contact resolving
	body.isCheckpoint = true;
	body.checkpoint = checkpoint;

	//Return the checkpoint
	return checkpoint;
};

// handleEndStep is called each step after processing other events (before draw).
Track.prototype.handleEndStep = function(timePassed) {
	"use strict";
	this.canvas.drawTokens = true;
};

// handleDraw is called at the end of a step to draw the token.
Track.prototype.handleDraw = function() {
	"use strict";

	tbGraphics.context.save();
	tbGraphics.context.translate(-ScrollingCamera.scroll.x, -ScrollingCamera.scroll.y);

	// Draw the grass background when needed
	var ox, oy, dx, dy, dw, dh;
	if (ScrollingCamera.screenRect.x < 0) {
		ox = -ScrollingCamera.scroll.x % s_texture_grass.width;
		oy = -ScrollingCamera.scroll.y % s_texture_grass.height;
		dx = ScrollingCamera.screenRect.x;
		dy = ScrollingCamera.screenRect.y;
		dw = 0 - dx;
		dh = ScrollingCamera.screenRect.height;
		tbGraphics.drawRectangle(dx, dy, dw, dh, this.greenBackgroundColor);
		s_texture_grass.drawTiledOffsetNotRounded(0, ox, oy, dx, dy, dw, dh);

	}
	if (ScrollingCamera.screenRect.x + ScrollingCamera.screenRect.width > this.trackSize.width) {
		ox = -this.trackSize.width % s_texture_grass.width;
		oy = -ScrollingCamera.scroll.y % s_texture_grass.height;
		dx = this.trackSize.width;
		dy = ScrollingCamera.screenRect.y;
		dw = ScrollingCamera.screenRect.x + ScrollingCamera.screenRect.width - dx;
		dh = ScrollingCamera.screenRect.height;
		tbGraphics.drawRectangle(dx, dy, dw, dh, this.greenBackgroundColor);
		s_texture_grass.drawTiledOffsetNotRounded(0, ox, oy, dx, dy, dw, dh);
	}
	if (ScrollingCamera.screenRect.y < 0) {
		ox = -ScrollingCamera.scroll.x % s_texture_grass.width;
		oy = -ScrollingCamera.scroll.y % s_texture_grass.height;
		dx = ScrollingCamera.screenRect.x;
		dy = ScrollingCamera.screenRect.y;
		dw = ScrollingCamera.screenRect.width;
		dh = 0 - dy;
		tbGraphics.drawRectangle(dx, dy, dw, dh, this.greenBackgroundColor);
		s_texture_grass.drawTiledOffsetNotRounded(0, ox, oy, dx, dy, dw, dh);
	}
	if (ScrollingCamera.screenRect.y + ScrollingCamera.screenRect.height > this.trackSize.height) {
		ox = -ScrollingCamera.scroll.x % s_texture_grass.width;
		oy = -this.trackSize.height % s_texture_grass.height;
		dx = ScrollingCamera.screenRect.x;
		dy = this.trackSize.height;
		dw = ScrollingCamera.screenRect.width;
		dh = ScrollingCamera.screenRect.y + ScrollingCamera.screenRect.height - dy;
		tbGraphics.drawRectangle(dx, dy, dw, dh, this.greenBackgroundColor);
		s_texture_grass.drawTiledOffsetNotRounded(0, ox, oy, dx, dy, dw, dh);
	}

	// Draw the surfaces
	var i, part = {};
	for (i = 0; i < this.surfaceContainers.length; i += 1) {
		var surfaceContainer = this.surfaceContainers[i];
		if (ScrollingCamera.isOverlappingScreen(surfaceContainer.rect)) {
			ScrollingCamera.getScreenPartRect(surfaceContainer.rect, part);
			surfaceContainer.surface.drawPart(part.sx, part.sy, part.sw, part.sh, part.dx, part.dy, surfaceContainer.alpha);
		}
	}

	// Draw the AI Path debug
	//this.aiPath.draw();

	tbGraphics.context.restore();
};
//Draw the image tiled in an area with a non rounded offset
tbImage.prototype.drawTiledOffsetNotRounded = function(number, xOff, yOff, dx, dy, dw, dh, alpha) {
    "use strict";
    var context = tbGraphics.context,
        oldalpha = context.globalAlpha,
        xx, yy, nx, ny, xdest, ydest, subx, suby, subw, subh, i, j;
    if (this.width === 0 || this.height === 0) { return; }
    // Get the number in range
    number = (Math.round(number) % this.number + this.number) % this.number;
    // Set alpha
    context.globalAlpha = alpha;
    // Draw it
    xx = (xOff-this.xOrigin) % this.width;
    if (xx > 0) { xx -= this.width; }
    yy = (yOff-this.yOrigin) % this.height;
    if (yy > 0) { yy -= this.height; }
    nx = ((dw-xx)/this.width);
    ny = ((dh-yy)/this.height);
    xx += dx+this.subXOff[number];
    yy += dy+this.subYOff[number];
    for (i=0; i<nx; i += 1) {
        for (j=0; j<ny; j += 1)
        {
            subx = this.subX[number]; suby = this.subY[number]; subw = this.subW[number]; subh = this.subH[number];
            xdest = xx+i*this.width;
            ydest = yy+j*this.height;
            if (xdest < dx) { subx += dx-xdest; subw -= dx-xdest; xdest = dx; }
            if (xdest+subw >= dx+dw) { subw = dx+dw-xdest; }
            if (ydest < dy) { suby += dy-ydest; subh -= dy-ydest; ydest = dy; }
            if (ydest+subh >= dy+dh) { subh = dy+dh-ydest; }
            if (subw > 0 && subh > 0) {
                this.texture.drawPart(this.subTexIndex[number],subx,suby,subw,subh,xdest,ydest);
            }
        }
    }
    // Restore alpha
    context.globalAlpha = oldalpha;
};

//******************************************************
//*****    Script Resource: TrackPiece
//******************************************************

/* globals TrackPieceDefinition */

// ******************************
// Tingly Builder JavaScript file
// ******************************

var TrackPiece = function(name, x, y) {
	"use strict";
	
	// Get the definition
	this.name = name;
	var trackPieceDefinitions = TG.game.trackPieceDefinitions = TG.game.trackPieceDefinitions || {};
	if (trackPieceDefinitions[name] === undefined) {
		trackPieceDefinitions[name] = new TrackPieceDefinition(name);
	}
	/** @type TrackPieceDefinition */
	this.definition = trackPieceDefinitions[name];
	
	// Positional data
	this.x = x;
	this.y = y;
	this.rectangle = {
		x: this.x,
		y: this.y,
		width: this.definition.visual.image.width,
		height: this.definition.visual.image.height
	};
	var thisPosition = new tbVector(x, y);
	
	// Get connector data from definition
	this.connectors = [];
	var i;
	for (i = 0; i < this.definition.connectors.length; i += 1) {
		var connectorDefinition = this.definition.connectors[i],
			connector = {};
		
		connector.trackPiece = this;
		connector.index = i; // same as connectorDefinition.index
		connector.position = connectorDefinition.position.add(thisPosition);
		connector.correspondingChains = connectorDefinition.correspondingChains;
		connector.connectedTo = null;
		
		this.connectors.push(connector);
	}
	
	// Get chain data from definition
	this.chains = [];
	for (i = 0; i < this.definition.chains.length; i += 1) {
		var chainDefinition = this.definition.chains[i];
		var chain = {};
		
		chain.trackPiece = this;
		chain.ends = chainDefinition.ends;
		chain.positions = [];

		var j;
		for (j = 0; j < chainDefinition.positions.length; j += 1) {
			chain.positions.push(chainDefinition.positions[j].add(thisPosition));
		}
		
		this.chains.push(chain);
	}
};

TrackPiece.prototype.getName = function() {
	"use strict";
	
	return this.name;
};
//******************************************************
//*****    Script Resource: TrackPieceDefinition
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

// Creates a new definition of a track piece based on the name as found in the settings file
var TrackPieceDefinition = function(name) {
	"use strict";
	
	// Find track piece
	this.name = name;
	var trackPiece = TG.settings.game.track_piece[name];
	
	// 1) Gather items
	var trackPieceItems = [], ppChains = {}, connectorItems = [];
	var i, item;
	for (i = 0; i < trackPiece.items.length; i += 1) {
		item = trackPiece.items[i];

		// Track Piece Item
		if (item.id.startsWith("tp_")) {
			trackPieceItems.push(item);

		// Physics Point Chains 
		} else if (item.id.startsWith("pp_")) {
			if (ppChains[item.id] === undefined) {
				ppChains[item.id] = [ item ];
			} else {
				ppChains[item.id].push(item);
			}

		// Connector
		} else if (item.id === "connector") {
			connectorItems.push(item);

		// Unknown
		} else {
			throw ("The track piece definition of '" + name + "' contains an unknown item '" + item.id + "'");
			
		}
	}
	
	// 2) Validate trackPieceItem before creating it
	if (trackPieceItems.length !== 1) {
		throw ("The track piece definition of '" + name + "' must contain exactly one track piece item");
	}
	var trackPieceItem = trackPieceItems[0];
	if (trackPieceItem.id !== name) {
		throw ("The track piece definition of '" + name + "' has a different name from its trackPieceItem: '" + trackPieceItem.id + "'");
	}
	
	// 3) Finalize the definition
	// Track Piece Item
	this.offset = new tbVector(trackPieceItem.x, trackPieceItem.y);

	// 4) Find the connectors
	this.connectors = [];
	for (i = 0; i < connectorItems.length; i += 1) {
		var connectorItem = connectorItems[i];
		
		// Create the connector
		var connector = {};
		connector.position = (new tbVector(connectorItem.x, connectorItem.y)).subtract(this.offset);
		connector.index = connectorItem.index;
		connector.correspondingChains = []; //array of objects with chain, chainIndex, position and positionIndex
		
		// Add the connector to the connectors
		this.connectors.push(connector);
	}
	// Sort the connectorPoints on their index so the corresponding connector index matches the correct index in this list
	this.connectors.sort(function (a, b) {
		return a.index - b.index;
	});
	
	// 5) Find the chains 
	var chainPointSortFunction = function(itemA, itemB) { return itemA.index - itemB.index; };
	this.chains = []; // array of chains, each chain has an positions array (tbVector) and ends array ({position, connector})
	
	var chainIndex = 0;
	for (var chainName in ppChains) {
		var chainItems = ppChains[chainName];
		chainItems.sort(chainPointSortFunction);
		
		// Create a new chain
		var chain = {};
		chain.positions = []; // array of tbVectors
		chain.ends = []; // array of objects with positionIndex and connectorIndex
		
		// Gahter chain point data from the chainItems
		for (i = 0; i < chainItems.length; i += 1) {
			var chainItem = chainItems[i];
			var position = (new tbVector(chainItem.x, chainItem.y)).subtract(this.offset);
			chain.positions.push(position);
			
			// Check if this position is an endposition of the chain (so if it has a corresponding connector)
			if (chainItem.correspondingConnectorIndex !== -1) {
				var correspondingConnector = this.connectors[chainItem.correspondingConnectorIndex];
				
				// Save this position as end for the chain
				chain.ends.push({ 
					positionIndex: i, 
					connectorIndex : chainItem.correspondingConnectorIndex 
				});
				
				// Save this chain and point as end for the corresponding connector
				correspondingConnector.correspondingChains.push({
					positionIndex: i,
					chainIndex: chainIndex
				});
			}
		}
		
		// Add the created point chain to the point chains of this track piece definition
		this.chains.push(chain);
		chainIndex += 1;
	}
	
	// 6) Copy the other data
	this.visual = trackPiece.visual;
	
	// 7) Validation after creation
	for (i = 0; i < this.connectors.length; i += 1) {
		
		// Validate that the connectors have consecutive indices
		if (this.connectors[i].index !== i) {
			throw ("The track piece definition of '" + name + "' should have consecutive indices for the connectors starting with 0");
		}
		
		// Validate that the connectors have two chainInfoObjects
		if (this.connectors[i].correspondingChains.length !== 2) {
			throw ("The track piece definition of '" + name + "' has a connector which is not connected to two chains");
		}
	}
	// Could still validate that each point chain has exactly two ends (or zero for inner edges)
	// Could still validate that the point chains have points with consecutive indices
	// Chosen not to validate that the chains are at least of length 2, because length 1 might this be usefull for an edge that has zero length (and cannot be zero because than it wouldnt exist)
	// Chosen not to validate that the number of connectors are equal to the number of chains, because this might show different when inner edges are used
};

TrackPieceDefinition.prototype.numberOfChains = function() {
	"use strict";
	
	return this.chains.length;
};
//******************************************************
//*****    Script Resource: AIPath
//******************************************************

/*globals
 	f_debug
 */
// ******************************
// Tingly Builder JavaScript file
// ******************************

var AIPathWayPoint = function(aiPath, index) {
	"use strict";
	
	this.aiPath = aiPath;
	this.index = index;
	this.lanes = [];
};

AIPathWayPoint.prototype.addLane = function(lane, x, y, speed) {
	"use strict";
	
	if (this.lanes.length !== lane) {
		throw ("Track '" + this.aiPath.track.trackName + "' cannot add lane " + lane + " to the wayPoint with index " + this.index + " make sure the indices of the lane are consecutive starting from 0");
	}
	
	this.lanes.push({position: new tbVector(x, y), speed: speed});
};

AIPathWayPoint.prototype.getPositionOfLane = function(lane) { 
	"use strict";
	
	return this.lanes[lane].position;
};

AIPathWayPoint.prototype.getSpeedOfLane = function(lane) { 
	"use strict";
	
	return this.lanes[lane].speed;
};

var AIPath = function(track) {
	"use strict";
	
	// General properties
	this.track = track;
	this.wayPoints = [];
	
	// Finalized properties
	this.finalized = false;
	this.totalLength = -1;
};

AIPath.prototype.addWayPoint = function(index, lane, x, y, speed) {
	"use strict";
	
	if (this.finalized === true) {
		throw ("AIPath was already finalized while adding a new wayPoint");
	}
	
	// WayPoint to add this point to
	var wayPoint = null;
	if (this.wayPoints.length > 0) {
		var lastWayPoint = this.wayPoints[this.wayPoints.length - 1];
		if (lastWayPoint.index === index) {
			wayPoint = lastWayPoint;
		}
	}
	
	// Create a new wayPoint if it is needed
	if (wayPoint === null) {
		wayPoint = new AIPathWayPoint(this, index);
		this.wayPoints.push(wayPoint);
	}
	
	// Add lane to the wayPoint
	wayPoint.addLane(lane, x, y, speed);
};

AIPath.prototype.finalize = function() {
	"use strict";
	
	this.finalized = true;
	
	var i, j;
	this.totalLength = 0;
	for (i = 0; i < this.wayPoints.length; i += 1) {
		// Find prev, from and to waypoint
		var toI = (i === this.wayPoints.length - 1) ? 0 : i + 1,
		    prevI = (i === 0) ? this.wayPoints.length - 1 : i - 1;
		var wayPointFrom = this.wayPoints[i],
			wayPointTo = this.wayPoints[toI],
			wayPointPrev = this.wayPoints[prevI];
		
		// Calculate distance along lane 0
		var distance = wayPointFrom.getPositionOfLane(0).distance(wayPointTo.getPositionOfLane(0));
		wayPointFrom.distanceFrom = distance; // The distance from this way point to the next
		wayPointTo.distanceTo = distance; // The distance to this way point from the previous
		this.totalLength += distance;
		
		// Base the speed on the angle between the prev and to point
		var u = wayPointFrom.getPositionOfLane(0).subtract(wayPointPrev.getPositionOfLane(0)).normalize(),
			v = wayPointTo.getPositionOfLane(0).subtract(wayPointFrom.getPositionOfLane(0)).normalize();
		var angle = Math.abs(tbMath.angleBetween(u, v)),
		    speed = 1 - (angle / (Math.PI * 2)) * 0.5;
		for (j = 0; j < wayPointFrom.lanes.length; j += 1) {
			var lane = wayPointFrom.lanes[j];
			lane.speed = speed;
		}
	}
};

AIPath.prototype.draw = function() {
	"use strict";
	
	if (this.finalized === false) {
		throw ("AIPath was not finalized while trying to draw it!");
	}
	
	var context = tbGraphics.context;
	var i, lane;
	
	context.save();
	
	// Draw line trough all way points
	context.beginPath();
	for (i = 0; i < this.wayPoints.length; i += 1) {
		var toI = (i === this.wayPoints.length - 1) ? 0 : i + 1;
		var wayPointFrom = this.wayPoints[i],
			wayPointTo = this.wayPoints[toI];
		
		if (wayPointFrom.lanes.length === wayPointTo.lanes.length) {
			for (lane = 0; lane < wayPointFrom.lanes.length; lane += 1) {
				var toLane = Math.min(wayPointTo.lanes.length - 1, lane);
				var fromPos = wayPointFrom.getPositionOfLane(lane),
					toPos = wayPointTo.getPositionOfLane(toLane);
				
				context.moveTo(fromPos.x, fromPos.y);
				context.lineTo(toPos.x, toPos.y);
			}
		}
	}
	
	context.strokeStyle = "rgba(255, 106, 0, 0.5)";
	context.lineWidth = 15;
	context.stroke();
	
	// Draw indices and speeds per way point 
	for (i = 0; i < this.wayPoints.length; i += 1) {
		for (lane = 0; lane < this.wayPoints[i].lanes.length; lane += 1) {
			var lanePos = this.wayPoints[i].getPositionOfLane(lane);
			//i + "-" + lane
			f_debug.drawSimple(this.wayPoints[i].lanes[lane].speed.toFixed(2), lanePos.x, lanePos.y);
		}
	}
	
	context.restore();
};

var AIPathTraverser = function(aiPath, allowLaneChanges) {
	"use strict";
	
	// Reference to the ai path that is traversed
	this.aiPath = aiPath;
	this.allowLaneChanges = allowLaneChanges === undefined ? true : allowLaneChanges;
	
	// Values to keep track of the progress along the ai path
	this.fromIndex = 0;
	this.progress = 0;
	
	// The lanes currently moving from and to
	this.fromLane = 0;
	this.toLane = 0;
	
	// Note these values can never be zero but are set so always is started with choosing a random value
	this.lastFromLanesLength = 0;
	this.lastToLanesLength = 0;
};

AIPathTraverser.prototype.setFromIndex = function(fromIndex) {
	"use strict";
	
	// Cache some old properties
	var oldFromIndex = this.fromIndex; 
	var oldFromLane = this.fromLane,
			oldToLane = this.toLane;
	
	var c = this.aiPath.wayPoints.length;
	this.fromIndex = (fromIndex % c + c) % c;
	
	// Set the from and to lanes
	var fromWayPoint = this.getFromWayPoint(),
		toWayPoint = this.getToWayPoint();
	
	if (!this.allowLaneChanges || (oldFromIndex === fromIndex)) {
		// Don't change lanes
		
	} else if (oldFromIndex + 1 === fromIndex) {
		// Old to lane changed into from lane
		this.fromLane = oldToLane;
		
		// Go to a new to lane (try to keep it the same as the old to lane if the lanes length is still the same)
		if (toWayPoint.lanes.length === this.lastToLanesLength) {
			this.toLane = oldToLane;
		} else {
			// Else choose random new to lane
			this.toLane = defaultRandom.iRandom(toWayPoint.lanes.length - 1);
		}
		
	} else if (oldFromIndex - 1 === fromIndex) {
		// Old from lane changed into to lane
		this.toLane = oldFromLane;

		// Go to a new from lane (try to keep it the same as the old from lane if the lanes length is still the same)
		if (fromWayPoint.lanes.length === this.lastFromLanesLength) {
			this.fromLane = oldFromLane;
		} else {
			// Else choose random new from lane
			this.fromLane = defaultRandom.iRandom(fromWayPoint.lanes.length - 1);
		}
		
	} else {
		// Jumped to a non-adjacent index in the path so randomly select a lane
		this.fromLane = defaultRandom.iRandom(fromWayPoint.lanes.length - 1);
		
		// Now try to match the to lane with the from lane (if enough lanes are available, otherwise choose a random lane to move to)
		this.toLane = this.fromLane;
		if (this.toLane >= toWayPoint.lanes.length) {
			this.toLane = defaultRandom.iRandom(toWayPoint.lanes.length - 1);
		}
	}
	
	this.lastFromLanesLength = fromWayPoint.lanes.length;
	this.lastToLanesLength = toWayPoint.lanes.length;
};

AIPathTraverser.prototype.getToIndex = function() {
	"use strict";

	var c = this.aiPath.wayPoints.length;
	return ((this.fromIndex + 1) % c + c) % c;
};

AIPathTraverser.prototype.getFromWayPoint = function() {
	"use strict";
	
	return this.aiPath.wayPoints[this.fromIndex];
};

AIPathTraverser.prototype.getToWayPoint = function() {
	"use strict";

	return this.aiPath.wayPoints[this.getToIndex()];
};

AIPathTraverser.prototype.getCurrentSpeed = function() {
	"use strict";

	var fromWayPointSpeed = this.getFromWayPoint().getSpeedOfLane(this.fromLane),
		toWayPointSpeed = this.getToWayPoint().getSpeedOfLane(this.toLane);
	
	return (fromWayPointSpeed * (1 - this.progress) + toWayPointSpeed * this.progress);
};

AIPathTraverser.prototype.getCurrentPosition = function() {
	"use strict";

	// Calculate current position
	var fromWayPointPosition = this.getFromWayPoint().getPositionOfLane(this.fromLane),
		toWayPointPosition = this.getToWayPoint().getPositionOfLane(this.toLane);
	
	var xLerp = (fromWayPointPosition.x * (1 - this.progress) + toWayPointPosition.x * this.progress),
		yLerp = (fromWayPointPosition.y * (1 - this.progress) + toWayPointPosition.y * this.progress);
	
	// Update current position
	if (this._currentPosition === undefined) {
		this._currentPosition = new tbVector(0, 0);
	}
	this._currentPosition.x = xLerp;
	this._currentPosition.y = yLerp;
	
	// Return current position
	return this._currentPosition;
};

AIPathTraverser.prototype.getTargetPosition = function() {
	"use strict";

	return this.getCurrentPosition();
};

AIPathTraverser.prototype.getCurrentLength = function() {
	"use strict";

	var fromWayPoint = this.getFromWayPoint(),
		toWayPoint = this.getToWayPoint();
	
	return fromWayPoint.getPositionOfLane(this.fromLane).distance(toWayPoint.getPositionOfLane(this.toLane));
};

AIPathTraverser.prototype.step = function(length) {
	"use strict";
	
	var lengthLeft = Math.abs(length);
	
	var curLength, curSpeed, maxLengthLeft, _getCurrentLength;
	if (length > 0) {
		// Forward step
		while (true) {
			_getCurrentLength = this.getCurrentLength();
			// Find the current and max length left between the current from and to waypoints
			curLength = _getCurrentLength * this.progress;
			curSpeed = this.getCurrentSpeed();
			maxLengthLeft = (_getCurrentLength / curSpeed) * (1 - this.progress);
			
			if (lengthLeft < maxLengthLeft) {
				// Stop if this length is enough
				curLength += lengthLeft * curSpeed;
				this.progress = curLength / _getCurrentLength;
				break;
			} else {
				// Jump to the next waypoint
				this.progress = 0;
				this.setFromIndex(this.fromIndex + 1);
				
				lengthLeft -= maxLengthLeft;
			}
		}
	} else if (length < 0) {
		// Backward step
		while (true) {
			_getCurrentLength = this.getCurrentLength();
			// Find the current and max length left between the current from and to waypoints
			curLength = _getCurrentLength * this.progress;
			curSpeed = this.getCurrentSpeed();
			maxLengthLeft = (_getCurrentLength / curSpeed) * this.progress;
			
			if (lengthLeft < maxLengthLeft) {
				// Stop if this length is enough
				curLength -= lengthLeft * curSpeed;
				this.progress = curLength / _getCurrentLength;
				break;
			} else {
				// Jump to the next waypoint
				this.progress = 0.99999999;
				this.setFromIndex(this.fromIndex - 1);
				
				lengthLeft -= maxLengthLeft;
			}
		}
	}
};

// This function returns the distance from the start of the path to the current position over lane 0
AIPathTraverser.prototype.distanceAlongPath = function() {
	"use strict";
	
	if (this.allowLaneChanges) {
		throw ("Cannot calculate distance along ai path for a traverser that allows lange changes");
	}
	
	var i, distance = 0;
	for (i = 0; i <= this.fromIndex; i += 1) {
		// Calculate the portion along this path edge that was travelled
		var portion = 1;
		if (i === this.fromIndex) {
			portion = this.progress;
		}
		
		// Add the traveled distance to the distance
		distance += this.aiPath.wayPoints[i].distanceFrom * portion;
	}
	
	return distance;
};

AIPathTraverser.prototype.limit = function(point, radius, reverse, depth) {
	"use strict";
	
	if (depth === undefined) {
		depth = 0;
	}
	
	if (depth > 5) {
		return;
	}
	
	var distance = point.distance(this.getCurrentPosition());
	
	if (distance > radius) {
		var difference = distance - radius;
		if (!reverse) {
			difference *= -1;
		}
		this.step(difference / 2);
		this.limit(point, radius, reverse, depth + 1);
	}
};
//******************************************************
//*****    Token Resource: RaceController
//******************************************************

/* globals
 	RaceOverview,
 	f_countdown,
 	s_arrow_directional
 */

// The constructor for the RaceController game token.
var RaceController = function(info, carControllers) {
	"use strict";
	// Properties used by the engine
	this.depth = -6;
	this.layer = 0;
	this.visible = true;
	this.active = true;

	// Race controller properties
	this.info = info;
	this.track = carControllers[0].track;
	this.carControllers = carControllers.slice();
	this.playerCarController = carControllers[0];
	this.playerCarController.aiControlled = false;
	this.playerCarController.isPlayer = true;

	this.sortDelay = 100;

	// Count down
	this.countdownStarted = false;
	this.countdownEnded = false;
	this.countdownTime = 4000;

	// Count down surface
	this.countdownSurfaceText = null;
	this.countdownSurface = new tbSurface(400, 200);
	this.countdownSurface.xOrigin = this.countdownSurface.width / 2;
	this.countdownSurface.yOrigin = this.countdownSurface.height / 2;

	// Finished
	this.finished = false;
	this.raceOverview = null;
	this.finalPlace = 4;

	// Arrow
	this.arrowBlinkingTime = 0;
	this.arrowGrowTime = 1500;
	this.arrowGrowSize = 0.3;
	this.arrowAlpha = 0.7;
	this.arrowAngle = null;
	this.arrowMaxStepSize = 180;

	// Create a directional arrow for the player car
	this.directionalArrow = new DirectionalArrow(this.playerCarController);

	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, TG.gameEffectsLayer);
};

RaceController.prototype.startCountdown = function() {
	"use strict";

	this.countdownStarted = true;
};

RaceController.prototype.handleKeyUp = function(key) {
	"use strict";

	if (key === tbKeyCodes.vkSpace) {
		this.playerCarController.aiControlled = !this.playerCarController.aiControlled;
	}
};

RaceController.sortFunction = function(carControllerA, carControllerB) {
	"use strict";

	// 1) Lap
	if (carControllerA.laps !== carControllerB.laps) {
		return carControllerA.laps - carControllerB.laps;
	}

	// 2) Checkpoint
	if (carControllerA.lastHitCheckpoint !== carControllerB.lastHitCheckpoint) {
		return carControllerA.lastHitCheckpoint - carControllerB.lastHitCheckpoint;
	}

	// 3) AI path index
	var pathIndexA = carControllerA.backTraverser.fromIndex,
		pathIndexB = carControllerB.backTraverser.fromIndex;

	// If at first quarter of the checkpoints and the path index is still in the last quarter of the wayPoints then loop the path index around
	var checkpointsLength = carControllerA.track.checkpoints.length,
		wayPointsLength = carControllerA.backTraverser.aiPath.wayPoints.length,
		quaterCheckpoints = checkpointsLength * 0.25,
		threeQuaterWayPoints = wayPointsLength * 0.75;
	if (carControllerA.lastHitCheckpoint < quaterCheckpoints && pathIndexA > threeQuaterWayPoints) {
		pathIndexA -= wayPointsLength;
	}
	if (carControllerB.lastHitCheckpoint < quaterCheckpoints && pathIndexB > threeQuaterWayPoints) {
		pathIndexB -= wayPointsLength;
	}

	// Compare the path index
	if (pathIndexA !== pathIndexB) {
		return pathIndexA - pathIndexB;
	}

	// 4) AI path progress
	if (carControllerA.backTraverser.progress !== carControllerB.backTraverser.progress) {
		return carControllerA.backTraverser.progress - carControllerB.backTraverser.progress;
	}

	// 5) Cars are at the exact same place
	return 0;
};

// handleEndStep is called each step after processing other events (before draw).
RaceController.prototype.handleEndStep = function(timePassed) {
	"use strict";
	this.canvas.drawTokens = true;

	// Sort the car controllers
	// This is a cheap hack I implemented to prevent the positions from flipping out every so often.
	// I couldn't find the cause in the sorting algorithm, so we just only sort the cars a few times per second rather than once per frame, making it
	// less likely for cars to switch places every frame
	this.sortDelay -= timePassed;
	if (this.sortDelay < 0){
		this.carControllers.sort(RaceController.sortFunction);
		this.sortDelay += 250;
	}

	// Set places for each of the cars based on the sort
	var i;
	for (i = 0; i < this.carControllers.length; i += 1) {
		var carController = this.carControllers[i];

		var place = this.carControllers.length - i,
			placeT = (place - 1) / (this.carControllers.length - 1),
			distanceToPlayer = carController.distanceTo(this.playerCarController);

		carController.place = place;
		carController.placeT = placeT;
		carController.distanceToPlayer = distanceToPlayer;
	}

	// Count down
	if (this.countdownStarted === true && this.countdownTime > 0) {
		this.countdownTime -= timePassed;
		if (this.countdownTime <= 1000) {
			// Start the race at Go! (by telling all cars to start their engine)
			for (i = 0; i < this.carControllers.length; i += 1) {
				var cc = this.carControllers[i];
				cc.engineRunning = true;
			}
			if(!this.countdownEnded){
				this.countdownEnded = true;
				audioController.startMusic();
				audioController.playSfx(a_NPC_engine_driveoff, 250);
				audioController.playSfx(a_drift_driveoff_02);
			}
		}
	}

	// Check if the laps where reached
	if (this.finished !== true && (this.playerCarController.laps >= this.info.lapCount)) {
		this.finish();
	}

	// Update game ui controller
	if (!this.finished) {
		var guc = TG.level.gameUIController;
		guc.customComponents["laps"].setText("/" + this.info.lapCount);
		guc.customComponents["lap"].setText((this.playerCarController.laps + 1)  + "");
		guc.customComponents["place"].setText(this.playerCarController.place + "");
		guc.customComponents["stars"].setNumber(3 - (this.playerCarController.place - 1));
	}
};

RaceController.prototype.handleKeyUp = function(key) {
	"use strict";

	if (testMode) {

		// Finish on vkW
		if (key === tbKeyCodes.vkW) {
			this.finish();
		}

	}
};

RaceController.prototype.finish = function() {
	"use strict";

	this.finished = true;

	// Make the player car be ai controlled
	this.playerCarController.aiControlled = true;

	audioController.stopCrowd();
	audioController.playSfx(a_finish, 0);

	// Create a race overview that displays the race overview information
	this.raceOverview = new RaceOverview(this.carControllers);
	this.finalPlace = this.playerCarController.place;
};

//handleDraw is called at the end of a step to draw the token.
RaceController.prototype.handleDraw = function() {
	"use strict";

	// Draw countdown
	if (this.countdownTime > 0 && this.countdownTime < 4000) {

		// Determine countdown text
		var timeText = Math.floor(this.countdownTime / 1000) + "";
		if (timeText === "0") {
			timeText = TG.dictionary.getText("race_go", "<race_go>");
		}

		// Draw to surface
		if (timeText !== this.countdownSurfaceText) {
			this.countdownSurfaceText = timeText;
			this.countdownSurface.clear();
			this.countdownSurface.setTarget();
			f_countdown.drawSimple(timeText, this.countdownSurface.width / 2, this.countdownSurface.height / 2);
			this.countdownSurface.resetTarget();

			if(timeText === TG.dictionary.getText("race_go", "<race_go>")) {
				audioController.playSfx(a_countdown_go, 0);
			} else {
				audioController.playSfx(a_countdown_count, 0);
			}
		}

		// Draw the surface to the screen
		var t = (this.countdownTime % 1000) / 1000,
			alphaEased = tbEase.easeInCubic(t, 1, -1, 1),
			sizeEased = tbEase.easeInOvershoot(t, 1, -1, 1, 4);
		this.countdownSurface.drawExt(
				this.canvas.width / 2, this.canvas.height / 2,
				sizeEased, sizeEased, 0, alphaEased
		);
	}

	// Draw checkpoint arrow
	if (this.countdownEnded && !this.finished) {

		// Find the direction to the next checkpoint
		var carPosition = this.playerCarController.car.getPosition(),
			checkpoint = this.track.checkpoints[(this.playerCarController.lastHitCheckpoint + 1) % this.track.checkpoints.length];
		var angle = (new tbVector(checkpoint.x, checkpoint.y).subtract(carPosition).direction() + 360) % 360;

		// Update the arrow angle by setting a step towards the angle
		if (this.arrowAngle === null) {
			this.arrowAngle = angle;
		} else {
			var step = angle - this.arrowAngle;
			if (step > 180) {
				step = step - 360;
			} else if (step < -180) {
				step = step + 360;
			}
			this.arrowAngle += tbMath.clampAbs(step, this.arrowMaxStepSize * tbGame.stepTime / 1000);
			this.arrowAngle = (this.arrowAngle + 360) % 360;
		}

		// Find the difference in angle and base the size of the arrow on this
		var carAngle = (this.playerCarController.car.getAngle() + 360) % 360,
			angleDiffNormal = Math.abs(carAngle - angle),
			angleDiffReverse = Math.abs(360 - angleDiffNormal),
			angleDiff = Math.min(angleDiffNormal, angleDiffReverse);

		var extraArrowSize = 0;
		if (angleDiff > 90) {
			this.arrowBlinkingTime += tbGame.stepTime;
			if (this.arrowBlinkingTime > this.arrowGrowTime) {
				this.arrowBlinkingTime = this.arrowGrowTime;
			}
			extraArrowSize =	tbEase.easeLinear(this.arrowBlinkingTime, 0, 1, this.arrowGrowTime) * //fade in
								Math.sin(tbGame.gameTime / 1000 * Math.PI * 2 ) * //bounce
								this.arrowGrowSize; //scale
		} else {
			if (this.arrowBlinkingTime > 0) {
				this.arrowBlinkingTime = -this.arrowGrowTime;
			}
			this.arrowBlinkingTime = Math.min(0, this.arrowBlinkingTime + tbGame.stepTime);
		}

		var inoutAlpha = Math.abs(this.arrowBlinkingTime) / this.arrowGrowTime;
		s_arrow_directional.drawExt(0, this.canvas.width / 2, 10 + s_arrow_directional.height / 2, 1 + extraArrowSize, 1 + extraArrowSize, this.arrowAngle, this.arrowAlpha * inoutAlpha);
	}
};

//******************************************************
//*****    Token Resource: CarController
//******************************************************

/* globals
   AIPathTraverser,
   Car,
   ScrollingCamera,
   Difficulties
 */
// ***************************************
// Definition of game token CarController
// ***************************************

// The constructor for the CarController game token.
var CarController = function(track, carDefinition) {
	"use strict";

	// Properties used by the engine
	this.depth = -5;
	this.layer = 0;
	this.visible = true;
	this.active = true;

	// Car Controller properties
	this.physics = track.physics;
	this.track = track;

	// Car controller properties
	this.engineRunning = false;
	this.aiControlled = true;
	this.lowSpeed = {
		time: 0,
		maxTime: 5000,
		speedThreshold: 300,
		timeThreshold: 1500
	};
	this.frontTraverser = new AIPathTraverser(this.track.aiPath);
	this.backTraverser = new AIPathTraverser(this.track.aiPath, false); // false to not allow lane changes
	this.finger = -1;

	// Create the car
	var startPosition = this.track.startPositions[carDefinition.carIndex % this.track.startPositions.length];
	carDefinition.x = startPosition.x;
	carDefinition.y = startPosition.y;
	carDefinition.angle = -startPosition.angle;
	this.car = new Car(this, carDefinition);

	// Place (these are set by the RaceController)
	this.place = -1; // number from 1 to number of cars
	this.placeT = 0; // number from 0 to 1
	this.distanceToPlayer = -1; // number in pixels along the ai path

	// Laps
	this.lastHitCheckpoint = 0;
	this.laps = 0;

	// Speed settings
	this.origMaxSpeed = this.car.definition.maxSpeed;
	this.speedMultiplier = 1;
	this.toNewSpeedTime = 2; // Time to adjust to speed
	this.speedMapping = Difficulties.speedMappings[carDefinition.difficulty];
	this.speedMultiplierOffsetOffset = Math.random();

	/*console.log("---------------");
	console.log(carDefinition.difficulty);
	console.log("---------------");
	var i, prime = 67;
	for (i = this.speedMapping[0].distance - prime * 4; i <= this.speedMapping[this.speedMapping.length - 1].distance + prime * 4; i += prime) {
		console.log(" - " + i + ": " + this.getMappedSpeed(i).toFixed(3));
	}*/

	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, ScrollingCamera.fullscreen ? TG.gameBackgroundLayer : TG.gameLayer);
};

CarController.prototype.getMappedSpeedMultiplier = function(distance) {
	"use strict";

	var i = -1;
	while (i + 1 < this.speedMapping.length && distance > this.speedMapping[i + 1].distance) {
		i += 1;
	}

	if (i === -1) {
		return this.speedMapping[0].speed;
	}
	if (i === this.speedMapping.length - 1) {
		return this.speedMapping[i].speed;
	}

	var begin = this.speedMapping[i],
		end = this.speedMapping[i + 1];

	if (begin.speed === end.speed) {
		return begin.speed;
	}

	var t = tbMath.inverseLerp(begin.distance, end.distance, distance);
	return tbMath.lerp(begin.speed, end.speed, t);
};

CarController.prototype.getSpeedMultiplierTimeOffset = function() {
	"use strict";
	var maxOffsetChange = 0.05,
		firstMagnitude = 0.50,
		secondMagnitude = 0.25,
		thirdMagnitude = 0.25,
		firstInterval = 20,
		secondInterval = 100,
		thirdInterval = 500;

	var time = tbGame.gameTime / 1000 * 2 * Math.PI + thirdInterval * this.speedMultiplierOffsetOffset;
	// Example of function here:
	// http://www.wolframalpha.com/input/?i=%280.6+*+sin%28x+*+2pi%29+%2B+0.2+*+sin%28x+*+2pi+%2F+5%29+%2B+0.2+*+sin%28x+*+2pi+%2F+20%29%29+from+0+to+40
	return maxOffsetChange *
		   (firstMagnitude  * Math.sin(time / firstInterval) +
			secondMagnitude * Math.sin(time / secondInterval) +
			thirdMagnitude  * Math.sin(time / thirdInterval));
};

CarController.prototype.onHitCheckpoint = function(index) {
	"use strict";

	// Check whether the checkpoint we hit was the checkpoint we were supposed to hit next
	var supposedToHitCheckpoint = (this.lastHitCheckpoint + 1) % this.track.checkpoints.length;
	if (supposedToHitCheckpoint === index) {

		// Set last hit checkpoint to this index
		this.lastHitCheckpoint = index;

		// Add a lap when jump to the first checkpoint
		if (index === 0) {
			this.laps += 1;
			if(!this.aiControlled){
				audioController.playSfx(a_last_lap, 0);
			}
		}
	}
};

// Calculates this distance in pixels along the ai path (lane 0) that this car has to travel to the other car controller
// Note that this function returns a negative number when it is in front of the other car
CarController.prototype.distanceTo = function(other) {
	"use strict";

	var distAPThis = this.backTraverser.distanceAlongPath(),
		distAPOther = other.backTraverser.distanceAlongPath();

	var checkpointsLength = this.track.checkpoints.length,
		pathLength = this.backTraverser.aiPath.totalLength,
		quaterCheckpoints = checkpointsLength * 0.25,
		threeQuaterPathLength = pathLength * 0.75;
	if (this.lastHitCheckpoint < quaterCheckpoints && distAPThis > threeQuaterPathLength) {
		distAPThis = -pathLength + distAPThis;
	}
	if (other.lastHitCheckpoint < quaterCheckpoints && distAPOther > threeQuaterPathLength) {
		distAPOther = -pathLength + distAPOther;
	}

	var distThis = this.laps * this.backTraverser.aiPath.totalLength + distAPThis,
		distOther = other.laps * other.backTraverser.aiPath.totalLength + distAPOther;

	return distThis - distOther;
};

// handleEndStep is called each step after processing other events (before draw).
CarController.prototype.handleEndStep = function(timePassed) {
	"use strict";

	// Find car location and distance
	var carLocation = this.car.getLocation();
	var maxDistance = 300;

	// Update the back traverser te follow the car at a max distance
	this.backTraverser.step(-maxDistance * timePassed / 1000); // step back a bit (maxdistance pixels a second)
	this.backTraverser.limit(carLocation, maxDistance, true); // and reset the limit at the max distance

	var touchPosition = null;
	if (this.engineRunning) {

		// Do a step on the ai path
		var traverseSpeed = this.car.definition.maxSpeed * 27.5;
		if (!this.aiControlled) {
			traverseSpeed *= 2;
		}
		this.frontTraverser.step((timePassed / 1000) * traverseSpeed);
		this.frontTraverser.limit(carLocation, maxDistance);

		// Only do input controls when the engine is running
		if (this.aiControlled) {
			// AI Input Controlls

			// Calculate for how long the car is driving slow
			var currentCarSpeed = this.car.getSpeedPixelsPerSecond();
			if (currentCarSpeed < this.lowSpeed.speedThreshold) {
				this.lowSpeed.time += timePassed;

				if (this.lowSpeed.time > this.lowSpeed.maxTime) {
					this.lowSpeed.time = 0;
				}
			} else {
				this.lowSpeed.time = 0;
			}

			// Set the touch position of the car to the current position on the path
			if (this.lowSpeed.time > this.lowSpeed.timeThreshold) {
				// Going to slow for to much time (try to go back)
				var backTraverserPosition = this.backTraverser.getCurrentPosition();
				var reverseCarPosition = this.car.getPosition().add(this.car.getDirection().scale(-maxDistance));
				touchPosition = backTraverserPosition.scale(0.2).add(reverseCarPosition.scale(0.8));
			} else {
				// Go towards front traverser
				touchPosition = this.frontTraverser.getCurrentPosition();
			}

			// Apply max speed multiplier based on distance
			var oldSM = this.speedMultiplier,
				newSM = this.getMappedSpeedMultiplier(this.distanceToPlayer) + this.getSpeedMultiplierTimeOffset();
			var speedStep = (timePassed / 1000) * (1 / this.toNewSpeedTime);
			this.speedMultiplier = (1 - speedStep) * oldSM + speedStep * newSM;
			this.car.definition.maxSpeed = this.origMaxSpeed * this.speedMultiplier;

		} else {
			// User Input controls

			// Check if finger is pressed
			if (this.finger !== -1) {

				// Find the touch position
		    	var touchX = tbGame.touchX(this.finger) + ScrollingCamera.fullscreenScroll.x,
		    		touchY = tbGame.touchY(this.finger) + ScrollingCamera.fullscreenScroll.y;

		    	// Set the touch position
		    	touchPosition = new tbVector(touchX, touchY);
			} else {
				var upPressed = tbGame.keyboardKeyDown(tbKeyCodes.vkUp);
				var downPressed = tbGame.keyboardKeyDown(tbKeyCodes.vkDown);
				if (upPressed !== downPressed) {
					//we are driving with the keyboard
					var b2BodyPosition = this.car.body.GetPosition();
			    	touchPosition = this.physics.vectorFromBox2D(b2BodyPosition);

					var direction = new tbVector(tgScale(50), 0);
					if(downPressed) {
						direction.negateDirect();
					} else {
						direction.scaleDirect(5);
					}

					direction.rotateDirect(this.car.getAngle());

					if(tbGame.keyboardKeyDown(tbKeyCodes.vkLeft)){
						direction.rotateDirect(8*(downPressed?-2:1));
					}

					if(tbGame.keyboardKeyDown(tbKeyCodes.vkRight)){
						direction.rotateDirect(-8*(downPressed?-2:1));
					}

					touchPosition.addDirect(direction);
				}
			}

			// Reset the max speed of the car
			this.car.definition.maxSpeed = this.origMaxSpeed;
		}
	}
	this.car.setTouchPosition(touchPosition);
};

//handleTouchDown is called when a touch is started or if a mouse button is pressed.
CarController.prototype.handleTouchDown = function(finger, x, y) {
	"use strict";

	if (this.finger !== -1) {
		return;
	}

	this.finger = finger;
	if(this.car.getSpeedKMH() < 10 && this.engineRunning){
		audioController.playSfx(a_engine_driveoff, 250, true);
		audioController.playSfx(a_drift_driveoff_02, 0 ,true);
	}
};

//handleTouchUp is called when a touch is ended or if a mouse button is released.
CarController.prototype.handleTouchUp = function(finger, x, y) {
	"use strict";

	if (this.finger !== finger) {
		return;
	}

	this.finger = -1;
	if(this.car.getSpeedKMH() > 5){
		audioController.playSfx(a_engine_stop, 0, true);
	}
};

// handleDraw is called at the end of a step to draw the token.
CarController.prototype.handleDraw = function() {
	"use strict";

	// Set context
	tbGraphics.context.save();
	tbGraphics.context.translate(-ScrollingCamera.scroll.x, -ScrollingCamera.scroll.y);

	/*f_debug.drawSimple("" + this.speedMultiplier.toFixed(2) + " d" + this.distanceToPlayer.toFixed(0) + " (" + this.car.definition.difficulty + ")", this.car.bodyData.x, this.car.bodyData.y - 70);

	// Draw the position of the back traverser of this car on the ai path
	var backPosition = this.backTraverser.getCurrentPosition();
	s_debug_button_debug.drawSimple(0, backPosition.x, backPosition.y);*/

	/*
	// Draw speed info
	f_debug.drawSimple("" + this.speedMultiplier.toFixed(2) + " d" + this.distanceToPlayer.toFixed(0), this.car.bodyData.x, this.car.bodyData.y - 70);

	// Draw laps info
	var info = "" + this.place;
	// " s x" + this.speedMultiplier.toFixed(2) + " d" + this.distanceToPlayer.toFixed(0);
	// "l" + this.laps + " c" + this.lastHitCheckpoint + " i" + this.backTraverser.fromIndex + " p" + this.backTraverser.progress.toFixed(3);
	f_debug.drawSimple(info, this.car.bodyData.x, this.car.bodyData.y - 70);

	// Draw the position of the back traverser of this car on the ai path
	var backPosition = this.backTraverser.getCurrentPosition();
	s_debug_ai_path_point.drawSimple(0, backPosition.x, backPosition.y);

	// Draw the position of the front traverser of this car on the ai path
	var position = this.frontTraverser.getCurrentPosition();
	s_debug_ai_path_point.drawSimple(0, position.x, position.y);
	f_debug.drawSimple("Car-" + this.car.definition.carIndex, position.x, position.y);
	 */

	//Restore context
	tbGraphics.context.restore();
};

//******************************************************
//*****    Token Resource: Car
//******************************************************

/* globals
 Box2D,
 Wheel,
 ScrollingCamera,
 Skidmark,
 s_car_wheel,
 DONT_DRAW_SKIDMARS,
 DONT_DRAW_PARTICLES
 */

// Acceleration states
var ACC_NONE = 0;
var ACC_ACCELERATE = 1;
var ACC_BRAKE = 2;

var Car = function(carController, definition) {
	"use strict";
	// Properties used by the engine
	this.depth = -3;
	this.layer = 0;
	this.visible = true;
	this.active = true;

	// Car controller
	this.carController = carController;

	// Physics stuff
	/**
	 * @type tbPhysics
	 */
	this.physics = carController.physics;
	this.bodyData = new tbVector();

    // Setup the definition
    this.definition = Car.getDefaultCarDefinition();
    for (var def in definition) {
    	this.definition[def] = definition[def];
    }

    // Create body from definition
	this._createCarBody(this.definition);

	// Calculate car data
	this.data = {};
    this.data.touchPosition = null;
    this.data.b2WheelAngle = 0;
    this.data.skidmarkingTime = 0;

    // Skidmarks
    this.skidmarkCount = 1;
    this.skidmarkOffset = -1;
    this.skidmarks = [];

    // b2VectorPointer
    this.b2VectorPointer = new Box2D.b2Vec2(0, 0);

	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, ScrollingCamera.fullscreen ? TG.gameBackgroundLayer : TG.gameLayer);
};

//The default car definition
Car.getDefaultCarDefinition = function() {
	"use strict";
	return {
		//Body
		x:0, y:0, width:34, length:62, angle:180,
		linearDamping: 0.8, angularDamping: 0.5,
		density: 1, friction: 0.2, restitution: 0.8,

		//Steering
		maxSteerAngle: 25, driftDeviationAngle: 40,
		touchFrontAngle: 125,
		maxDriftInfluence: 0.9,
		maxSteerTime: 0.2, rearSteerScale: 0.1,
		maxAngularVelocity: 360 * 15,

		//Accelerating
		maxSpeed: 20, rearMaxSpeedFactor: 0.25,
		minPower: 0.05, maxPower: 0.30,
		touchProjectedFront: 20, touchProjectedRear: 20,
		touchRearMagnitude: -40, touchFrontMinMagnitude: -20, touchFrontMaxMagnitude: 150,
		minWheelDampingFactor: 0.2,
		brakeForce: 0.1, rearForce: 0.6,

		//Skidmarks
		minimalSkidmarkingTime: 500, //ms

		//Wheels
		wheelDefinitions : [
			{x: -16, y:-22, width:6, length:12, revolving:true, powered:true},
			{x:  17, y:-22, width:6, length:12, revolving:true, powered:true},
			{x: -16, y: 22, width:6, length:12, revolving:false, powered:false},
			{x:  17, y: 22, width:6, length:12, revolving:false, powered:false}
		]
	};
};

Car.prototype._createCarBody = function(definition) {
    "use strict";

    // Calculate b2 values
    var scale = this.physics.scale;
    var b2X = definition.x * scale, b2Y = definition.y * scale;
    var b2Position = new Box2D.b2Vec2(b2X, b2Y);
    var b2W = definition.width / 2 * scale, b2H = definition.length / 2 * scale;
    var b2Angle = definition.angle / 180 * Math.PI;

    //Create the body definition
    var bodyDef = new Box2D.b2BodyDef();
    bodyDef.set_type(Box2D.b2_dynamicBody);
    bodyDef.set_position(b2Position);
    bodyDef.set_angle(b2Angle);
    bodyDef.set_linearDamping(definition.linearDamping); //gradually reduces velocity, makes the car reduce speed slowly if neither accelerator nor brake is pressed
    bodyDef.set_bullet(true); //dedicates more time to collision detection - car travelling at high speeds at low framerates otherwise might teleport through obstacles.
    bodyDef.set_angularDamping(definition.angularDamping);

    //Create the shape
    var shape = new Box2D.b2PolygonShape();
    shape.SetAsBox(b2W, b2H);

    //Creat the fixture definition
    var fixtureDef = new Box2D.b2FixtureDef();
    fixtureDef.set_density(definition.density);
    fixtureDef.set_friction(definition.friction); //friction when rubbing against other shapes
    fixtureDef.set_restitution(definition.restitution); //amount of force feedback when hitting something. >0 makes the car bounce off
    fixtureDef.set_shape(shape);

    //Create the body
    this.body = this.physics.world.CreateBody(bodyDef);
    this.body.CreateFixture(fixtureDef);

    //Set some data on the body for contact resolving
	this.body.isCar = true;
	this.body.car = this;

    //Destroy used objects
    Box2D.destroy(bodyDef);
    Box2D.destroy(shape);
    Box2D.destroy(fixtureDef);
    Box2D.destroy(b2Position);

    //Create the wheels
    this.wheels = [];
    var wheel, i;
    for (i = 0; i < definition.wheelDefinitions.length; i += 1) {
    	//Add each wheel
    	wheel = new Wheel(this, definition.wheelDefinitions[i]);
        this.wheels.push(wheel);
    }

	this.prevSkidMarking = false;
};

Car.prototype.getVelocity = function() {
	"use strict";

	var worldVelocity = this.body.GetLinearVelocity();
    return new tbVector(worldVelocity.get_x(), worldVelocity.get_y());
};

Car.prototype.getLocalVelocity = function() {
	"use strict";

	var b2LocalVelocity = this.body.GetLocalVector(this.body.GetLinearVelocity());
	return new tbVector(b2LocalVelocity.get_x(), b2LocalVelocity.get_y());
};

Car.prototype.getSpeedKMH = function() {
	"use strict";

    return this.getLocalVelocity().magnitude() / 1000 * 3600;
};

Car.prototype.getSpeedPixelsPerSecond = function() {
	"use strict";

    return this.getLocalVelocity().magnitude() / this.physics.scale;
};

Car.prototype.setSpeed = function(speed) {
	"use strict";

	var b2NewVelocity = this.b2VectorPointer;
	if (speed === 0) {
		b2NewVelocity.Set(0, 0);
	} else {
		var b2Velocity = this.body.GetLinearVelocity();
	    var tbVelocity = new tbVector(b2Velocity.get_x(), b2Velocity.get_y()).normalize().scale(speed);

	    b2NewVelocity.Set(tbVelocity.x, tbVelocity.y);
	}
    this.body.SetLinearVelocity(b2NewVelocity);
};

Car.prototype.getTargetPosition = function() {
	"use strict";

	var distance = this.canvas.height * (1/3);
	return this.getPosition().add(this.getDirection().scale(distance));
};

Car.prototype.getPosition = function() {
	"use strict";

	return this.physics.vectorFromBox2D(this.body.GetPosition());
};

Car.prototype.getAngle = function() {
	"use strict";

	return -this.body.GetAngle() * 180 / Math.PI + 90;
};

Car.prototype.getDirection = function() {
	"use strict";

	var d_bodyAngle = -this.body.GetAngle() * 180 / Math.PI;
	return tbVectorFromPolar(d_bodyAngle + 90, 1);
};

Car.prototype.getLocation = function() {
	"use strict";

	return this.physics.vectorFromBox2D(this.body.GetPosition());
};

Car.prototype.setTouchPosition = function(tp) {
	"use strict";

	this.data.touchPosition = tp;
};

Car.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	var t = timePassed / 1000,
		i;

    // Calculate speed based info of the car
    var currentSpeed = this.getSpeedKMH();
    var speedT = tbMath.clamp01(currentSpeed / this.definition.maxSpeed);

    // Set some values for when not steering
    var accelerationState = ACC_NONE;
    var b2AngleOffset = 0;
	var b2MaxSteerAngle = this.definition.maxSteerAngle * tbMath.toRadians;
	var b2MaxAngleChange = (b2MaxSteerAngle / this.definition.maxSteerTime) * t * (1 - speedT * 0.5);
	var relTouchVectorMagnitude = 0;
	var relTouchUnitVector = this.getVelocity().normalize();

    // Steer based on the touch
    if (this.data.touchPosition !== null) {
    	var touchPosition = this.data.touchPosition;

    	// Find the relative touch vector from the car
    	var b2BodyPosition = this.body.GetPosition();
    	var bodyPosition = this.physics.vectorFromBox2D(b2BodyPosition);
    	var relTouchVector = touchPosition.subtract(bodyPosition);
    	relTouchVectorMagnitude = relTouchVector.magnitude();
    	relTouchUnitVector = relTouchVector.scale(1 / relTouchVectorMagnitude);

    	// Find car angle
    	var worldCarAngle = -this.body.GetAngle() * tbMath.toDegrees + 90;
    	var worldCarUnitVector = tbVectorFromPolar(worldCarAngle, 1);

    	// Find wheel angle
    	var b2WorldWheelAngle = -(this.body.GetAngle() + this.data.b2WheelAngle);
    	var worldWheelAngle = b2WorldWheelAngle * tbMath.toDegrees + 90;
    	var worldWheelUnitVector = tbVectorFromPolar(worldWheelAngle, 1);

    	// Find offset in angle between touch vector and wheel vector
    	b2AngleOffset = tbMath.angleBetween(worldWheelUnitVector, relTouchUnitVector);

    	// Find the magnitude of the touch vector projected into the wheel direction
		/*touchProjectedMagnitude = relTouchVector.dot(worldWheelUnitVector);
	    var touchIsFrontProjected = (touchProjectedMagnitude >= this.definition.touchProjectedFront);
	    var touchIsRearProjected = (touchProjectedMagnitude < -this.definition.touchProjectedRear);*/

		// Find the angle of the touch
		var b2TouchFrontAngle = this.definition.touchFrontAngle * tbMath.toRadians;
		var b2AngleOffsetCar = tbMath.angleBetween(worldCarUnitVector, relTouchUnitVector);
		var touchIsFrontAngle = b2AngleOffsetCar < b2TouchFrontAngle && b2AngleOffsetCar > -b2TouchFrontAngle;
		var touchIsRearAngle = !touchIsFrontAngle;

		// Base the touch (front or rear) on the projected magnitude and angle of the touch
		var touchIsFront = /*touchIsFrontProjected &&*/ touchIsFrontAngle;
		var touchIsRear = /*touchIsRearProjected &&*/ touchIsRearAngle;

    	// Set acceleration mode based on touch locations
    	if (touchIsRear) {
    		accelerationState = ACC_BRAKE;

    		// Also inverse (negate) the angle offset when touch is rear and use the car direction instead of the wheel direction
    		b2AngleOffset = -tbMath.angleBetween(worldCarUnitVector, relTouchUnitVector.negate());
    	}

    	if (touchIsFront) {
    		accelerationState = ACC_ACCELERATE;
    	}

    	// Check if wheel angle is moving closer to zero
    	if ((this.data.b2WheelAngle !== 0) && tbMath.signOf(this.data.b2WheelAngle) !== tbMath.signOf(b2AngleOffset)) {
    		// Immediately update the wheel angle. If it is now passed 0, set it to 0
    		this.data.b2WheelAngle += b2AngleOffset;
    		if (tbMath.signOf(this.data.b2WheelAngle) === tbMath.signOf(b2AngleOffset)) {
    			this.data.b2WheelAngle = 0;
    		}
    	} else {
    		// Clamp maximal angle offset for this frame
    		var b2ClampedAngleOffset = tbMath.clampAbs(b2AngleOffset, b2MaxAngleChange);

    		//Apply the offset to the wheel angle
			if (touchIsRear) {
				b2ClampedAngleOffset *= this.definition.rearSteerScale;
			}
			this.data.b2WheelAngle += b2ClampedAngleOffset;

			// Clamp the wheel angle
	    	this.data.b2WheelAngle = tbMath.clampAbs(this.data.b2WheelAngle, b2MaxSteerAngle);
		}

    	// Debug info
    	this.debug_touchPosition = touchPosition;
    	this.debug_relTouchVector = relTouchUnitVector;
    	this.debug_relBodyVector = worldCarUnitVector;
    	this.debug_b2AngleOffset = b2AngleOffset;
    } else {
    	this.debug_touchPosition = null;
    }

    // Update the angle of the revolving wheels
    for (i = 0; i < this.wheels.length; i += 1) {
    	if (this.wheels[i].revolving) {
    		this.wheels[i].setAngle(this.data.b2WheelAngle);
    	}
    }

    // Calculate deviation of the touch to the car
    var b2DriftDeviationAngle = this.definition.driftDeviationAngle * tbMath.toRadians;
    var deviation = tbMath.angleBetween(this.getVelocity().normalize(), relTouchUnitVector);
    var deviationT = tbMath.clamp01(Math.abs(deviation) / b2DriftDeviationAngle);

    // Calculate the drift factor
    //  Drift when wheels deviate to much from the direction of the car
	//   - more speed means that the deviation angle at which drift initiates gets smaller
    //   - more speed and larger angle both individually increase the driftFactor
    var driftFactor = 0;
    var minimalDeviation = 1 - Math.pow(speedT, 2);
    if (deviationT > minimalDeviation) {
    	driftFactor = deviationT - minimalDeviation;
    }

    // Calculate force T
    // When making a turn the force should be less
    var touchT = tbMath.clamp01((relTouchVectorMagnitude - this.definition.touchFrontMinMagnitude) / (this.definition.touchFrontMaxMagnitude - this.definition.touchFrontMinMagnitude));
    var forceT = touchT;
    // TODO
    // Make the magnitude of the force dependent on the angle between the touchDirection and the wheelDirection
    //  the larger this deviation the smaller the force should be, but when the car is drifting this should be reduced from this penalty
    //   in other words the more the car is drifting when making a turn the larger the force
    //  also when driving faster the car this force should be higher, because this makes the car not go from 0 km/h to XX km/h to fast

    // Apply force to the wheels when accelerating
    var wheelDampingFactor = 1; // The factor of wheel damping that is applied to the wheels (0 all wheel damping is disabled <-> 1 all wheel damping is allowed)
    if (accelerationState !== ACC_NONE) {

	    // Base force is vector pointing in the direction in which force will be applied to each wheel relative to that wheel.
	    var baseForce = new tbVector(0, 0);
	    var atMaxPosSpeed = currentSpeed >= this.definition.maxSpeed;
	    var atMaxNegSpeed = currentSpeed >= this.definition.maxSpeed * this.definition.rearMaxSpeedFactor;
	    switch (accelerationState) {
	    case ACC_ACCELERATE:
	    	// When accelerating and speed limit has not been reached, go forwards
	    	if (!atMaxPosSpeed) {
	    		// Based speed on touch distance
	    		baseForce = new tbVector(0, -forceT);
	    	}
	    	break;
	    case ACC_BRAKE:
	    	//When braking, but still moving forwards - use increased force, otherwise when going in reverse - use less force
	    	if(this.getLocalVelocity().y < 0) {
	    		baseForce = new tbVector(0, this.definition.brakeForce);
	    		wheelDampingFactor = this.definition.minWheelDampingFactor;
	    	} else if (!atMaxNegSpeed) {
	    		baseForce = new tbVector(0, this.definition.rearForce);
	    	}
	    	break;
	    }

	    // Multiply the baseForce by engine power
	    var enginePower = (this.definition.minPower + (this.definition.maxPower - this.definition.minPower) * speedT) * this.definition.maxSpeed;
	    var powerForce = baseForce.scale(enginePower);
		var b2PowerForce = this.b2VectorPointer;
		b2PowerForce.Set(powerForce.x, powerForce.y);

	    // Apply the powerForce to each powered wheel
	    for(i = 0; i < this.wheels.length; i += 1) {
	    	if (this.wheels[i].powered) {
		        var b2WheelForce = this.wheels[i].body.GetWorldVector(b2PowerForce);
		        this.wheels[i].body.ApplyForceToCenter(b2WheelForce);
	    	}
	    }
    } // end of accelerating
    else {
    	wheelDampingFactor = this.definition.minWheelDampingFactor;
    }

    // Damp the sideways velocity for each wheel based on the driftFactor
    //this.currentParticleWheelIndex = this.currentParticleWheelIndex === undefined ? 0 : this.currentParticleWheelIndex;
    //this.currentParticleWheelIndex = (this.currentParticleWheelIndex + 1) % this.wheels.length;
    for (i = 0; i < this.wheels.length; i += 1) {
    	/**
    	 * @type Wheel
    	 */
    	var wheel = this.wheels[i];

    	// Calculate wheel velocities
    	var b2WheelVelocity = wheel.body.GetLinearVelocity();
    	var wheelVelocity = new tbVector(b2WheelVelocity.get_x(), b2WheelVelocity.get_y());
	    var wheelDirection = wheel.getDirectionVector();
	    var wheelDot = wheelDirection.dot(wheelVelocity);
		var fullDampedWheelVelocity = wheelDirection.scale(wheelDot * this.physics.scale);

		// When the car drifts the wheels should still steer towards the touchPoint however the wheels should not damp all their sideways velocity
		//  The size of the sideways velocity that is damped depends on the speed of the car and the difference in angle (this is the drift factor)
		//  The wheelDamping is also depending on the wheelDampingFactor
		var driftInfluence = this.definition.maxDriftInfluence * driftFactor;
		var wheelDamping = (1 - wheelDampingFactor) + driftInfluence;
		wheelDamping = tbMath.clamp01(wheelDamping);
		var newWheelVelocity = wheelVelocity.scale(wheelDamping).add(fullDampedWheelVelocity.scale(1 - wheelDamping));

		// Set new wheel velocity
		var b2Velocity = this.b2VectorPointer;
		b2Velocity.Set(newWheelVelocity.x, newWheelVelocity.y);
		wheel.body.SetLinearVelocity(b2Velocity);



	    // Particles
		if (currentSpeed > 8 && !wheel.revolving && !DONT_DRAW_PARTICLES) { // && i === this.currentParticleWheelIndex
			//var carPosition = this.physics.vectorFromBox2D(this.body.GetPosition());
			var wheelPosition = this.physics.vectorFromBox2D(wheel.body.GetPosition());
			//var carPosition = this.getPosition();
			var carDirection = this.getDirection();
			var carVelocity = this.getVelocity();

			this.particleDefinition = this.particleDefinition || {};
			var pd = this.particleDefinition;

			var particleAmount = 1, j;
			for (j = 0; j < particleAmount; j += 1) {
				pd.x = wheelPosition.x - carDirection.x * 0 + Math.random() * 15;
				pd.y = wheelPosition.y - carDirection.y * 0 + Math.random() * 15;
				pd.acc_x = -carVelocity.x * speedT * 2 + Math.random() / 2;
				pd.acc_y = -carVelocity.y * speedT * 2 + Math.random() / 2;
				pd.acc_speed = -10000;
				pd.delay = 0;
				pd.color = "rgba(216,180,112," + (0.15 + driftFactor * 0.1) * speedT +  ")";
				pd.image = null;
				pd.duration = 1000;
				pd.sizeStart = 5 + Math.random() * 3;
				pd.sizeEnd = (pd.sizeStart + 10 + 10 * Math.random()) * currentSpeed / 5;
				TG.level.particles.addParticle(pd);
			}
		}
    }

    // Clamp angular velocity
    var av = this.body.GetAngularVelocity(),
    	clamped_av = tbMath.clampAbs(av, this.definition.maxAngularVelocity * tbMath.toRadians * t);
    if (av !== clamped_av) {
    	this.body.SetAngularVelocity(clamped_av);
	}

    // When moving very slow, stop - to prevent endless sliding
    if((currentSpeed < 1) && (currentSpeed > 0) && (accelerationState === ACC_NONE)) {
        this.setSpeed(0);
        currentSpeed = 0;
    }

    // Skidmark
    var skidmarking = (driftFactor > 0.6 || wheelDampingFactor !== 1) && currentSpeed > 0;
    if (skidmarking && !DONT_DRAW_SKIDMARS) {
    	var skidmarkWaiting = this.data.skidmarkingTime < this.definition.minimalSkidmarkingTime;
    	this.data.skidmarkingTime += timePassed;
    	var forceSkidMarkShowingImmediate = wheelDampingFactor !== 1;
    	if (forceSkidMarkShowingImmediate) {
    		this.data.skidmarkingTime = this.definition.minimalSkidmarkingTime;
    	}
    	var skidMarkShowing = this.data.skidmarkingTime >= this.definition.minimalSkidmarkingTime;

    	if (skidMarkShowing) {
    		if (skidmarkWaiting) {
    			this.startNewSkidmark();
    		}
    		this.addToSkidmark();
    	}
    } else {
    	this.data.skidmarkingTime = 0;
    }

	var volume = this.carController.aiControlled?0.25:1;
	if(skidmarking && !this.prevSkidMarking){
		audioController.playDrift(volume);
	}
	if(!skidmarking && this.prevSkidMarking){
		audioController.playDriftExit(volume);
	}
	this.prevSkidMarking = skidmarking;

    // Set some debug values for the skidmarks
    this.debug_skidmarkingTime = this.data.skidmarkingTime;

	if(Math.random() < 0.005 && currentSpeed > 0) {
		audioController.playThrottle(this.carController.aiControlled?0.3:1);
	}
};

// handleEndStep is called each step after processing other events (before draw).
Car.prototype.handleEndStep = function(timePassed) {
	"use strict";

	this.physics.getBodyData(this.body, this.bodyData);
	this.canvas.drawTokens = true;
};

Car.prototype.handleRemove = function() {
	"use strict";

	Box2D.destroy(this.b2VectorPointer);
};

Car.prototype.addToSkidmark = function() {
	"use strict";
	this.skidmarks[this.skidmarkOffset].addState();
};

Car.prototype.startNewSkidmark = function() {
	"use strict";
	// Jump to the skidmark next offset index
	this.skidmarkOffset = (this.skidmarkOffset + 1) % this.skidmarkCount;

	// Vanish last skidmark if it exists
	if (this.skidmarks[this.skidmarkOffset] !== undefined) {
		this.skidmarks[this.skidmarkOffset].vanish();
	}

	// Create new skidmark
	this.skidmarks[this.skidmarkOffset] = new Skidmark(this);
};

// handleDraw is called at the end of a step to draw the token.
Car.prototype.handleDraw = function() {
	"use strict";

	// Set context
	var context = tbGraphics.context;
	context.save();
	context.translate(-ScrollingCamera.scroll.x, -ScrollingCamera.scroll.y);

	// Draw wheels
	var wheel, position, i;
	for (i = 0; i < this.wheels.length; i += 1) {
		wheel = this.wheels[i];

		position = this.physics.vectorFromBox2D(wheel.body.GetPosition());
		var angle = -wheel.body.GetAngle() * 180 / Math.PI + 90;

		s_car_wheel.drawExt(0, position.x, position.y, 1, 1, angle, 1);
	}

	// Draw car
	this.definition.image.drawExt(0, this.bodyData.x, this.bodyData.y, 1, 1, - this.bodyData.angle * 180 / Math.PI + 90, 1);

	context.restore();
};

//******************************************************
//*****    Script Resource: Wheel
//******************************************************

/* globals
 Box2D
 */
// ******************************
// Tingly Builder JavaScript file
// ******************************

 /*
Wheel object
------------ 
car - car this wheel belongs to
x - horizontal position in meters relative to car's center
y - vertical position in meters relative to car's center
width - width in meters
length - length in meters
revolving - does this wheel revolve when steering?
powered - is this wheel powered?
*/
var Wheel = function(car, /*x, y, width, length, revolving, powered*/ definition ){
	"use strict";
	
	//Car properties
	this.car = car;
	this.physics = car.physics;
    
    //Scale
    var scale = this.physics.scale;
	
	//Definition
	var b2Position = new Box2D.b2Vec2(definition.x * scale, definition.y * scale);
	this.width = definition.width * scale;
	this.length = definition.length * scale;
    this.revolving = definition.revolving;
    this.powered = definition.powered;

    //Create the body definition
    var bodyDef = new Box2D.b2BodyDef();
    bodyDef.set_type(Box2D.b2_dynamicBody);
    bodyDef.set_position(this.car.body.GetWorldPoint(b2Position));
    bodyDef.set_angle(this.car.body.GetAngle());
    
    //Create the shape
    var shape = new Box2D.b2PolygonShape();
    shape.SetAsBox(this.width / 2, this.length / 2);
    
    //Create the fixture definition
    var fixtureDef = new Box2D.b2FixtureDef();
    fixtureDef.set_shape(shape);
    fixtureDef.set_isSensor(1);//wheel does not participate in collision calculations: resulting complications are unnecessary
	fixtureDef.set_density(1);

	//Create the body
	this.body = this.physics.world.CreateBody(bodyDef);
	this.body.CreateFixture(fixtureDef);
	this.body.SetSleepingAllowed(1);
	this.body.SetAwake(1);
	this.body.SetActive(1);
	
	//Add joint to connect wheel to the body
	var jointDef;
	if (this.revolving) {
		//Create Revolute Joint
		jointDef = new Box2D.b2RevoluteJointDef();
		jointDef.Initialize(this.car.body, this.body, this.body.GetWorldCenter());
		jointDef.set_enableMotor(0);
	} else {
		//Create Prismatic Joint
		jointDef = new Box2D.b2PrismaticJointDef();
		jointDef.Initialize(this.car.body, this.body, this.body.GetWorldCenter(), new Box2D.b2Vec2(1, 0));
		jointDef.set_enableLimit(1);
		jointDef.set_lowerTranslation(0);
		jointDef.set_upperTranslation(0);
	}
	this.wheelJoint = this.physics.world.CreateJoint(jointDef);
	
	//Destroy used objects
	Box2D.destroy(bodyDef);
	Box2D.destroy(shape);
	Box2D.destroy(fixtureDef);
	Box2D.destroy(jointDef);
	Box2D.destroy(b2Position);
};

Wheel.prototype.setAngle = function(angleRadians) {
	"use strict";
	
    this.body.SetTransform(this.body.GetPosition(), this.car.body.GetAngle() + angleRadians);
};

Wheel.prototype.getDirectionVector = function() {
	"use strict";
	
	return tbVectorFromPolar(-this.body.GetAngle() / Math.PI * 180 + 90, 1);
};
//******************************************************
//*****    Token Resource: Skidmark
//******************************************************

/*globals
   ScrollingCamera,
   DONT_DRAW_SKIDMARS
 */
// ***************************************
// Definition of game token Skidmark
// ***************************************

// The constructor for the Skidmark game token. 


// Creates a new mark of the current state of the given skidmark object
// It contains an position for the each of the wheel
var Mark = function(skidmark) {
	"use strict";
	
	this.skidmark = skidmark;
	this.wheelMarks = [];
	
	var scale = this.skidmark.car.physics.scale;
	var wheels = this.skidmark.car.wheels;
	
	var wheelId;
	for (wheelId = 0; wheelId < wheels.length; wheelId += 1) {
		var wheelMark = {};
		wheelMark.position = new tbVector(0, 0);
		var wheelBody = wheels[wheelId].body;
		var b2WheelPosition = wheelBody.GetPosition();
		wheelMark.position.x = b2WheelPosition.get_x() / scale;
		wheelMark.position.y = b2WheelPosition.get_y() / scale;
		//wheelMark.cp = tbVectorFromPolar(wheelBody.GetAngle() * Car.toDegrees + 90, 2);
		this.wheelMarks.push(wheelMark);
	}
};

var Skidmark = function(car) {
	"use strict";
	
	// Properties used by the engine
	this.depth = -2;	
	this.layer = 0;
	this.visible = true;
	this.active = true;

	// marks
	this.car = car;
	this.marks = [];
	this.vanishing = false;
	this.vanishTime = 0;
	this.vanishDuration = 3000;

	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, ScrollingCamera.fullscreen ? TG.gameBackgroundLayer : TG.gameLayer);
};

Skidmark.prototype.addState = function() {
	"use strict";

	var mark = new Mark(this);
	if (this.marks.length === 0) {
		this.marks.push(mark);
	} else {
		var oldPosition = this.marks[this.marks.length - 1].wheelMarks[0].position;
		var newPosition = mark.wheelMarks[0].position;
		var sqrDistance = oldPosition.distanceSquared(newPosition);
		
		var minPixelDistance = 20;
		if (sqrDistance > minPixelDistance * minPixelDistance) {
			this.marks.push(mark);
		}
	}
};

//handleEndStep is called each step after processing other events (before draw).
Skidmark.prototype.handleEndStep = function(timePassed) { 
	"use strict";

	if (this.vanishing === true) {
		this.vanishTime += timePassed;
		
		if (this.vanishTime > this.vanishDuration) {
			tbGame.removeToken(this);
		}
	}
	
	this.canvas.drawTokens = true;
};

Skidmark.prototype.vanish = function() {
	"use strict";
	
	this.vanishing = true;
};

// handleDraw is called at the end of a step to draw the token.
Skidmark.prototype.handleDraw = function() {
	"use strict";
	
	// Only draw if enough marks
	if (this.marks.length < 2 || DONT_DRAW_SKIDMARS) {
		return;
	}
	
	var startI = Math.max(0, this.marks.length - 20),
		endI = this.marks.length - 1,
		halfI = Math.round((startI + endI) / 2);
	
	// Only draw if on screen
	var markStartPosition = this.marks[startI].wheelMarks[0].position,
		markHalfwayPosition = this.marks[halfI].wheelMarks[0].position,
		markEndPosition = this.marks[endI].wheelMarks[0].position;
	var screenRect = { // Rectangle B: Screen Rectangle
			x: ScrollingCamera.scroll.x,
			y: ScrollingCamera.scroll.y,
			width : tbGraphics.canvas.width,
			height: tbGraphics.canvas.height,
			contains: function(point) {
				return (point.x >= this.x 
					 && point.y >= this.y 
					 && point.x <= this.x + this.width 
					 && point.y <= this.y + this.height);
			}
	};
	if (!(screenRect.contains(markStartPosition) || screenRect.contains(markHalfwayPosition) || screenRect.contains(markEndPosition))) {
		return;
	}
	
	// Draw the marks
	var context = tbGraphics.context;
	context.save();
	context.translate(-ScrollingCamera.scroll.x, -ScrollingCamera.scroll.y);
	
	context.beginPath();
	context.globalAlpha = 1 - (this.vanishTime / this.vanishDuration);
	
	var wheelId;
	for (wheelId = 0; wheelId < this.car.wheels.length; wheelId += 1) {
		var i;
		context.moveTo(this.marks[startI].wheelMarks[wheelId].position.x, this.marks[startI].wheelMarks[wheelId].position.y);
		for (i = startI + 1; i < this.marks.length; i += 1) {
			var wheelMark = this.marks[i].wheelMarks[wheelId];
			context.lineTo(wheelMark.position.x, wheelMark.position.y);
		}
	}
	
	context.lineWidth = 4;
	context.lineCap = "round";
	context.lineJoin = "round";
	context.strokeStyle = "rgba(120, 100, 63, 0.6)";
	context.stroke();
	
	context.restore();
};
//******************************************************
//*****    Token Resource: DirectionalArrow
//******************************************************

/*globals
 ScrollingCamera,
 s_car_directional_arrow
 */
// ***************************************
// Definition of game token DirectionalArrow
// ***************************************

// The constructor for the DirectionalArrow game token.
var DirectionalArrow = function(carController) {
	"use strict";
	// Properties used by the engine
	this.depth = -2.5;
	this.layer = 0;
	this.visible = true;
	this.active = true;

	// Directional arrow properties
	this.carController = carController;
	this.car = carController.car;

	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, ScrollingCamera.fullscreen ? TG.gameBackgroundLayer : TG.gameLayer);
};

// handleDraw is called at the end of a step to draw the token.
DirectionalArrow.prototype.handleDraw = function() {
	"use strict";

	if (this.carController.aiControlled || this.carController.finger === -1) {
		return;
	}

	// Set context
	var context = tbGraphics.context;
	context.save();
	context.translate(-ScrollingCamera.scroll.x, -ScrollingCamera.scroll.y);

	// Find the angle to from the car to its touch position
	var carPosition = this.car.getPosition(),
		touchPosition = this.car.data.touchPosition;
	if (touchPosition === null) {
		angle = this.car.getAngle();
	} else {
		var angle = touchPosition.subtract(carPosition).direction();
	}

	// Draw directional arrow
	var dx = carPosition.x,
		dy = carPosition.y,
		xScale = 1,
		yScale = 1,
		alpha = 0.4;
	s_car_directional_arrow.drawExt(0, dx, dy, xScale, yScale, angle, alpha);

	context.restore();
};

//******************************************************
//*****    Script Resource: Difficulties
//******************************************************

var Difficulties = {};

Difficulties.getDifficultyString = function(difficulty) {
	"use strict";
	
	switch (difficulty) {
		case -1: return "CONSTANT";
		case 0: return "EASY";
		case 1: return "EASY_MEDIUM";
		case 2: return "MEDIUM";
		case 3: return "MEDIUM_HARD";
		case 4: return "HARD";
	}
};

Difficulties.speedMappings = {};

Difficulties.speedMappings["CONSTANT"] =  
	[{distance: 0, 		speed: 1}];

Difficulties.speedMappings["EASY"] = 
	[{distance: -2400, 	speed: 1.2},
	 {distance: -1000, 	speed: 1},  
     {distance: 500, 	speed: 0.75}];

Difficulties.speedMappings["EASY_MEDIUM"] = 
	[{distance: -1900, 	speed: 1.2},
     {distance: -750, 	speed: 1},
     {distance: 1000, 	speed: 0.75}];

Difficulties.speedMappings["MEDIUM"] = 
	[{distance: -1400, 	speed: 1.2},
     {distance: -500, 	speed: 1},
     {distance: 1500,	speed: 0.75}];

Difficulties.speedMappings["MEDIUM_HARD"] = 
	[{distance: -1200, 	speed: 1.3},
     {distance: -400, 	speed: 1},
     {distance: 400, 	speed: 1},
     {distance: 1200, 	speed: 0.85}];

Difficulties.speedMappings["HARD"] = 
	[{distance: -1200, 	speed: 1.4},
     {distance: -400, 	speed: 1.1},
     {distance: 0, 		speed: 1},
     {distance: 600, 	speed: 1},
     {distance: 1200, 	speed: 0.85}];

//******************************************************
//*****    Token Resource: RaceOverview
//******************************************************

/* globals
   s_race_overview,
   f_race_overview
 */
// ***************************************
// Definition of game token RaceOverview
// ***************************************

// The constructor for the RaceOverview game token.
var RaceOverview = function(carControllers) {
	"use strict";

	// Properties used by the engine
	this.depth = -99;
	this.layer = 0;
	this.visible = true;
	this.active = true;

	// Race Overview properties
	this.finger = -1;
	this.rows = [];
	var i;
	for (i = carControllers.length - 1; i >= 0; i -= 1) {
		// Create a row for each car controller
		var row = {};
		row.image = carControllers[i].car.definition.image;
		row.place = carControllers[i].place;
		row.isPlayer = carControllers[i].isPlayer;
		row.name = carControllers[i].car.definition.name;

		// Add it to the rows
		this.rows.push(row);
	}
	this.surface = this.createSurface();


	// Fading
	this.timeShowing = 0;
	this.fadeInTime = 1500;
	this.fadeInEase = tbEase.easeLinear;

	// Add it to the game engine
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, TG.gameEffectsLayer);
};

RaceOverview.prototype.createSurface = function() {
	"use strict";

	var surface = new tbSurface(s_race_overview.width, s_race_overview.height);
	surface.setTarget();
	surface.xOrigin = surface.width / 2;
	surface.yOrigin = surface.height / 2;

	// Draw background
	s_race_overview.drawSimple(0, 0, 0);

	// Draw level text
	f_race_overview.setAlign("center");
	// Race XXXX overview
	var titleText = TG.dictionary.getText("raceOverviewHeader", "<raceOverviewHeader>");
	titleText = titleText.replace("<VALUE>", (TG.level.levelIdx + 1) + "");
	f_race_overview.drawSimple(titleText, surface.width / 2, 25);

	// Draw rows
	var rowPlaceX = 60, rowNameX = 125, rowCarX = surface.width - 140, rowY = [100, 170, 240, 310];
	var i;
	for (i = 0; i < this.rows.length; i += 1) {
		var row = this.rows[i];

		f_race_overview.setAlign("left");

		// Draw place
		f_race_overview.drawSimple("" + row.place, rowPlaceX, rowY[i]);

		// Draw name
		var oldColor = f_race_overview.getFillColor();
		if (row.isPlayer) {
			f_race_overview.setFillColor("green");
		}
		f_race_overview.drawSimple(row.name, rowNameX, rowY[i]);
		f_race_overview.setFillColor(oldColor);

		// Draw car
		row.image.drawSimple(0, rowCarX, rowY[i] + row.image.height / 4);
	}

	// Draw "click to continue"
	f_race_overview.setAlign("center");
	var clickToContinueText = TG.dictionary.getText("raceOverviewInfo", "<raceOverviewInfo>");
	f_race_overview.drawSimple(clickToContinueText, surface.width / 2, surface.height - 120);

	surface.resetTarget();
	return surface;
};

//handleTouchDown is called when a touch is started or if a mouse button is pressed.
RaceOverview.prototype.handleTouchDown = function(finger, x, y) {
	"use strict";

	if (this.finger !== -1) {
		return;
	}

	this.finger = finger;
};

//handleTouchUp is called when a touch is ended or if a mouse button is released.
RaceOverview.prototype.handleTouchUp = function(finger, x, y) {
	"use strict";

	// Check if released the correct finger
	if (this.finger !== finger) {
		return;
	}
	this.finger = -1;

	// Check if release is outside the rect, then return
	var cw = this.canvas.width / 2, sw = this.surface.width / 2,
		ch = this.canvas.height/ 2, sh = this.surface.height/ 2;
	if (!(x > cw - sw && x < cw + sw &&
		  y > ch - sh && y < ch + sh)) {
		return;
	}

	// Correct tap so do more:
	if (this.timeShowing > this.fadeInTime) {
		// Only allow stop if fully faded in
		this.stop();
	} else {
		// else skip the fading
		this.timeShowing = this.fadeInTime;
	}
};

RaceOverview.prototype.stop = function() {
	"use strict";
	this.active = false;
	TG.level._endLevel();
};

// handleEndStep is called each step after processing other events (before draw).
RaceOverview.prototype.handleEndStep = function(timePassed) {
	"use strict";

	this.canvas.drawTokens = true;
	this.timeShowing += timePassed;
};

// handleDraw is called at the end of a step to draw the token.
RaceOverview.prototype.handleDraw = function() {
	"use strict";

	var context = tbGraphics.context;
	context.save();

	// Set global alpha
	var alpha = 1;
	if (this.timeShowing < this.fadeInTime) {
		alpha = this.fadeInEase(this.timeShowing, 0, 1, this.fadeInTime);
	}

	// Draw surface
	this.surface.drawAlpha(this.canvas.width / 2, this.canvas.height / 2, alpha);

	context.restore();
};

//******************************************************
//*****    Script Resource: tbMathExt
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

// Extension functions for tbMath created by Simon Karman

// 2D-Cross product of unit vectors v and w
tbMath.cross = function (v, w) {
	"use strict";
    return (v.x * w.y) - (v.y * w.x);
};

// Angle between unit vectors u1 and u2 in radians 
tbMath.angleBetween = function(u1, u2) {
	"use strict";
	var _cross = (u1.x * u2.y) - (u1.y * u2.x);// inline tbMath.cross(u1, u2);
	var _dot = (u1.x * u2.x + u1.y * u2.y); //inline u1.dot(u2)
	return Math.atan2(_cross, _dot);
};

tbMath.signOf = function(number) {
	"use strict";
	return number && number / Math.abs(number);
};

tbMath.clamp = function(value, min, max) {
	"use strict";
	if (value < min) { return min; }
	if (value > max) { return max; }
	return value;
};

tbMath.clamp01 = function(value) {
	"use strict";
	if (value < 0) { return 0; }
	if (value > 1) { return 1; }
	return value;
};

tbMath.clampAbs = function(value, max) {
	"use strict";
	if (value < -max) { return -max; }
	if (value > max)  { return max; }
	return value;
};

tbMath.lerp = function (from, to, t) {
	"use strict";
	return from + t * (to - from);
};

tbMath.inverseLerp = function (from, to, value) {
	"use strict";
	if (from < to) {
		if (value < from) {
			return 0;
		} else if (value > to) {
			return 1;
		}
	}
	else {
		if (value < to) {
			return 1;
		} else if (value > from) {
			return 0;
		}
	}
	return (value - from) / (to - from);
};

tbMath.toDegrees = 180 / Math.PI;
tbMath.toRadians = Math.PI / 180;
//******************************************************
//*****    Script Resource: Utils
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

// String starts with
if (typeof String.prototype.startsWith !== "function") {
	String.prototype.startsWith = function(str) {
		"use strict";
		return this.slice(0, str.length) === str;
	};
}
//******************************************************
//*****    Script Resource: Particles
//******************************************************

/* global
	ScrollingCamera,
	DONT_DRAW_PARTICLES
 */

function Particle() {
	"use strict";

	this.active = false;
	this.position = new tbVector();
	this.speed = new tbVector();
	this.acceleration = new tbVector();

}

Particle.airFriction = 0.4;
Particle.gravity = 0;

Particle.prototype.init = function(definition) {
	"use strict";
	
	// Set position, speed and acceleration
	this.position.x = definition.x === undefined ? 0 : definition.x;
	this.position.y = definition.y === undefined ? 0 : definition.y;
	this.speed.x = 0;
	this.speed.y = 0;
	if (definition.acc_speed === undefined) {
		this.acceleration.x = 0;
		this.acceleration.y = 0;
	} else {
		this.acceleration.x = definition.acc_x === undefined ? 0 : definition.acc_x;
		this.acceleration.y = definition.acc_y === undefined ? 0 : definition.acc_y;
		this.acceleration.normalizeDirect();
		this.acceleration.scaleDirect(definition.acc_speed);
	}

	// Set visuals
	this.image = !definition.image ? "circle" : definition.image;
	this.subimage = 0;
	this.color = definition.color === undefined ? "rgba(255, 0, 255, 0.4)" : definition.color;
	this.alpha = 1;
	this.sourceCircle = {};

	this.sizeStart = definition.sizeStart === undefined ? 1.5 : definition.sizeStart;
	this.sizeEnd = definition.sizeEnd === undefined ? this.sizeStart : definition.sizeEnd;
	
	// Alive
	this.active = true;
	this.timer = -definition.delay;
	this.duration = definition.duration || 750;

};

Particle.prototype.update = function(timePassed) {
	"use strict";
	if (this.active) {
		this.timer += timePassed;

		if (this.timer > 0) {
			var timePassedSeconds = timePassed / 1000;

			this.acceleration.x += -this.speed.x * Particle.airFriction * timePassedSeconds;
			this.acceleration.y += -this.speed.y * Particle.airFriction * timePassedSeconds;

			this.acceleration.y += Particle.gravity;

			this.speed.x += this.acceleration.x * timePassedSeconds;
			this.speed.y += this.acceleration.y * timePassedSeconds;

			this.position.x += this.speed.x * timePassedSeconds;
			this.position.y += this.speed.y * timePassedSeconds;

			this.acceleration.x = 0;
			this.acceleration.y = 0;

			this.alpha = 1 - (this.timer / this.duration);
			this.size = tbEase.easeLinear(this.timer, this.sizeStart, this.sizeEnd - this.sizeStart, this.duration);

			if (this.timer > this.duration) {
				this.active = false;
			}
		}
	}
};

Particle.prototype.draw = function() {
	"use strict";
	if (this.active) {

		if (this.timer > 0) {

			tbGraphics.context.globalAlpha = this.alpha;
			
			// Calculate position
			var x = this.position.x - ScrollingCamera.scroll.x; 
			var y = this.position.y - ScrollingCamera.scroll.y;
			var r = this.size;
			
			// Check if visible
			this.sourceCircle.x = this.position.x;
			this.sourceCircle.y = this.position.y;
			this.sourceCircle.radius = r;
			if (ScrollingCamera.isOverlappingScreen(this.sourceCircle)) {

				// Draw graphic
				if (this.image === "circle") {
					tbGraphics.drawDisk(x, y, r, this.color);
				} else if (this.image === "rectangle") {
					tbGraphics.drawRectangle(x - r, y - r, r * 2, r * 2, this.color);
				} else {
					this.image.drawSimple(this.subimage, x, y);
				}
				
			}

			tbGraphics.context.globalAlpha = 1;
		}
	}
};

function Particles() {
	"use strict";

	this.visible = true;
	this.active = true;

	var INIT_PARTICLE_COUNT = 100, i;
	this.particles = new Array(INIT_PARTICLE_COUNT);
	for (i = 0; i < INIT_PARTICLE_COUNT; i += 1) {
		this.particles[i] = new Particle();
	}
	
	this.depth = -4; //2.5 for behind car
	tbGame.addToken(this);
	tbGame.addTokenTags(this, ["game", "item"]);
	TG.functions.setLayerAndCanvas(this, ScrollingCamera.fullscreen ? TG.gameBackgroundLayer : TG.gameLayer);
}


Particles.prototype.addParticle = function(definition) {
	"use strict";
	/**
	 * @type Particle
	 */
	var particle = null;

	for (var i = 0; i < this.particles.length; ++i) {
		if (!this.particles[i].active) {
			particle = this.particles[i];
		}
	}

	if (!particle) {
		particle = new Particle();
		this.particles.push(particle);
	}

	particle.init(definition);
};


Particles.prototype.handleBeginStep = function(timePassed) {
	"use strict";

	for (var i = 0; i < this.particles.length; ++i) {
		if (this.particles[i].active) {
			this.particles[i].update(timePassed);
		}
	}

	this.canvas.drawTokens = true;

};

Particles.prototype.handleDraw = function() {
	"use strict";
	
	if (DONT_DRAW_PARTICLES){
		return;
	}
	
	for (var i = 0; i < this.particles.length; ++i) {
		if (this.particles[i].active) {
			this.particles[i].draw();
		}
	}
};
//******************************************************
//*****    Script Resource: SpriteAnimations
//******************************************************




function SpriteAnimation() {
	"use strict";

	this.image = null;
	this.duration = 0;
	this.timer = 0;
	this.active = false;
	this.x = 0;
	this.y = 0;
}

SpriteAnimation.prototype.init = function(image, fps, x, y) {
	"use strict";

	this.image = image;
	this.duration = image.number / fps * 1000;
	this.timer = 0;
	this.active = true;
	this.x = x;
	this.y = y;
};

function SpriteAnimations() {
	"use strict";
	this.visible = true;
	this.active = true;

	this.depth = -3.5;

	this.animations = [];

	TG.functions.setLayerAndCanvas(this, ScrollingCamera.fullscreen ? TG.gameBackgroundLayer : TG.gameLayer);

	tbGame.addToken(this);
	tbGame.addTokenTags(this, "game");
}

SpriteAnimations.prototype.handleBeginStep = function(timePassed) {
	"use strict";
	for (var i = 0; i < this.animations.length; ++i) {
		var animation = this.animations[i];
		if (animation.active) {
			animation.timer += timePassed;
			if (animation.timer >= animation.duration) {
				animation.active = false;
			}
		}
	}
};

SpriteAnimations.prototype.handleDraw = function() {
	"use strict";

	for (var i = 0; i < this.animations.length; ++i) {
		var animation = this.animations[i];
		if (animation.active) {
			animation.image.drawSimple(Math.floor(animation.timer / animation.duration * animation.image.number), animation.x - ScrollingCamera.scroll.x, animation.y - ScrollingCamera.scroll.y);
		}
	}

	this.canvas.drawTokens = true;
};

SpriteAnimations.prototype.addSpriteAnimation = function(image, fps, x, y) {
	"use strict";
	/**
	 * @type SpriteAnimation
	 */
	var animation = null;

	for (var i = 0; i < this.animations.length; ++i) {
		if (!this.animations[i].active) {
			animation = this.animations[i];
		}
	}

	if (!animation) {
		animation = new SpriteAnimation();
		this.animations.push(animation);
	}

	animation.init(image, fps, x, y);

};

//******************************************************
//*****    Token Resource: AudioController
//******************************************************

// ***************************************
// Definition of game token AudioController
// ***************************************

// The constructor for the AudioController game token.
var AudioController = function() {
	"use strict";
	// Properties used by the engine
	this.depth = 0;
	this.layer = 0;
	this.visible = false;
	this.active = true;
	// Add it to the game engine
	tbGame.addToken(this);

	this.crowdTag = -1;

	this.carHitTimer = 0;
	this.carHitSounds = [a_car_hit_01, a_car_hit_02, a_car_hit_03];

	this.driftTimer = 0;
	this.driftSounds =   [a_drift_01, a_drift_02, a_drift_03];

	this.driftExitTimer = 0;
	this.driftExitSounds =  [a_drift_driveoff_01, a_drift_driveoff_02];

	this.throttleTimer = 0;
	this.throttleSounds = [a_engine_throttle_01, a_engine_throttle_02];

	//a_ambience_crowd.addTags(["music"]);
	a_music.addTags(["customBackground"]);
	tbAudio.setGain("customBackground", 0);
};

var audioController = new AudioController();

// handleAdd is called when the token is (re-) added to the game.
AudioController.prototype.startCrowd = function() {
	"use strict";
	if(this.crowdTag === -1){
		this.crowdTag = tbAudio.play(a_ambience_crowd, 0, 1000);
		tbAudio.setLooping(this.crowdTag, true);
	}
};

AudioController.prototype.stopCrowd = function() {
	" use strict";
	if(this.crowdTag !== -1){
		tbAudio.stop(this.crowdTag, 250);
		this.crowdTag = -1;
	}
};

// handleAdd is called when the token is (re-) added to the game.
AudioController.prototype.startMusic = function() {
	"use strict";
	tbAudio.rewind("customBackground");
	tbAudio.fade("customBackground", 1, 500);
	this.carHitTimer = 7500;
};

AudioController.prototype.stopMusic = function() {
	" use strict";
	tbAudio.fade("customBackground", 0, 500);
};

AudioController.prototype.playCarHit = function() {
	" use strict";
	if(this.carHitTimer <= 0 ){
		this.carHitTimer = 1500;
		var idx = Math.floor(Math.random()*this.carHitSounds.length);
		this.playSfx(this.carHitSounds[idx], 0);
	}
};

AudioController.prototype.playDrift = function(volume) {
	" use strict";
	if(this.driftTimer <= 0 ){
		this.driftTimer = 0;
		var idx = Math.floor(Math.random()*this.driftSounds.length);
		var id = this.playSfx(this.driftSounds[idx], 0);
		tbAudio.setGain(id, volume);
	}
};

AudioController.prototype.playDriftExit = function(volume) {
	" use strict";
	if(this.driftExitTimer <= 0 ){
		this.driftExitTimer = 0;
		var idx = Math.floor(Math.random()*this.driftExitSounds.length);
		var id = this.playSfx(this.driftExitSounds[idx], 0);
		tbAudio.setGain(id, volume);
	}
};

AudioController.prototype.playThrottle = function(volume) {
	" use strict";
	if(this.throttleTimer <= 0 ){
		this.throttleTimer = 750;
		var idx = Math.floor(Math.random()*this.throttleSounds.length);
		var id =  this.playSfx(this.throttleSounds[idx], 0);
		tbAudio.setGain(id, volume);
	}
};

// handleRemove is called when the token is removed from the game.
AudioController.prototype.playSfx = function(sfx, delay, oneInstance) {
	"use strict";
	oneInstance = oneInstance || false;
	if(oneInstance){
		if(tbAudio.getInstances(sfx.name).length > 0) {
			return;
		}
	}
	return tbAudio.play(sfx, delay);
};

// handleEndStep is called each step after processing other events (before draw).
AudioController.prototype.handleEndStep = function(timePassed) {
	"use strict";
	if(this.carHitTimer > 0) {
		this.carHitTimer -= timePassed;
	}

	if(this.driftTimer > 0) {
		this.driftTimer -= timePassed;
	}

	if(this.driftExitTimer > 0) {
		this.driftExitTimer -= timePassed;
	}

	if(this.throttleTimer > 0) {
		this.throttleTimer -= timePassed;
	}
};

//******************************************************
//*****    Script Resource: game_version
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

TG.version = TG.version || {};
TG.version["game"] = "1.0.1";

//******************************************************
//*****    Script Resource: theme_version
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

TG.version = TG.version || {};
TG.version["theme"] = "1.0.0";
//******************************************************
//*****    Script Resource: game_ui_settings_level_override
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

/* global
	tgScale,
	f_themeDefault,
	f_game_ui,
	s_ui_background
	*/

/* exported GameUISettings */
var GameUISettings = GameUISettings || {};

var GameUISettingsOffsets = {
	X: tgScale(29),
	Y: tgScale(40)
};

GameUISettings.Level = {
	background: {
		image: s_ui_background,
		image_x: tgScale(0),
		image_y: tgScale(34),
		backgroundElementsAsComponents: true,
		elements: [{
			textKey: "race_place",
			x: tgScale(6) + GameUISettingsOffsets.X,
			y: tgScale(12) + GameUISettingsOffsets.Y,
			w: tgScale(100),
			h: tgScale(28),
			textYOffsetFactor: 0.2,
			font: f_themeDefault,
			font_properties: {
				fontCase: "lower",
				fontSize: 22,
				align: "center",
				baseline: "top"
			}
		}, {
			textKey: "race_lap",
			x: tgScale(6) + GameUISettingsOffsets.X,
			y: tgScale(248) + GameUISettingsOffsets.Y,
			w: tgScale(100),
			h: tgScale(20),
			textYOffsetFactor: 0.2,
			font: f_themeDefault,
			font_properties: {
				fontCase: "lower",
				fontSize: 22,
				align: "center",
				baseline: "top"
			}
		}]
	},
	pauseButton: {
		x: tgScale(6) + GameUISettingsOffsets.X,
		y: tgScale(424) + GameUISettingsOffsets.Y
	},
	customComponents: {
	    "place": {
	        componentType: "GameUIText",
	        text: "1",
	        x: tgScale(6) + GameUISettingsOffsets.X,
	        y: tgScale(45) + GameUISettingsOffsets.Y,
	        w: tgScale(100),
	        h: tgScale(90),
	        textYOffsetFactor: 0.2,
	        font: f_game_ui,
	        font_properties: {
	        	fillColor: "white",
	            fontSize: tgScale(80),
	            fontCase: "upper",
	            align: "center",
	            baseline: "middle"
	        }
	    },
	    "lap": {
	        componentType: "GameUIText",
	        text: "1",
	        x: tgScale(2) + GameUISettingsOffsets.X,
	        y: tgScale(270) + GameUISettingsOffsets.Y,
	        w: tgScale(50),
	        h: tgScale(60),
	        textYOffsetFactor: 0.2,
	        font: f_game_ui,
	        font_properties: {
	            fillColor: "white",
	            fontSize: tgScale(50),
	            fontCase: "upper",
	            align: "right",
	            baseline: "bottom"
	        }
	    },
	    "laps": {
	        componentType: "GameUIText",
	        text: "/4",
	        x: tgScale(52) + GameUISettingsOffsets.X,
	        y: tgScale(270) + GameUISettingsOffsets.Y,
	        w: tgScale(50),
	        h: tgScale(60),
	        textYOffsetFactor: 0.2,
	        font: f_game_ui,
	        font_properties: {
	            fillColor: "#737572",
	            fontSize: tgScale(35),
	            fontCase: "upper",
	            align: "left",
	            baseline: "bottom"
	        }
	    },
		"stars": {
	        componentType: "GameUIStarRow",
	        x: tgScale(0) + GameUISettingsOffsets.X,
	        y: tgScale(182) + GameUISettingsOffsets.Y,
			emptyImage: s_ui_star_empty,
			filledImage:s_ui_star_filled,
			amount : 3,
			spacing : tgScale(40)
	    }
	}
};

/* exported gameUISettingsVar */
var gameUISettingsVar = GameUISettings.Level;

//******************************************************
//*****    Script Resource: GameUIStarRow
//******************************************************

/* global
    Inheritance,
    GameUIComponent,
    tbImage
 */

/**
 * @constructor GameUIStarRow
 * @base GameUIComponent
 */
function GameUIStarRow(controller, settings) {
    "use strict";

    this.originalSettings = settings;
    this.settings = {};

    for (var key in settings) {
        this.settings[key] = settings[key];
    }

    this.emptyImage = this.settings.emptyImage;
	this.filledImage = this.settings.filledImage;
    this.amount = settings.amount;
	this.spacing = settings.spacing;
	this.number = 0;

    if (this.settings.subtractOrigin) {
        this.settings.x += this.image.xOrigin;
        this.settings.y += this.image.yOrigin;
    }

	this.height = this.emptyImage.height;
	this.width = this.emptyImage.width + this.spacing*(this.amount-1);

    GameUIComponent.call(this, controller, this.settings, this.settings.x, this.settings.y,this.width, this.height);

}

Inheritance.copyPrototype(GameUIComponent, GameUIStarRow);
GameUIController.registerComponent("GameUIStarRow", GameUIStarRow);

GameUIStarRow.prototype.setNumber = function(number) {
    "use strict";
    if (this.number !== number) {
        this.number = Math.max(0, Math.min(this.amount, number));
        this.controller.redraw = true;
    }
};

GameUIStarRow.prototype.handleDraw = function(offset_x, offset_y) {
    "use strict";
	var ii, xx, yy, scale, alpha;
	scale = this.drawing.scale;
	alpha = this.drawing.alpha;
	if(this.amount > 0) {
		for(ii = 0; ii < this.amount; ii++){
			xx = this.x + offset_x + this.drawing.offset_x + ii * this.spacing;
			yy = this.y + offset_y + this.drawing.offset_y;

			this.emptyImage.drawExt(0, xx, yy, scale, scale, 0, alpha);

			if(ii < this.number) {
				this.filledImage.drawExt(0, xx, yy, scale, scale, 0, alpha);
			}
		}

		if (this.controller.drawDebugInfo) {
			tbGraphics.drawRectangle(this.x + offset_x - 1, this.y + offset_y - 1, this.width - 2, this.height - 2,
					"red", true);
		}
	}
};

//******************************************************
//*****    Script Resource: hooks
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

TG.hooks = TG.hooks || {};
var publisherSettings = window["publisher"];
var _firstAdsInit = false;
var _standardAdsShow = false;

TG.hooks.handleGameInitialized = function(){
	"use strict";
	var Booster = window.Booster || {};
	new BoosterSdk(publisherSettings, TG.controller.getGameOrientation(), TG.controller.handlePause, TG.controller.handleResume, TG.controller.continueGameFlow, this);
	
	//handle sound issues, by disabling sfx and/or music at specific devices 
	var ua = window["navigator"]["userAgent"];
	var ieDetection = false;
	var isChrome = /Chrome/.test(window["navigator"]["userAgent"]) && /Google Inc/.test(window["navigator"]["vendor"]);
	var isSharp = ((/SHL24|SHL23|SHL22|SHL25|SHL21/i).test(ua)) && !isChrome;
	var isSharpNormal = ((/SH-01F/i).test(ua)) && !isChrome;
	var androidDetection = /Android/.test(ua) && (!isSharp || !isSharpNormal);

	function isIE(){
		if(window["ActiveXObject"] || "ActiveXObject" in window){
		// Always true if browser is Internet Explorer
		ieDetection = true;
		}
	}

	// Checks if the browser is Internet Explorer
	isIE();
	
	//checks for listed devices if the music should be enabled or not.
	if(isSharp || isSharpNormal || androidDetection){
		TG.controller.loadMusic = false;
	}

	//disable SFX if IE = true
	if(ieDetection || isSharpNormal || isSharp){
		TG.controller.loadSfx = false;
	}

	//TG.controller.continueGameFlow();
};

TG.hooks.informStartScreenShown = function(){
	"use strict";
	try{
		analytics["menu"]();
	} catch(e){
		console.log("error calling analytics.menu: " + e); 
	}
};

TG.hooks.informLevelStart = function(worldIdx, levelIdx){
	"use strict";
	var timer, secTimer, self = this;
 console.log("LEVEL STARTED");
	// if(publisherSettings["enableAds"] && !_firstAdsInit){
	// 	timer = setTimeout(function(){self.handleAdsShow();}, (publisherSettings["firstAd"] * 1000));
	// 	secTimer = setTimeout(function(){self.standardTimer();}, (publisherSettings["firstAd"] * 1000));
	// 	_firstAdsInit = true;
	// }
};

TG.hooks.standardTimer = function(){
	"use strict";
//  console.log("set second timer");
	var self = this;
	setInterval(function(){self.handleAdsShow();}, (publisherSettings["adFreq"] * 1000));
};

TG.hooks.handleAdsShow = function(){
	"use strict";
//  console.log("Can show ads");
	TG.config.hasAdBeenShown = true;
};

TG.hooks.informLevelEndScreenStart = function(){
	"use strict";
	showFullscreenAdOrVideo();
	try { 
		var points = TG.controller.getTotalScoreAllLevels();
		community["submitScore"]({
			"score": points, // This is an int value
			"callback": function () {
				// Call method(s) in the game that should happen after the high score popup is closed, like showing advertisement.
				if(TG.config.hasAdBeenShown){
					try{
						TG.controller.handlePause();
						adSense["showAdvertising"]({"callback": TG.controller.handleResume});
						TG.config.hasAdBeenShown = false;
						//_standardAdsShow = false;
					} catch(e){
						console.log("error calling adSense.showAdvertising: " + e);
						TG.controller.handleResume();
					}
				}
			}
		});
		analytics["score"](points);
		GameAPI.Score.submit(points);
	}catch(e){ 
		console.log("error submitting highscore: " + points +", " + e); 
	} 
};

TG.hooks.handleLevelCompleted = function(levelData){
	"use strict";
	if(levelData["failed"]){
		try { 
			analytics["levelFailed"](levelData["level"]);
		} catch(e){ 
			console.log("error calling analytics.levelFailed: " + e); 
		} 
	}else{
		try { 
			analytics["level"](levelData["level"]);
		} catch(e){ 
			console.log("error calling analytics.level: " + e);
		}       
	}
	//trigger ad if ad has not yet been shown 
	//to support showing ad after level restart (where no level end screen is shown)
	if(TG.config.hasAdBeenShown){
		try{
			TG.controller.handlePause();
			adSense["showAdvertising"]({"callback": function(){TG.controller.handleResume(); TG.controller.continueGameFlow();}});
			TG.config.hasAdBeenShown = false;
			//_standardAdsShow = false;
		} catch(e){
			console.log("error calling adSense.showAdvertising: " + e);
			TG.controller.handleResume();
			TG.controller.continueGameFlow();
		}
	}else{
		TG.controller.continueGameFlow();
	}
};

TG.hooks.informLevelQuit = function(){
	"use strict";
	//also show advertisement on level quit
	if(TG.config.hasAdBeenShown){
		try{
			TG.controller.handlePause();
			adSense["showAdvertising"]({"callback": function(){TG.controller.handleResume();}});
			TG.config.hasAdBeenShown = false;
			//_standardAdsShow = false;
		}catch(e){
			console.log("error calling adSense.showAdvertising: " + e);
			TG.controller.handleResume();
		}
	}
};

TG.hooks.handleMoreGamesButtonPressed = function(){
	"use strict";
	if(!publisherSettings["moreGames"]){        
		try{ 
			moregames["redirect"](); 
		}catch(e){ 
			console.log("error calling moregames.redirect: " + e); 
		} 
	} else {
		TG.hooks.openUrl(publisherSettings["moreGamesURL"]);
	}
};

TG.hooks.getStartScreenLogos = function(){
	"use strict";
	var self = this;
	
	return [{image: s_logo_coolgames_start, url: TG.config.homeUrl, callback: self.handleMoreGamesButtonPressed}];
};

TG.hooks.payment = function(pricePoint, price, description, callback, context){
	freemium["purchase"](pricePoint, price, description, callback, context);
};








//******************************************************
//*****    Script Resource: configuration_version
//******************************************************

// ******************************
// Tingly Builder JavaScript file
// ******************************

TG.version = TG.version || {};
TG.version["configuration_boostermedia"] = "2.6";
//******************************************************
//*****    Token Resource: TG_MainController
//******************************************************

// ***************************************
// Definition of game token TG_MainController
// ***************************************

// The constructor for the TG_MainController game token.
var TG_MainController = function(){
	"use strict";
	// Properties used by the engine
	this.depth = -1000000;
	this.visible = true;
	this.active = true;
	this.layer = TG.frameworkEffectsLayer;
	// Your own properties
	this.init = false;
	this.load = false;
	this.levelInit = false;
	this.levelLoad = false;
	this.levelEnd = false;
	this.end = false;
	this.flowPausedCounter = 0;
	this.waitingForAds = false;
	this.waitingForPortals = false;
	this.state = "GAME_INIT";
	this.screen = null;
	this.currentWorldIdx = 0;
	this.currentLevelIdx = 0;
	this.noOfPlays = 0;
	this.fontsLoaded = false;
	this.loadSfx = true;
	this.loadMusic = true;
	this.musicGain = 1;
	this.challengeMode = false;
	this.storedData = {};
	this.playerPreferences = {
	    "difficulty": 1,
	    "playMusic": true,
	    "playSFX": true,
	    "language": TG.dictionary.getLanguage()
	};
	var self = this;
	window.addEventListener("gameSetPause", self.handlePause, false);
	window.addEventListener("gameResume", self.handleResume, false);
	document.addEventListener("visibilitychange", self.handleVisibilityChange, false);
	this.timedLevelEvents = "timedLevelEvent";
};

TG_MainController.prototype.handlePause = function(e){
	"use strict";
	tbAudio.pause("master");
	tbGame.pause();
};

TG_MainController.prototype.handleResume = function(e){
	"use strict";
	tbAudio.resume("master");
	tbGame.clearClickEvents();
	tbGame.clearTouchEvents();
	tbGame.clearKeyboardEvents();
	tbGame.resume();
};

TG_MainController.prototype.handleVisibilityChange = function(){
	"use strict";
	if(document.hidden){
		TG.controller.handlePause();
	}else{
		TG.controller.handleResume();
	}
};

if (testMode) {

	TG_MainController.drawDebugInfo = false;

	TG_MainController.prototype.handleKeyDown = function(keyCode) {
		"use strict";

		if (keyCode === tbKeyCodes.vkD) {

			TG_MainController.drawDebugInfo = !TG_MainController.drawDebugInfo;

		}
	};


	TG_MainController.drawTextRect = function(font, x, y, maxWidth, maxHeight) {
		"use strict";

		if (TG_MainController.drawDebugInfo) {
			if (maxWidth && maxHeight) {

				var xOffset = 0;

				if (font.getAlign() === "center") {
					xOffset -= maxWidth / 2;
				}
				if (font.getAlign() === "right") {
					xOffset -= maxWidth;
				}

				var yOffset = 0;

				if (font.getBaseline() === "middle") {
					yOffset -= maxHeight / 2;
				}
				if (font.getBaseline() === "bottom") {
					yOffset -= maxHeight;
				}

				tbGraphics.drawRectangle(x + xOffset, y + yOffset, maxWidth, maxHeight, undefined, "blue", 1);
			}
			else {
				tbGraphics.drawDisk(x, y, 5, undefined, "red", 1);
			}
		}
	};

	TG_MainController.drawSurfaceBoundaries = function() {
		"use strict";
		if (TG_MainController.drawDebugInfo) {
			tbGraphics.drawRectangle(0, 0, tbGraphics.canvas.width, tbGraphics.canvas.height, undefined, "blue", 2);
		}
	};

}

TG_MainController.prototype.handleBackButton = function(){
	"use strict";
	tbGame.addSpecial(TG.backButtonEventId);
};

TG_MainController.prototype._init = function(){
	"use strict";
	var version, self = this, handleStoredDataRetrieved;
	if(TG.settings.theme.background !== undefined && TG.settings.theme.background.color !== undefined){
		document.body.style.background = TG.settings.theme.background.color;
	}

	//initialise analytics
	TG.analytics = new TG_Analytics();

	//test for external highscore system
	if(TG.config.highScoreSystem && TG.config.highScoreSystem.active){
		self.useExternalHighScoreSystem = TG_HighScores.checkActive(function(isActive){
			self.useExternalHighScoreSystem = isActive;
		});
	}

	//read game settings
	TG.gameFlowSettings = TG.settings.game.framework || {};
	TG.gameFlowSettings.gameType = TG.gameFlowSettings.gameType || "level";
	TG.gameFlowSettings.showLevelMap = (TG.gameFlowSettings.showLevelMap !== undefined)? TG.gameFlowSettings.showLevelMap
	        : (TG.gameFlowSettings.gameType === "level");
	TG.gameFlowSettings.noOfLevels = (TG.gameFlowSettings.noOfLevels !== undefined)? ((TG.gameFlowSettings.noOfLevels instanceof Array)? TG.gameFlowSettings.noOfLevels
	        : [TG.gameFlowSettings.noOfLevels])
	        : [20];
	TG.gameFlowSettings.defaultLevelState = (TG.gameFlowSettings.defaultLevelState !== undefined)? TG.gameFlowSettings.defaultLevelState : "locked";
	TG.gameFlowSettings.showDifficulty = (TG.gameFlowSettings.showDifficulty !== undefined)? TG.gameFlowSettings.showDifficulty
	        : (TG.gameFlowSettings.gameType === "difficulty");
	TG.gameFlowSettings.usePerWorldLevelNumbering = (TG.gameFlowSettings.usePerWorldLevelNumbering !== undefined)? TG.gameFlowSettings.usePerWorldLevelNumbering
	        : false;
	TG.gameFlowSettings.showGameEndScreen = (TG.gameFlowSettings.showGameEndScreen !== undefined)? TG.gameFlowSettings.showGameEndScreen
	        : (TG.gameFlowSettings.gameType === "level");
	TG.gameFlowSettings.computeHighScore = (TG.gameFlowSettings.computeHighScore !== undefined)? TG.gameFlowSettings.computeHighScore : "max";
	TG.gameFlowSettings.scoreType = (TG.gameFlowSettings.scoreType !== undefined)? TG.gameFlowSettings.scoreType : "number";

	// get stored data and update player preferences
	handleStoredDataRetrieved = function(data){
		var l, w, lvlState, wIdxSet;
		if(data){
			self.storedData = data;
		}
		self.playerPreferences = self._getGameData("preferences", {});
		self.playerPreferences["difficulty"] = (self.playerPreferences["difficulty"] !== undefined)? self.playerPreferences["difficulty"] : 1;
		if(TG.gameFlowSettings.supportedDifficulties !== undefined && TG.gameFlowSettings.supportedDifficulties.indexOf(self.getDifficulty()) < 0){
			self.playerPreferences["difficulty"] = TG.gameFlowSettings.supportedDifficulties[0];
		}
		self.playerPreferences["playMusic"] = (self.playerPreferences["playMusic"] !== undefined)? self.playerPreferences["playMusic"] : true;
		self.playMusic(self.playerPreferences["playMusic"]);
		self.playerPreferences["playSFX"] = (self.playerPreferences["playSFX"] !== undefined)? self.playerPreferences["playSFX"] : true;
		self.playSFX(self.playerPreferences["playSFX"]);
		self.playerPreferences["language"] = (self.playerPreferences["language"] !== undefined && TG.dictionary
		        .isLanguageAvailable(self.playerPreferences["language"]))? self.playerPreferences["language"] : TG.dictionary.getLanguage();
		TG.dictionary.setLanguage(self.playerPreferences["language"]);

		// unlock first level
		if(self.getLevelData(self.currentWorldIdx, 0, "state") === undefined){
			self.updateLevelData(self.currentWorldIdx, 0, "state", "unlocked");
		}

		//determine current world idx
		if(TG.gameFlowSettings.showLevelMap){
			if(TG.gameFlowSettings.defaultLevelState === "locked"){
				//find first locked level
				wIdxSet = false;
				for(w = 0; w < TG.gameFlowSettings.noOfLevels.length; w++){
					for(l = 0; l < TG.gameFlowSettings.noOfLevels[w]; l++){
						lvlState = self.getLevelData(w, l, "state", "locked");
						if(lvlState === "locked"){
							self.currentWorldIdx = (l - 1 >= 0)? w : ((w - 1 >= 0)? w - 1 : 0);
							wIdxSet = true;
							break;
						}
					}
					if(wIdxSet){
						break;
					}
				}

			}else if(self.playerPreferences["lastPlayed"] !== undefined){
				self.currentWorldIdx = self.playerPreferences["lastPlayed"]["world"] || 0;
			}
		}

	};
	TG.hooks.getStoredData(null, handleStoredDataRetrieved);

	// parse url
	self.urlData = self._parseUrl();
	if(self.urlData["authToken"] !== undefined && self.urlData["challengeId"] !== undefined){
		self.challengeMode = true;
	}
	if(self.urlData["testChallengeMode"] !== undefined && testMode){
		self.challengeMode = true;
		self.testChallengeMode = true;
	}

	// setup backend service provider
	if(TG.config.useBackendServiceProvider){
		if(!this.testChallengeMode){
			this.backendServiceProvider = new BackendServiceProvider();
		}else{
			this.backendServiceProvider = new TestBackendServiceProvider();
		}
		this.backendServiceProvider.initialise(function(init){
			if(init){
				TG.controller.backendServiceProvider.logIn(self.urlData["authToken"]);
			}
		});
	}

	//test for windows phone ie browsers and old Android stock browsers because they do not support
	//multiple sounds
	version = parseFloat(tbBrowser.browser.version);
	if(tbAudio.usingHTMLAudio && ((tbBrowser.os.windowsphone && tbBrowser.browser.msie) || (tbBrowser.browser.stockandroid && version && version < 4.4))){
		tbAudio.maxConcurrentSounds(1);
	}
	this.init = true;
	this.initWaitTimer = 0;
};

TG_MainController.prototype._parseUrl = function(){
	"use strict";
	var queryString, params, queries, temp, i, l;
	params = {};
	queryString = window.location.search.substring(1);
	if(queryString){
		// Split into key/value pairs
		queries = queryString.split("&");

		// Convert the array of strings into an object
		for(i = 0, l = queries.length; i < l; i++){
			temp = queries[i].split("=");
			params[temp[0]] = temp[1];
		}
	}
	return params;
};

TG_MainController.prototype.getUrlData = function(key){
	"use strict";
	if(TG.controller.urlData){
		return TG.controller.urlData[key];
	}
};

TG_MainController.prototype._readyForStart = function(){
	"use strict";
	if(!this.challengeMode || !this.backendServiceProvider || this.backendServiceProvider.isChallengeStarted()){
		return true;
	}
	return false;
};

TG_MainController.prototype._load = function(){
	"use strict";
	this.state = "GAME_LOAD";
	this.screen = new TG_LoadingScreen(function(){
		TG.controller.load = true;
		TG.controller.pauseFlow(true, true);
		TG.adHooks.handleGameLoaded();
		TG.hooks.handleGameLoaded();
	}, function(progress){
		TG.adHooks.loadingProgress(progress);
		TG.hooks.loadingProgress(progress);
	}, TG.config.showLoadingScreen);
};

TG_MainController.prototype.pauseFlow = function(waitingForPortals, waitingForAds){
	"use strict";
	this.waitingForAds = waitingForAds || false;
	this.waitingForPortals = waitingForPortals || false;
	this.flowPausedCounter++;
};

TG_MainController.prototype.resumeFlow = function(){
	"use strict";
	var self = TG.controller;
	//updated flowPausedCounter
	self.flowPausedCounter--;
	if(testMode && self.flowPausedCounter < 0){
		console.log("flowPausedCounter < 0!!!: " + self.flowPausedCounter);
	}
	//go to next state
	switch(self.state){
		case "GAME_INIT":
			if(self.init && !self.waitingForAd){
				if(self.challengeMode && self.backendServiceProvider){
					self.backendServiceProvider.startChallenge(self.urlData["challengeId"], function(challengeValid){
						if(!challengeValid && self.screen && typeof self.screen.showError === "function"){
							self.screen.showError("challengeLoadingError_notValid");
						}
					});
				}
				self._load();
			}
		break;
		case "GAME_LOAD":
			if(self.load){
				if(self.challengeMode && self.backendServiceProvider){
					if(!self.backendServiceProvider.isChallengeStarted()){
						self.screen.showError("challengeLoadingError_notStarted");
						return;
					}else{
						self.getChallengeInformation();
						self._setDifficulty(self._challengeInformation.mode);
					}
				}
				tbGame.removeToken(self.screen);
				if(typeof GameController === "function"){
					TG.game = new GameController();
				}
				if(TG.config.banner !== undefined && TG.config.banner.show !== false){
					TG.functions.addBanner(true, (TG.config.banner === undefined)? true : TG.config.banner.clickable !== false);
				}
				self._showStartScreen();
			}
		break;
		case "LEVEL_INIT":
			if(self.levelInit){
				self._loadGameLevel();
			}
		break;
		case "LEVEL_LOAD":
			if(self.levelLoad){
				self._startGameLevel();
			}
		break;
		case "LEVEL_END":
			if(self.levelEnd){
				self._levelEndCallback();
			}
		break;
		case "GAME_END":
			if(self.end){
				self.end = false;
				self._showEndGameScreen();
			}
		break;
	}
};

TG_MainController.prototype.continueGameFlow = function(){
	"use strict";
	TG.controller.waitingForPortals = false;
};

TG_MainController.prototype.continueGameFlowAfterAd = function(){
	"use strict";
	TG.controller.waitingForAds = false;
};

TG_MainController.prototype.getGameOrientation = function(){
	"use strict";
	if(TG.orientation){
		TG.orientation = (buildTags.indexOf("landscape") >= 0)? "landscape" : "portrait";
	}
	return TG.orientation;
};

TG_MainController.prototype.getGameName = function(){
	"use strict";
	var name = TG.settings.theme.gameName || TG.settings.theme.game.gameName;
	if(typeof name === "string"){
		return name;
	}
	return "";
};

TG_MainController.prototype.getMoreGamesFunction = function(){
	"use strict";
	var url;
	if(TG.controller.urlData["more_games"] !== undefined){
		try{
			url = decodeURIComponent(TG.controller.urlData["more_games"]);
			return function(){
				TG.hooks.openUrl(url);
			};
		}catch(e){
		}
	}
	if(typeof TG.publisherSettings["moreGamesUrl"] === "string" && TG.publisherSettings["moreGamesUrl"] !== ""){
		return function(){
			TG.hooks.openUrl(TG.publisherSettings["moreGamesUrl"]);
		};
	}
	if(TG.config.moreGamesUrl !== undefined){
		return function(){
			TG.hooks.openUrl(TG.config.moreGamesUrl);
		};
	}
	if(typeof TG.hooks.handleMoreGamesButtonPressed === "function"){
		return TG.hooks.handleMoreGamesButtonPressed;
	}
};

TG_MainController.prototype.getCurrentWorldIdx = function(){
	"use strict";
	return this.currentWorldIdx;
};

TG_MainController.prototype._setCurrentWorldIdx = function(idx){
	"use strict";
	if(typeof idx === "number" && idx < TG.gameFlowSettings.noOfLevels.length){
		this.currentWorldIdx = idx;
	}
};

TG_MainController.prototype.getChallengeInformation = function(update, callback){
	"use strict";
	var cf, self = this;
	if(this.challengeMode && this.backendServiceProvider !== undefined){
		if(update){
			cf = function(){
				self._challengeInformation = self.backendServiceProvider.getChallengeInfo();
				if(typeof callback === "function"){
					callback(self._challengeInformation);
				}
			};
			this.backendServiceProvider.updateChallengeInfo(cf);
		}else{
			if(this._challengeInformation === undefined){
				this._challengeInformation = this.backendServiceProvider.getChallengeInfo();
			}
			return this._challengeInformation;
		}
	}
};

TG_MainController.prototype.forfeitChallenge = function(callback){
	"use strict";
	if(TG.controller.challengeMode && TG.controller.backendServiceProvider){
		TG.controller.backendServiceProvider.forfeitChallenge(callback);
	}
};

TG_MainController.prototype.cancelChallenge = function(callback){
	"use strict";
	if(TG.controller.challengeMode && TG.controller.backendServiceProvider){
		TG.controller.backendServiceProvider.cancelChallenge(callback);
	}
};

TG_MainController.prototype.getDifficulty = function(){
	"use strict";
	return TG.controller.playerPreferences["difficulty"];
};

TG_MainController.prototype.getDifficultyId = function(){
	"use strict";
	switch(this.getDifficulty()){
		case 0:
			return "easy";
		case 1:
			return "medium";
		case 2:
			return "hard";
		default:
			throw "Unknown difficulty: " + this.getDifficulty();
	}
};

TG_MainController.prototype.getDifficultyText = function(){
	"use strict";
	var key = "optionsDifficulty_" + this.getDifficultyId();
	return TG.dictionary.getText(key, "<" + key + ">");
};

TG_MainController.prototype._setDifficulty = function(difficulty){
	"use strict";
	TG.controller.playerPreferences["difficulty"] = difficulty;
	TG.controller._updateGameData("preferences", TG.controller.playerPreferences);
};

TG_MainController.prototype.setWinningCondition = function(condition){
	"use strict";
	if(condition === "max" || condition === "min"){
		TG.gameFlowSettings.computeHighScore = condition;
	}
};

TG_MainController.prototype.setScoreType = function(type){
	"use strict";
	if(type === "number" || type === "time"){
		TG.gameFlowSettings.scoreType = type;
	}
};

TG_MainController.prototype.playMusic = function(playMusic){
	"use strict";
	if(playMusic !== undefined){
		TG.controller.playerPreferences["playMusic"] = playMusic;
		TG.controller._updateGameData("preferences", TG.controller.playerPreferences);
		if(playMusic){
			tbAudio.unmute("music");
		}else{
			tbAudio.mute("music");
		}
	}
	return TG.controller.playerPreferences["playMusic"];
};

TG_MainController.prototype.playSFX = function(playSFX){
	"use strict";
	if(playSFX !== undefined){
		TG.controller.playerPreferences["playSFX"] = playSFX;
		TG.controller._updateGameData("preferences", TG.controller.playerPreferences);
		if(playSFX){
			tbAudio.unmute("game");
			tbAudio.unmute("sfx");
		}else{
			tbAudio.mute("game");
			tbAudio.mute("sfx");
		}
	}
	return TG.controller.playerPreferences["playSFX"];
};

TG_MainController.prototype.language = function(language){
	"use strict";
	if(language !== undefined){
		TG.controller.playerPreferences["language"] = language;
		TG.controller._updateGameData("preferences", TG.controller.playerPreferences);
		//TODO set dictionary language from here not the other way around
	}
	return TG.controller.playerPreferences["language"];
};

TG_MainController.prototype.getFormattedScoreString = function(score){
	"use strict";
	if(TG.gameFlowSettings.scoreType === "time"){
		return ((score < 0)? "-" : "") + Math.floor(Math.abs(score) / 60) + ((Math.abs(score % 60) < 10)? ":0" : ":") + Math.abs(score % 60);
	}
	return "" + score;
};

TG_MainController.prototype.getLevelData = function(worldIdx, levelIdx, key, defaultValue){
	"use strict";
	return TG.controller._getLevelData(worldIdx, levelIdx, key, defaultValue, "game");
};

TG_MainController.prototype.updateLevelData = function(worldIdx, levelIdx, key, value){
	"use strict";
	return TG.controller._updateLevelData(worldIdx, levelIdx, key, value, "game");
};

TG_MainController.prototype.getGameData = function(key, defaultValue){
	"use strict";
	return TG.controller._getGameData(key, defaultValue, "game");
};

TG_MainController.prototype.updateGameData = function(key, value){
	"use strict";
	return TG.controller._updateGameData(key, value, "game");
};

TG_MainController.prototype._getLevelData = function(worldIdx, levelIdx, key, defaultValue, origin){
	"use strict";
	var data;
	if(origin !== "game"){
		origin = "tg";
	}
	data = TG.controller.storedData["level_" + worldIdx + "_" + levelIdx];
	if(data !== undefined){
		data = (key === undefined)? data[origin] : data[origin][key];
		if(data !== undefined){
			return data;
		}
	}
	return defaultValue;
};

TG_MainController.prototype._updateLevelData = function(worldIdx, levelIdx, key, value, origin){
	"use strict";
	if(origin !== "game"){
		origin = "tg";
	}
	if(TG.controller.storedData["level_" + worldIdx + "_" + levelIdx] === undefined){
		TG.controller.storedData["level_" + worldIdx + "_" + levelIdx] = {
		    "tg": {},
		    "game": {}
		};
	}

	if(key === undefined){
		TG.controller.storedData["level_" + worldIdx + "_" + levelIdx][origin] = value;
	}else{
		TG.controller.storedData["level_" + worldIdx + "_" + levelIdx][origin][key] = value;
	}
	return TG.hooks.updateStoredData(TG.controller.storedData);
};

TG_MainController.prototype._getGameData = function(key, defaultValue, origin){
	"use strict";
	var data;
	if(origin !== "game"){
		origin = "tg";
	}
	data = TG.controller.storedData["game"];
	if(data !== undefined){
		data = (key === undefined)? data[origin] : data[origin][key];
		if(data !== undefined){
			return data;
		}
	}
	return defaultValue;
};

TG_MainController.prototype._updateGameData = function(key, value, origin){
	"use strict";
	if(origin !== "game"){
		origin = "tg";
	}
	if(TG.controller.storedData["game"] === undefined){
		TG.controller.storedData["game"] = {
		    "tg": {},
		    "game": {}
		};
	}

	if(key === undefined){
		TG.controller.storedData["game"][origin] = value;
	}else{
		TG.controller.storedData["game"][origin][key] = value;
	}
	return TG.hooks.updateStoredData(TG.controller.storedData);
};

TG_MainController.prototype.getLevelStatistics = function(statisticKey, levelIdx, worldIdx){
	"use strict";
	if(levelIdx === undefined){
		levelIdx = this.currentLevelIdx;
	}
	if(worldIdx === undefined){
		worldIdx = this.getCurrentWorldIdx();
	}
	if(statisticKey === undefined){
		return this.getLevelData(worldIdx, levelIdx, "stats", {});
	}
	return this.getLevelData(worldIdx, levelIdx, "stats", {})[statisticKey];
};

TG_MainController.prototype.getLevelHighScore = function(levelIdx, worldIdx, levelWorldIdx){
	"use strict";
	if(levelWorldIdx === undefined){
		if(levelIdx !== undefined){
			levelWorldIdx = this.getWorldLevelIdx(levelIdx);
			if(worldIdx === undefined){
				worldIdx = this.getWorldIdx(levelIdx);
			}
		}
	}
	var score = this.getLevelStatistics("highScore", levelWorldIdx, worldIdx);
	if(typeof score !== "number"){
		return 0;
	}
	return score;
};

TG_MainController.prototype.setLevelHighScore = function(score, levelIdx, worldIdx){
	"use strict";
	if(levelIdx === undefined){
		levelIdx = this.currentLevelIdx;
	}
	if(worldIdx === undefined){
		worldIdx = this.getCurrentWorldIdx();
	}
	if(typeof score === "number" && score > this.getLevelHighScore(levelIdx, worldIdx)){
		var stats = this.getLevelStatistics(undefined, levelIdx, worldIdx);
		stats["highScore"] = score;
		this.updateLevelData(worldIdx, levelIdx, "stats", stats);
	}
};

TG_MainController.prototype.getTotalScoreAllLevels = function(){
	"use strict";
	var w, i, stats, points = 0;
	for(w = 0; w < TG.gameFlowSettings.noOfLevels.length; w++){
		for(i = 0; i < TG.gameFlowSettings.noOfLevels[w]; i++){
			stats = TG.controller.getLevelStatistics(undefined, i, w);
			if(typeof stats === "object" && stats !== null){
				points += (stats["highScore"] !== undefined)? stats["highScore"] : 0;
			}
		}
	}
	return points;
};

TG_MainController.prototype.getTotalStarsAllLevels = function(){
	"use strict";
	var w, i, stats, stars = 0;
	for(w = 0; w < TG.gameFlowSettings.noOfLevels.length; w++){
		for(i = 0; i < TG.gameFlowSettings.noOfLevels[w]; i++){
			stats = TG.controller.getLevelStatistics(undefined, i, w);
			if(typeof stats === "object" && stats !== null){
				stars += (stats["stars"] !== undefined)? stats["stars"] : 0;
			}
		}
	}
	return stars;
};

TG_MainController.prototype._startGame = function(){
	"use strict";
	var sound, delay, fadeDuration;
	if(TG.controller.music === undefined){
		if(TG.settings.theme.music !== undefined){
			if(TG.settings.theme.music.backgroundSource !== undefined){
				sound = TG.settings.theme.music.backgroundSource;
			}
			if(TG.settings.theme.music.backgroundGain !== undefined){
				tbAudio.setGain("music", TG.settings.theme.music.backgroundGain);
				if(!this.playMusic()){
					tbAudio.mute("music");
				}
				TG.controller.musicGain = TG.settings.theme.music.backgroundGain;
			}
			delay = (TG.settings.theme.music.backgroundDelay !== undefined)? TG.settings.theme.music.backgroundDelay : 0;
			fadeDuration = (TG.settings.theme.music.backgroundFadeInDuration !== undefined)? TG.settings.theme.music.backgroundFadeInDuration : 0;
		}
		if(sound === undefined && typeof a_music !== "undefined"){
			sound = a_music;
		}
		if(sound !== undefined){
			TG.controller.music = tbAudio.play(sound, delay, fadeDuration);
			if(TG.controller.music){
				tbAudio.addTags(TG.controller.music, "music");
				tbAudio.setLooping(TG.controller.music, true);
			}
		}
	}

	if(this.noOfPlays === 0){
		TG.hooks.informGameStart();
	}else{
		TG.hooks.informGameRestart();
	}

	if(TG.gameFlowSettings.showLevelMap && !this.challengeMode){
		this._showLevelMap();
	}else{
		this._initGameLevel(0);
	}
};

TG_MainController.prototype._showStartScreen = function(){
	"use strict";
	// create and show startScreen
	if(this.screen){
		tbGame.removeToken(this.screen);
	}
	this.screen = new TG_StartScreen();
	this.currentLevelIdx = -1;
	TG.hooks.informStartScreenShown();
};

TG_MainController.prototype._showLevelMap = function(){
	"use strict";
	// create and show levelMap
	this.screen = new TG_LevelMapScreen();
};

TG_MainController.prototype.drawInGameBackground = function(x, y, width, height){
	"use strict";
	var image;
	if(TG.settings.theme.inGame !== undefined && TG.settings.theme.inGame.backgroundImage !== undefined){
		image = TG.settings.theme.inGame.backgroundImage;
	}else if(TG.settings.tg.inGame !== undefined){
		image = TG.settings.tg.inGame.backgroundImage;
	}else{
		image = undefined;
	}
	TG.functions.setCanvas(TG.frameworkBackgroundLayer);
	x = x || 0;
	y = y || 0;
	width = width || tbGraphics.width;
	height = height || tbGraphics.height;

	if(!image){
		return;
	}

	width = Math.min(Math.min(width, tbGraphics.width), image.combinedWidth);
	height = Math.min(Math.min(height, tbGraphics.height), image.combinedHeight);
	if(image !== undefined){
		image.drawCombinedPart(x, y - TG.backgroundOffsetTop, width, height, x, y, 1);
	}else{
		tbGraphics.drawRectangle(x, y, width, height, "white", false);
	}
};

TG_MainController.prototype._initGameLevel = function(levelIdx, worldIdx){
	"use strict";
	this.state = "LEVEL_INIT";
	if(worldIdx === undefined){
		worldIdx = this.currentWorldIdx;
	}else{
		this.currentWorldIdx = worldIdx;
	}
	this.currentLevelIdx = levelIdx;
	this.levelInit = true;
	this.pauseFlow(true, false);
	if(TG.gameFlowSettings.showLevelMap){
		TG.hooks.handleLevelInitialized(this.currentWorldIdx, this.currentLevelIdx);
	}else{
		TG.hooks.handleLevelInitialized(this.currentWorldIdx, this.noOfPlays);
	}
};

TG_MainController.prototype._loadGameLevel = function(){
	"use strict";
	this.state = "LEVEL_LOAD";
	this.levelLoad = true;
	this.pauseFlow(true, false);
	TG.hooks.handleLevelLoaded(this.currentWorldIdx, this.currentLevelIdx);
};

TG_MainController.prototype._startGameLevel = function(){
	"use strict";
	var i, idx = 0;
	if(this.currentWorldIdx < TG.gameFlowSettings.noOfLevels.length && this.currentLevelIdx < TG.gameFlowSettings.noOfLevels[this.currentWorldIdx]){
		this.state = "LEVEL_PLAY";
		this.noOfPlays += 1;
		this.levelEnd = false;
		this.screen = null;
		// start game level
		this.drawInGameBackground(0, TG.backgroundOffsetTop);
		TG.analytics.reportTimedEventStart(this.getLevelString(3), "progression:levelStarted:" + this.getDifficultyId(), this.timedLevelEvents, true);
		for(i = 0; i < this.currentWorldIdx; i++){
			idx += TG.gameFlowSettings.noOfLevels[i];
		}
		TG.hooks.informLevelStart(this.currentWorldIdx, this.currentLevelIdx);
		this.playerPreferences["lastPlayed"] = {
		    "world": this.currentWorldIdx,
		    "level": this.currentLevelIdx
		};
		TG.level = new LevelController(idx + this.currentLevelIdx, this.currentWorldIdx, this.currentLevelIdx);
	}
};

TG_MainController.prototype.getSequentialLevelIdx = function(worldIdx, levelIdx){
	"use strict";
	var i, idx = 0;
	if(worldIdx === undefined){
		worldIdx = this.currentWorldIdx;
	}
	if(levelIdx === undefined){
		levelIdx = this.currentLevelIdx;
	}
	for(i = 0; i < worldIdx; i++){
		idx += TG.gameFlowSettings.noOfLevels[i];
	}
	return idx + levelIdx;
};

TG_MainController.prototype.getWorldLevelIdx = function(sequentialLevelIdx){
	"use strict";
	var i, idx = sequentialLevelIdx;
	for(i = 0; i < TG.gameFlowSettings.noOfLevels.length; i++){
		if(idx < TG.gameFlowSettings.noOfLevels[i]){
			return idx;
		}
		idx -= TG.gameFlowSettings.noOfLevels[i];
	}
	return idx;
};

TG_MainController.prototype.getWorldIdx = function(sequentialLevelIdx){
	"use strict";
	var i, world = 0, levels = 0;
	for(i = 0; i < TG.gameFlowSettings.noOfLevels.length; i++){
		levels += TG.gameFlowSettings.noOfLevels[i];
		if(levels > sequentialLevelIdx){
			return world;
		}
		world += 1;
	}
	return world;
};

TG_MainController.prototype._showEndGameScreen = function(){
	"use strict";
	TG.controller.screen = null;
	TG.controller.screen = new TG_GameEndScreen();	
};

TG_MainController.prototype._showInterstitial = function(){
	// create and show appropriate interstitial
};

TG_MainController.prototype.showStartLevelScreen = function(headerText, assignmentText, callbackFunc, callbackObj){
	"use strict";
	// creates TG_LevelStartDialog
	new TG_LevelStartDialog(headerText, assignmentText, callbackFunc, callbackObj);
};

TG_MainController.prototype.showStartChallengeScreen = function(textKey, callbackFunc, callbackObj){
	"use strict";
	if(this.challengeMode
	        && (this._challengeInformation.currentPlayerIdx !== this._challengeInformation.challengePlayerIdx || (TG.config.challenges && TG.config.challenges.showChallengerStartScreen))){
		new TG_ChallengeStartDialog(textKey, callbackFunc, callbackObj);
	}else{
		if(typeof callbackFunc === "function"){
			if(callbackObj){
				callbackObj.callbackFunc();
			}else{
				callbackFunc();
			}
		}
	}
};

TG_MainController.prototype.getLevelString = function(minNoOfChars){
	"use strict";
	var i, levelString = this.currentLevelIdx + "", leadingZerosRequired = minNoOfChars - levelString.length;
	if(typeof minNoOfChars === "number" && minNoOfChars > 1){
		for(i = 0; i < leadingZerosRequired; i++){
			levelString = "0" + levelString;
		}
	}
	return levelString;
};

TG_MainController.prototype.challengeEnded = function(score){
	"use strict";
	var submit, cancel, handleSubmit, handleOutcome, handleCancel, name, self = this;
	if(self.challengeMode){
		score = Math.floor(score);
		if(self._challengeInformation.challengePlayerIdx === self._challengeInformation.currentPlayerIdx){
			handleSubmit = function(succes){
				if(self.levelEndDialog && typeof self.levelEndDialog.showMessage === "function"){
					if(!succes){
						self.levelEndDialog.showMessage(TG.dictionary.getText("challengeEndScreenChallengeSend_error", "<CHALLENGESENDERROR>"));
					}else{
						self.levelEndDialog.showMessage(TG.dictionary.getText("challengeEndScreenChallengeSend_success", "<CHALLENGESENDTEXT>"));
						if(!self._challengeInformation.stranger){
							name = self._challengeInformation.playerNames[1];
							name = (name.length > 13)? name.substr(0, 10) + "..." : name;
							self.levelEndDialog.showSubMessage((TG.dictionary
							        .getText("challengeEndScreenChallengeSend_submessage", "<CHALLENGESENDSUBMESSAGE>")).replace(/<NAME>/g, name));
						}else{
							self.levelEndDialog.showSubMessage(TG.dictionary.getText("challengeEndScreenChallengeSend_submessage_stranger", ""));
						}
					}
				}
			};
			handleCancel = function(succes){
				if(!succes){
					self.levelEndDialog.showMessage(TG.dictionary.getText("challengeCancelMessage_error", "<CHALLENGECANCELERROR>"));
				}else{
					self.levelEndDialog.showMessage(TG.dictionary.getText("challengeCancelMessage_success", "<CHALLENGECANCELSUCCESS>"));
				}
			};
			cancel = function(){
				if(self.backendServiceProvider){
					self.backendServiceProvider.cancelChallenge(handleCancel);
				}
			};
		}else{
			handleSubmit = function(succes){
				if(self.levelEndDialog && typeof self.levelEndDialog.showMessage === "function"){
					if(!succes){
						self.levelEndDialog.showMessage(TG.dictionary.getText("challengeEndScreenScoreSend_error", "<CHALLENGESCORESENDERROR>"));
					}
				}
			};
			handleOutcome = function(outcome){
				if(self.levelEndDialog && typeof self.levelEndDialog.updateOutcome === "function"){
					self.levelEndDialog.updateOutcome(outcome);
				}
			};
		}
		submit = function(){
			if(self.backendServiceProvider){
				self.backendServiceProvider.submitChallengeScore(score, TG.gameFlowSettings.scoreType, handleSubmit, handleOutcome);
			}
		};

		this.state = "LEVEL_END";

		// show end screen
		this.levelEndDialog = new TG_ChallengeEndDialog(score, submit, cancel);
	}else{
		self.levelEnded({
			"totalScore": score
		});
	}

};

TG_MainController.prototype.levelEnded = function(stats){
	"use strict";
	this.state = "LEVEL_END";

	var oldStats, newStats, callback, totalScoreNew, i, s, highScoreObj, statsList = {}, leaderboardScore, levelString = this.getLevelString(3), isHighScoreImproved = function(
	        newScore, oldScore){
		if(typeof newScore !== "number"){
			return false;
		}
		if(typeof oldScore !== "number"){
			return true;
		}
		if(TG.gameFlowSettings.computeHighScore === "max" && newScore > oldScore){
			return true;
		}
		if(TG.gameFlowSettings.computeHighScore === "min" && newScore < oldScore){
			return true;
		}
		return false;
	};

	// save stats
	stats = stats || {};
	stats["level"] = TG.gameFlowSettings.usePerWorldLevelNumbering? this.currentLevelIdx + 1 : this.getSequentialLevelIdx() + 1;
	stats.improvedHighScore = false;

	oldStats = this.getLevelData(this.currentWorldIdx, this.currentLevelIdx, "stats", undefined);
	newStats = oldStats || {};

	// compute new total score and compare to old high score
	if(stats.emphasizedStatsObject !== undefined || stats.statsObjects !== undefined){
		if(stats.emphasizedStatsObject !== undefined){
			statsList[stats.emphasizedStatsObject.id] = stats.emphasizedStatsObject.clone();
			if(stats.emphasizedStatsObject.id === "highScore"){
				highScoreObj = stats.emphasizedStatsObject;
			}
		}
		if(stats.statsObjects !== undefined){
			for(i = 0; i < stats.statsObjects.length; i++){
				statsList[stats.statsObjects[i].id] = stats.statsObjects[i].clone();
				if(stats.statsObjects[i].id === "highScore"){
					highScoreObj = stats.statsObjects[i];
				}
			}
		}
		for(i in statsList){
			s = statsList[i];
			if(s.updateFunction !== undefined){
				statsList[s.statToUpdate].endValue = s.updateFunction(statsList[s.statToUpdate].endValue);
			}
		}
		if(statsList["totalScore"] !== undefined){
			totalScoreNew = statsList["totalScore"].endValue;
		}
	}else{
		totalScoreNew = stats["totalScore"];
		if(totalScoreNew !== undefined){
			if(stats["timeBonus"] !== undefined){
				totalScoreNew += stats["timeBonus"];
			}
		}
	}

	if(stats["failed"] !== true){
		// update highScore
		if(totalScoreNew !== undefined){
			TG.analytics.reportEvent("points", "progression:score:" + this.getDifficultyId() + ":" + levelString, totalScoreNew);

			if(oldStats === undefined || isHighScoreImproved(totalScoreNew, oldStats["highScore"])){
				newStats["highScore"] = totalScoreNew;
				stats.improvedHighScore = true;
				TG.analytics.reportEvent("highScore", "progression:score:" + this.getDifficultyId() + ":" + levelString, totalScoreNew);
			}
			if(highScoreObj !== undefined){
				highScoreObj.endValue = newStats["highScore"];
			}
			stats["highScore"] = newStats["highScore"];
		}
		// update stars
		if(stats["stars"] !== undefined){
			newStats["stars"] = stats["stars"];
			TG.analytics.reportEvent("stars", "progression:score:" + this.getDifficultyId() + ":" + levelString, stats["stars"]);
		}
		// unlock next level in required
		if(this.currentLevelIdx + 1 < TG.gameFlowSettings.noOfLevels[this.currentWorldIdx]){
			if(this.getLevelData(this.currentWorldIdx, this.currentLevelIdx + 1, "state", "locked") === "locked"){
				this.updateLevelData(this.currentWorldIdx, this.currentLevelIdx + 1, "state", "unlocked");
			}
		}else if(this.currentWorldIdx + 1 < TG.gameFlowSettings.noOfLevels.length){
			if(this.getLevelData(this.currentWorldIdx + 1, 0, "state", "locked") === "locked"){
				this.updateLevelData(this.currentWorldIdx + 1, 0, "state", "unlocked");
			}
		}
		// store new level data
		this.updateLevelData(this.currentWorldIdx, this.currentLevelIdx, undefined, {
		    "stats": newStats,
		    "state": "played"
		});
		//send high score to leaderboards
		if(this.backendServiceProvider !== undefined){
			var totalScore;

			if (TG.game && TG.game.getTotalChallengeScore) {
				totalScore = TG.game.getTotalChallengeScore();
			}
			else {
				totalScore = TG.controller.getTotalScoreAllLevels();
			}

			if (totalScore !== undefined) {
				this.backendServiceProvider.submitLeaderboardScore(totalScore, TG.gameFlowSettings.scoreType);
			}
		}
		// report level successfully completed
		TG.analytics.reportTimedEventStop(this.timedLevelEvents, levelString, "progression:levelCompleted:" + this.getDifficultyId());
	}else{
		// report level failed
		TG.analytics.reportTimedEventStop(this.timedLevelEvents, levelString, "progression:levelFailed:" + this.getDifficultyId());
	}

	callback = function(callbackAction){
		TG.controller.levelEnd = true;
		TG.controller.levelEndAction = callbackAction;
		TG.controller.pauseFlow(true, true);

		var levelData = {
			    "totalScore": totalScoreNew,
			    "level": stats["level"],
			    "highScore": stats["highScore"],
			    "failed": stats["failed"] === true,
			    "stars": stats["stars"],
			    "stage": stats["stage"]
			};

		TG.hooks.handleLevelCompleted(levelData);
		TG.adHooks.handleLevelCompleted(levelData);
	};

	//show end screen
	this.levelEndDialog = new TG_LevelEndDialog(TG.gameFlowSettings.gameType, stats, callback);
};

TG_MainController.prototype._levelEndCallback = function(callbackAction){
	"use strict";
	//clear previous level
	this._deleteGame();
	TG.controller.levelInit = false;
	TG.controller.levelLoad = false;
	TG.level = undefined;
	TG.functions.getCanvas(TG.gameLayer).drawTokens = true;
	TG.functions.getCanvas(TG.gameUILayer).drawTokens = true;

	//determine next screen
	switch(TG.controller.levelEndAction){
		case "retry":
			TG.controller._initGameLevel(TG.controller.currentLevelIdx);
		break;
		case "next":
			if(TG.gameFlowSettings.showLevelMap){
				if(TG.controller.currentLevelIdx + 1 < TG.gameFlowSettings.noOfLevels[TG.controller.getCurrentWorldIdx()]){
					TG.controller._initGameLevel(TG.controller.currentLevelIdx + 1);
				}else if(TG.controller.getCurrentWorldIdx() + 1 < TG.gameFlowSettings.noOfLevels.length){
					TG.controller._initGameLevel(0, TG.controller.getCurrentWorldIdx() + 1);
				}else{
					if(TG.gameFlowSettings.showGameEndScreen){
						TG.controller.state = "GAME_END";
						TG.controller.end = true;
						TG.controller.pauseFlow(true, false);
						TG.hooks.handleGameCompleted();
					}else{
						TG.controller._showLevelMap();
					}
				}
			}else{
				TG.controller._initGameLevel(0);
			}
		break;
		case "exit":
			if(TG.gameFlowSettings.showLevelMap){
				TG.controller._showLevelMap();
			}else{
				TG.controller._showStartScreen();
			}
		break;
	}
};

TG_MainController.prototype.showTutorial = function(){
	"use strict";
	// show tutorial
	TG.controller.showOptions(true);
};

TG_MainController.prototype.showOptions = function(tutorial, challenge, pauseGame){
	"use strict";
	var type = "inGame";
	if(TG.controller.screen instanceof TG_StartScreen){
		type = "startScreen";
	}else if(TG.controller.screen instanceof TG_LevelMapScreen){
		type = "levelMapScreen";
	}else if(challenge){
		if(TG.controller._challengeInformation.currentPlayerIdx === TG.controller._challengeInformation.challengePlayerIdx){
			type = "inGame_challenger";
		}else{
			type = "inGame_challengee";
		}
	}
	if(!TG.controller.activeModelDialog){
		TG.controller.activeModelDialog = new TG_Options(type, tutorial === true, challenge, pauseGame);
	}
};

TG_MainController.prototype.showOptionsDuringChallenge = function(pauseGame){
	"use strict";
	TG.controller.showOptions(false, true, pauseGame);
};

TG_MainController.prototype.showForfeitDialog = function(pauseGame, callbackFunction){
	"use strict";
	var buttons = [], question, yes, no, yesFunction, callback;
	if(!TG.controller.activeModelDialog){
		if(!TG.controller.activeDialog){
			if(TG.controller._challengeInformation.currentPlayerIdx === TG.controller._challengeInformation.challengePlayerIdx){
				question = TG.dictionary.getText("challengeCancelConfirmText", "<CHALLENGECANCELCONFIRMTEXT>");
				yes = "challengeCancelConfirmBtn_yes";
				no = "challengeCancelConfirmBtn_no";
				callback = function(success){
					var message = success? "challengeCancelMessage_success" : "challengeCancelMessage_error";
					message = TG.dictionary.getText(message, "<" + message.toUpperCase() + "<");
					if(TG.controller.activeDialog){
						TG.controller.activeDialog.showConfirmMessage(message);
					}
					if(success){
						TG.controller._pauseAll();
					}
				};
				yesFunction = function(){
					if(typeof callbackFunction === "function"){
						callbackFunction(true);
					}
					TG.controller.cancelChallenge(callback);
					return true;
				};
			}else{
				question = TG.dictionary.getText("challengeForfeitConfirmText", "<CHALLENGEFORFEITCONFIRMTEXT>");
				yes = "challengeForfeitConfirmBtn_yes";
				no = "challengeForfeitConfirmBtn_no";
				callback = function(success){
					var message = success? "challengeForfeitMessage_success" : "challengeForfeitMessage_error";
					message = TG.dictionary.getText(message, "<" + message.toUpperCase() + "<");
					if(TG.controller.activeDialog){
						TG.controller.activeDialog.showConfirmMessage(message);
						if(success){
							message = TG.dictionary.getText("challengeForfeitMessage_winnings", "");
							message = message.replace("<NAME>",
							        TG.controller._challengeInformation.playerNames[TG.controller._challengeInformation.challengePlayerIdx]);
							message = message.replace("<AMOUNT>", TG.controller._challengeInformation.wager);
							TG.controller.activeDialog.showConfirmSubMessage(message);
						}
					}
					if(success){
						TG.controller._pauseAll();
					}
				};
				yesFunction = function(){
					if(typeof callbackFunction === "function"){
						callbackFunction(true);
					}
					TG.controller.forfeitChallenge(callback);
					return true;
				};
			}
			buttons.push({
			    textKey: yes,
			    callbackFunc: yesFunction,
			    callbackObj: TG.controller
			});
			buttons.push({
			    textKey: no,
			    callbackFunc: function(){
				    TG.controller.activeDialog.close();
				    TG.controller.activeDialog = null;
				    if(typeof callbackFunction === "function"){
					    callbackFunction(false);
				    }
				    return true;
			    }
			});
			TG.controller.activeDialog = new TG_Dialog(question, buttons, pauseGame);
			TG.controller.activeModelDialog = TG.controller.activeDialog;
		}
	}
};

TG_MainController.prototype.pauseGame = function(){
	"use strict";
	var i, tokens;

	// inform all tokens that they are going to be paused
	tokens = tbGame.findTokens("game");
	for(i = 0; i < tokens.length; i++){
		if(typeof tokens[i].handleTokenPause === "function"){
			tokens[i].handleTokenPause();
		}
	}

	// pause level timing
	TG.analytics.pauseTimedEvent(TG.controller.timedLevelEvents);

	// pause tokens
	tbGame.pauseTokens("game");
	tbGame.pauseAllAlarms();
};

TG_MainController.prototype.resumeGame = function(){
	"use strict";
	var i, tokens;

	// inform all tokens that they are going to be unpaused
	tokens = tbGame.findTokens("game");
	for(i = 0; i < tokens.length; i++){
		if(typeof tokens[i].handleTokenResume === "function"){
			tokens[i].handleTokenResume();
		}
	}

	// pause tokens
	tbGame.resumeTokens("game");
	tbGame.resumeAllAlarms();

	// resume level timing
	TG.analytics.resumeTimedEvent(TG.controller.timedLevelEvents);
};

TG_MainController.prototype._pauseAll = function(exceptionToken){
	"use strict";
	var i, tokens;

	// inform all tokens that they are going to be paused
	tokens = tbGame.findTokens();
	for(i = 0; i < tokens.length; i++){
		if(typeof tokens[i].handleTokenPause === "function"){
			tokens[i].handleTokenPause();
		}
	}

	// pause all tokens and alarms
	tbGame.pauseTokens();
	tbGame.pauseAllAlarms();

	// pause level timing
	TG.analytics.pauseTimedEvent(TG.controller.timedLevelEvents);

	// resume exception token and system tokens
	if(exceptionToken){
		tbGame.resumeToken(exceptionToken);
	}
	tbGame.resumeTokens("system");
};

TG_MainController.prototype._resumeAll = function(){
	"use strict";
	var i, tokens;

	// inform all tokens that they are going to be unpaused
	tokens = tbGame.findTokens();
	for(i = 0; i < tokens.length; i++){
		if(typeof tokens[i].handleTokenResume === "function"){
			tokens[i].handleTokenResume();
		}
	}
	// pause tokens
	tbGame.resumeTokens();
	tbGame.resumeAllAlarms();

	// resume level timing
	TG.analytics.resumeTimedEvent(TG.controller.timedLevelEvents);
};

TG_MainController.prototype._deleteGame = function(){
	"use strict";
	var levelStart;
	//pause tokens
	if(TG.level){
		tbGame.removeToken(TG.level);
	}
	levelStart = tbGame.findTokens("LevelStartDialog");
	while(levelStart.length > 0){
		tbGame.removeToken(levelStart.pop());
	}
};

TG_MainController.prototype._quitGame = function(){
	"use strict";
	TG.analytics.reportTimedEventStop(TG.controller.timedLevelEvents, TG.controller.getLevelString(), "progression:levelQuit:"
	        + TG.controller.getDifficultyId());
	TG.hooks.informLevelQuit();
	TG.controller._deleteGame();
	TG.controller._showStartScreen();
};

TG_MainController.prototype._restartGame = function(){
	"use strict";
	this.state = "LEVEL_END";
	TG.analytics.reportTimedEventStop(TG.controller.timedLevelEvents, TG.controller.getLevelString(), "progression:levelRestart:"
	        + TG.controller.getDifficultyId());

	var level = TG.gameFlowSettings.usePerWorldLevelNumbering? this.currentLevelIdx + 1 : this.getSequentialLevelIdx() + 1;
	TG.controller.levelEnd = true;
	TG.controller.levelEndAction = "retry";
	TG.controller.pauseFlow(true, true);

	var levelData = {
		    "failed": true,
		    "level": level
		};
	TG.hooks.handleLevelCompleted(levelData);
	TG.adHooks.handleLevelCompleted(levelData);
};

TG_MainController.prototype.getShortVersion = function(){
	"use strict";
	var version = "";
	if(TG.version["builder"]){
		version = TG.version["builder"];
	}
	if(TG.version["tg"]){
		version += "-" + TG.version["tg"];
	}
	if(TG.version["game"]){
		version += "-" + TG.version["game"];
	}
	if(TG.version["config"]){
		version += "-" + TG.version["config"];
	}
	return version;
};

TG_MainController.prototype.handleAdd = function(){
	"use strict";
	if(!this.init){
		this._init();
		TG.controller.pauseFlow(true, true);
		TG.adHooks.handleGameInitialized();
		TG.hooks.handleGameInitialized();
	}
};

TG_MainController.prototype.handleBeginStep = function(timePassed){
	"use strict";
	//poll if portal configuration is ready for next step
	if(typeof this.gameFlowWaiting === "function"){
		this.gameFlowWaiting();
		if(!this.gameFlowWaiting){
			TG.controller.continueGameFlow();
		}
	}

	//poll if flow should continue after having to wait for either or both portal and ads
	if(this.flowPausedCounter > 0){
		if(!this.waitingForAds && !this.waitingForPortals){
			this.resumeFlow();
		}
	}

	if(this.initWaitTimer < 700){
		this.initWaitTimer += timePassed;
		if(this.initWaitTimer >= 700){
			// start analytics
			if(TG.config.track && TG.config.ga !== undefined && TG.config.ga.gameKey && TG.config.ga.secretKey){
				TG.analytics.start([TG.config.ga.gameKey, TG.config.ga.secretKey]);
			}
			// unlock first level
			if(this.getLevelData(this.currentWorldIdx, 0, "state") === undefined){
				this.updateLevelData(this.currentWorldIdx, 0, "state", "unlocked");
			}
		}
	}
};

// handleSpecial is called if a special or user-defined event happens.
TG_MainController.prototype.handleSpecial = function(id, args){
	"use strict";
	if(id === "languageSet"){
		TG.controller.language(args);
	}else if(id === TG.resizeEventId){
		TG.hooks.informResize();
	}
};

// handleEndStep is called each step after processing other events (before
// draw).
TG_MainController.prototype.handleEndStep = function(){
	"use strict";
	// clear canvasses if required
	var i, canvas;
	for(i = 0; i < TG.canvasses.length; i++){
		canvas = TG.canvasses[i];
		if(canvas.drawTokens){
			tbGraphics.setCanvas(canvas);
			tbGraphics.clear();
		}
	}
};

// handleDraw is called at the end of a step to draw the token.
TG_MainController.prototype.handleDraw = function(){
	"use strict";
	// reset drawTokens property for all canvases
	var i;
	for(i = 0; i < TG.canvasses.length; i++){
		TG.canvasses[i].drawTokens = false;
	}
};

TG.startFramework = function() {
	"use strict";
	//Create an add it to the game engine
	TG.controller = new TG_MainController();
	tbGame.addToken(TG.controller);
	tbGame.addTokenTags(TG.controller, "system");
};

if (TG.autoStartFramework === undefined || TG.autoStartFramework) {
	TG.startFramework();
}
